/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.admin.sdk.api;

import com.ziqni.admin.sdk.data.LoadAchievementsData;
import com.ziqni.admin.sdk.data.LoadCustomFieldsData;
import com.ziqni.admin.sdk.data.LoadRewardTypesData;
import com.ziqni.admin.sdk.data.LoadTagsData;
import com.ziqni.admin.sdk.model.*;
import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
import com.ziqni.admin.sdk.ZiqniAdminApiFactory;
import com.ziqni.admin.sdk.ApiException;
import com.ziqni.admin.sdk.model.*;

import com.ziqni.admin.sdk.util.DateUtil;

import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.*;


/**
 * API tests for AchievementsApi
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class AchievementsApiTest implements tests.utils.CompleteableFutureTestWrapper {

    private static final Logger logger = LoggerFactory.getLogger(AchievementsApiTest.class);
    private final AchievementsApiWs api;
    private final LoadAchievementsData loadData;
    private final LoadRewardTypesData loadRewardTypesData;
    private final LoadTagsData loadTagsData;
    private final LoadCustomFieldsData loadCustomFieldsData;

    private String rewardTypeId;
    private String tagKey;
    private String customFieldKey;

    List<String> idsToDelete = new ArrayList<>();
    List<String> rewardTypeIdsToDelete = new ArrayList<>();
    List<String> tagIdsToDelete = new ArrayList<>();
    List<String> customFieldIdsToDelete = new ArrayList<>();

    public AchievementsApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory();

        this.api = ZiqniAdminApiFactory.getAchievementsApi();
        this.loadData = new LoadAchievementsData();
        this.loadRewardTypesData = new LoadRewardTypesData();
        this.loadCustomFieldsData = new LoadCustomFieldsData();
        this.loadTagsData = new LoadTagsData();
    }

    @BeforeAll
    public void setUp() throws ApiException, InterruptedException {
        final var response = loadRewardTypesData.createTestData(loadRewardTypesData.getCreateRequestAsList(1));
        this.rewardTypeId = response.getResults().get(0).getId();
        rewardTypeIdsToDelete.add(rewardTypeId);
        tagKey = loadTagsData.getModel();
        customFieldKey = loadCustomFieldsData.getModel(customFieldIdsToDelete, AppliesTo.ACHIEVEMENT);

        Thread.sleep(5000);
        tagIdsToDelete.add(tagKey);
    }

    @AfterAll
    public void cleanUp() {
        try {
            Thread.sleep(5000);
            loadData.deleteTestData(idsToDelete);
            loadRewardTypesData.deleteTestData(rewardTypeIdsToDelete);
            loadTagsData.deleteTestData(tagIdsToDelete);
            loadCustomFieldsData.deleteTestData(customFieldIdsToDelete);
        } catch (ApiException | InterruptedException e) {
            logger.error("error", e.getCause());
        }
    }

    @Test
    @Order(1)
    public void createAchievementsWithOptInRequiredForEntrantsConstraintReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId);
        createRequest.getAddConstraints().add("optinRequiredForEntrants");
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = api.createAchievements(createRequestAsList).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        final var ids = response.getResults().stream().map(Result::getId).collect(Collectors.toList());
        int limit = 20;
        int skip = 0;
        final var achievementsResponse = $(api.getAchievements(ids, limit, skip));
        final var id = response.getResults().get(0).getId();

        assertNotNull(achievementsResponse);
        assertNotNull(achievementsResponse.getResults());
        assertNotNull(achievementsResponse.getErrors());
        assertTrue(achievementsResponse.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, achievementsResponse.getResults().size(), "Should has single result");

        final var item = achievementsResponse.getResults().get(0);

        assertEquals(createRequest.getName(), item.getName(), "Found Name should be equal to created previously");
        assertEquals(createRequest.getDescription(),item.getDescription());
        assertEquals(createRequest.getAddConstraints(), item.getConstraints());

        idsToDelete.add(id);
    }

    @Test
    @Order(1)
    public void createAchievementsReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = api.createAchievements(createRequestAsList).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        final var id = response.getResults().get(0).getId();

        idsToDelete.add(id);
    }
    @Test
    public void getAchievementToCloneTest() throws ApiException, InterruptedException {
        final var createReq = loadData.getCreateRequest(rewardTypeId);
        final var createReqAsList = loadData.getCreateRequestAsList(createReq);
        final var createResponse = loadData.createTestData(createReqAsList);
        final var id = createResponse.getResults().get(0).getId();

        final var limit = 1;

        Thread.sleep(10000);

        final var response = api.getAchievementToClone(id).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(createReq.getName(), item.getName(), "Found Name should be equal to created previously");
        assertEquals(createReq.getDescription(),item.getDescription());

        idsToDelete.add(id);
    }
    @Test
    @Order(1)
    public void createAchievementsWithDependantOnReturnOkTest() throws ApiException {
        final var createReq = loadData.getCreateRequest(rewardTypeId);
        final var createReqAsList = loadData.getCreateRequestAsList(createReq);
        final var createResponse = loadData.createTestData(createReqAsList);
        final var id = createResponse.getResults().get(0).getId();

        var dependantOn = new DependantOn();
        dependantOn.must(List.of(id));

        final var createRequest = loadData.getCreateRequest(rewardTypeId).achievementDependencies(dependantOn);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = api.createAchievements(createRequestAsList).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        final var createdAchId = response.getResults().get(0).getId();

        idsToDelete.addAll(List.of(id, createdAchId));
    }

    @Test
    @Order(1)
    public void createAchievementsWithTranslationsReturnOkTest() throws ApiException {
        var translationEntry = new TranslationEntry();
        translationEntry.setFieldName("name");
        translationEntry.setText("Given");
        var translation = new Translation();
        translation.setTranslations(List.of(translationEntry));

        final var createRequest = loadData.getCreateRequest(rewardTypeId).translations(List.of(translation));
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = api.createAchievements(createRequestAsList).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        final var id = response.getResults().get(0).getId();

        idsToDelete.add(id);
    }

    @Test
    @Order(1)
    public void createAchievementsWithDependentOnReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse createResponse = $(api.createAchievements(createRequestAsList));

        String createdId = createResponse.getResults().get(0).getId();

        idsToDelete.add(createdId);

        Thread.sleep(5000);

        DependantOn dependantOn = new DependantOn();
        dependantOn.setMust(List.of(createdId));
        dependantOn.setShould(List.of(createdId));
        dependantOn.setMustNot(List.of(createdId));
        dependantOn.setShouldMatchAtLeast(1);

        final var createRequestWithDependentOn = loadData.getCreateRequest(rewardTypeId).achievementDependencies(dependantOn);
        final var createRequestAsListWithDependantOn = loadData.getCreateRequestAsList(createRequestWithDependentOn);

        ModelApiResponse response = $(api.createAchievements(createRequestAsListWithDependantOn));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        final var id = response.getResults().get(0).getId();

        idsToDelete.add(id);
    }

    @Test
    @Order(2)
    public void getSingleAchievementReturnsOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        int limit = 1;
        int skip = 0;

        Thread.sleep(5000);

        AchievementResponse response = $(api.getAchievements(List.of(id), limit, skip));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        Achievement item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getIcon(), item.getIcon(), "Found icon should be equal to created previously");
        assertNotNull(item.getScheduling(), "Found scheduling should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());
//        assertTrue(item.getRuleSets().containsAll(createRequest.getRuleSets()), "Found ruleset should contain all of" + createRequest.getRuleSets());

        idsToDelete.add(id);
    }

    @Test
    @Order(2)
    public void getSingleAchievementWithAchievementDependenciesReturnsOkTest() throws ApiException, InterruptedException {
        final var createReq = loadData.getCreateRequest(rewardTypeId);
        final var createReqAsList = loadData.getCreateRequestAsList(createReq);
        final var resp = loadData.createTestData(createReqAsList);
        final var createdId = resp.getResults().get(0).getId();

        var dependantOn = new DependantOn();
        dependantOn.must(List.of(createdId));

        final var createRequest = loadData.getCreateRequest(rewardTypeId).achievementDependencies(dependantOn);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        int limit = 1;
        int skip = 0;

        Thread.sleep(5000);

        AchievementResponse response = $(api.getAchievements(List.of(id), limit, skip));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        Achievement item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getIcon(), item.getIcon(), "Found icon should be equal to created previously");
        assertNotNull(item.getScheduling(), "Found scheduling should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());
        assertEquals(item.getAchievementDependencies(), createRequest.getAchievementDependencies(), "Found achievement dependencies should contain all of" + createRequest.getAchievementDependencies());

        idsToDelete.add(id);
    }

    @Test
    @Order(2)
    public void getSingleAchievementWithEntrantMemberTagFilterReturnsOkTest() throws ApiException, InterruptedException {
        final var tagReq = loadTagsData.getCreateRequest().entityTypes(List.of("Member"));
        final var tagResp = loadTagsData.createTestData(List.of(tagReq));
        tagKey = tagResp.getResults().get(0).getExternalReference();

        var dependantOn = new DependantOn();
        dependantOn.must(List.of(tagKey));

        final var createRequest = loadData.getCreateRequest(rewardTypeId).memberTagsFilter(dependantOn);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        int limit = 1;
        int skip = 0;

        Thread.sleep(5000);

        AchievementResponse response = $(api.getAchievements(List.of(id), limit, skip));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        Achievement item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getIcon(), item.getIcon(), "Found icon should be equal to created previously");
        assertNotNull(item.getScheduling(), "Found scheduling should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());
        assertEquals(item.getMemberTagsFilter(), createRequest.getMemberTagsFilter(), "Found achievement dependencies should contain all of" + createRequest.getAchievementDependencies());

        idsToDelete.add(id);
    }

    @Test
    @Order(2)
    public void getSingleAchievementWithProductTagsFilterReturnsOkTest() throws ApiException, InterruptedException {
        final var tagReq = loadTagsData.getCreateRequest().entityTypes(List.of("Product"));
        final var tagResp = loadTagsData.createTestData(List.of(tagReq));
        tagKey = tagResp.getResults().get(0).getExternalReference();

        Thread.sleep(5000);

        final var dependantOn = new DependantOn();
        dependantOn.must(List.of(tagKey));

        final var createRequest = loadData.getCreateRequest(rewardTypeId).productTagsFilter(dependantOn);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final int limit = 1;
        final int skip = 0;

        Thread.sleep(5000);

        AchievementResponse response = $(api.getAchievements(List.of(id), limit, skip));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        Achievement item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getIcon(), item.getIcon(), "Found icon should be equal to created previously");
        assertNotNull(item.getScheduling(), "Found scheduling should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());
        assertEquals(item.getProductTagsFilter(), createRequest.getProductTagsFilter(), "Found achievement dependencies should contain all of" + createRequest.getAchievementDependencies());

        idsToDelete.add(id);
    }

    @Test
    @Order(2)
    public void getSingleAchievementMustHaveSubRulesReturnsOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        int limit = 1;
        int skip = 0;

        Thread.sleep(5000);

        AchievementResponse response = $(api.getAchievements(List.of(id), limit, skip));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        Achievement item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getIcon(), item.getIcon(), "Found icon should be equal to created previously");
        assertNotNull(item.getScheduling(), "Found scheduling should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());

//        Assertions.assertEquals(loadData.subRuleConstant, response.getResults().get(0).getRuleSets().get(0).getConditions().get(0).getRules().get(0).getSubConditions().get(0).getSubRules().get(0).getConstant());
//        Assertions.assertEquals(loadData.subRuleFact, response.getResults().get(0).getRuleSets().get(0).getConditions().get(0).getRules().get(0).getSubConditions().get(0).getSubRules().get(0).getFact());
//        Assertions.assertEquals(loadData.subRuleOperator, response.getResults().get(0).getRuleSets().get(0).getConditions().get(0).getRules().get(0).getSubConditions().get(0).getSubRules().get(0).getOperator());

        idsToDelete.add(id);
    }

    @Test
    @Order(2)
    public void getSingleAchievementByQueryReturnsOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        QueryRequest givenQuery = new QueryRequest()
                .addShouldItem(new QueryMultiple().queryField("id").queryValues(List.of(id)))
                .shouldMatch(1);

        AchievementResponse response = $(api.getAchievementsByQuery(givenQuery));

        if(response.getMeta().getResultCount() == 0) {
            Thread.sleep(5000);
            response = $(api.getAchievementsByQuery(givenQuery));
        }

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getResults().size(), "Should has single result");

        Achievement item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getIcon(), item.getIcon(), "Found icon should be equal to created previously");
        assertNotNull(item.getScheduling(), "Found scheduling should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        //assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());
//        assertTrue(item.getRuleSets().containsAll(createRequest.getRuleSets()), "Found ruleset should contain all of" + createRequest.getRuleSets());

        idsToDelete.add(id);
    }
    @Test
    @Order(2)
    public void sortAchievementByQueryReturnsOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        final QuerySortBy sortBy = new QuerySortBy()
                .queryField("created")
                .order(SortOrder.DESC);

        QueryRequest qr = new QueryRequest()
                .sortBy(List.of(sortBy));

        AchievementResponse response = $(api.getAchievementsByQuery(qr));

        if(response.getMeta().getResultCount() == 0) {
            Thread.sleep(5000);
            response = $(api.getAchievementsByQuery(qr));
        }

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getResults().size(), "Should has single result");

        Achievement item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getIcon(), item.getIcon(), "Found icon should be equal to created previously");
        assertNotNull(item.getScheduling(), "Found scheduling should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        //assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());
//        assertTrue(item.getRuleSets().containsAll(createRequest.getRuleSets()), "Found ruleset should contain all of" + createRequest.getRuleSets());

        idsToDelete.add(id);
    }

    @Test
    @Order(3)
    public void updateAchievementReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        String givenDescription = UUID.randomUUID().toString();
        final var expectedTermsAndConditions = "New Terms 123";
        final var expectedMaxNumberOfIssues = 4;
        UpdateAchievementRequest given = new UpdateAchievementRequest()
                .id(id)
                .description(givenDescription)
                .termsAndConditions(expectedTermsAndConditions)
                .maxNumberOfIssues(expectedMaxNumberOfIssues)
                .addConstraintsItem("deprecated");

        ModelApiResponse updated = $(api.updateAchievements(List.of(given)));

        assertNotNull(updated);
        assertNotNull(updated.getResults());
        assertNotNull(updated.getErrors());
        assertEquals(1, updated.getResults().size(), "Should contain updated entity");
        assertNotNull(updated.getResults().get(0).getId(), "Created entity should has id");

        String updatedId = updated.getResults().get(0).getId();


        List<String> ids = List.of(updatedId);
        Integer limit = 1;
        Integer skip = 0;

        AchievementResponse response = $(api.getAchievements(ids, limit, skip));


        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        Achievement item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getIcon(), item.getIcon(), "Found icon should be equal to created previously");
        //        assertEquals(createRequest.getScheduling(), item.getScheduling(), "Found scheduling should be equal to created previously");
        assertNotNull(item.getScheduling(), "Found scheduling should be equal to created previously");
        assertEquals(givenDescription, item.getDescription(), "Found description should be equal to created previously");
        assertEquals(expectedMaxNumberOfIssues,item.getMaxNumberOfIssues(),"Found maxNumberOfIssues should be equal to created previously");
        assertEquals(expectedTermsAndConditions,item.getTermsAndConditions(),"Found terms and Condition should be equal to created previously");
//        assertTrue(item.getRuleSets().containsAll(createRequest.getRuleSets()), "Found ruleset should contain all of" + createRequest.getRuleSets());
        idsToDelete.add(id);

    }


    @Test
    @Order(5)
    public void deleteSingleIdAchievementReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        final var response = $(api.deleteAchievements(List.of(id)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

    }

    @Test
    public void createAchievementsWithoutIconReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId).icon(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should be empty");
        assertEquals(0, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(response.getResults().get(0).getId());
    }

    @Test
    public void createAchievementsWithoutNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId).name(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void getAchievementsNoArgumentsReturnEmptyTest() throws ApiException {
        var request = loadData.getCreateRequest(rewardTypeId);
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        List<String> ids = Collections.emptyList();
        Integer limit = 0;
        Integer skip = 0;
        final var response = $(api.getAchievements( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getResults().isEmpty(), "Should have no result");
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        idsToDelete.add(id);
    }

    @Test
    public void getAchievementsNoIdsWithLimitReturnOkTest() throws ApiException {
        final var requestList = loadData.getCreateRequestAsList(3, rewardTypeId);
        final var createResponse = loadData.createTestData(requestList);

        final var id = new ArrayList<String>();
        final var limit = 3;
        final var skip = 0;
        final var response = $(api.getAchievements( id, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(3, response.getResults().size(), "Result count should match limit");

        idsToDelete.addAll(createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList()));
    }

    @Test
    public void getAchievementsMultipleIdsReturnOkTest() throws ApiException {

        var requestList = loadData.getCreateRequestAsList(3, rewardTypeId);
        var createResponse = loadData.createTestData(requestList);

        final var givenIds = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        final var ids = List.copyOf(givenIds);
        final var limit = ids.size();
        final var skip = 0;
        final var response = $(api.getAchievements( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(givenIds.size(), response.getResults().size(), "Should have single result");

        final var foundIds = response.getResults()
                .stream()
                .map(Achievement::getId)
                .collect(Collectors.toList());

        assertTrue(foundIds.containsAll(givenIds), "Found id should be equal to requested");

        idsToDelete.addAll(givenIds);
    }

    @Test
    public void getAchievementsMultipleIdsOneMalformedReturnErrorTest() throws ApiException {

        final var requestList = loadData.getCreateRequestAsList(3, rewardTypeId);
        final var createResponse = loadData.createTestData(requestList);

        final var givenIds = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        final var nonExistingId = givenIds.get(0).toUpperCase();
        givenIds.add(nonExistingId);

        final var ids = List.copyOf(givenIds);
        final var limit = ids.size();
        final var skip = 0;
        final var response = $(api.getAchievements( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
//        assertEquals(1, response.getErrors().size(), "Should have single result");
        assertEquals(givenIds.size() - 1, response.getResults().size(), "Should have requested valid results");

        final var foundIds = response.getResults().stream().map(Achievement::getId).collect(Collectors.toList());

        assertTrue(givenIds.containsAll(foundIds), "Found id should be equal to requested");

        givenIds.remove(nonExistingId);

        idsToDelete.addAll(givenIds);
    }

    @Test
    public void getAchievementsMultipleIdsOneBlankReturnErrorTest() throws ApiException {
        final var requestList = loadData.getCreateRequestAsList(3, rewardTypeId);
        final var createResponse = loadData.createTestData(requestList);

        final var givenIds = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        final var nonExistingId = "";
        givenIds.add(nonExistingId);

        final var ids = List.copyOf(givenIds);
        final var limit = ids.size();
        final var skip = 0;
        final var response = $(api.getAchievements( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertFalse(response.getErrors().isEmpty(), "Should have errors");
        givenIds.remove(nonExistingId);

        idsToDelete.addAll(givenIds);
    }

    @Test
    public void getAchievementsIdWithWhitespaceReturnOkTest() throws ApiException {
        final var request = loadData.getCreateRequest(rewardTypeId);
        final var createResponse = loadData.createTestData(List.of(request));
        final var id = createResponse.getResults().get(0).getId();

        final var idWithSpaces = id.stripTrailing() + " ";

        final var limit = 1;
        final var skip = 0;
        final var response = $(api.getAchievements( List.of(idWithSpaces), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have error");
        assertEquals(0, response.getErrors().size(), "Should have single error");
        assertFalse(response.getResults().isEmpty(), "Should not return result");

        idsToDelete.add(id);
    }

    @Test
    public void getAchievementsIdWithWhitespaceBetweenReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest(rewardTypeId);
        final var createResponse = loadData.createTestData(List.of(request));
        final var id = createResponse.getResults().get(0).getId();

        final var idWithSpaces = id.stripLeading().substring(0, id.length() / 2).concat(" ").concat(id.substring(id.length() / 2));

        final var limit = 1;
        final var skip = 0;
        final var response = $(api.getAchievements( List.of(idWithSpaces), limit, skip));


        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertFalse(response.getErrors().isEmpty(), "Should have error");
        assertEquals(1, response.getErrors().size(), "Should have single error");
        assertTrue(response.getResults().isEmpty(), "Should not return result");

        idsToDelete.add(id);
    }

    @Test
    public void createAchievementWithoutNameReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest(rewardTypeId).name(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithoutDescriptionReturnOkTest() throws ApiException {
        final var request = loadData.getCreateRequest(rewardTypeId).description(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should be empty");
        assertEquals(0, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(response.getResults().get(0).getId());

    }

    @Test
    public void createAchievementWithoutTermsConditionsReturnOkTest() throws ApiException {
        final var request = loadData.getCreateRequest(rewardTypeId).termsAndConditions(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should be empty");
        assertEquals(0, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(response.getResults().get(0).getId());

    }

    @Test
    @Disabled //fixme confirm if this validation is needed in core and enable after implementation if yes
    public void createAchievementWithDescriptionLengthMoreThan50000ReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest(rewardTypeId).description("x".repeat(50001));
        final var createRequestAsList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithTermsAndConditionsLengthMoreThan50000ReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest(rewardTypeId).termsAndConditions("x".repeat(50001));
        final var createRequestAsList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithNameLengthGreaterThan10000ReturnErrorTest() throws ApiException {

        final var request = loadData.getCreateRequest(rewardTypeId).name("x".repeat(10001));
        final var createRequestAsList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithoutIconReturnOkTest() throws ApiException {

        final var request = loadData.getCreateRequest(rewardTypeId).icon(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should be empty");
        assertEquals(0, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(response.getResults().get(0).getId());
    }

    @Test
    @Disabled //Icon was said that it should not be mandatory
    public void createAchievementWithEmptyIconReturnErrorTest() throws ApiException {

        final var request = loadData.getCreateRequest(rewardTypeId).icon("");
        final var createRequestAsList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithNonExistentIconReturnErrorTest() throws ApiException {

        final var request = loadData.getCreateRequest(rewardTypeId).icon("web_asset_id_not_exist");
        final var createRequestAsList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithoutRuleSetsReturnErrorTest() throws ApiException {

        final var request = loadData.getCreateRequest(rewardTypeId);//.ruleSets(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithEmptyRuleSetsReturnErrorTest() throws ApiException {

        final var request = loadData.getCreateRequest(rewardTypeId);//.ruleSets(new ArrayList<>());
        final var createRequestAsList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled
    public void createAchievementWithoutDependentOnShouldMatchAtLeastReturnErrorTest() throws ApiException {

        DependantOn dependantOn = new DependantOn();
        dependantOn.setShould(List.of("test_should_1", "test_should_2"));

        final var request = loadData.getCreateRequest(rewardTypeId).achievementDependencies(dependantOn);
        final var createRequestAsList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithoutSchedulingReturnErrorTest() throws ApiException {

        final var request = loadData.getCreateRequest(rewardTypeId).scheduling(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithEmptySchedulingReturnErrorTest() throws ApiException {

        final var request = loadData.getCreateRequest(rewardTypeId).scheduling(new Scheduling());
        final var createRequestAsList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithoutScheduleTypeReturnErrorTest() throws ApiException {
        final var scheduling = loadData.getCreateRequest(rewardTypeId).getScheduling().scheduleType(null);
        final var createRequest = loadData.getCreateRequest(rewardTypeId).scheduling(scheduling);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithoutScheduleOccurrencesLimitReturnErrorTest() throws ApiException {
        final var scheduling = loadData.getCreateRequest(rewardTypeId).getScheduling().scheduleOccurrencesLimit(null);
        final var createRequest = loadData.getCreateRequest(rewardTypeId).scheduling(scheduling);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithNegativeScheduleOccurrencesLimitReturnErrorTest() throws ApiException {
        final var scheduling = loadData.getCreateRequest(rewardTypeId).getScheduling().scheduleOccurrencesLimit(-1);
        final var createRequest = loadData.getCreateRequest(rewardTypeId).scheduling(scheduling);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithoutScheduleEveryReturnErrorTest() throws ApiException {
        final var scheduling = loadData.getCreateRequest(rewardTypeId).getScheduling().every(null);
        final var createRequest = loadData.getCreateRequest(rewardTypeId).scheduling(scheduling);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithEmptyScheduleEveryWhenScheduleTypeIsDailyReturnErrorTest() throws ApiException {
        final var scheduling = loadData.getCreateRequest(rewardTypeId).getScheduling()
                .every(new ArrayList<>())
                .scheduleType(ScheduleType.DAILY);
        final var createRequest = loadData.getCreateRequest(rewardTypeId).scheduling(scheduling);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithEmptyScheduleEveryWhenScheduleTypeIsWeeklyReturnErrorTest() throws ApiException {
        final var scheduling = loadData.getCreateRequest(rewardTypeId)
                .getScheduling()
                .every(new ArrayList<>())
                .scheduleType(ScheduleType.WEEKLY);
        final var createRequest = loadData.getCreateRequest(rewardTypeId).scheduling(scheduling);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithEmptyScheduleEveryWhenScheduleTypeIsMonthlyReturnErrorTest() throws ApiException {
        final var scheduling = loadData.getCreateRequest(rewardTypeId)
                .getScheduling()
                .every(new ArrayList<>())
                .scheduleType(ScheduleType.MONTHLY);
        final var createRequest = loadData.getCreateRequest(rewardTypeId).scheduling(scheduling);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithInvalidScheduleEveryWhenScheduleTypeIsDailyReturnErrorTest() throws ApiException {
        final var scheduling = loadData.getCreateRequest(rewardTypeId)
                .getScheduling()
                .every(List.of(8))
                .scheduleType(ScheduleType.DAILY);
        final var createRequest = loadData.getCreateRequest(rewardTypeId).scheduling(scheduling);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithInvalidScheduleEveryWhenScheduleTypeIsWeeklyReturnErrorTest() throws ApiException {
        final var scheduling = loadData.getCreateRequest(rewardTypeId)
                .getScheduling()
                .every(List.of(53))
                .scheduleType(ScheduleType.WEEKLY);
        final var createRequest = loadData.getCreateRequest(rewardTypeId).scheduling(scheduling);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithInvalidScheduleEveryWhenScheduleTypeIsMonthlyReturnErrorTest() throws ApiException {
        final var scheduling = loadData.getCreateRequest(rewardTypeId)
                .getScheduling()
                .every(List.of(13))
                .scheduleType(ScheduleType.MONTHLY);
        final var createRequest = loadData.getCreateRequest(rewardTypeId).scheduling(scheduling);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithoutScheduleStartDateReturnErrorTest() throws ApiException {
        final var scheduling = loadData.getCreateRequest(rewardTypeId).getScheduling()
                .startDate(null);
        final var createRequest = loadData.getCreateRequest(rewardTypeId).scheduling(scheduling);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createAchievementWithScheduleEndDateBeforeStartDateReturnErrorTest() throws ApiException {
        final var scheduling = loadData.getCreateRequest(rewardTypeId).getScheduling()
                .startDate(DateUtil.now())
                .endDate(DateUtil.nowPlusDays(-1));
        final var createRequest = loadData.getCreateRequest(rewardTypeId).scheduling(scheduling);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test //we set defaults if null
    public void createAchievementWithoutConstraintsReturnOkTest() throws ApiException {
        final var scheduling = loadData.getCreateRequest(rewardTypeId).getScheduling()
                .constraints(null);
        final var createRequest = loadData.getCreateRequest(rewardTypeId).scheduling(scheduling);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should be empty");
        assertEquals(0, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(response.getResults().get(0).getId());

    }

    @Test //we set defaults if empty
    public void createAchievementWithConstraintsHavingEmptyStringReturnOkTest() throws ApiException {
        final var scheduling = loadData.getCreateRequest(rewardTypeId).getScheduling()
                .constraints(List.of(""));
        final var createRequest = loadData.getCreateRequest(rewardTypeId).scheduling(scheduling);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        final var response = $(api.createAchievements(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should be empty");
        assertEquals(0, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(response.getResults().get(0).getId());

    }


    @Test
    public void updateAchievementsWithoutIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var id = loadData.createTestData(createRequestAsList).getResults().get(0).getId();

        final var given = new UpdateAchievementRequest()
                .id(null);

        final var response = $(api.updateAchievements(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    public void updateAchievementsWithIncorrectIdIdReturnErrorTest() throws ApiException {

        final var given = new UpdateAchievementRequest()
                .id("updateAchievementsWithIncorrectIdIdReturnErrorTest");

        final var response = $(api.updateAchievements(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }


    @Test
    public void updateAchievementWithIncorrectNameLengthReturnErrorTest() throws ApiException {

        final var request = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final var updateRequest = new UpdateAchievementRequest();
        updateRequest.setName("x".repeat(10001));

        final var response = $(api.updateAchievements(List.of(updateRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    public void updateAchievementWithIncorrectDescriptionLengthReturnErrorTest() throws ApiException {

        final var request = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final var updateRequest = new UpdateAchievementRequest();
        updateRequest.setDescription("x".repeat(50001));

        final var response = $(api.updateAchievements(List.of(updateRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    public void updateAchievementWithIncorrectTermsConditionsLengthReturnErrorTest() throws ApiException {

        final var request = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final var updateRequest = new UpdateAchievementRequest();
        updateRequest.setTermsAndConditions("x".repeat(50001));

        final var response = $(api.updateAchievements(List.of(updateRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    public void updateAchievementWithNonExistentIconReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final var updateRequest = new UpdateAchievementRequest();
        updateRequest.icon("web_asset_id_not_exist");

        final var response = $(api.updateAchievements(List.of(updateRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    public void updateAchievementWithEmptyRuleSetsReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final var updateRequest = new UpdateAchievementRequest();
//        updateRequest.ruleSets(new ArrayList<>());

        final var response = $(api.updateAchievements(List.of(updateRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    public void updateAchievementWithoutDependentOnShouldMatchAtLeastReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        DependantOn dependantOn = new DependantOn();
        dependantOn.setShould(List.of("test_should_1", "test_should_2"));

        final var updateRequest = new UpdateAchievementRequest();
        updateRequest.achievementDependencies(dependantOn);

        final var response = $(api.updateAchievements(List.of(updateRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    public void updateAchievementWithEmptySchedulingReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final var updateRequest = new UpdateAchievementRequest();
        updateRequest.scheduling(new Scheduling());

        final var response = $(api.updateAchievements(List.of(updateRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }




    @Test
    public void updateAchievementWithNegativeScheduleOccurrencesLimitReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final var scheduling = loadData.getCreateRequest(rewardTypeId).getScheduling().scheduleOccurrencesLimit(-1);

        final var updateRequest = new UpdateAchievementRequest();
        updateRequest.scheduling(scheduling);

        final var response = $(api.updateAchievements(List.of(updateRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }



    @Test
    public void updateAchievementWithScheduleEndDateBeforeStartDateReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final var scheduling = loadData.getCreateRequest(rewardTypeId).getScheduling()
                .startDate(DateUtil.now())
                .endDate(DateUtil.nowPlusDays(-2));

        final var updateRequest = new UpdateAchievementRequest();
        updateRequest.scheduling(scheduling);

        final var response = $(api.updateAchievements(List.of(updateRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }


    @Test
    public void updateAchievementWithConstraintsHavingEmptyStringReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final var scheduling = loadData.getCreateRequest(rewardTypeId).getScheduling()
                .constraints(List.of(""));

        final var updateRequest = new UpdateAchievementRequest();
        updateRequest.scheduling(scheduling);

        final var response = $(api.updateAchievements(List.of(updateRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    public void deleteAchievementByQueryTest() throws ApiException, InterruptedException {
        var translationEntry = new TranslationEntry();
        translationEntry.setFieldName("name");
        translationEntry.setText("Given");
        var translation = new Translation();
        translation.setTranslations(List.of(translationEntry));
        translation.setLanguageKey("anp");

        final var createRequest = loadData.getCreateRequest(rewardTypeId).translations(List.of(translation));
        ModelApiResponse createResponse =loadData.createTestData(List.of(createRequest));

        String givenId = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        QueryRequest givenQuery = new QueryRequest()
                .addMustItem(new QueryMultiple().queryField("id").queryValues(List.of(givenId)));
        ModelApiResponse response = $(api.deleteAchievementsByQuery( givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

    }

    @Test
    @Order(2)
    public void createAchievementWithTagsAndCustomFieldsReturnOkTest() throws ApiException, InterruptedException {

        final var createRequest = loadData.getCreateRequest(rewardTypeId)
                .tags(List.of(tagKey))
                .customFields(Map.of(customFieldKey, "name"));

        ModelApiResponse createResponse =loadData.createTestData(List.of(createRequest));

        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);
        int limit = 1;
        int skip = 0;

        var response = $(api.getAchievements(List.of(id), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");
        assertNotNull(response.getResults().get(0).getCustomFields());
        assertNotNull(response.getResults().get(0).getTags());
        assertEquals(1,response.getResults().get(0).getCustomFields().size());
        assertEquals(1,response.getResults().get(0).getTags().size());

        idsToDelete.add(id);
    }
    @Test
    @Order(3)
    public void updateAchievementWithTagsReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        String givenDescription = UUID.randomUUID().toString();

        UpdateAchievementRequest given = new UpdateAchievementRequest()
                .id(id)
                .description(givenDescription)
                .addConstraintsItem("deprecated")
                .tags(List.of(tagKey))
                ;

        ModelApiResponse updated = $(api.updateAchievements(List.of(given)));

        assertNotNull(updated);
        assertNotNull(updated.getResults());
        assertNotNull(updated.getErrors());
        assertEquals(1, updated.getResults().size(), "Should contain updated entity");
        assertNotNull(updated.getResults().get(0).getId(), "Created entity should has id");

        String updatedId = updated.getResults().get(0).getId();


        List<String> ids = List.of(updatedId);
        Integer limit = 1;
        Integer skip = 0;

        AchievementResponse response = $(api.getAchievements(ids, limit, skip));


        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        Achievement item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getIcon(), item.getIcon(), "Found icon should be equal to created previously");
        assertNotNull(item.getScheduling(), "Found scheduling should be equal to created previously");
        assertEquals(givenDescription, item.getDescription(), "Found scheduling should be equal to created previously");
        assertNotNull(item.getTags());
        assertEquals(1,item.getTags().size());


        idsToDelete.add(id);

    }


}
