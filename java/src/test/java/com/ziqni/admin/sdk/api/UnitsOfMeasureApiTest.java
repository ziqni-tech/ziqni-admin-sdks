/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.admin.sdk.api;

import com.ziqni.admin.sdk.data.LoadCustomFieldsData;
import com.ziqni.admin.sdk.data.LoadMetadata;
import com.ziqni.admin.sdk.data.LoadTagsData;
import com.ziqni.admin.sdk.data.LoadUnitsOfMeasureData;
import com.ziqni.admin.sdk.model.*;
import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
import com.ziqni.admin.sdk.configuration.AdminApiClientConfigBuilder;
import com.ziqni.admin.sdk.ApiException;
import com.ziqni.admin.sdk.model.*;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * API tests for UnitsOfMeasureApi
 */

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class UnitsOfMeasureApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private static final Logger logger = LoggerFactory.getLogger(UnitsOfMeasureApiTest.class);

    private UnitsOfMeasureApiWs api;

    private LoadUnitsOfMeasureData loadTestData;
    private final LoadTagsData loadTagsData;
    private final LoadCustomFieldsData loadCustomFieldsData;

    private String tagKey;
    private String customFieldKey;

    private List<String> idsToDelete = new ArrayList<>();
    private List<String> tagIdsToDelete = new ArrayList<>();
    private List<String> customFieldIdsToDelete = new ArrayList<>();

    public UnitsOfMeasureApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory(AdminApiClientConfigBuilder.build());
        this.api = ApiClientFactoryUtil.factory.getUnitsOfMeasureApi();
        this.loadTestData = new LoadUnitsOfMeasureData();
        this.loadCustomFieldsData = new LoadCustomFieldsData();
        this.loadTagsData = new LoadTagsData();
    }


    @BeforeAll
    public void setUp() throws ApiException {
        tagKey = loadTagsData.getModel();
        customFieldKey = loadCustomFieldsData.getModel(customFieldIdsToDelete, AppliesTo.UNITOFMEASURE);

        tagIdsToDelete.add(tagKey);
    }

    @AfterAll
    public void cleanUp() throws ApiException {
        try {

            Thread.sleep(5000);

            loadTestData.deleteTestData(idsToDelete);
            loadTagsData.deleteTestData(tagIdsToDelete);
            loadCustomFieldsData.deleteTestData(customFieldIdsToDelete);
        } catch (ApiException | InterruptedException e) {
            logger.error("error", e.getCause());
        }

    }

    @Test
    @Order(1)
    public void createUnitsOfMeasureReturnOkTest() throws ApiException {

        final var createRequest = loadTestData.getCreateRequest();
        ModelApiResponse response = $(api.createUnitsOfMeasure(loadTestData.getCreateRequestAsList(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");
        logger.info(response.getResults().get(0).getId());
        idsToDelete.add(response.getResults().get(0).getId());
    }

    @Test
    @Order(20)
    public void getUnitsOfMeasureSingleIdReturnOkTest() throws ApiException, InterruptedException {

        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();
        Integer limit = 1;
        Integer skip = 0;

        Thread.sleep(5000);

        UnitOfMeasureResponse response = $(api.getUnitsOfMeasure(List.of("gE5ZgnsBs58mMeuobviz"), limit, skip));

        if(response.getResults().isEmpty()) {
            Thread.sleep(5000);
            response = $(api.getUnitsOfMeasure(List.of(id), 1, 0));
        }

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        UnitOfMeasure item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        Assertions.assertEquals(request.getName(), item.getName(), "Found name should be equal to created previously");
        Assertions.assertEquals(request.getKey(), item.getKey(), "Found key should be equal to created previously");
        Assertions.assertEquals(request.getUnitOfMeasureType(), item.getUnitOfMeasureType(), "Found unit of measure should be " + request.getUnitOfMeasureType());
        Assertions.assertEquals(request.getMultiplier(), item.getMultiplier(), "Found multiplier of constraints should be equal " + request.getMultiplier());

        idsToDelete.add(id);
    }
    @Test
    @Order(23)
    public void getUnitMeasureByQueryWithMultipleFieldsReturnOkTest() throws ApiException, InterruptedException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));

        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        var givenQuery = new QueryMultipleFields()
                .queryFields(List.of("id","spaceName","name")).queryValue(id);

        QueryRequest qr = new QueryRequest().multiFields(List.of(givenQuery));

        var response = $(api.getUnitsOfMeasureByQuery(qr));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

        idsToDelete.add(id);

    }

    @Test
    @Order(3)
    public void createUnitsOfMeasureWithDuplicatedKeyReturnErrorTest() throws ApiException, InterruptedException {

        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        ModelApiResponse response = $(api.createUnitsOfMeasure(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(4)
    public void updateUnitsOfMeasureValidRequestReturnOkTest() throws ApiException, InterruptedException {

        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        //GIVEN
        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id(id)
                .name("update name")
                .description("update description")
                .metadata(new HashMap<>())
                ;

        //WHEN
        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        //THEN
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain updated entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        String updatedId = response.getResults().get(0).getId();

        UnitOfMeasureResponse responseAfterUpdate = $(api.getUnitsOfMeasure( List.of(updatedId), 1, 0));

        assertNotNull(responseAfterUpdate);
        assertNotNull(responseAfterUpdate.getResults());
        assertEquals(1, responseAfterUpdate.getResults().size(), "Should contain entity");

        UnitOfMeasure item = responseAfterUpdate.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        Assertions.assertEquals(request.getKey(), item.getKey(), "Found key should be equal to created previously");
        Assertions.assertEquals(request.getUnitOfMeasureType(), item.getUnitOfMeasureType(), "Found unit of measure should be " + request.getUnitOfMeasureType());
        Assertions.assertEquals(request.getIsoCode(), item.getIsoCode(), "Found iso code should be equal " + request.getIsoCode());
        Assertions.assertEquals(request.getSymbol(), item.getSymbol(), "Found symbol should be equal " + request.getSymbol());

        assertEquals(given.getName(), item.getName(), "Found name should be equal to created previously");
        assertNotNull(item.getDescription(), "Found description should be not blank");
        Assertions.assertEquals(given.getDescription(), item.getDescription(), "Found description should be equal " + request.getDescription());

        idsToDelete.add(id);
    }

    @Test
    @Order(5)
    @Disabled //Fixme - enable after we implement field level partial updates
    public void updateUnitsOfMeasureWithoutNameReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        var given = new UpdateUnitOfMeasureRequest()
                .id(id)
                .name(null);

        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(6)
    public void updateUnitsOfMeasureWithoutIdReturnErrorTest() throws ApiException {

        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id(null);

        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Order(7)
    public void updateUnitsOfMeasureWithIncorrectIdIdReturnErrorTest() throws ApiException {

        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id("updateUnitsOfMeasureWithIncorrectIdIdReturnErrorTest");

        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Order(8)
    @Disabled //Fixme - enable after we implement field level partial updates
    public void updateUnitsOfMeasureWithoutMultiplierReturnErrorTest() throws ApiException {
        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id(id)
                .multiplier(null);

        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(9)
    @Disabled //Fixme - enable after we implement field level partial updates
    public void updateUnitsOfMeasureWithoutUnitsOfMeasureTypeReturnErrorTest() throws ApiException {
        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id(id)
                .unitOfMeasureType(null);

        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(10)
    public void updateUnitsOfMeasureWithNameLongerThan100CharsReturnErrorTest() throws ApiException {
        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id(id)
                .name("x".repeat(101));

        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(11)
    @Disabled //FixMe - enable after custom fields are implemented
    public void updateUnitsOfMeasureWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {
        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id(id)
                .customFields(Map.of("",""));

        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(12)
    @Disabled //FixMe - enable after custom fields are implemented
    public void updateUnitsOfMeasureWithCustomFieldsLimitMoreThan50ReturnErrorTest() throws ApiException {

        Map<String,Object> givenCustomFields = IntStream.range(0, 51)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id(id)
                .customFields(givenCustomFields);

        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(13)
    @Disabled //FixMe - enable after tags are implemented
    public void updateUnitsOfMeasureWithIncorrectTagsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id(id)
                .tags(List.of(""));

        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(14)
    @Disabled //FixMe - enable after custom fields are implemented
    public void updateUnitsOfMeasureWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {

        List<String> tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id(id)
                .tags(tags);

        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(15)
    @Disabled //FixMe - enable after metadata are implemented
    public void updateUnitsOfMeasureWithEmptyMetadataObjectReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();

        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(16)
    @Disabled //FixMe - enable after metadata are implemented
    public void updateUnitsOfMeasureWithMetadataKeyLengthMoreThan50CharsReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put("a".repeat(51),UUID.randomUUID().toString());

        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(17)
    @Disabled //FixMe - enable after metadata are implemented
    public void updateUnitsOfMeasureWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put("#@)G?$0",UUID.randomUUID().toString());

        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(18)
    @Disabled //FixMe - enable after metadata are implemented
    public void updateUnitsOfMeasureWithMetadataValueLengthMoreThan200CharsReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();
               givenMetadata.put(UUID.randomUUID().toString(),"a".repeat(201));

        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }


    @Test
    @Order(20)
    @Disabled //FixMe - enable after metadata are implemented
    public void updateUnitsOfMeasureWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {

        Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id(id)
                .metadata(givenMetas);

        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(21)
    public void updateUnitsOfMeasureWithDescriptionLengthMoreThan1000CharsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id(id)
                .description("a".repeat(1001));

        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(21)
    public void updateUnitsOfMeasureWithIsoCodeLengthMoreThan20CharsReturnErrorTest() throws ApiException {
        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id(id)
                .isoCode("a".repeat(21));

        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(21)
    public void updateUnitsOfMeasureWithSymbolLengthMoreThan20CharsReturnErrorTest() throws ApiException {
        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id(id)
                .symbol("a".repeat(101));

        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(22)
    public void getUnitsOfMeasureByQueryWithSingleIdReturnOkTest() throws ApiException, InterruptedException {

        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        QueryRequest givenQuery = new QueryRequest()
                .addShouldItem(new QueryMultiple().queryField("id").queryValues(List.of(id)))
                .shouldMatch(1);

        UnitOfMeasureResponse response = $(api.getUnitsOfMeasureByQuery( givenQuery));

        if(response.getResults().isEmpty()) {
            Thread.sleep(5000);
            response = $(api.getUnitsOfMeasureByQuery( givenQuery));
        }

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

        idsToDelete.add(id);
    }

    @Test
    @Order(22)
    public void getUnitsOfMeasureByQueryWithMultipleFieldsReturnOkTest() throws ApiException, InterruptedException {
        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        QueryRequest givenQuery = new QueryRequest()
                .addMultiFieldsItem(new QueryMultipleFields()
                        .queryFields(List.of("name", "key", "isoCode", "symbol", /*"multiplier",*/ "unitOfMeasureType"))
                        .queryValue(String.valueOf(loadTestData.getCreateRequest().getMultiplier())));

        UnitOfMeasureResponse response = $(api.getUnitsOfMeasureByQuery( givenQuery));

        if(response.getResults().isEmpty()) {
            Thread.sleep(5000);
            response = $(api.getUnitsOfMeasureByQuery( givenQuery));
        }

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
//        assertEquals(1, response.getResults().size(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

        idsToDelete.add(id);
    }

    @Test
    @Order(23)
    public void deleteUnitsOfMeasureSingleIdReturnOkTest() throws ApiException, InterruptedException {
        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        ModelApiResponse response = $(api.deleteUnitsOfMeasure( List.of(id)));

        if(response.getMeta().getResultCount() == 0) {
            Thread.sleep(5000);
            response = $(api.deleteUnitsOfMeasure( List.of(id)));
        }

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");
    }

    @Test
    public void deleteUnitsOfMeasureWithIncorrectIdReturnErrorTest() throws ApiException {

        List<String> givenIds = List.of("some_incorrect_id_for_delete");

        ModelApiResponse response = $(api.deleteUnitsOfMeasure( givenIds));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }


    @Test
    public void createUnitOfMeasureWithoutNameReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .name(null);

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createUnitOfMeasureWithoutKeyReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .key(null);

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createUnitOfMeasureWithoutUnitOfMeasureTypeReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .unitOfMeasureType(null);

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createUnitOfMeasureWithoutMultiplierReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .multiplier(null);

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createUnitOfMeasureWithNameMoreThan100CharsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .name("1".repeat(101));

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createUnitOfMeasureWithKeyMoreThan100CharsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .key("1".repeat(101));

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createUnitOfMeasureWithDescriptionMoreThan1000CharsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .description("a".repeat(1001));

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createUnitOfMeasureWithIsoCodeMoreThan20CharsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .isoCode("a".repeat(21));

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createUnitOfMeasureWithSymbolMoreThan20CharsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .symbol("a".repeat(101));

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createUnitOfMeasureWithKeyNotAllowedCharsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .key("#@)G?$0");

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //FixME - enable after implementation
    public void createUnitOfMeasureWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .customFields(Map.of("",""));

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //FixME - enable after implementation
    public void createUnitOfMeasureWithCustomFieldsLimitMoreThan50ReturnErrorTest() throws ApiException {

        Map<String,Object> customFields = IntStream.range(0, 51)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        var request = loadTestData.getCreateRequest()
                .customFields(customFields);

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //FixME - enable after implementation
    public void createUnitOfMeasureWithIncorrectTagsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .tags(List.of(""));

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //FixME - enable after implementation
    public void createUnitOfMeasureWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {

        List<String> tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        var request = loadTestData.getCreateRequest()
                .tags(tags);

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //FixME - enable after implementation
    public void createUnitOfMeasureWithEmptyMetadataObjectReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();

        var request = loadTestData.getCreateRequest()
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //FixME - enable after implementation
    public void createUnitOfMeasureWithMetadataKeyLengthMoreThan50CharsReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put("a".repeat(51),UUID.randomUUID().toString());

        var request = loadTestData.getCreateRequest()
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //FixME - enable after implementation
    public void createUnitOfMeasureWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put("#@)G?$0",UUID.randomUUID().toString());

        var request = loadTestData.getCreateRequest()
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //FixME - enable after implementation
    public void createUnitOfMeasureWithMetadataValueLengthMoreThan100CharsReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();
givenMetadata.put(UUID.randomUUID().toString(),"a".repeat(101));

        var request = loadTestData.getCreateRequest()
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }


    @Test
    @Disabled //FixME - enable after implementation
    public void createUnitOfMeasureWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {

        Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        var request = loadTestData.getCreateRequest()
                .metadata(givenMetas);

        ModelApiResponse response = $(api.createUnitsOfMeasure(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(response.getResults().get(0).getId());
    }


    @Test
    public void getUnitsOfMeasureNoArgumentsReturnEmptyTest() throws ApiException {
        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        List<String> ids = Collections.emptyList();
        Integer limit = 0;
        Integer skip = 0;
        UnitOfMeasureResponse response = $(api.getUnitsOfMeasure( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getResults().isEmpty(), "Should have no result");
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        idsToDelete.add(id);
    }

    @Test
    public void getUnitsOfMeasureNoIdsWithLimitReturnOkTest() throws ApiException {
        var requestList = loadTestData.getCreateRequestAsList(3);
        var createResponse = loadTestData.createTestData(requestList);

        List<String> id = Collections.emptyList();
        Integer limit = 3;
        Integer skip = 0;
        UnitOfMeasureResponse response = $(api.getUnitsOfMeasure( id, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(3, response.getResults().size(), "Result count should match limit");

        idsToDelete.addAll(createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList()));
    }

    @Test
    public void getUnitsOfMeasureMultipleIdsReturnOkTest() throws ApiException {

        var requestList = loadTestData.getCreateRequestAsList(3);
        var createResponse = loadTestData.createTestData(requestList);

        List<String> givenIds = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        List<String> ids = List.copyOf(givenIds);
        Integer limit = ids.size();
        Integer skip = 0;
        UnitOfMeasureResponse response = $(api.getUnitsOfMeasure( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(givenIds.size(), response.getResults().size(), "Should have single result");

        List<String> foundIds = response.getResults()
                .stream()
                .map(UnitOfMeasure::getId)
                .collect(Collectors.toList());

        assertTrue(foundIds.containsAll(givenIds), "Found id should be equal to requested");

        idsToDelete.addAll(givenIds);
    }

    @Test
    public void getUnitsOfMeasureMultipleIdsOneMalformedReturnErrorTest() throws ApiException {

        var requestList = loadTestData.getCreateRequestAsList(3);
        var createResponse = loadTestData.createTestData(requestList);

        List<String> givenIds = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        var nonExistingId = givenIds.get(0).toUpperCase();
        givenIds.add(nonExistingId);

        List<String> ids = List.copyOf(givenIds);
        Integer limit = ids.size();
        Integer skip = 0;
        UnitOfMeasureResponse response = $(api.getUnitsOfMeasure( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(givenIds.size() - 1, response.getResults().size(), "Should have requested valid results");

        List<String> foundIds = response.getResults().stream().map(UnitOfMeasure::getId).collect(Collectors.toList());

        assertTrue(givenIds.containsAll(foundIds), "Found id should be equal to requested");

        givenIds.remove(nonExistingId);

        idsToDelete.addAll(givenIds);
    }

    @Test
    public void getUnitsOfMeasureMultipleIdsOneBlankReturnErrorTest() throws ApiException {

        var requestList = loadTestData.getCreateRequestAsList(3);
        var createResponse = loadTestData.createTestData(requestList);

        List<String> givenIds = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        var nonExistingId = "";
        givenIds.add(nonExistingId);

        List<String> ids = List.copyOf(givenIds);
        Integer limit = ids.size();
        Integer skip = 0;
        UnitOfMeasureResponse response = $(api.getUnitsOfMeasure( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertFalse(response.getErrors().isEmpty(), "Should have errors");
        givenIds.remove(nonExistingId);

        idsToDelete.addAll(givenIds);
    }

    @Test
    public void getUnitsOfMeasureIdWithWhitespaceReturnOkTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(List.of(request));
        var id = createResponse.getResults().get(0).getId();

        var idWithSpaces = id.stripTrailing() + " ";

        Integer limit = 1;
        Integer skip = 0;
        UnitOfMeasureResponse response = $(api.getUnitsOfMeasure( List.of(idWithSpaces), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have error");
        assertEquals(0, response.getErrors().size(), "Should have single error");
        assertFalse(response.getResults().isEmpty(), "Should not return result");

        idsToDelete.add(id);
    }

    @Test
    public void getUnitsOfMeasureIdWithWhitespaceBetweenReturnErrorTest() throws ApiException {
        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(List.of(request));
        var id = createResponse.getResults().get(0).getId();

        var idWithSpaces = id.stripLeading().substring(0, id.length() / 2).concat(" ").concat(id.substring(id.length() / 2));

        Integer limit = 1;
        Integer skip = 0;
        UnitOfMeasureResponse response = $(api.getUnitsOfMeasure( List.of(idWithSpaces), limit, skip));


        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have error");
        assertEquals(1, response.getErrors().size(), "Should have single error");
        assertTrue(response.getResults().isEmpty(), "Should not return result");

        idsToDelete.add(id);
    }

    @Test
    public void deleteUnitsOfMeasureByQueryTest() throws ApiException, InterruptedException {
        final var createRequest = loadTestData.getCreateRequest();
        final var createdResponse = loadTestData.createTestData(List.of(createRequest));
        final var id = createdResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        assertNotNull(createdResponse);
        assertNotNull(createdResponse.getResults());
        assertNotNull(createdResponse.getErrors());
        Assertions.assertEquals(1, createdResponse.getResults().size(), "Should contain created entity");
        String givenId = createdResponse.getResults().get(0).getId();
        assertNotNull(givenId, "Created entity should has id");

        QueryRequest givenQuery = new QueryRequest()
                .addShouldItem(new QueryMultiple().queryField("id").queryValues(List.of(givenId)))
                .shouldMatch(1);
        ModelApiResponse response = $(api.deleteUnitsOfMeasureByQuery(givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

    }

    @Test
    @Order(2)
    public void createUnitsOfMeasureWithTagsAndCustomFieldsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadTestData.getCreateRequest()
                .tags(List.of(tagKey))
                .customFields(Map.of(customFieldKey, "name"));

        ModelApiResponse createResponse = $(api.createUnitsOfMeasure(loadTestData.getCreateRequestAsList(createRequest)));

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        assertNotNull(createResponse.getErrors());
        assertEquals(1, createResponse.getResults().size(), "Should contain created entity");
        assertNotNull(createResponse.getResults().get(0).getId(), "Created entity should has id");

        final var id = createResponse.getResults().get(0).getId();
        int limit = 1;
        int skip = 0;

        Thread.sleep(5000);

        var response = $(api.getUnitsOfMeasure(List.of(id), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");
        assertNotNull(response.getResults().get(0).getCustomFields());
        assertEquals(1,response.getResults().get(0).getCustomFields().size());
        assertNotNull(response.getResults().get(0).getTags());
        assertEquals(1,response.getResults().get(0).getTags().size());

        idsToDelete.add(id);
    }
    @Test
    @Order(4)
    public void updateUnitsOfMeasureWithTagsReturnOkTest() throws ApiException, InterruptedException {

        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        //GIVEN
        UpdateUnitOfMeasureRequest given = new UpdateUnitOfMeasureRequest()
                .id(id)
                .description("update description")
                .tags(List.of(tagKey))
                ;

        //WHEN
        ModelApiResponse response = $(api.updateUnitsOfMeasure(List.of(given)));

        //THEN
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain updated entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        String updatedId = response.getResults().get(0).getId();

        UnitOfMeasureResponse responseAfterUpdate = $(api.getUnitsOfMeasure( List.of(updatedId), 1, 0));

        assertNotNull(responseAfterUpdate);
        assertNotNull(responseAfterUpdate.getResults());
        assertEquals(1, responseAfterUpdate.getResults().size(), "Should contain entity");

        UnitOfMeasure item = responseAfterUpdate.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        Assertions.assertEquals(request.getKey(), item.getKey(), "Found key should be equal to created previously");
        Assertions.assertEquals(request.getUnitOfMeasureType(), item.getUnitOfMeasureType(), "Found unit of measure should be " + request.getUnitOfMeasureType());
        Assertions.assertEquals(request.getIsoCode(), item.getIsoCode(), "Found iso code should be equal " + request.getIsoCode());
        Assertions.assertEquals(request.getSymbol(), item.getSymbol(), "Found symbol should be equal " + request.getSymbol());
        assertNotNull(item.getTags());
        assertEquals(1,item.getTags().size());
        assertNotNull(item.getDescription(), "Found description should be not blank");
        Assertions.assertEquals(given.getDescription(), item.getDescription(), "Found description should be equal " + request.getDescription());

        idsToDelete.add(id);
    }


}
