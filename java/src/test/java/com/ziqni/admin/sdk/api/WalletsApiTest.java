/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.admin.sdk.api;

import com.ziqni.admin.sdk.ApiException;
import com.ziqni.admin.sdk.configuration.AdminApiClientConfigBuilder;
import com.ziqni.admin.sdk.data.LoadMembersData;
import com.ziqni.admin.sdk.data.LoadUnitsOfMeasureData;
import com.ziqni.admin.sdk.data.LoadWalletData;
import com.ziqni.admin.sdk.data.LoadWalletTypeData;
import com.ziqni.admin.sdk.model.ModelApiResponse;
import com.ziqni.admin.sdk.model.WalletTransaction;
import com.ziqni.admin.sdk.model.WalletTransactionRequest;
import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for UnitsOfMeasureApi
 */

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class WalletsApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private static final Logger logger = LoggerFactory.getLogger(WalletsApiTest.class);

    private final WalletsApiWs api;

    private final LoadWalletTypeData loadWalletTypeData;
    private final LoadWalletData loadTestData;
    private final LoadMembersData loadMembersData;
    private final LoadUnitsOfMeasureData loadUnitsOfMeasureData;


    private String unitOfMeasureId;
    private String memberId;
    private String walletTypeId;

    private List<String> idsToDelete = new ArrayList<>();
    private List<String> unitOfMeasureIdsToDelete = new ArrayList<>();
    private List<String> memberIdsToDelete = new ArrayList<>();
    private List<String> walletTypesToDelete = new ArrayList<>();


    public WalletsApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory(AdminApiClientConfigBuilder.build());
        this.api = ApiClientFactoryUtil.factory.getWalletsApi();
        this.loadTestData = new LoadWalletData();
        this.loadWalletTypeData = new LoadWalletTypeData();
        this.loadUnitsOfMeasureData = new LoadUnitsOfMeasureData();
        this.loadMembersData = new LoadMembersData();
    }


    @BeforeAll
    public void setUp() throws ApiException, InterruptedException {
         unitOfMeasureId = loadUnitsOfMeasureData.createTestData(loadUnitsOfMeasureData.
                getCreateRequestAsList(1)).getResults().get(0).getId();

           walletTypeId=loadWalletTypeData.createTestData(List.of(loadWalletTypeData.
                   getCreateRequest(unitOfMeasureId))).getResults().get(0).getId();
         Thread.sleep(5000);
           memberId=loadMembersData.createTestData(List.of(loadMembersData.getCreateRequest()))
                   .getResults().get(0).getId();
        Thread.sleep(5000);
        unitOfMeasureIdsToDelete.add(unitOfMeasureId);
        walletTypesToDelete.add(walletTypeId);
        memberIdsToDelete.add(memberId);
    }

    @AfterAll
    public void cleanUp() throws ApiException {
        try {

            Thread.sleep(5000);

            loadTestData.deleteTestData(idsToDelete);
            loadWalletTypeData.deleteTestData(walletTypesToDelete);
            loadMembersData.deleteTestData(memberIdsToDelete);
            loadUnitsOfMeasureData.deleteTestData(unitOfMeasureIdsToDelete);

        } catch (ApiException | InterruptedException e) {
            logger.error("error", e.getCause());
        }

    }

    @Test
    @Order(1)
    public void createWalletReturnOkTest() throws ApiException {

        final var createRequest = loadTestData.getCreateRequest(memberId,walletTypeId);
        ModelApiResponse response = $(api.createWallets(loadTestData.getCreateRequestAsList(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");
        logger.info(response.getResults().get(0).getId());
       idsToDelete.add(response.getResults().get(0).getId());
    }

    @Test
    @Order(2)
    public void getWalletSingleIdReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadTestData.getCreateRequest(memberId,walletTypeId);
        var walletId = loadTestData.createTestData(List.of(createRequest)).getResults().get(0).getId();
        Integer limit = 1;
        Integer skip = 0;

        Thread.sleep(5000);

        var response = $(api.getWallets(List.of(walletId), limit, skip));


        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        var item = response.getResults().get(0);

        idsToDelete.add(item.getId());
    }
    @Test
    @Order(3)
    public void deleteWalletSingleIdReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadTestData.getCreateRequest(memberId,walletTypeId);
        var walletId = loadTestData.createTestData(List.of(createRequest)).getResults().get(0).getId();
        Thread.sleep(10000);
        var response = $(api.deleteWallets(List.of(walletId)));


        assertNotNull(response);

        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");


    }
    @Test
    @Order(2)
    public void manageWalletCreditReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadTestData.getCreateRequest(memberId, walletTypeId);
        var walletId = loadTestData.createTestData(List.of(createRequest)).getResults().get(0).getId();

        BigDecimal amount = BigDecimal.valueOf(100);
        WalletTransactionRequest request = new WalletTransactionRequest()
                .amount(amount)
                .transactionType("Credit")
                .sourceWalletId(walletId);

        Thread.sleep(5000);
        var response = $(api.manageWalletTransaction(request));

        assertNotNull(response);
        assertTrue(response.getErrors().isEmpty());



        var walletResponse = $(api.getWallets(List.of(walletId), 1, 0));
        assertNotNull(walletResponse);
        assertTrue(walletResponse.getErrors().isEmpty());

        BigDecimal walletBalance = walletResponse.getResults().get(0).getBalance();
        assertEquals(amount, walletBalance, "Wallet balance should match credited amount");
        idsToDelete.add(walletId);
    }

    @Test
    @Order(3)
    public void manageWalletDebitReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadTestData.getCreateRequest(memberId, walletTypeId);
        var walletId = loadTestData.createTestData(List.of(createRequest)).getResults().get(0).getId();
        Thread.sleep(3000);
        BigDecimal initialAmount = BigDecimal.valueOf(100);
        BigDecimal debitAmount = BigDecimal.valueOf(50);

        // Pre-credit wallet
        api.manageWalletTransaction(new WalletTransactionRequest()
                .amount(initialAmount)
                .transactionType("Credit")
                .sourceWalletId(walletId));



        WalletTransactionRequest request = new WalletTransactionRequest()
                .amount(debitAmount)
                .transactionType("Debit")
                .sourceWalletId(walletId);

        var response = $(api.manageWalletTransaction(request));

        assertNotNull(response);
        assertTrue(response.getErrors().isEmpty());


        var walletResponse = $(api.getWallets(List.of(walletId), 1, 0));
        assertNotNull(walletResponse);
        assertTrue(walletResponse.getErrors().isEmpty());

        BigDecimal walletBalance = walletResponse.getResults().get(0).getBalance();
        assertEquals(initialAmount.subtract(debitAmount), walletBalance, "Wallet balance should reflect debit");
        idsToDelete.add(walletId);
    }

    @Test
    @Order(4)
    public void manageWalletTransferReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest1 = loadTestData.getCreateRequest(memberId, walletTypeId);
        final var createRequest2 = loadTestData.getCreateRequest(memberId, walletTypeId);

        var wallets = loadTestData.createTestData(List.of(createRequest1, createRequest2)).getResults();
        var sourceWalletId = wallets.get(0).getId();
        var targetWalletId = wallets.get(1).getId();
        Thread.sleep(10000);

        BigDecimal creditAmount = BigDecimal.valueOf(100);
        BigDecimal transferAmount = BigDecimal.valueOf(75);

        // Pre-credit source wallet
        api.manageWalletTransaction(new WalletTransactionRequest()
                .amount(creditAmount)
                .transactionType("credit")
                .sourceWalletId(sourceWalletId));

        Thread.sleep(1000);

        WalletTransactionRequest transferRequest = new WalletTransactionRequest()
                .amount(transferAmount)
                .transactionType("Transfer")
                .sourceWalletId(sourceWalletId)
                .targetWalletId(targetWalletId);


        var response = $(api.manageWalletTransaction(transferRequest));
        Thread.sleep(1000);
        assertNotNull(response);
        assertTrue(response.getErrors().isEmpty());
        var item = response.getResults().get(0);


        var sourceWallet = $(api.getWallets(List.of(sourceWalletId), 1, 0)).getResults().get(0);
        var targetWallet = $(api.getWallets(List.of(targetWalletId), 1, 0)).getResults().get(0);

        assertEquals(creditAmount.subtract(transferAmount), sourceWallet.getBalance(), "Source wallet balance should decrease");
        assertEquals(transferAmount, targetWallet.getBalance(), "Target wallet balance should increase");
        idsToDelete.add(sourceWallet.getId());
        idsToDelete.add(targetWallet.getId());
    }

    @Test
    @Order(2)
    public void retrieveWalletTransactionsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadTestData.getCreateRequest(memberId, walletTypeId);
        var walletId = loadTestData.createTestData(List.of(createRequest)).getResults().get(0).getId();

        BigDecimal amount = BigDecimal.valueOf(100);
        String transactionType = "Credit";
        WalletTransactionRequest request = new WalletTransactionRequest()
                .amount(amount)
                .transactionType(transactionType)
                .sourceWalletId(walletId);

        Thread.sleep(5000);
        var response = $(api.manageWalletTransaction(request));

        assertNotNull(response);
        assertTrue(response.getErrors().isEmpty());



        var walletResponse = $(api.retrieveWalletTransactionsById(List.of(walletId), 1, 0));
        assertNotNull(walletResponse);
        assertTrue(walletResponse.getErrors().isEmpty());

        WalletTransaction walletTransaction = walletResponse.getResults().get(0);
        BigDecimal walletBalance = walletTransaction.getAmount();
        assertEquals(amount, walletBalance, "Wallet balance should match transaction amount");
        assertEquals(transactionType, walletTransaction.getTransactionType(), "Wallet type should match transaction type input");
        idsToDelete.add(walletId);
    }



}
