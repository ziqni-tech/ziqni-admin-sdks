/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.admin.sdk.api;

import com.ziqni.admin.sdk.data.LoadCompetitionsData;
import com.ziqni.admin.sdk.data.LoadProductsData;
import com.ziqni.admin.sdk.data.LoadTagsData;
import com.ziqni.admin.sdk.model.*;
import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
import com.ziqni.admin.sdk.ZiqniAdminApiFactory;
import com.ziqni.admin.sdk.ApiException;
import com.ziqni.admin.sdk.data.LoadCustomFieldsData;
import com.ziqni.admin.sdk.model.*;

import com.ziqni.admin.sdk.util.DateUtil;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for CompetitionsApi
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class CompetitionsApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private static final Logger logger = LoggerFactory.getLogger(CompetitionsApiTest.class);
    private String tagKey;
    private String customFieldKey;

    private final CompetitionsApiWs api;

    private final RewardsApiWs rewardsApiWs;
    private final LoadCompetitionsData loadData;
    private final LoadProductsData loadProductsData;
    private final LoadTagsData loadTagsData;
    private final LoadCustomFieldsData loadCustomFieldsData;

    List<String> idsToDelete = new ArrayList<>();
    List<String> productIdsToDelete = new ArrayList<>();
    private final List<String> tagIdsToDelete = new ArrayList<>();
    private final List<String> customFieldIdsToDelete = new ArrayList<>();

    public CompetitionsApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory();
        this.api = ZiqniAdminApiFactory.getCompetitionsApi();
        this.loadData = new LoadCompetitionsData();
        this.loadProductsData = new LoadProductsData();
        this.loadCustomFieldsData = new LoadCustomFieldsData();
        this.loadTagsData = new LoadTagsData();
        this.rewardsApiWs = ZiqniAdminApiFactory.getRewardsApi();
    }


    @BeforeAll
    public void setUp() {
        try {
            tagKey = loadTagsData.getModel();
            Thread.sleep(5000);

            var productsReq = loadProductsData.getCreateRequest(null).tags(List.of(tagKey));
            var productRes = loadProductsData.createTestData(List.of(productsReq));

            Thread.sleep(5000);

            productIdsToDelete.add(productRes.getResults().get(0).getId());
            customFieldKey = loadCustomFieldsData.getModel(customFieldIdsToDelete, AppliesTo.COMPETITION);
            tagIdsToDelete.add(tagKey);
        } catch (ApiException | InterruptedException e) {
            logger.error("error", e.getCause());
        }
    }

    // There is no Delete method exposed to achievements, competitions and contests, mark the states of these 3 resources as cancelled and clean them up later on.
    @AfterAll
    public void cleanUp() {
        try {
            Thread.sleep(5000);
            loadProductsData.deleteTestData(productIdsToDelete);
            loadTagsData.deleteTestData(tagIdsToDelete);
            loadCustomFieldsData.deleteTestData(customFieldIdsToDelete);
        } catch (ApiException | InterruptedException e) {
            logger.error("error", e.getCause());
        }
    }

    /**
     *
     * Create a new Competition in the Ziqni database
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCompetitionsReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);

        ModelApiResponse response = api.createCompetitions(createRequest).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        final var id = response.getResults().get(0).getId();
        logger.info(id);

        idsToDelete.add(id);
    }

    @Test
    public void createCompetitionsWithRewardsReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);

        ModelApiResponse response = api.createCompetitions(createRequest).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        final var id = response.getResults().get(0).getId();

        final var query = new QueryRequest()
                .addShouldItem(new QueryMultiple().queryField("entityId").addQueryValuesItem(id))
                .shouldMatch(1);
        final var rewardsResponse = $(rewardsApiWs.getRewardsByQuery(query));

        assertNotNull(rewardsResponse);
        assertNotNull(rewardsResponse.getResults());
        assertNotNull(rewardsResponse.getErrors());
        assertEquals(1, rewardsResponse.getResults().size(), "Should contain created entity");
        final var createdReward = rewardsResponse.getResults().get(0);
        assertNotNull(createdReward.getId(), "Created entity should has id");
        assertEquals(createdReward.getId(), response.getResults().get(0).getRelations().stream().filter(x -> x.getRelationType().equals("Reward")).collect(Collectors.toList()).get(0).getId());


        idsToDelete.add(id);
    }

    @Test
    public void createSimpleCompetitionsReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateSimpleCompRequest(productIdsToDelete);

        ModelApiResponse response = api.createSimpleCompetitions(createRequest).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        final var id = response.getResults().get(0).getId();
        logger.info(id);

        idsToDelete.add(id);
    }

    @Test
    public void createCompetitionsWithTranslationsReturnOkTest() throws ApiException {
        var translationEntry = new TranslationEntry();
        translationEntry.setFieldName("name");
        translationEntry.setText("Given");
        var translation = new Translation();
        translation.setTranslations(List.of(translationEntry));

        final var createRequest = loadData.getCreateRequest(productIdsToDelete).translations(List.of(translation));

        ModelApiResponse response = api.createCompetitions(createRequest).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        final var id = response.getResults().get(0).getId();
        logger.info(id);

        idsToDelete.add(id);
    }

    @Test
    public void createFailingCompetitionsWithTranslationsReturnErrorAndDontCreateChildTest() throws ApiException {
        var translationEntry = new TranslationEntry();
        translationEntry.setFieldName("name");
        translationEntry.setText("Given");
        var translation = new Translation();
        translation.setTranslations(List.of(translationEntry));

        final var createRequest = loadData.getCreateRequest(productIdsToDelete).description("x".repeat(100001)).translations(List.of(translation));

        ModelApiResponse response = api.createCompetitions(createRequest).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Should not contain created entity");
        assertEquals(1, response.getErrors().size(), "Should have an error");

    }

    /**
     *
     * Returns a list of Competitions. This assumes that competitions have first been uploaded via a POST request or web console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSingleCompetitionReturnsOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var limit = 1;
        final var skip = 0;

        Thread.sleep(5000);

        final var response = $(api.getCompetitions(List.of(id), limit, skip));
        logger.info(response.toString());
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getCompetitionType(), item.getCompetitionType(), "Found Competition Type should be equal to created previously");
        assertEquals(createRequest.getDescription(), item.getDescription(), "Found Description should be equal to created previously");
        assertEquals(createRequest.getNumberOfGroupStages(), item.getNumberOfGroupStages(), "Found NumberOfGroupStages should be equal to created previously");
        assertEquals(createRequest.getCompetitionType(), item.getCompetitionType(), "Found CompetitionType should be equal to created previously");
        assertEquals(createRequest.getEntrantMemberType(), item.getEntrantMemberType(), "Found EntrantMemberType should be equal to created previously");
        assertEquals(createRequest.getNumberOfRounds(), item.getNumberOfRounds(), "Found NumberOfRounds should be equal to created previously");


        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());
//        assertTrue(item.getRuleSets().containsAll(createRequest.getRuleSets()), "Found ruleset should contain all of" + createRequest.getRuleSets());

        idsToDelete.add(id);
    }

    /**
     *
     * Returns a list of Competitions. This assumes that competitions have first been uploaded via a POST request or web console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSingleCompetitionWithEntrantMemberTagFilterReturnsOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);

        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var limit = 1;
        final var skip = 0;

        Thread.sleep(5000);

        final var response = $(api.getCompetitions(List.of(id), limit, skip));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getCompetitionType(), item.getCompetitionType(), "Found Competition Type should be equal to created previously");
        assertEquals(createRequest.getDescription(), item.getDescription(), "Found Description should be equal to created previously");
        assertEquals(createRequest.getNumberOfGroupStages(), item.getNumberOfGroupStages(), "Found NumberOfGroupStages should be equal to created previously");
        assertEquals(createRequest.getCompetitionType(), item.getCompetitionType(), "Found CompetitionType should be equal to created previously");
        assertEquals(createRequest.getEntrantMemberType(), item.getEntrantMemberType(), "Found EntrantMemberType should be equal to created previously");
        assertEquals(createRequest.getNumberOfRounds(), item.getNumberOfRounds(), "Found NumberOfRounds should be equal to created previously");
        assertEquals(createRequest.getEntrantMemberTagsFilter().getShould(), item.getEntrantMemberTagsFilter().getShould(), "Found entrantMemberTagsFilter should be equal to created previously");

        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());

        idsToDelete.add(id);
    }

    /**
     *
     * Returns a list of Competitions. This assumes that competitions have first been uploaded via a POST request or web console
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSingleCompetitionWithProductTagFilterReturnsOkTest() throws ApiException, InterruptedException {
        final var tagReq = loadTagsData.getCreateRequest().entityTypes(List.of("Product"));
        final var tagResp = loadTagsData.createTestData(List.of(tagReq));
        tagKey = tagResp.getResults().get(0).getExternalReference();

        final var prodDependantOn = new DependantOn()
                .must(List.of(tagKey));

        Thread.sleep(5000);

        final var createRequest = loadData
                .getCreateRequest(null)
                .productTagsFilter(prodDependantOn);

        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var limit = 1;
        final var skip = 0;

        Thread.sleep(5000);

        final var response = api.getCompetitions(List.of(id), limit, skip).join();
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getCompetitionType(), item.getCompetitionType(), "Found Competition Type should be equal to created previously");
        assertEquals(createRequest.getDescription(), item.getDescription(), "Found Description should be equal to created previously");
        assertEquals(createRequest.getNumberOfGroupStages(), item.getNumberOfGroupStages(), "Found NumberOfGroupStages should be equal to created previously");
        assertEquals(createRequest.getCompetitionType(), item.getCompetitionType(), "Found CompetitionType should be equal to created previously");
        assertEquals(createRequest.getEntrantMemberType(), item.getEntrantMemberType(), "Found EntrantMemberType should be equal to created previously");
        assertEquals(createRequest.getNumberOfRounds(), item.getNumberOfRounds(), "Found NumberOfRounds should be equal to created previously");
        assertEquals(createRequest.getProductTagsFilter().getShould(), item.getProductTagsFilter().getShould(), "Found entrantMemberTagsFilter should be equal to created previously");

        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());

        idsToDelete.add(id);
    }
//
//    /**
//     * NOT AVAILABLE IN CURRENT RELEASE
//     *
//     * Returns all Contests for the Competition id provided in Brackets
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    @Disabled //Fixme after Implementation
//    public void getCompetitionsBracketsTest() throws ApiException, InterruptedException {
//        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
//        final var createResponse = loadData.createTestData(createRequest);
//        final var id = createResponse.getResults().get(0).getId();
//
//        final var limit = 1;
//        final var skip = 0;
//
//        Thread.sleep(5000);
//
//        final var response = $(api.getCompetitionsBrackets(id, limit, skip));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
//        assertEquals(limit, response.getResults().size(), "Should has single result");
//
//        final var item = response.getResults().get(0);
//
//        assertEquals(createRequest.getContests(), item.getContests(), "Found Contests should be equal to created previously");
//        assertEquals(createRequest.getNumberOfRounds(), item.getRounds(), "Found Competition Type should be equal to created previously");
//
//        idsToDelete.add(id);
//    }

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     *
     * Retrieve Competitions from Ziqni database by unique Competition ID&#39;s or any other POST body parameters using the POST method
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Order(23)
    public void getCompetitionByQueryWithMultipleFieldsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        var givenQuery = new QueryMultipleFields()
                .queryFields(List.of("termsAndConditions","description","name")).queryValue(createRequest.getName());

        QueryRequest qr = new QueryRequest().multiFields(List.of(givenQuery));

        var response = $(api.getCompetitionsByQuery(qr));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

        idsToDelete.add(id);

    }


    @Test
    public void getSingleCompetitionByQueryReturnsOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        final var givenQuery = new QueryRequest()
                .addShouldItem(new QueryMultiple().queryField("id").queryValues(List.of(id)))
                .shouldMatch(1);

        final var response = $(api.getCompetitionsByQuery(givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getCompetitionType(), item.getCompetitionType(), "Found Competition Type should be equal to created previously");
        assertEquals(createRequest.getDescription(), item.getDescription(), "Found Description should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());
//        assertTrue(item.getRuleSets().containsAll(createRequest.getRuleSets()), "Found ruleset should contain all of" + createRequest.getRuleSets());

        idsToDelete.add(id);
    }

    /**
     *
     * Clones a Competition for the identifier provided
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompetitionsToCloneTest() throws ApiException, InterruptedException {
        var translationEntry = new TranslationEntry();
        translationEntry.setFieldName("name");
        translationEntry.setText("Given");
        var translation = new Translation();
        translation.setTranslations(List.of(translationEntry));
        translation.setLanguageKey("en");

        final var createRequest = loadData.getCreateRequest(productIdsToDelete).translations(List.of(translation));
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        final var response = api.getCompetitionsToClone(id).join();

        assertNotNull(response);

        final var competitionRequest = response.getResults().get(0);
        assertEquals(createRequest.getName(), competitionRequest.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getCompetitionType(), competitionRequest.getCompetitionType(), "Found Competition Type should be equal to created previously");
        assertEquals(createRequest.getDescription(), competitionRequest.getDescription(), "Found Description should be equal to created previously");
        assertTrue(competitionRequest.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());
//        assertTrue(response.getRuleSets().containsAll(createRequest.getRuleSets()), "Found ruleset should contain all of" + createRequest.getRuleSets());

        idsToDelete.add(id);
    }
//
//    /**
//     * NOT AVAILABLE IN CURRENT RELEASE
//     *
//     * Returns all Contests for the Competition id provided
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    @Disabled //Fixme after Implementation
//    public void getContestsForCompetitionsTest() throws ApiException, InterruptedException {
//        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
//        final var createResponse = loadData.createTestData(createRequest);
//        final var id = createResponse.getResults().get(0).getId();
//
//        final var limit = 1;
//        final var skip = 0;
//
//        Thread.sleep(5000);
//
//        final var response = $(api.getContestsForCompetitions(id, limit, skip));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
//        assertEquals(limit, response.getResults().size(), "Should has single result");
//
//        final var item = response.getResults().get(0);
//
//        assertEquals(id, item.getId(), "Found id should be equal to requested");
//        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
//        assertEquals(createRequest.getScheduledStartDate(), item.getActualStartDate(), "Found Competition Type should be equal to created previously");
//        assertNotNull(item.getSpaceName(), "Space name should exist");
//
//        idsToDelete.add(id);
//    }

    /**
     *
     * Returns a list of Leaderborads for the Competition id provided
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    //Fixme after data will be populated in leaderboards
    public void getLeaderboardByCompetitionIdTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var limit = 1;
        final var skip = 0;

        Thread.sleep(5000);

        final var response = $(api.getLeaderboardByCompetitionId(id, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getContestId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");

        idsToDelete.add(id);
    }
//
//    /**
//     *
//     * Returns all Entries for the Competition id provided
//     *
//     * @throws ApiException
//     *          if the Api call fails
//     */
//    @Test
//    @Disabled //Fixme after Implementation
//    public void getListOfEntrantsTest() throws ApiException, InterruptedException {
//        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
//        final var createResponse = loadData.createTestData(createRequest);
//        final var id = createResponse.getResults().get(0).getId();
//
//        final var limit = 1;
//        final var skip = 0;
//
//        Thread.sleep(5000);
//
//        final var response = $(api.getListOfEntrants(id, limit, skip));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
//        assertEquals(limit, response.getResults().size(), "Should has single result");
//
//        final var item = response.getResults().get(0);
//
//        assertEquals(id, item.getEntityId(), "Found id should be equal to requested");
//
//        idsToDelete.add(id);
//    }

    @Test
    public void updateCompetitionReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var givenDescription = UUID.randomUUID().toString();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .description(givenDescription);

        final var updated = $(api.updateCompetitions(given));

        assertNotNull(updated);
        assertNotNull(updated.getResults());
        assertNotNull(updated.getErrors());
        assertEquals(1, updated.getResults().size(), "Should contain updated entity");
        assertNotNull(updated.getResults().get(0).getId(), "Created entity should has id");

        final var updatedId = updated.getResults().get(0).getId();


        final var ids = List.of(updatedId);
        final var limit = 1;
        final var skip = 0;

        final var response = $(api.getCompetitions(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getCompetitionType(), item.getCompetitionType(), "Found Competition Type should be equal to created previously");
        assertEquals(givenDescription, item.getDescription(), "Found Description should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());
//        assertTrue(item.getRuleSets().containsAll(createRequest.getRuleSets()), "Found ruleset should contain all of" + createRequest.getRuleSets());

        idsToDelete.add(id);
    }

    @Test
    public void updateCompetitionWithNoProductsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var givenDescription = UUID.randomUUID().toString();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .description(givenDescription);

        final var updated = $(api.updateCompetitions(given));

        assertNotNull(updated);
        assertNotNull(updated.getResults());
        assertNotNull(updated.getErrors());
        assertEquals(1, updated.getResults().size(), "Should contain updated entity");
        assertNotNull(updated.getResults().get(0).getId(), "Created entity should has id");

        final var updatedId = updated.getResults().get(0).getId();


        final var ids = List.of(updatedId);
        final var limit = 1;
        final var skip = 0;

        final var response = $(api.getCompetitions(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getCompetitionType(), item.getCompetitionType(), "Found Competition Type should be equal to created previously");
        assertEquals(givenDescription, item.getDescription(), "Found Description should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());
//        assertTrue(item.getRuleSets().containsAll(createRequest.getRuleSets()), "Found ruleset should contain all of" + createRequest.getRuleSets());

        idsToDelete.add(id);
    }

//    @Test
//    @Disabled //Fixme after Implementation
//    public void updateCompetitionsEntriesTest() throws ApiException {
//        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
//        final var createResponse = loadData.createTestData(createRequest);
//        final var id = createResponse.getResults().get(0).getId();
//
//        final var given = new EntrantRequest()
//                .entityId(id)
//                .entrantStatus(EntrantStatus.ENTERED);
//
//        final var updated = $(api.updateCompetitionsEntries(List.of(given)));
//
//        assertNotNull(updated);
//        assertNotNull(updated.getResults());
//        assertNotNull(updated.getErrors());
//        assertEquals(1, updated.getResults().size(), "Should contain created entity");
//        assertNotNull(updated.getResults().get(0).getId(), "Created entity should has id");
//
//        final var updatedId = updated.getResults().get(0).getId();
//
//
//        final var ids = List.of(updatedId);
//        Integer limit = 1;
//        Integer skip = 0;
//
//        final var response = $(api.getCompetitions(ids, limit, skip));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
//        assertEquals(limit, response.getResults().size(), "Should has single result");
//
//        final var item = response.getResults().get(0);
//
//        assertEquals(id, item.getId(), "Found id should be equal to requested");
////        assertEquals(givenStatus, item.getStatus(), "Found live status should be equal to provided");
//
//        idsToDelete.add(id);
//    }

    /**
     *
     * Manages the Competitions state
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    @Disabled //Fixme after Implementation
    public void updateCompetitionsStateTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var givenStatus = CompetitionStatusActions.ACTIVE;

        final var given = new UpdateCompetitionStatusRequest()
                .id(id)
                .status(givenStatus);

        final var updated = $(api.updateCompetitionsState(List.of(given)));

        assertNotNull(updated);
        assertNotNull(updated.getResults());
        assertNotNull(updated.getErrors());
        assertEquals(1, updated.getResults().size(), "Should contain created entity");
        assertNotNull(updated.getResults().get(0).getId(), "Created entity should has id");

        final var updatedId = updated.getResults().get(0).getId();


        final var ids = List.of(updatedId);
        Integer limit = 1;
        Integer skip = 0;

        final var response = $(api.getCompetitions(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
//        assertEquals(givenStatus, item.getStatus(), "Found live status should be equal to provided");

        idsToDelete.add(id);
    }

    @Test
    public void getCompetitionsNoArgumentsReturnEmptyTest() throws ApiException {
        var request = loadData.getCreateRequest(productIdsToDelete);
        var createResponse = loadData.createTestData(request);
        var id = createResponse.getResults().get(0).getId();

        List<String> ids = Collections.emptyList();
        Integer limit = 0;
        Integer skip = 0;
        final var response = $(api.getCompetitions( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getResults().isEmpty(), "Should have no result");
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        idsToDelete.add(id);
    }

    @Test
    public void getCompetitionsNoIdsWithLimitReturnOkTest() throws ApiException, InterruptedException {
        final var requestList = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(requestList);

        Thread.sleep(5000);

        final var id = new ArrayList<String>();
        final var limit = 3;
        final var skip = 0;
        final var response = $(api.getCompetitions( id, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(3, response.getResults().size(), "Result count should match limit");

        idsToDelete.addAll(createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList()));
    }

    @Test
    public void getCompetitionsMultipleIdsReturnOkTest() throws ApiException {

        var requestList = loadData.getCreateRequest(productIdsToDelete);
        var createResponse = loadData.createTestData(requestList);

        final var givenIds = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        final var ids = List.copyOf(givenIds);
        final var limit = ids.size();
        final var skip = 0;
        final var response = $(api.getCompetitions( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(givenIds.size(), response.getResults().size(), "Should have single result");

        final var foundIds = response.getResults()
                .stream()
                .map(Competition::getId)
                .collect(Collectors.toList());

        assertTrue(foundIds.containsAll(givenIds), "Found id should be equal to requested");

        idsToDelete.addAll(givenIds);
    }

    @Test
    public void getCompetitionsMultipleIdsOneMalformedReturnErrorTest() throws ApiException {

        final var requestList = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(requestList);

        final var givenIds = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        final var nonExistingId = givenIds.get(0).toUpperCase();
        givenIds.add(nonExistingId);

        final var ids = List.copyOf(givenIds);
        final var limit = ids.size();
        final var skip = 0;
        final var response = $(api.getCompetitions( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(givenIds.size() - 1, response.getResults().size(), "Should have requested valid results");

        final var foundIds = response.getResults().stream().map(Competition::getId).collect(Collectors.toList());

        Assertions.assertTrue(givenIds.containsAll(foundIds), "Found id should be equal to requested");

        givenIds.remove(nonExistingId);

        idsToDelete.addAll(givenIds);
    }

    @Test
    public void getCompetitionsMultipleIdsOneBlankReturnErrorTest() throws ApiException {
        final var requestList = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(requestList);

        final var givenIds = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        final var nonExistingId = "";
        givenIds.add(nonExistingId);

        final var ids = List.copyOf(givenIds);
        final var limit = ids.size();
        final var skip = 0;
        final var response = $(api.getCompetitions( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertFalse(response.getErrors().isEmpty(), "Should have errors");

        givenIds.remove(nonExistingId);

        idsToDelete.addAll(givenIds);
    }

    @Test
    public void getCompetitionsIdWithWhitespaceReturnOkTest() throws ApiException, InterruptedException {
        final var request = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(request);
        final var id = createResponse.getResults().get(0).getId();

        final var idWithSpaces = id.stripTrailing() + " ";

        Thread.sleep(5000);

        final var limit = 1;
        final var skip = 0;
        final var response = $(api.getCompetitions( List.of(idWithSpaces), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no error");
        assertEquals(0, response.getErrors().size(), "Should have no error");
        assertFalse(response.getResults().isEmpty(), "Should not return result");

        idsToDelete.add(id);
    }

    @Test
    public void getCompetitionsIdWithWhitespaceBetweenReturnErrorTest() throws ApiException, InterruptedException {
        final var request = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(request);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        final var idWithSpaces = id.stripLeading().substring(0, id.length() / 2).concat(" ").concat(id.substring(id.length() / 2));

        final var limit = 1;
        final var skip = 0;
        final var response = $(api.getCompetitions( List.of(idWithSpaces), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have error");
        assertEquals(1, response.getErrors().size(), "Should have single error");
        assertTrue(response.getResults().isEmpty(), "Should not return result");

        idsToDelete.add(id);
    }

    @Test
    public void createCompetitionWithoutCompetitionTypeReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete).competitionType(null);

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createCompetitionWithoutNumberOfRoundsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete).numberOfRounds(null);

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createCompetitionWithIncorrectNumberOfRoundsNotBetween1and20ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete).numberOfRounds(21);

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createCompetitionWithoutNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete).name(null);

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }


    @Test
    public void createCompetitionWithIncorrectNameLengthGreaterThan15000ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete).name("x".repeat(15001));

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createCompetitionWithIncorrectDescriptionLengthGreaterThan100000ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete).description("x".repeat(100001));

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createCompetitionWithIncorrectTermsAndConditionsLengthGreaterThan100000ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete).termsAndConditions("x".repeat(100001));

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createCompetitionWithIncorrectMaxNumberOfEntrants0ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete).maxNumberOfEntrants(0);

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createCompetitionWithIncorrectMaxNumberOfEntrantsNegativeReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete).maxNumberOfEntrants(-1);

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createCompetitionWithIncorrectMaxNumberOfEntrantsSameAsMinimumNumberOfEntrantsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete)
                .maxNumberOfEntrants(1)
                .minNumberOfEntrants(1);

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createCompetitionWithIncorrectMaxNumberOfEntrantsLowerThanMinimumNumberOfEntrantsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete)
                .maxNumberOfEntrants(1)
                .minNumberOfEntrants(2);

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createCompetitionWithoutMinimumNumberOfEntrantsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete).minNumberOfEntrants(null);

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createCompetitionWithIncorrectMinNumberOfEntrants0ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete).minNumberOfEntrants(-1);

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createCompetitionWithIncorrectMinNumberOfEntrantsNegativeReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete).minNumberOfEntrants(-1);

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createCompetitionWithoutRuleSetsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);//.ruleSets(null);

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createCompetitionWithEmptyRuleSetsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);//.ruleSets(new ArrayList<>());

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createCompetitionWithoutScheduledStartDateReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete).scheduledStartDate(null);

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createCompetitionWithoutScheduledEndDateReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete).scheduledEndDate(null);

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createCompetitionWithScheduledStartDateAfterScheduledEndDateReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete)
                .scheduledStartDate(DateUtil.nowPlusDays(2))
                .scheduledEndDate(DateUtil.now());

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test // we supply default values for constraints
    public void createCompetitionWithoutConstraintsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete).constraints(null);

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should be empty");
        assertEquals(0, response.getErrors().size(), "Errors should contain entry");

    }

    @Test //We supply default value for constrains on creation
    public void createCompetitionWithConstraintsHavingAnEmptyStringReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete).constraints(List.of(""));

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should be empty");
        assertEquals(0, response.getErrors().size(), "Errors should contain entry");

    }

    @Test // incorrect strings will be ignored and default values will be set
    public void createCompetitionWithConstraintsHavingIncorrectStringReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete).constraints(List.of("incorrect_string"));

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should be empty");
        assertEquals(0, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //fixme - enable after implementation
    public void createCompetitionWithRewardsObjectSizeGreaterThan100ReturnErrorTest() throws ApiException {
        List<CreateRewardRequest> givenRewards = IntStream.range(0, 101)
                .mapToObj(i -> new CreateRewardRequest())
                .collect(Collectors.toList());
        final var createRequest = loadData.getCreateRequest(productIdsToDelete).rewards(givenRewards);

        final var response = $(api.createCompetitions(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }


    @Test
    @Order(5)
    public void updateCompetitionWithoutIdReturnErrorTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(null);

        Thread.sleep(5000);

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(6)
    public void updateCompetitionWithoutIncorrectIdReturnErrorTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id("incorrect_id");

        Thread.sleep(5000);

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }


    @Test
    @Disabled //fixme - enable after partial updates are implemented
    public void updateCompetitionWithoutCompetitionTypeReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .competitionType(null);

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Disabled //fixme - enable after implementation
    public void updateCompetitionWithoutNumberOfRoundsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .numberOfRounds(null);

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }


    @Test
    @Disabled //fixme - enable after implementation
    public void updateCompetitionWithoutNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .name(null);

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    public void updateCompetitionWithIncorrectNumberOfRoundsNotBetween1and20ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .numberOfRounds(-1);

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }


    @Test
    public void updateCompetitionWithIncorrectNameLengthGreaterThan15000ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .name("x".repeat(15001));

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    public void updateCompetitionWithIncorrectDescriptionLengthGreaterThan100000ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .description("x".repeat(100001));

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    public void updateCompetitionWithIncorrectTermsAndConditionsLengthGreaterThan100000ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .termsAndConditions("x".repeat(100001));

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    public void updateCompetitionWithIncorrectMaxNumberOfEntrants0ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .maxNumberOfEntrants(0);

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    public void updateCompetitionWithIncorrectMaxNumberOfEntrantsNegativeReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .maxNumberOfEntrants(-1);

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    public void updateCompetitionWithIncorrectMaxNumberOfEntrantsSameAsMinimumNumberOfEntrantsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .maxNumberOfEntrants(1)
                .minNumberOfEntrants(1);

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    public void updateCompetitionWithIncorrectMaxNumberOfEntrantsLowerThanMinimumNumberOfEntrantsReturnErrorTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .maxNumberOfEntrants(1)
                .minNumberOfEntrants(2);

        Thread.sleep(5000);

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    @Disabled //fixme - enable after implementation
    public void updateCompetitionWithoutMinimumNumberOfEntrantsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .minNumberOfEntrants(null);

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    public void updateCompetitionWithIncorrectMinNumberOfEntrants0ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .minNumberOfEntrants(-1);

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    public void updateCompetitionWithIncorrectMinNumberOfEntrantsNegativeReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .minNumberOfEntrants(-1);

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    @Disabled //fixme - enable after partial updates are implemented
    public void updateCompetitionWithoutRuleSetsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id);
//                .ruleSets(null);

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Disabled //fixme - enable after partial updates are implemented
    public void updateCompetitionWithEmptyRuleSetsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id);
//                .ruleSets(new ArrayList<>());

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Disabled //fixme - enable after partial updates are implemented
    public void updateCompetitionWithoutScheduledStartDateReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .scheduledStartDate(null);

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Disabled //fixme - enable after partial updates are implemented
    public void updateCompetitionWithoutScheduledEndDateReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .scheduledEndDate(null);

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    public void updateCompetitionWithScheduledStartDateAfterScheduledEndDateReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .scheduledStartDate(DateUtil.nowPlusDays(2))
                .scheduledEndDate(DateUtil.now());

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Disabled //fixme - enable after implementation
    public void updateCompetitionWithoutConstraintsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .constraints(null);

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Disabled //fixme - enable after implementation
    public void updateCompetitionWithConstraintsHavingAnEmptyStringReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .constraints(List.of(""));

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test // system will ignore incorrect string or typos
    public void updateCompetitionWithConstraintsHavingIncorrectStringReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .constraints(List.of("incorrect_string"));

        final var response = $(api.updateCompetitions(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should be empty");
        assertEquals(0, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    @Order(30)
    public void updateCompetitionRemoveConstraintReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        var responseAfterCreate = $(api.getCompetitions( List.of(id), 1, 0));

        assertNotNull(responseAfterCreate);
        assertNotNull(responseAfterCreate.getResults());
        assertNotNull(responseAfterCreate.getErrors());
        assertTrue(responseAfterCreate.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, responseAfterCreate.getResults().size(), "Should has single result");
        String givenDescription = UUID.randomUUID().toString();

        var updateConstraint = new ArrayList<String>();
        updateConstraint.add("optinRequiredForEntrants");

        final var given = new UpdateCompetitionRequest().id(id);
                given.getConstraints().remove("optinRequiredForEntrants");

        ModelApiResponse updated = $(api.updateCompetitions(given));

        assertNotNull(updated);
        assertNotNull(updated.getResults());
        assertNotNull(updated.getErrors());
        assertEquals(1, updated.getResults().size(), "Should contain updated entity");
        assertNotNull(updated.getResults().get(0).getId(), "Created entity should has id");

        String updatedId = updated.getResults().get(0).getId();


        List<String> ids = List.of(updatedId);
        Integer limit = 1;
        Integer skip = 0;

        var response = $(api.getCompetitions(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(responseAfterCreate.getResults().get(0).getConstraints().size()-1, response.getResults().get(0).getConstraints().size(), "Should have 1 less constraint from the created request");

        var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");

        idsToDelete.add(id);

    }
    @Test
    @Order(2)
    public void createCompetitionsWithTagsAndCustomFieldsReturnOkTest() throws ApiException, InterruptedException {

        final var createRequest = loadData.getCreateRequest(productIdsToDelete).tags(List.of(tagKey))
                .customFields(Map.of(customFieldKey, List.of(1)));
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();
        int limit = 1;
        int skip = 0;

        Thread.sleep(5000);

        var response = $(api.getCompetitions(List.of(id), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");
        assertNotNull(response.getResults().get(0).getCustomFields());
        assertNotNull(response.getResults().get(0).getTags());
        assertEquals(1,response.getResults().get(0).getCustomFields().size());
        assertEquals(1,response.getResults().get(0).getTags().size());

        idsToDelete.add(id);
    }
    @Test
    public void updateCompetitionsWithTagsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(productIdsToDelete);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var givenDescription = UUID.randomUUID().toString();

        final var given = new UpdateCompetitionRequest()
                .id(id)
                .description(givenDescription)
                .tags(List.of(tagKey))
                ;

        final var updated = $(api.updateCompetitions(given));

        assertNotNull(updated);
        assertNotNull(updated.getResults());
        assertNotNull(updated.getErrors());
        assertEquals(1, updated.getResults().size(), "Should contain updated entity");
        assertNotNull(updated.getResults().get(0).getId(), "Created entity should has id");

        final var updatedId = updated.getResults().get(0).getId();


        final var ids = List.of(updatedId);
        final var limit = 1;
        final var skip = 0;

        final var response = $(api.getCompetitions(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getCompetitionType(), item.getCompetitionType(), "Found Competition Type should be equal to created previously");
        assertEquals(givenDescription, item.getDescription(), "Found Description should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertNotNull(item.getTags());
        assertEquals(1,item.getTags().size());

        idsToDelete.add(id);
    }



}
