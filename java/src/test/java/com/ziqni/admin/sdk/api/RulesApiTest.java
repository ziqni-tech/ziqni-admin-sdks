/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.admin.sdk.api;

import com.ziqni.admin.sdk.data.LoadRulesData;
import com.ziqni.admin.sdk.model.QueryMultiple;
import com.ziqni.admin.sdk.model.UpdateRuleRequest;
import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
import com.ziqni.admin.sdk.configuration.AdminApiClientConfigBuilder;
import com.ziqni.admin.sdk.ApiException;
import com.ziqni.admin.sdk.model.ModelApiResponse;
import com.ziqni.admin.sdk.model.QueryRequest;
import org.junit.jupiter.api.Test;
import tests.utils.CompleteableFutureTestWrapper;

import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;


/**
 * API tests for RulesApi
 */

public class RulesApiTest implements CompleteableFutureTestWrapper {

    private final RulesApiWs api;
    private final LoadRulesData loadRulesData;
    private final String ruleId;

    public RulesApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory(AdminApiClientConfigBuilder.build());
        this.api = ApiClientFactoryUtil.factory.getRulesApi();
        this.loadRulesData = new LoadRulesData();
        this.ruleId = "7jtR3IABnUjVA_XnyZuB";

    }

    /**
     *
     * Returns a list of either Achievement, Competition or Contest rules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRulesByRuleScopeTest() throws ApiException {
        String ruleScope = "contest";
        var response = $(api.getRuleSchemas(ruleScope));

        assert response != null;
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertTrue(response.getResults().size() > 0, "Should have more than zero results");
    }

    /**
     *
     * Validates either Achievement, Competition or Contest Rules.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateRulesByRuleScopeTest() throws ApiException {
        UpdateRuleRequest updateRuleRequest = new UpdateRuleRequest();
        updateRuleRequest.setId(ruleId);
        updateRuleRequest.setRules(loadRulesData.getRules().get(0));

        ModelApiResponse response = $(api.validateRules(List.of(updateRuleRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getResults().size(), "Should have single result");
    }

    @Test
    public void getRulesTest() throws ApiException {
        final var limit = 1;
        final var skip = 0;

        //Put the id of an existing rules
        final var response = $(api.getRules(List.of(ruleId),limit,skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

    }

    @Test
    public void getRulesByQueryTest() throws ApiException {
        final var limit = 1;
        final var skip = 0;


        final var givenQuery = new QueryRequest()
                .addMustItem(new QueryMultiple().queryField("entityId").queryValues(List.of("7DtR3IABnUjVA_XnyZt8")));
//                .addMustItem(new QueryMultiple().queryField("entityType").queryValues(List.of("Competition")));

        //Put the id of an existing rules
        final var response = api.getRulesByQuery(givenQuery).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

    }


    @Test
    public void updateRulesTest() throws ApiException {
        UpdateRuleRequest updateRuleRequest = new UpdateRuleRequest();
        updateRuleRequest.setId(ruleId);
        updateRuleRequest.setRules(loadRulesData.getRules().get(0));

        ModelApiResponse response = $(api.updateRules(List.of(updateRuleRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getResults().size(), "Should have single result");
    }

    @Test
    public void deleteRulesByQueryTest() throws ApiException {
        final var givenQuery = new QueryRequest()
                .addMustItem(new QueryMultiple().queryField("id").queryValues(Collections.singletonList(ruleId)));

        //Put the id of an existing rule
        final var response = $(api.deleteRulesByQuery(givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

    }

}
