/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.admin.sdk.api;

import com.ziqni.admin.sdk.data.LoadCustomFieldsData;
import com.ziqni.admin.sdk.data.LoadLanguagesData;
import com.ziqni.admin.sdk.data.LoadMetadata;
import com.ziqni.admin.sdk.data.LoadTagsData;
import com.ziqni.admin.sdk.model.*;
import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
import com.ziqni.admin.sdk.configuration.AdminApiClientConfigBuilder;
import com.ziqni.admin.sdk.ApiException;
import com.ziqni.admin.sdk.model.*;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertTrue;


/**
 * API tests for LanguagesApi
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class LanguagesApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private static final Logger logger = LoggerFactory.getLogger(LanguagesApiTest.class);

    private final LanguagesApiWs api;
    private final LoadLanguagesData loadData;
    private final LoadTagsData loadTagsData;
    private final LoadCustomFieldsData loadCustomFieldsData;

    private String tagKey;
    private String customFieldKey;

    private List<String> idsToDelete = new ArrayList<>();
    private final List<String> tagIdsToDelete = new ArrayList<>();
    private final List<String> customFieldIdsToDelete = new ArrayList<>();

    public LanguagesApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory(AdminApiClientConfigBuilder.build());
        this.api = ApiClientFactoryUtil.factory.getLanguagesApi();
        this.loadData = new LoadLanguagesData();
        this.loadCustomFieldsData = new LoadCustomFieldsData();
        this.loadTagsData = new LoadTagsData();
    }

    @BeforeAll
    public void setUp() {
        try {
        tagKey = loadTagsData.getModel();
        customFieldKey = loadCustomFieldsData.getModel(customFieldIdsToDelete, AppliesTo.LANGUAGE);
        tagIdsToDelete.add(tagKey);
        }catch (ApiException e){
            logger.error("error", e.getCause());        }
    }

    @AfterAll
    public void cleanUp() throws ApiException {
        try{
            Thread.sleep(5000);
            loadData.deleteTestData(idsToDelete);
           loadTagsData.deleteTestData(tagIdsToDelete);
            loadCustomFieldsData.deleteTestData(customFieldIdsToDelete);
        }catch (ApiException | InterruptedException e){
            logger.error("error", e.getCause());        }

    }

    @Test
    @Order(1)
    public void createLanguageReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest("mdf");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createLanguages(createRequestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        idsToDelete.add(response.getResults().get(0).getId());
    }

    @Test
    @Order(2)
    public void createLanguageWithTagsAndCustomFieldsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest("fit")
                .tags(List.of(tagKey))
                .customFields(Map.of(customFieldKey, List.of(1)));

        ModelApiResponse createResponse =loadData.createTestData(List.of(createRequest));
        final var id = createResponse.getResults().get(0).getId();
        int limit = 1;
        int skip = 0;

        Thread.sleep(5000);

        var response = api.getLanguages(List.of(id), limit, skip).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");
        assertNotNull(response.getResults().get(0).getCustomFields());
        assertNotNull(response.getResults().get(0).getTags());
        assertEquals(1,response.getResults().get(0).getCustomFields().size());
        assertEquals(1,response.getResults().get(0).getTags().size());

       idsToDelete.add(id);
    }
    @Test
    @Order(2)
    public void updateLanguageWithTagsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest("anp");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var id = createResponse.getResults().get(0).getId();
        final var key = createResponse.getResults().get(0).getExternalReference();
        Thread.sleep(5000);
        //GIVEN
        final HashMap<String,String> givenMetadata = new HashMap<>();
        givenMetadata.put(UUID.randomUUID().toString(),UUID.randomUUID().toString());

        UpdateLanguageRequest given = new UpdateLanguageRequest()
                .id(id)
                .tags(List.of("mcx"));

        //WHEN
        ModelApiResponse updateResponse = $(api.updateLanguages(List.of(given)));
        assertNotNull(updateResponse);
        assertNotNull(updateResponse.getResults());
        assertNotNull(updateResponse.getErrors());
        assertEquals(1, updateResponse.getResults().size(), "Should contain updated entity");
        assertNotNull(updateResponse.getResults().get(0).getId(), "Created entity should has id");


        Thread.sleep(5000);
        Integer limit = 1;
        Integer skip = 0;
        var response = api.getLanguages(List.of(id), limit, skip).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");
        assertNotNull(response.getResults().get(0).getCustomFields());
        assertNotNull(response.getResults().get(0).getTags());
        assertEquals(1,response.getResults().get(0).getTags().size());


        idsToDelete.add(id);
    }

    @Test
    @Order(2)
    public void getLanguageSingleIdReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest("csb");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var id = createResponse.getResults().get(0).getId();
        final var key = createResponse.getResults().get(0).getExternalReference();

        List<String> ids = List.of(id);
        Integer limit = 1;
        Integer skip = 0;
        LanguageResponse response = $(api.getLanguages(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        Language item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(key, item.getKey(), "Found key should be equal to created previously");
        Assertions.assertNull(item.getTags(), "Found tags should be null");
        Assertions.assertNull(item.getMetadata(), "Found metadata should be null");
        Assertions.assertNull(item.getCustomFields(), "Found custom fields should be null");

        idsToDelete.add(id);
    }

    @Test
    @Order(3)
    public void getLanguageByQueryWithSingleIdReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest("den");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        QueryRequest givenQuery = new QueryRequest()
                .addShouldItem(new QueryMultiple().queryField("id").queryValues(List.of(id)))
                .shouldMatch(1);

        LanguageResponse response = $(api.getLanguagesByQuery(givenQuery));

        if(response.getMeta().getResultCount() == 0) {
            Thread.sleep(5000);
            response = $(api.getLanguagesByQuery(givenQuery));
        }

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

        idsToDelete.add(id);
    }
    @Test
    @Order(3)
    public void getLanguageByQueryWithSingleIdWithTotalRecordsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest("kmb");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        QueryRequest givenQuery = new QueryRequest()
                .addShouldItem(new QueryMultiple().queryField("id").queryValues(List.of(id)))
                .shouldMatch(1);

        LanguageResponse response = $(api.getLanguagesByQuery(givenQuery));

        if(response.getMeta().getResultCount() == 0) {
            Thread.sleep(5000);
            response = $(api.getLanguagesByQuery(givenQuery));
        }

        assertNotNull(response);;
        assertNotNull(response.getMeta());
        assertEquals(1,response.getMeta().getTotalRecords());

        idsToDelete.add(id);
    }
    @Test
    @Order(4)
    public void updateLanguageValidRequestReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest("ebu");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var id = createResponse.getResults().get(0).getId();
        final var key = createResponse.getResults().get(0).getExternalReference();

        //GIVEN
        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put(UUID.randomUUID().toString(),UUID.randomUUID().toString());

        UpdateLanguageRequest given = new UpdateLanguageRequest()
                .id(id)
                .metadata(givenMetadata);

        //WHEN
        ModelApiResponse response = $(api.updateLanguages(List.of(given)));

        //THAN
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain updated entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        String updatedId = response.getResults().get(0).getId();


        List<String> ids = List.of(updatedId);
        Integer limit = 1;
        Integer skip = 0;
        LanguageResponse updatedResponse = $(api.getLanguages(ids, limit, skip));

        assertNotNull(updatedResponse);
        assertNotNull(updatedResponse.getResults());
        assertEquals(1, updatedResponse.getResults().size(), "Should contain entity");

        Language item = updatedResponse.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(key, item.getKey(), "Found key should be equal to created previously");

        idsToDelete.add(id);
    }

    @Test
    @Order(5)
    @Disabled // fixme - enable after custom fields are implemented
    public void updateLanguageWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest("ebu");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateLanguageRequest given = new UpdateLanguageRequest()
                .id(id)
                .customFields(Map.of("",""));

        ModelApiResponse response = $(api.updateLanguages(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(6)
    @Disabled // fixme - enable after custom fields are implemented
    public void updateLanguageWithCustomFieldsLimitMoreThan50ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest("ebu");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var id = createResponse.getResults().get(0).getId();

        Map<String,Object> customFields = IntStream.range(0, 51)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        UpdateLanguageRequest given = new UpdateLanguageRequest()
                .id(id)
                .customFields(customFields);

        ModelApiResponse response = $(api.updateLanguages(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(7)
    @Disabled // fixme - enable after tags are implemented
    public void updateLanguagesWithIncorrectTagsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest("ebu");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateLanguageRequest given = new UpdateLanguageRequest()
                .id(id)
                .tags(List.of(""));

        ModelApiResponse response = $(api.updateLanguages(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(8)
    @Disabled // fixme - enable after tags are implemented
    public void updateLanguagesWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest("ebu");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var id = createResponse.getResults().get(0).getId();

        List<String> tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        UpdateLanguageRequest given = new UpdateLanguageRequest()
                .id(id)
                .tags(tags);

        ModelApiResponse response = $(api.updateLanguages(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(9)
    @Disabled // fixme - enable after metadata are implemented
    public void updateLanguagesWithEmptyMetadataObjectReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest("ebu");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();

        UpdateLanguageRequest given = new UpdateLanguageRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateLanguages(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(10)
    @Disabled // fixme - enable after metadata are implemented
    public void updateLanguagesWithMetadataKeyLengthMoreThan100CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest("ebu");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();
               givenMetadata.put("a".repeat(101),UUID.randomUUID().toString());

        UpdateLanguageRequest given = new UpdateLanguageRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateLanguages(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(11)
    @Disabled // fixme - enable after metadata are implemented
    public void updateLanguagesWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest("ebu");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put("#@)G?$0" + UUID.randomUUID().toString(),UUID.randomUUID().toString());

        UpdateLanguageRequest given = new UpdateLanguageRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateLanguages(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(12)
    @Disabled // fixme - enable after metadata are implemented
    public void updateLanguagesWithMetadataValueLengthMoreThan200CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest("ebu");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();
               givenMetadata.put(UUID.randomUUID().toString(),"a".repeat(201));

        UpdateLanguageRequest given = new UpdateLanguageRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateLanguages(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(14)
    @Disabled // fixme - enable after metadata are implemented
    public void updateLanguagesWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest("ebu");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var id = createResponse.getResults().get(0).getId();

        Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        UpdateLanguageRequest given = new UpdateLanguageRequest()
                .id(id)
                .metadata(givenMetas);

        ModelApiResponse response = $(api.updateLanguages(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(15)
    public void deleteLanguagesSingleIdReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest("elx");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var id = createResponse.getResults().get(0).getId();

        List<String> givenIds = List.of(id);

        Thread.sleep(5000);

        ModelApiResponse response = $(api.deleteLanguages(givenIds));

        if(response.getMeta().getResultCount() == 0) {
            Thread.sleep(5000);
            response = $(api.deleteLanguages(givenIds));
        }

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");
    }

    @Test
    @Order(16)
    public void deleteLanguagesWithIncorrectIdReturnErrorTest() throws ApiException {

        List<String> givenIds = List.of("some_incorrect_id_for_delete");

        ModelApiResponse response = $(api.deleteLanguages(givenIds));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createLanguagesWithoutKeyReturnErrorTest() throws ApiException {

        final var createRequest = loadData.getCreateRequest(null);
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createLanguages(createRequestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled // fixme - enable after custom fields are implemented
    public void createLanguageWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest("elx").customFields(Map.of("",""));
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createLanguages(createRequestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled // fixme - enable after custom fields are implemented
    public void createLanguageWithCustomFieldsLimitMoreThan50ReturnErrorTest() throws ApiException {

        Map<String,Object> customFields = IntStream.range(0, 51)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        final var createRequest = loadData.getCreateRequest("elx").customFields(customFields);
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createLanguages(createRequestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled // fixme - enable after custom fields are implemented
    public void createLanguagesWithDuplicatedCustomFieldsReturnErrorTest() throws ApiException {
        String givenKey = UUID.randomUUID().toString();

        final var createRequest = loadData.getCreateRequest("elx").customFields(Map.of(givenKey, givenKey, givenKey, givenKey));
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createLanguages(createRequestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled // fixme - enable after custom fields are implemented
    public void createLanguagesWithCustomFieldContainsWhitespacesReturnErrorTest() throws ApiException {
        String givenKey = " sf " + UUID.randomUUID().toString();
        final var createRequest = loadData.getCreateRequest("elx").customFields(Map.of(givenKey,givenKey));
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createLanguages(createRequestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled // fixme - enable after tags are implemented
    public void createLanguagesWithIncorrectTagsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest("elx").tags(List.of(""));
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createLanguages(createRequestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled // fixme - enable after tags are implemented
    public void createLanguagesWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {

        List<String> tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        final var createRequest = loadData.getCreateRequest("elx").tags(tags);
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createLanguages(createRequestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled // fixme - enable after metadata are implemented
    public void createLanguagesWithEmptyMetadataObjectReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();

        final var createRequest = loadData.getCreateRequest("elx").metadata(givenMetadata);
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createLanguages(createRequestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled // fixme - enable after metadata are implemented
    public void createLanguagesWithMetadataKeyLengthMoreThan100CharsReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();
               givenMetadata.put("a".repeat(101),UUID.randomUUID().toString());

        final var createRequest = loadData.getCreateRequest("elx").metadata(givenMetadata);
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createLanguages(createRequestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled // fixme - enable after metadata are implemented
    public void createLanguagesWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put("#@)G?$0" + UUID.randomUUID().toString(),UUID.randomUUID().toString());

        final var createRequest = loadData.getCreateRequest("elx").metadata(givenMetadata);
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createLanguages(createRequestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled // fixme - enable after metadata are implemented
    public void createLanguagesWithMetadataValueLengthMoreThan200CharsReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();
               givenMetadata.put(UUID.randomUUID().toString(),"a".repeat(201));

        final var createRequest = loadData.getCreateRequest("elx").metadata(givenMetadata);
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createLanguages(createRequestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void getLanguagesNoArgumentsReturnEmptyTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest("chk");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var id = createResponse.getResults().get(0).getId();

        List<String> ids = Collections.emptyList();
        Integer limit = 0;
        Integer skip = 0;
        LanguageResponse response = $(api.getLanguages(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getResults().isEmpty(), "Should have no result");
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        idsToDelete.add(id);
    }

    @Test
    public void getLanguagesNoIdsWithLimitReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest("nog");
        final var createRequest1 = loadData.getCreateRequest("dyu");
        final ModelApiResponse createResponse = loadData.createTestData(List.of(createRequest, createRequest1));
        final var ids = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        Thread.sleep(5000);

        Integer limit = 2;
        Integer skip = 0;
        LanguageResponse response = $(api.getLanguages(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        assertEquals(response.getResults().size(), 2, "Result count should match limit");

        idsToDelete.addAll(ids);
    }

    @Test
    public void getLanguagesMultipleIdsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest("ccp");
        final var createRequest1 = loadData.getCreateRequest("cgg");
        final ModelApiResponse createResponse = loadData.createTestData(List.of(createRequest, createRequest1));
        final var ids = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());


        Thread.sleep(5000);

        Integer limit = ids.size();
        Integer skip = 0;
        LanguageResponse response = $(api.getLanguages(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(ids.size(), response.getResults().size(), "Should have single result");

        List<String> foundIds = response.getResults()
                .stream()
                .map(Language::getId)
                .collect(Collectors.toList());

        assertTrue(foundIds.containsAll(ids), "Found id should be equal to requested");

        idsToDelete.addAll(ids);
    }

    @Test
    public void getLanguagesMultipleIdsOneMalformedReturnOkTest() throws ApiException {

        Integer givenLimit = 3;

        final var createRequestList = loadData.getCreateRequestAsList(givenLimit,"cad");
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var ids = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        idsToDelete.add(ids.get(0));
        ids.add("not_existed_id");

        Integer limit = ids.size();
        Integer skip = 0;
        LanguageResponse response = $(api.getLanguages(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertFalse(response.getErrors().isEmpty(), "Should not have errors");
        assertEquals(1, response.getErrors().size(), "Should have single error");

    }

    @Test
    public void getLanguagesMultipleIdsOneBlankReturnErrorTest() throws ApiException {

        Integer givenLimit = 3;

        final var createRequestList = loadData.getCreateRequestAsList(givenLimit,"car");
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var ids = createResponse
                .getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList());

        idsToDelete.add(ids.get(0));
        ids.add("");

        Integer limit = ids.size();
        Integer skip = 0;
        LanguageResponse response = $(api.getLanguages(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getErrors().size(), "Should have single result");

    }

    @Test
    public void getLanguagesIdWithWhitespaceBetweenReturnErrorTest() throws ApiException {

        final var createRequest = loadData.getCreateRequest("cay");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestList);
        final var givenIdsWithSpaceBetween = createResponse
                .getResults().stream()
                .limit(1)
                .map(Result::getId)
                .map(id -> id.substring(0, id.length() / 2).concat(" ").concat(id.substring(id.length() / 2)))
                .collect(Collectors.toList());

        Integer limit = givenIdsWithSpaceBetween.size();
        Integer skip = 0;
        LanguageResponse response = $(api.getLanguages(givenIdsWithSpaceBetween, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have error");
        assertEquals(givenIdsWithSpaceBetween.size(), response.getErrors().size(), "Should have single error");
        assertTrue(response.getResults().isEmpty(), "Should not return result");

        idsToDelete.add(createResponse.getResults().get(0).getId());
    }

    @Test
    public void deleteLanguagesByQueryTest() throws ApiException, InterruptedException {

        final var createRequest = loadData.getCreateRequest("cay");
        final var createRequestList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestList);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        QueryRequest body = new QueryRequest()
                .addShouldItem(new QueryMultiple()
                        .queryField("id")
                        .queryValues(List.of(id)))
                .shouldMatch(1);

        ModelApiResponse deleteResponse = $(api.deleteLanguagesByQuery( body));

        assertNotNull(deleteResponse);
        assertNotNull(deleteResponse.getResults());
        assertNotNull(deleteResponse.getErrors());
        assertEquals(1, deleteResponse.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, deleteResponse.getErrors().size(), "Errors should be empty");
    }


}
