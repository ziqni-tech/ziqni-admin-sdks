/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ziqni.admin.sdk.api;

import com.ziqni.admin.sdk.data.*;
import com.ziqni.admin.sdk.model.*;
import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
import com.ziqni.admin.sdk.ZiqniAdminApiFactory;
import com.ziqni.admin.sdk.ApiException;
import com.ziqni.admin.sdk.data.*;
import com.ziqni.admin.sdk.model.*;

import org.apache.commons.fileupload.disk.DiskFileItem;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import java.io.File;
import java.net.URISyntaxException;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.*;


/**
 * API tests for FilesApi
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class FilesApiTest implements tests.utils.CompleteableFutureTestWrapper{
    private static final Logger logger = LoggerFactory.getLogger(CompetitionsApiTest.class);

    private final FileObjectsApiWs api;
    private final LoadFileObjectsData loadData;
    private final LoadRepositoriesData loadRepositoriesData;
    private final LoadTagsData loadTagsData;
    private final LoadCustomFieldsData loadCustomFieldsData;
    private String tagId;
    private String customFieldKey;

    private List<String> idsToDelete = new ArrayList<>();
    private List<String> repositoryIdsToDelete = new ArrayList<>();
    private final List<String> tagIdsToDelete = new ArrayList<>();
    private final List<String> customFieldIdsToDelete = new ArrayList<>();

    private String repositoryId;
    private String repositoryName;

    private String testImageName = "test-upload-image.png";
    private File imageFile = null;

    public FilesApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory();
        this.api = ZiqniAdminApiFactory.getFileObjectsApi();
        this.loadData = new LoadFileObjectsData();
        this.loadRepositoriesData = new LoadRepositoriesData();
        this.loadCustomFieldsData = new LoadCustomFieldsData();
        this.loadTagsData = new LoadTagsData();
        // the stream holding the file content
        var resource = getClass().getClassLoader().getResource(testImageName);
        try {
            this.imageFile = new File(resource.toURI());
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }

    @BeforeAll
    public void setUp() {
        try {
            final var createRequest = loadRepositoriesData.getCreateRequest();
            final var createRequestAsList = loadRepositoriesData.getCreateRequestAsList(createRequest);
            final ModelApiResponse createResponse = loadRepositoriesData.createTestData(createRequestAsList);
            this.repositoryId = createResponse.getResults().get(0).getId();
            repositoryIdsToDelete.add(this.repositoryId);

            Thread.sleep(5000);

            tagId = loadTagsData.getModel();
            customFieldKey = loadCustomFieldsData.getModel(customFieldIdsToDelete, AppliesTo.FILEOBJECT);
            tagIdsToDelete.add(tagId);
        }catch (ApiException | InterruptedException e){
            logger.error("error", e.getCause());
        }
    }

    @AfterAll
    public void cleanUp() {
        try{
            Thread.sleep(5000);
            loadData.deleteTestData(idsToDelete);
            loadRepositoriesData.deleteTestData(repositoryIdsToDelete);
            loadTagsData.deleteTestData(tagIdsToDelete);
            loadCustomFieldsData.deleteTestData(customFieldIdsToDelete);
        }catch (ApiException | InterruptedException e){
            logger.error("error", e.getCause());
        }
    }

    @Test
    @Order(1)
    public void createFileReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = api.createFileObjects(createRequestAsList).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        idsToDelete.add(response.getResults().get(0).getId());
    }

    @Test
    @Order(2)
    public void getFileSingleIdReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        List<String> ids = List.of(id);
        Integer limit = 1;
        Integer skip = 0;

        FileObjectsResponse response = api.getFileObjects( limit, skip, ids, null).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        idsToDelete.add(id);
    }

    @Test
    @Order(3)
    public void updateFileValidRequestReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        //GIVEN
        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put(UUID.randomUUID().toString(),UUID.randomUUID().toString());

        var given = new UpdateFileObjectRequest()
                .id(id)
                .mimeType("MimeType")
                .metadata(givenMetadata);

        //WHEN
        ModelApiResponse response = api.updateFileObjects(List.of(given)).join();

        //THAN
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain updated entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        String updatedId = response.getResults().get(0).getId();


        List<String> ids = List.of(updatedId);
        Integer limit = 1;
        Integer skip = 0;
        FileObjectsResponse itemResponse = $(api.getFileObjects( limit, skip, ids, null));

        assertNotNull(itemResponse);
        assertNotNull(itemResponse.getResults());
        assertEquals(1, itemResponse.getResults().size(), "Should contain entity");

        FileObject item = itemResponse.getResults().get(0);

        assertNotEquals(0, item.getSize(), "Found file size should be more than 0");

        idsToDelete.add(id);
    }

    @Test
    @Order(4)
    public void updateFileWithoutIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(null);

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(5)
    public void updateFileWithIncorrectIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id("incorrect_id");

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(6)
    @Disabled // fixme - enable after partial updates are implemented
    public void updateFileWithoutNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .name(null);

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(7)
    public void updateFileWithBlankNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .name("");

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(8)
    public void updateFileWithNameLongerThan100CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .name("x".repeat(101));

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(9)
    public void updateFileWithNotAllowedCharsOfNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .name("#@)G?$0");

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(10)
    public void updateFileWithWhiteSpacesInNameReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .mimeType("MimeType")
                .name("Test update name");

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should be empty");
        assertEquals(0, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(11)
    @Disabled // fixme - enable after partial updates are implemented
    public void updateFileWithoutRepositoryIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        var  given = new UpdateFileObjectRequest()
                .id(id)
                .repositoryId(null);

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(12)
    public void updateFileWithBlankRepositoryIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .repositoryId("");

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(13)
    public void updateFileWithIncorrectRepositoryIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .repositoryId("some_incorrect_id");

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(14)
    public void updateFileWithWhiteSpacesInRepositoryIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .repositoryId("some incorrect id");

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(15)
    @Disabled // fixme - enable after partial updates are implemented
    public void updateFileWithoutParentFolderPathReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .parentFolderPath(null);

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(16)
    public void updateFileWithBlankParentFolderPathReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .parentFolderPath("");

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(17)
    @Disabled // fixme - enable after partial updates are implemented
    public void updateFileWithoutMimeTypeReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .mimeType(null);

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(18)
    public void updateFileWithBlankMimeTypeReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .mimeType("");

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(19)
    @Disabled // fixme - enable after custom fields are implemented
    public void updateFileWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .customFields(Map.of("",""));

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(20)
    @Disabled // fixme - enable after custom fields are implemented
    public void updateFileWithCustomFieldsLimitMoreThan50ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        Map<String,Object> customFields = IntStream.range(0, 51)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .customFields(customFields);

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(21)
    @Disabled // fixme - enable after custom fields are implemented
    public void updateFileWithDuplicatedCustomFieldsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        String uuid = UUID.randomUUID().toString();

        Map<String,Object> customFields = IntStream.range(0, 3)
                .mapToObj(i -> uuid)
                .collect(Collectors.toMap(x->x,x->x));

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .customFields(customFields);

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(22)
    @Disabled // fixme - enable after tags are implemented
    public void updateFileWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        List<String> tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .tags(tags);

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(23)
    @Disabled // fixme - enable after tags are implemented
    public void updateFileWithDuplicatedTagsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        String uuid = UUID.randomUUID().toString();

        List<String> tags = IntStream.range(0, 3)
                .mapToObj(i -> uuid)
                .collect(Collectors.toList());

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .tags(tags);

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(24)
    @Disabled // fixme - enable after metadata are implemented
    public void updateFileWithEmptyMetadataObjectReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(25)
    @Disabled // fixme - enable after metadata are implemented
    public void updateFileWithMetadataKeyLengthMoreThan100CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();
               givenMetadata.put("a".repeat(101),UUID.randomUUID().toString());

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(26)
    @Disabled // fixme - enable after metadata are implemented
    public void updateFileWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put("#@)G?$0",UUID.randomUUID().toString());

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateFileObjects(List.of(given))
        );

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(27)
    @Disabled // fixme - enable after metadata are implemented
    public void updateFileWithMetadataValueLengthMoreThan100CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();
givenMetadata.put(UUID.randomUUID().toString(),"a".repeat(101));

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }


    @Test
    @Order(29)
    @Disabled // fixme - enable after metadata are implemented
    public void updateFileWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        UpdateFileObjectRequest given = new UpdateFileObjectRequest()
                .id(id)
                .metadata(givenMetas);

        ModelApiResponse response = $(api.updateFileObjects(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(30)
    @Disabled // fixme - enable after copy/upload/download are implemented
    public void copyFileByExistedIdReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        var given = new UpdateFileObjectRequest()
                .id(id)
                .mimeType("MimeType")
                .name("Copy of " + createRequest.getName());

        ModelApiResponse response = $(api.copyFileObjects(given, List.of(id)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertFalse(response.getResults().isEmpty(), "Should have result");
        assertTrue(response.getErrors().isEmpty(), "Should not return error");

        idsToDelete.add(id);
    }

    @Test
    @Order(31)
    public void deleteFileSingleIdReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        Thread.sleep(10000l);
        List<String> givenIds = List.of(id);

        ModelApiResponse response = $(api.deleteFileObjects( givenIds, true));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");
    }

    @Test
    public void deleteFileWithIncorrectIdReturnErrorTest() throws ApiException {

        List<String> givenIds = List.of("some_incorrect_id_for_delete");

        ModelApiResponse response = $(api.deleteFileObjects( givenIds, true));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createFileWithoutNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId).name(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createFileWithBlankNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId).name("");
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createFileWithNameLongerThan100CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId).name("x".repeat(101));
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createFileWithNotAllowedCharsOfNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId).name("#@)G?$0");
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createFileWithWhiteSpacesInNameReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId).name("test name with whitespaces");
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createFileWithoutRepositoryIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId).repositoryId(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createFileWithBlankRepositoryIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId).repositoryId("");
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createFileWithIncorrectRepositoryIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId).repositoryId("some_incorrect_id");
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createFileWithWhiteSpacesInRepositoryIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId).repositoryId("some incorrect id");
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createFileWithoutParentFolderPathReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId).parentFolderPath(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createFileWithBlankParentFolderPathReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId).parentFolderPath("");
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createFileWithoutMimeTypeReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId).mimeType(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createFileWithBlankMimeTypeReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId).mimeType("");
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled // fixme - enable after custom fields are implemented
    public void createFileWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId).customFields(Map.of("",""));
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled // fixme - enable after custom fields are implemented
    public void createFileWithCustomFieldsLimitMoreThan50ReturnErrorTest() throws ApiException {

        Map<String,Object> customFields = IntStream.range(0, 51)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        final var createRequest = loadData.getCreateRequest(repositoryId).customFields(customFields);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled // fixme - enable after custom fields are implemented
    public void createFileWithDuplicatedCustomFieldsReturnErrorTest() throws ApiException {
        String uuid = UUID.randomUUID().toString();

        Map<String,Object> customFields = IntStream.range(0, 3)
                .mapToObj(i -> uuid)
                .collect(Collectors.toMap(x->x,x->x));

        final var createRequest = loadData.getCreateRequest(repositoryId).customFields(customFields);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createFileWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {

        List<String> tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        final var createRequest = loadData.getCreateRequest(repositoryId).tags(tags);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled // fixme - enable after tags are implemented
    public void createFileWithDuplicatedTagsReturnErrorTest() throws ApiException {

        String uuid = UUID.randomUUID().toString();

        List<String> tags = IntStream.range(0, 3)
                .mapToObj(i -> uuid)
                .collect(Collectors.toList());

        final var createRequest = loadData.getCreateRequest(repositoryId).tags(tags);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled // fixme - enable after metadata are implemented
    public void createFileWithEmptyMetadataObjectReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();

        final var createRequest = loadData.getCreateRequest(repositoryId).metadata(givenMetadata);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled // fixme - enable after metadata are implemented
    public void createFileWithMetadataKeyLengthMoreThan100CharsReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();
               givenMetadata.put("a".repeat(101),UUID.randomUUID().toString());

        final var createRequest = loadData.getCreateRequest(repositoryId).metadata(givenMetadata);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled // fixme - enable after metadata are implemented
    public void createFileWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put("#@)G?$0",UUID.randomUUID().toString());

        final var createRequest = loadData.getCreateRequest(repositoryId).metadata(givenMetadata);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled // fixme - enable after metadata are implemented
    public void createFileWithMetadataValueLengthMoreThan100CharsReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();
givenMetadata.put(UUID.randomUUID().toString(),"a".repeat(101));

        final var createRequest = loadData.getCreateRequest(repositoryId).metadata(givenMetadata);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }


    @Test
    @Disabled // fixme - enable after metadata are implemented
    public void createFileWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {

        Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        final var createRequest = loadData.getCreateRequest(repositoryId).metadata(givenMetas);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest).get(0);

        ModelApiResponse response = $(api.createFileObjects(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void getFilesNoArgumentsReturnEmptyTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        List<String> ids = Collections.emptyList();
        Integer limit = 0;
        Integer skip = 0;
        FileObjectsResponse response = $(api.getFileObjects( limit, skip, ids, null));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getResults().isEmpty(), "Should have no result");
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        idsToDelete.add(id);
    }

    @Test
    public void getFilesNoIdsWithLimitReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        List<String> ids = Collections.emptyList();
        Integer limit = 3;
        Integer skip = 0;
        FileObjectsResponse response = $(api.getFileObjects( limit, skip, ids, null));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        assertEquals(response.getResults().size(), 3, "Result count should match limit");

        idsToDelete.add(id);
    }

    @Test
    public void getFilesMultipleIdsReturnOkTest() throws ApiException, InterruptedException {

        final var createRequestAsList = loadData.getCreateRequestAsList(1, repositoryId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
        assertEquals(1, createResponse.getResults().size());

        Thread.sleep(10000);
        final List<String> ids = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        Integer limit = ids.size();
        Integer skip = 0;
        FileObjectsResponse response = $(api.getFileObjects(limit, skip, ids, null));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(ids.size(), response.getResults().size(), "Should have single result");

        List<String> foundIds = response.getResults()
                .stream()
                .map(FileObject::getId)
                .collect(Collectors.toList());

        assertTrue(foundIds.containsAll(ids), "Found id should be equal to requested");

        idsToDelete.addAll(foundIds);
    }

    @Test
    public void getFilesSingleBlankIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(repositoryId);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        List<String> ids = List.of("");
        Integer limit = ids.size();
        Integer skip = 0;
        FileObjectsResponse response = $(api.getFileObjects( limit, skip, ids, null));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have an error");
        assertTrue(response.getResults().isEmpty(), "Should have no any result");

        idsToDelete.add(id);
    }

    @Test
    public void getFilesMultipleIdsOneMalformedReturnErrorTest() throws ApiException {

        Integer givenLimit = 3;

        final var createRequestAsList = loadData.getCreateRequestAsList(3, repositoryId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
        assertEquals(givenLimit, createResponse.getResults().size());

        final List<String> ids = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        idsToDelete.addAll(ids);
        ids.add("not_existed_id");

        Integer limit = ids.size();
        Integer skip = 0;
        FileObjectsResponse response = $(api.getFileObjects( limit, skip, ids, null));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have errors");
        assertEquals(1, response.getErrors().size(), "Should have single error");
        assertEquals(ids.size() - 1, response.getResults().size(), "Should have requested valid results");

        List<String> foundIds = response.getResults()
                .stream()
                .map(FileObject::getId)
                .collect(Collectors.toList());

        assertTrue(foundIds.containsAll(ids), "Found id should be equal to requested");
    }

    @Test
    public void getFilesMultipleIdsOneBlankReturnErrorTest() throws ApiException {

        Integer givenLimit = 3;

        final var createRequestAsList = loadData.getCreateRequestAsList(3, repositoryId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
        assertEquals(givenLimit, createResponse.getResults().size());

        final List<String> ids = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        idsToDelete.addAll(ids);
        ids.add("");

        Integer limit = ids.size();
        Integer skip = 0;
        FileObjectsResponse response = $(api.getFileObjects( limit, skip, ids, null));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getErrors().size(), "Should have single result");
        assertEquals(ids.size() - 1, response.getResults().size(), "Should have requested valid results");

        List<String> foundIds = response.getResults()
                .stream()
                .map(FileObject::getId)
                .collect(Collectors.toList());

        assertTrue(foundIds.containsAll(ids), "Found id should be equal to requested");
    }

    @Test
    public void getFilesWithIdWhitespaceReturnErrorTest() throws ApiException {

        final var createRequestAsList = loadData.getCreateRequestAsList(1, repositoryId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
        assertEquals(1, createResponse.getResults().size());

        final List<String> givenIdsWithLeadingSpace = createResponse
                .getResults()
                .stream()
                .limit(1)
                .map(Result::getId)
                .map(" "::concat)
                .collect(Collectors.toList());

        Integer limit = givenIdsWithLeadingSpace.size();
        Integer skip = 0;
        FileObjectsResponse response = $(api.getFileObjects( limit, skip, givenIdsWithLeadingSpace, null));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have error");
        assertEquals(givenIdsWithLeadingSpace.size(), response.getErrors().size(), "Should have single error");
        assertTrue(response.getResults().isEmpty(), "Should not return result");

        idsToDelete.addAll(createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList()));
    }

    @Test
    public void getFilesWithIdWhitespaceBetweenReturnErrorTest() throws ApiException {
        final var createRequestAsList = loadData.getCreateRequestAsList(1, repositoryId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
        assertEquals(1, createResponse.getResults().size());

        final List<String> givenIdsWithLeadingSpace = createResponse
                .getResults()
                .stream()
                .limit(1)
                .map(Result::getId)
                .map(id -> id.substring(0, id.length() / 2).concat(" ").concat(id.substring(id.length() / 2)))
                .collect(Collectors.toList());

        Integer limit = givenIdsWithLeadingSpace.size();
        Integer skip = 0;
        FileObjectsResponse response = $(api.getFileObjects( limit, skip, givenIdsWithLeadingSpace, null));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have error");
        assertEquals(givenIdsWithLeadingSpace.size(), response.getErrors().size(), "Should have single error");
        assertTrue(response.getResults().isEmpty(), "Should not return result");
    }


    @Test
    void uploadFileObjectWithArtefacts() throws ApiException {
        var f = new File("/home/rpatadia/Desktop/zq-downloads/image-2021-12-10-09-18-19-588.png");
        var d = new DiskFileItem("files", "application/octet-stream", true, "image-2021-12-10-09-18-19-588.png", 100000, f);
        var x = new CommonsMultipartFile(d);

//        var response = $(api.uploadFileObjects(Collections.emptyList(), "", List.of(x), repositoryId));
//        Assertions.assertTrue(Objects.nonNull(response));
//        Assertions.assertEquals(1, response.getMeta().getResultCount());
//        Assertions.assertEquals(0, response.getMeta().getErrorCount());
    }



    @Test
    public void deleteFileObjectsByQueryTest() throws ApiException, InterruptedException {

        final var createRequest = loadData.getCreateRequest(repositoryId);
        final ModelApiResponse createResponse = loadData.createTestData(List.of(createRequest));
        final String id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        QueryRequest body = new QueryRequest()
                .addMustItem(new QueryMultiple()
                        .queryField("id")
                        .queryValues(List.of(id)));

        ModelApiResponse deleteResponse = $(api.deleteFileObjectsByQuery(List.of(id), body));

        assertNotNull(deleteResponse);
        assertNotNull(deleteResponse.getResults());
        assertNotNull(deleteResponse.getErrors());
        assertEquals(1, deleteResponse.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, deleteResponse.getErrors().size(), "Errors should be empty");
    }
    @Test
    @Order(2)
    public void createFilesWithTagsAndCustomFieldsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(repositoryId).tags(List.of(tagId))
                .customFields(Map.of(customFieldKey, List.of(1)));

        ModelApiResponse createResponse = loadData.createTestData(List.of(createRequest));
        final var id = createResponse.getResults().get(0).getId();
        int limit = 1;
        int skip = 0;

        Thread.sleep(5000);

        var response = api.getFileObjects( limit, skip,List.of(id),null).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");
        assertNotNull(response.getResults().get(0).getCustomFields());
        assertNotNull(response.getResults().get(0).getTags());
        assertEquals(1,response.getResults().get(0).getCustomFields().size());
        assertEquals(1,response.getResults().get(0).getTags().size());

        idsToDelete.add(id);
    }


}
