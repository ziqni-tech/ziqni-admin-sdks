/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ziqni.admin.sdk.api;

import com.ziqni.admin.sdk.data.LoadCustomFieldsData;
import com.ziqni.admin.sdk.data.LoadMembersData;
import com.ziqni.admin.sdk.data.LoadMetadata;
import com.ziqni.admin.sdk.data.LoadTagsData;
import com.ziqni.admin.sdk.model.*;
import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
import com.ziqni.admin.sdk.ZiqniAdminApiFactory;
import com.ziqni.admin.sdk.ApiException;
import com.ziqni.admin.sdk.model.*;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for MembersApi
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class MembersApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private static final Logger logger = LoggerFactory.getLogger(CompetitionsApiTest.class);

    private final MembersApiWs api;
    private final LoadMembersData loadTestData;
    private final LoadTagsData loadTagsData;
    private final LoadCustomFieldsData loadCustomFieldsData;

    private String tagKey;
    private String customFieldKey;

    private final List<String> idsToDelete = new ArrayList<>();
    private final List<String> tagIdsToDelete = new ArrayList<>();
    private final List<String> customFieldIdsToDelete = new ArrayList<>();

    public MembersApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory();
        this.api = ZiqniAdminApiFactory.getMembersApi();
        this.loadTestData = new LoadMembersData();
        this.loadCustomFieldsData = new LoadCustomFieldsData();
        this.loadTagsData = new LoadTagsData();
    }


    @BeforeAll
    public void setUp() {
        try {
            tagKey = loadTagsData.getModel();
            customFieldKey = loadCustomFieldsData.getModel(customFieldIdsToDelete, AppliesTo.MEMBER);
            tagIdsToDelete.add(tagKey);
        } catch (ApiException e){
                logger.error("error", e.getCause());
            }
    }

    @AfterAll
    public void cleanUp() {
        try {
            Thread.sleep(5000);
            loadTestData.deleteTestData(idsToDelete);
            loadTagsData.deleteTestData(tagIdsToDelete);
            loadCustomFieldsData.deleteTestData(customFieldIdsToDelete);
        }catch (ApiException | InterruptedException e){
            logger.error("error", e.getCause());
        }
    }

    @Test
    @Order(1)
    public void createMembersTest() throws ApiException {
        final var given = loadTestData.getCreateRequest();
        final var createRequestAsList = loadTestData.getCreateRequestAsList(given);

//        final var response = api.createMembers(createRequestAsList);
        ModelApiResponse response = $(api.createMembers(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        idsToDelete.add(response.getResults().get(0).getId());

    }

    @Test
    @Order(2)
    public void createMemberWithTagsAndCustomFieldsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadTestData.getCreateRequest()
                .tags(List.of(tagKey))
                .customFields(Map.of(customFieldKey, List.of(1)));

        ModelApiResponse createResponse = $(api.createMembers(loadTestData.getCreateRequestAsList(createRequest)));

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        assertNotNull(createResponse.getErrors());
        assertEquals(1, createResponse.getResults().size(), "Should contain created entity");
        assertNotNull(createResponse.getResults().get(0).getId(), "Created entity should has id");

        final var id = createResponse.getResults().get(0).getId();
        int limit = 1;
        int skip = 0;

        Thread.sleep(5000);

        var response = $(api.getMembers(List.of(id), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");
        assertNotNull(response.getResults().get(0).getCustomFields());
        assertEquals(1,response.getResults().get(0).getCustomFields().size());
        assertNotNull(response.getResults().get(0).getTags());
        assertEquals(1,response.getResults().get(0).getTags().size());

        idsToDelete.add(id);
    }

    @Test
    @Order(4)
    public void updateMemberWithTagsReturnOkTest() throws ApiException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        //GIVEN

        final var given = new UpdateMemberRequest()
                .id(id)
                .tags(List.of(tagKey));


//        WHEN
        final var response = $(api.updateMembers(List.of(given)));

//        THAN
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain updated entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        final var updatedId = response.getResults().get(0).getId();

        final var ids = List.of(updatedId);
        final var limit = 1;
        final var skip = 0;
        final var updatedResponse = $(api.getMembers(ids, limit, skip));

        assertNotNull(updatedResponse);
        assertNotNull(updatedResponse.getResults());
        assertEquals(1, updatedResponse.getResults().size(), "Should contain entity");

        final var item = updatedResponse.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");

        assertNotNull(item.getTags());
        assertEquals(1,item.getTags().size());


        idsToDelete.add(id);
    }
    @Test
    @Order(2)
    public void getMemberSingleIdReturnOkTest() throws ApiException {
        final var request = loadTestData.getCreateRequest();
        final var createRequest = loadTestData.getCreateRequestAsList(request);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var ids = List.of(id);
        final var limit = 1;
        final var skip = 0;
        final var response = $(api.getMembers(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(request.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(request.getMemberRefId(), item.getMemberRefId(), "Found name should be equal to created previously");
        assertNotNull(item.getMetadata(), "Found metadata should not be null");

        idsToDelete.add(id);

    }

    @Test
    @Order(2)
    public void getMemberSingleMemberRefIdReturnOkTest() throws ApiException, InterruptedException {
        final var request = loadTestData.getCreateRequest();
        final var createRequest = loadTestData.getCreateRequestAsList(request);
        final var createResponse = loadTestData.createTestData(createRequest);
        Thread.sleep(5000);
        final var id = createResponse.getResults().get(0).getId();

        final var ids = List.of(id);
        final var limit = 1;
        final var skip = 0;
        final var result = $(api.getMembers(ids,limit,skip ));
        final var memberRefId = result.getResults().get(0).getMemberRefId();

        final var response=$(api.getMembersByRefId(Collections.singletonList(memberRefId),limit,skip));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(request.getMemberRefId(),  response.getResults().get(0).getMemberRefId());

        idsToDelete.add(id);

    }
    @Test
    @Order(3)
    public void getMemberByQueryWithSingleIdReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        final var givenQuery = new QueryRequest()
                .addShouldItem(new QueryMultiple().queryField("id").queryValues(List.of(id)))
                .shouldMatch(1);

        final var response = $(api.getMembersByQuery(givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

        idsToDelete.add(id);
    }

    @Test
    @Order(4)
    public void updateMemberValidRequestReturnOkTest() throws ApiException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        //GIVEN
        final var key = UUID.randomUUID().toString();
        final var givenMetadata = Map.of(key,UUID.randomUUID().toString());

        final var given = new UpdateMemberRequest()
                .id(id)
                .timeZoneOffset("3")
                .teamMembers(List.of("1"))
                .metadata(givenMetadata);


//        WHEN
        final var response = $(api.updateMembers(List.of(given)));

//        THAN
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain updated entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        final var updatedId = response.getResults().get(0).getId();

        final var ids = List.of(updatedId);
        final var limit = 1;
        final var skip = 0;
        final var updatedResponse = $(api.getMembers(ids, limit, skip));

        assertNotNull(updatedResponse);
        assertNotNull(updatedResponse.getResults());
        assertEquals(1, updatedResponse.getResults().size(), "Should contain entity");

        final var item = updatedResponse.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");

        assertNotNull(item.getMetadata(), "Found metadata should exist");
        assertTrue(item.getMetadata().containsKey(key));

        idsToDelete.add(id);
    }

    @Test
    @Order(5)
    public void updateMemberWithoutIdReturnErrorTest() throws ApiException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateMemberRequest()
                .id(null);

        final var response = $(api.updateMembers(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(6)
    public void updateMemberWithIncorrectIdIdReturnErrorTest() throws ApiException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateMemberRequest()
                .id("SomeIncorrectId");

        final var response = $(api.updateMembers(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(7)
    @Disabled //fixme - enable after partial updates are implemented
    public void updateMemberWithoutNameReturnErrorTest() throws ApiException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateMemberRequest()
                .id(id)
                .name(null);

        final var response = $(api.updateMembers(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(8)
    public void updateMembersWithNameLongerThan100CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateMemberRequest()
                .id(id)
                .name("x".repeat(101));

        final var response = $(api.updateMembers(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(9)
    @Disabled //fixme - enable after partial updates are implemented
    public void updateMemberWithoutMemberTypeReturnErrorTest() throws ApiException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateMemberRequest()
                .id(id)
                .memberType(null);

        final var response = $(api.updateMembers(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(10)
    @Disabled //FixMe - enable after custom fields are implemented
    public void updateMemberWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateMemberRequest()
                .id(id)
                .customFields(Map.of("",""));

        final var response = $(api.updateMembers(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(11)
    @Disabled //FixMe - enable after custom fields are implemented
    public void updateMemberWithCustomFieldsLimitMoreThan50ReturnErrorTest() throws ApiException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final Map<String,Object> customFields = IntStream.range(0, 51)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        final var given = new UpdateMemberRequest()
                .id(id)
                .customFields(customFields);

        final var response = $(api.updateMembers(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(12)
    @Disabled //FixMe - enable after tags are implemented
    public void updateMembersWithIncorrectTagsReturnErrorTest() throws ApiException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateMemberRequest()
                .id(id)
                .tags(List.of(""));

        final var response = $(api.updateMembers(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(13)
    @Disabled //FixMe - enable after tags are implemented
    public void updateMembersWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        final var given = new UpdateMemberRequest()
                .id(id)
                .tags(tags);

        final var response = $(api.updateMembers(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(14)
    public void updateMembersWithEmptyMetadataObjectReturnErrorTest() throws ApiException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateMemberRequest()
                .id(id)
                .metadata(new HashMap<>());

        final var response = $(api.updateMembers(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(15)
    public void updateMembersWithMetadataKeyLengthMoreThan100CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var givenMetadata = Map.of("a".repeat(101),UUID.randomUUID().toString());

        final var given = new UpdateMemberRequest()
                .id(id)
                .metadata(givenMetadata);

        final var response = $(api.updateMembers(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(16)
    public void updateMembersWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var givenMetadata = Map.of("#@)G?$0" + UUID.randomUUID().toString(),UUID.randomUUID().toString());

        final var given = new UpdateMemberRequest()
                .id(id)
                .metadata(givenMetadata);

        final var response = $(api.updateMembers(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(17)
    public void updateMembersWithMetadataValueLengthMoreThan100CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var givenMetadata = Map.of(UUID.randomUUID().toString(),"a".repeat(101));

        final var given = new UpdateMemberRequest()
                .id(id)
                .metadata(givenMetadata);

        final var response =$( api.updateMembers(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }


    @Test
    @Order(19)
    public void updateMembersWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        final var given = new UpdateMemberRequest()
                .id(id)
                .metadata(givenMetas);

        final var response = $(api.updateMembers(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(20)
    public void deleteMembersSingleIdReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        final var givenIds = List.of(id);

        final var response = $(api.deleteMembers(givenIds));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");
    }

    @Test
    @Order(21)
    public void deleteMembersWithIncorrectIdReturnErrorTest() throws ApiException {

        final var givenIds = List.of("some_incorrect_id_for_delete");

        final var response = $(api.deleteMembers(givenIds));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getMeta().getResultCount(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createMemberWithoutNameReturnErrorTest() throws ApiException {

        final var createRequest = loadTestData
                .getCreateRequest()
                .name(null);
        final var createRequestAsList = loadTestData
                .getCreateRequestAsList(createRequest);

        final var response = $(api.createMembers(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createMembersWithNameLongerThan100CharsReturnErrorTest() throws ApiException {

        final var createRequest = loadTestData
                .getCreateRequest()
                .name("x".repeat(101));
        final var createRequestAsList = loadTestData.getCreateRequestAsList(createRequest);

        final var response = $(api.createMembers(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createMemberWithoutMemberRefIdReturnErrorTest() throws ApiException {

        final var createRequest = loadTestData
                .getCreateRequest()
                .memberRefId(null);
        final var createRequestAsList = loadTestData.getCreateRequestAsList(createRequest);

        final var response = $(api.createMembers(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createMemberWithMemberRefIdLengthMoreThan200ReturnErrorTest() throws ApiException {

        final var createRequest = loadTestData
                .getCreateRequest()
                .memberRefId("x".repeat(201));
        final var createRequestAsList = loadTestData.getCreateRequestAsList(createRequest);

        final var response = $(api.createMembers(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createMemberWithDuplicatedMemberRefIdReturnErrorTest() throws ApiException, InterruptedException {

        final var givenMemberRefId = UUID.randomUUID().toString();

        final var createRequest = loadTestData.getCreateRequest()
                .memberRefId(givenMemberRefId);
        final var createRequestAsList = loadTestData.getCreateRequestAsList(createRequest);
        final var createResponse = loadTestData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        final var response = $(api.createMembers(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    public void createMemberWithNotAllowedMemberRefIdSymbolsReturnErrorTest() throws ApiException {

        final var givenMemberRefId = "$%^" + UUID.randomUUID().toString();

        final var createRequest = loadTestData
                .getCreateRequest()
                .memberRefId(givenMemberRefId);
        final var createRequestAsList = loadTestData.getCreateRequestAsList(createRequest);

        final var response = $(api.createMembers(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createMemberWithWhitespacesInMemberRefIdSymbolsReturnErrorTest() throws ApiException {

        final var givenMemberRefId = "some id-" + UUID.randomUUID().toString();

        final var createRequest = loadTestData
                .getCreateRequest()
                .memberRefId(givenMemberRefId);
        final var createRequestAsList = loadTestData.getCreateRequestAsList(createRequest);

        final var response = $(api.createMembers(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled
    public void createMemberWithoutMemberTypeReturnErrorTest() throws ApiException {

        final var createRequest = loadTestData
                .getCreateRequest()
                .memberType(null);
        final var createRequestAsList = loadTestData.getCreateRequestAsList(createRequest);

        final var response = $(api.createMembers(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //FixMe - enable after custom fields are implemented
    public void createMemberWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {

        final var createRequest = loadTestData
                .getCreateRequest()
                .customFields(Map.of("",""));
        final var createRequestAsList = loadTestData.getCreateRequestAsList(createRequest);

        final var response = $(api.createMembers(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //FixMe - enable after custom fields are implemented
    public void createMemberWithCustomFieldsLimitMoreThan50ReturnErrorTest() throws ApiException {

        final Map<String,Object> customFields = IntStream.range(0, 51)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        final var createRequest = loadTestData
                .getCreateRequest()
                .customFields(customFields);
        final var createRequestAsList = loadTestData.getCreateRequestAsList(createRequest);

        final var response = $(api.createMembers(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //FixMe - enable after tags are implemented
    public void createMembersWithIncorrectTagsReturnErrorTest() throws ApiException {

        final var createRequest = loadTestData
                .getCreateRequest()
                .tags(List.of(""));
        final var createRequestAsList = loadTestData.getCreateRequestAsList(createRequest);

        final var response = $(api.createMembers(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //FixMe - enable after tags are implemented
    public void createMembersWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {

        final var tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        final var createRequest = loadTestData
                .getCreateRequest()
                .tags(tags);
        final var createRequestAsList = loadTestData.getCreateRequestAsList(createRequest);

        final var response = $(api.createMembers(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createMembersWithEmptyMetadataObjectReturnErrorTest() throws ApiException {

        final var createRequest = loadTestData
                .getCreateRequest()
                .metadata(new HashMap<>());
        final var createRequestAsList = loadTestData.getCreateRequestAsList(createRequest);

        final var response = $(api.createMembers(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createMembersWithMetadataKeyLengthMoreThan100CharsReturnErrorTest() throws ApiException {

        final var givenMetadata = Map.of("a".repeat(101),UUID.randomUUID().toString());

        final var createRequest = loadTestData
                .getCreateRequest()
                .metadata(givenMetadata);
        final var createRequestAsList = loadTestData.getCreateRequestAsList(createRequest);

        final var response = $(api.createMembers(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createMembersWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {

        final var givenMetadata = Map.of("#@)G?$0" + UUID.randomUUID().toString(),UUID.randomUUID().toString());

        final var createRequest = loadTestData
                .getCreateRequest()
                .metadata(givenMetadata);
        final var createRequestAsList = loadTestData.getCreateRequestAsList(createRequest);

        final var response = $(api.createMembers(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createMembersWithMetadataValueLengthMoreThan100CharsReturnErrorTest() throws ApiException {

        final var givenMetadata = Map.of(UUID.randomUUID().toString(),"a".repeat(101));

        final var createRequest = loadTestData
                .getCreateRequest()
                .metadata(givenMetadata);
        final var createRequestAsList = loadTestData.getCreateRequestAsList(createRequest);

        final var response = $(api.createMembers(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }


    @Test
    public void createMembersWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {

        final Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        final var createRequest = loadTestData
                .getCreateRequest()
                .metadata(givenMetas);
        final var createRequestAsList = loadTestData.getCreateRequestAsList(createRequest);

        final var response = $(api.createMembers(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void getMembersNoArgumentsReturnEmptyTest() throws ApiException {

        final var ids = new ArrayList<String>();
        final var limit = 0;
        final var skip = 0;
        final var response = $(api.getMembers(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getResults().isEmpty(), "Should have no result");
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
    }

    @Test
    public void getMembersNoIdsWithLimitReturnOkTest() throws ApiException {
        final var createRequest = loadTestData.getCreateRequestAsList(3);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var ids = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        final var limit = 3;
        final var skip = 0;
        final var response = $(api.getMembers(Collections.emptyList(), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        assertEquals(response.getResults().size(), limit, "Result count should match limit");

        idsToDelete.addAll(ids);
    }

    @Test
    public void getMembersMultipleIdsReturnOkTest() throws ApiException {

        final var createRequest = loadTestData.getCreateRequestAsList(3);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var ids = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        final var limit = ids.size();
        final var skip = 0;
        final var response = $(api.getMembers(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(ids.size(), response.getResults().size(), "Should have single result");

        final var foundIds = response.getResults()
                .stream()
                .map(Member::getId)
                .collect(Collectors.toList());

        assertTrue(foundIds.containsAll(ids), "Found id should be equal to requested");

        idsToDelete.addAll(ids);
    }

    @Test
    public void getMembersMultipleIdsOneMalformedReturnErrorTest() throws ApiException {

        final var givenLimit = 3;

        final var createRequest = loadTestData.getCreateRequestAsList(givenLimit);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var ids = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        idsToDelete.addAll(ids);
        ids.add("not_existed_id");

        final var limit = ids.size();
        final var skip = 0;
        final var response = $(api.getMembers(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertFalse(response.getErrors().isEmpty(), "Should have errors");
//        assertEquals(1, response.getErrors().size(), "Should have single error");
//        assertEquals(ids.size() - 1, response.getResults().size(), "Should have requested valid results");

    }

    @Test //FixME - when we start returning partial results
    public void getMembersMultipleIdsOneBlankReturnErrorTest() throws ApiException {

        final var givenLimit = 3;

        final var createRequest = loadTestData.getCreateRequestAsList(givenLimit);
        final var createResponse = loadTestData.createTestData(createRequest);

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
        assertEquals(givenLimit, createResponse.getResults().size());

        final var ids = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());
        ids.add("");

        final var limit = ids.size();
        final var skip = 0;
        final var response = $(api.getMembers(ids, ids.size(), skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getErrors().size(), "Should have single result");

        ids.remove("");
        idsToDelete.addAll(ids);

    }

    @Test
    public void getMembersIdWithWhitespaceBetweenReturnErrorTest() throws ApiException {

        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);

        assertNotNull(createResponse, "Test database should contain test data");
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");

        final var givenIdsWithSpaceBetween = createResponse.getResults()
                .stream()
                .map(Result::getId)
                .map(id -> id.substring(0, id.length() / 2).concat(" ").concat(id.substring(id.length() / 2)))
                .collect(Collectors.toList());

        final var limit = givenIdsWithSpaceBetween.size();
        final var skip = 0;
        final var response = $(api.getMembers(givenIdsWithSpaceBetween, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have error");

        idsToDelete.addAll(createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList()));
    }

    /**
     *
     *
     * Delete Members for a given identifier specified
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMembersTest() throws ApiException, InterruptedException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var ids = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        Thread.sleep(5000);

        final var response = $(api.deleteMembers(ids));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");
    }

    @Test
    public void deleteMembersByQueryTest() throws ApiException, InterruptedException {
        final var createRequest = loadTestData.getCreateRequestAsList(1);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        QueryRequest body = new QueryRequest()
                .addShouldItem(new QueryMultiple()
                        .queryField("id")
                        .queryValues(List.of(id)))
                .shouldMatch(1);

        ModelApiResponse deleteResponse = $(api.deleteMembersByQuery( body));

        assertNotNull(deleteResponse);
        assertNotNull(deleteResponse.getResults());
        assertNotNull(deleteResponse.getErrors());
        assertEquals(1, deleteResponse.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, deleteResponse.getErrors().size(), "Errors should be empty");
    }

    @Test
    @Disabled
    public void getAchievementsForMembersTest() throws ApiException {
        String id = null;
        String X_API_KEY = null;
        String achievementId = null;
        Integer limit = null;
        Integer skip = null;
        AchievementReducedResponse response =
                $(api.getAchievementsForMembers(id, achievementId, limit, skip));

        // TODO: test validations
    }

    @Test
    @Disabled
    public void getAwardsForMembersTest() throws ApiException {
        String id = null;
        String X_API_KEY = null;
        String awardId = null;
        Integer limit = null;
        Integer skip = null;
        MemberAwardResponse response = $(api.getAwardsForMembers(id, awardId, limit, skip));

        // TODO: test validations
    }

    @Test
    @Disabled
    public void getCompetitionsForMembersTest() throws ApiException {
        String id = null;
        String X_API_KEY = null;
        String competitionId = null;
        Integer limit = null;
        Integer skip = null;
        CompetitionReducedResponse response = $(api.getCompetitionsForMembers(id, competitionId, limit, skip));

        // TODO: test validations
    }

    @Test
    @Disabled
    public void getContestsForMembersTest() throws ApiException {
        String id = null;
        String X_API_KEY = null;
        String contestId = null;
        Integer limit = null;
        Integer skip = null;
        ContestReducedResponse response = $(api.getContestsForMembers(id, contestId, limit, skip));

        // TODO: test validations
    }

    @Test
    @Disabled
    public void getMessagesForMembersTest() throws ApiException {
        String id = null;
        String X_API_KEY = null;
        String messageId = null;
        Integer limit = null;
        Integer skip = null;
        MemberMessageResponse response = $(api.getMessagesForMembers(id, messageId, limit, skip));

        // TODO: test validations
    }

}
