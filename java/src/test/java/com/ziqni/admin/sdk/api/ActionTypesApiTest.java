/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.admin.sdk.api;

import com.ziqni.admin.sdk.data.LoadActionTypesData;
import com.ziqni.admin.sdk.data.LoadCustomFieldsData;
import com.ziqni.admin.sdk.data.LoadMetadata;
import com.ziqni.admin.sdk.data.LoadTagsData;
import com.ziqni.admin.sdk.model.*;
import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
import com.ziqni.admin.sdk.configuration.AdminApiClientConfigBuilder;
import com.ziqni.admin.sdk.ApiException;
import com.ziqni.admin.sdk.model.*;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.*;


/**
 * API tests for ActionTypesApi
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class ActionTypesApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private static final Logger logger = LoggerFactory.getLogger(ActionTypesApiTest.class);

    private ActionTypesApiWs api;

    private String tagKey;
    private String customFieldKey;

    private LoadActionTypesData loadTestData;
    private final LoadTagsData loadTagsData;
    private final LoadCustomFieldsData loadCustomFieldsData;
    private LoadMetadata loadMetadata;
    private List<String> idsToDelete = new ArrayList<>();
    List<String> tagIdsToDelete = new ArrayList<>();
    List<String> customFieldIdsToDelete = new ArrayList<>();


    public ActionTypesApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory(AdminApiClientConfigBuilder.build());

        this.api = ApiClientFactoryUtil.factory.getActionTypesApi();

        this.loadTestData = new LoadActionTypesData();
        this.loadMetadata = new LoadMetadata();
        this.loadCustomFieldsData = new LoadCustomFieldsData();
        this.loadTagsData = new LoadTagsData();
    }

    @BeforeAll
    public void setUp() throws ApiException, InterruptedException {
        Thread.sleep(5000);
        tagKey = loadTagsData.getModel();
        customFieldKey = loadCustomFieldsData.getModel(customFieldIdsToDelete, AppliesTo.ACTIONTYPE);

        tagIdsToDelete.add(tagKey);

    }

    @AfterAll
    public void cleanUp() {
        try {
            Thread.sleep(15000);
            loadTestData.deleteTestData(idsToDelete);
            loadTagsData.deleteTestData(tagIdsToDelete);
            loadCustomFieldsData.deleteTestData(customFieldIdsToDelete);
        } catch (ApiException | InterruptedException e) {
            logger.error("error", e.getCause());
        }
    }

    @Test
    @Order(1)
    public void createActionTypesReturnOkTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var response = $(api.createActionTypes(loadTestData.getCreateRequestAsList(request)));
        var id = response.getResults().get(0).getId();
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(id, "Created entity should has id");

        idsToDelete.add(id);
    }

    @Test
    @Order(2)
    public void getActionTypesSingleIdReturnOkTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var requestList = loadTestData.getCreateRequestAsList(request);
        var createResponse = loadTestData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        ActionTypeResponse response = $(api.getActionTypes( List.of(id) , 1, 0));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getResults().size(), "Should has single result");

        ActionType item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        Assertions.assertEquals(request.getName(), item.getName(), "Found name should be equal to created previously");
        Assertions.assertEquals(request.getKey(), item.getKey(), "Found key should be equal to created previously");
//        Assertions.assertEquals(request.getUnitOfMeasureType(), item.getUnitOfMeasureType(), "Found unit of measure are different ");
        Assertions.assertEquals(0, request.getAddConstraints().size(), "Found number of constraints should be equal " + request.getAddConstraints().size());
        Assertions.assertTrue(item.getConstraints().containsAll(request.getAddConstraints()), "Found constraints should contain all of" + request.getAddConstraints());
        Assertions.assertNull(item.getTags(), "Found tags should be null");
        Assertions.assertNotNull(item.getMetadata(), "Found metadata should not be null");
        Assertions.assertNotNull(item.getCustomFields(), "Found custom fields should not be null");
        Assertions.assertNull(item.getDescription(), "Found description should be null or blank");

        idsToDelete.add(id);
    }

    @Test
    @Order(3)
    public void getActionTypesByQueryWithSingleIdReturnOkTest() throws ApiException, InterruptedException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));

        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        QueryRequest givenQuery = new QueryRequest()
                .addShouldItem(new QueryMultiple().queryField("id").queryValues(List.of(id)))
                .shouldMatch(1);

        ActionTypeResponse response = $(api.getActionTypesByQuery( givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

        idsToDelete.add(id);
    }
    @Test
    @Order(23)
    public void getActionTypesByQueryWithMultipleFieldsReturnOkTest() throws ApiException, InterruptedException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));

        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        var givenQuery = new QueryMultipleFields()
                .queryFields(List.of("id","spaceName","name")).queryValue(id);

        QueryRequest qr = new QueryRequest().multiFields(List.of(givenQuery));

        var response = $(api.getActionTypesByQuery(qr));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

        idsToDelete.add(id);

    }

    @Test
    @Order(4)
    public void createActionTypesWithDuplicatedKeyReturnErrorTest() throws ApiException, InterruptedException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));

        Thread.sleep(5000);

        var duplicateKeyRequest = loadTestData.getCreateRequest();
        duplicateKeyRequest.setKey(request.getKey());

        ModelApiResponse response = $(api.createActionTypes(List.of(duplicateKeyRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(createResponse.getResults().get(0).getId());
    }

    @Test
    @Order(5)
    public void updateActionTypesValidRequestReturnOkTest() throws ApiException, InterruptedException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));

        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        //GIVEN
        String givenDescription = "Test_update_description";

        var givenMetadata = loadMetadata.getMetadata();

        UpdateActionTypeRequest given = new UpdateActionTypeRequest()
                .id(id)
                .description(givenDescription)
                .metadata(givenMetadata);

        //WHEN
        var response = $(api.updateActionTypes(List.of(given)));

        //THAN
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain updated entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        var actionTypeResponse = $(api.getActionTypes( List.of(id), 1, 0));

        assertNotNull(actionTypeResponse);
        assertNotNull(actionTypeResponse.getResults());
        assertEquals(1, actionTypeResponse.getResults().size(), "Should contain entity");

        ActionType actionType = actionTypeResponse.getResults().get(0);

        assertEquals(id, actionType.getId(), "Found id should be equal to requested");
        Assertions.assertEquals(request.getName(), actionType.getName(), "Found name should be equal to created previously");
        Assertions.assertEquals(request.getKey(), actionType.getKey(), "Found key should be equal to created previously");
//        Assertions.assertEquals(request.getUnitOfMeasureType(), actionType.getUnitOfMeasureType(), "Found unit of measure should be " + request.getUnitOfMeasureType());
        Assertions.assertEquals(0, request.getAddConstraints().size(), "Found number of constraints should be equal " + request.getAddConstraints().size());
        Assertions.assertTrue(actionType.getConstraints().containsAll(request.getAddConstraints()), "Found constraints should collect all of" + request.getAddConstraints());

//        assertNotNull(actionType.getTags(), "Found tags should exist");
//        List<String> actualTagIds = actionType.getTags()
//                .stream()
//                .map(TagsReduced::getId)
//                .collect(Collectors.toList());
//        assertTrue(givenTagIds.containsAll(actualTagIds), "Should contain all provided ids");
//
//        assertNotNull(actionType.getMetadata(), "Found metadata should exist");
//        assertTrue(actionType.getMetadata().contains(givenMetadata));
//
//        assertNotNull(actionType.getCustomFields(), "Found custom fields should exist");
//        List<String> actualCustomFieldIds = actionType.getCustomFields()
//                .stream()
//                .map(CustomFieldReduced::getId)
//                .collect(Collectors.toList());
//        assertTrue(givenCustomFieldIds.containsAll(actualCustomFieldIds), "Should contain all provided ids");

        assertNotNull(actionType.getDescription(), "Found description should be not blank");
        assertEquals(givenDescription, actionType.getDescription(), "Description should be the same as provided");

        idsToDelete.add(id);
    }

    @Test
    @Order(6)
    /**
     * Name is an optional field you can set it to null
     */
    public void updateActionTypesWithoutNameReturnOkTest() throws ApiException, InterruptedException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));

        var id = createResponse.getResults().get(0).getId();

        UpdateActionTypeRequest given = new UpdateActionTypeRequest()
                .id(id)
                .name(null);

        Thread.sleep(5000);

        ModelApiResponse response = $(api.updateActionTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should not be empty");
        assertEquals(0, response.getErrors().size(), "Errors should not contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(7)
    public void updateActionTypesWithoutIdReturnErrorTest() throws ApiException {

        UpdateActionTypeRequest given = new UpdateActionTypeRequest()
                .id(null)
                .name("Name update");

        ModelApiResponse response = $(api.updateActionTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Order(8)
    public void updateActionTypesWithIncorrectIdIdReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));
        var id = createResponse.getResults().get(0).getId();

        UpdateActionTypeRequest given = new UpdateActionTypeRequest()
                .id(id.toUpperCase())
                .name("name update");

        ModelApiResponse response = $(api.updateActionTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    /**
     * Server NPE - fixed
     */
    @Test
    @Order(9)
    public void updateActionTypesWithoutConstraintsReturnOkTest() throws ApiException, InterruptedException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));
        var id = createResponse.getResults().get(0).getId();

        UpdateActionTypeRequest given = new UpdateActionTypeRequest()
                .id(id)
                .addConstraints(null);

        Thread.sleep(5000);

        ModelApiResponse response = $(api.updateActionTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should not be empty");
        assertEquals(0, response.getErrors().size(), "Errors should not contain entry");
    }

    @Test
    @Order(10)
    public void updateActionTypesWithoutUnitsOfMeasureReturnErrorTest() throws ApiException, InterruptedException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));
        var id = createResponse.getResults().get(0).getId();

        UpdateActionTypeRequest given = new UpdateActionTypeRequest()
                .id(id)
                .unitOfMeasure(null);

        Thread.sleep(5000);

        ModelApiResponse response = $(api.updateActionTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should be empty");
        assertEquals(0, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(11)
    public void updateActionTypesWithNameLongerThan100CharsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));
        var id = createResponse.getResults().get(0).getId();

        UpdateActionTypeRequest given = new UpdateActionTypeRequest()
                .id(id)
                .name("x".repeat(101));

        ModelApiResponse response = $(api.updateActionTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(12)
    @Disabled //FixMe - Enable after custom fields have been implemented
    public void updateActionTypesWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));
        var id = createResponse.getResults().get(0).getId();

        UpdateActionTypeRequest given = new UpdateActionTypeRequest()
                .id(id)
                .customFields(Map.of("",""));

        ModelApiResponse response = $(api.updateActionTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(13)
    @Disabled //FixMe - Enable after custom fields have been implemented
    public void updateActionTypesWithCustomFieldsLimitMoreThan50ReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));
        var id = createResponse.getResults().get(0).getId();

        Map<String,Object> customFields = IntStream.range(0, 51)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        UpdateActionTypeRequest given = new UpdateActionTypeRequest()
                .id(id)
                .customFields(customFields);

        ModelApiResponse response = $(api.updateActionTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(14)
    @Disabled //FixMe - Enable after tags have been implemented
    public void updateActionTypesWithIncorrectTagsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));
        var id = createResponse.getResults().get(0).getId();

        UpdateActionTypeRequest given = new UpdateActionTypeRequest()
                .id(id)
                .tags(List.of(""));

        ModelApiResponse response = $(api.updateActionTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(15)
    @Disabled //FixMe - Enable after tags have been implemented
    public void updateActionTypesWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));
        var id = createResponse.getResults().get(0).getId();

        List<String> tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        UpdateActionTypeRequest given = new UpdateActionTypeRequest()
                .id(id)
                .tags(tags);

        ModelApiResponse response = $(api.updateActionTypes(List.of(given)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(16)
    public void updateActionTypesWithEmptyMetadataObjectReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));
        var id = createResponse.getResults().get(0).getId();

        UpdateActionTypeRequest given = new UpdateActionTypeRequest()
                .id(id)
                .metadata(loadMetadata.getEmptyMetadataAsList());

        ModelApiResponse response = $(api.updateActionTypes(List.of(given)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(17)
    public void updateActionTypesWithMetadataKeyLengthMoreThan100CharsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));
        var id = createResponse.getResults().get(0).getId();

        Map<String,String> givenMetadata = Map.of("a".repeat(101),"x");

        UpdateActionTypeRequest given = new UpdateActionTypeRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateActionTypes(List.of(given)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(18)
    public void updateActionTypesWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));
        var id = createResponse.getResults().get(0).getId();

        Map<String,String> givenMetadata = Map.of("#@)G?$0","x");

        UpdateActionTypeRequest given = new UpdateActionTypeRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateActionTypes(List.of(given)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }



    @Test
    @Order(19)
    public void updateActionTypesWithMetadataValueLengthMoreThan200CharsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));
        var id = createResponse.getResults().get(0).getId();

        Map<String,String> givenMetadata = Map.of("a".repeat(201),"x");

        UpdateActionTypeRequest given = new UpdateActionTypeRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateActionTypes(List.of(given)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }


    @Test
    @Order(21)
    public void updateActionTypesWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));
        var id = createResponse.getResults().get(0).getId();

        Map<String,String> metadataList = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(metadataList));

        UpdateActionTypeRequest given = new UpdateActionTypeRequest()
                .id(id)
                .metadata(metadataList);

        ModelApiResponse response = $(api.updateActionTypes(List.of(given)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(22)
    public void updateActionTypesWithDescriptionLengthMoreThan100CharsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));
        var id = createResponse.getResults().get(0).getId();

        UpdateActionTypeRequest given = new UpdateActionTypeRequest()
                .id(id)
                .description("a".repeat(501));

        ModelApiResponse response = $(api.updateActionTypes(List.of(given)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(23)
    //actionHelper is deleted if constraint system is false
    public void deleteActionTypesSingleIdReturnOkTest() throws ApiException, InterruptedException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));
        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        ModelApiResponse response = $(api.deleteActionTypes( List.of(id)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");
    }

    @Test
    @Order(24)
    public void deleteActionTypesWithIncorrectIdReturnErrorTest() throws ApiException {

        ModelApiResponse response = $(api.deleteActionTypes(
                List.of("some_incorrect_id_for_delete")
        ));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createActionTypesWithoutNameReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .name(null);

        ModelApiResponse response = $(api.createActionTypes(List.of(request)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createActionTypesWithoutKeyReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .key(null);

        ModelApiResponse response = $(api.createActionTypes(List.of(request)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createActionTypesWithKeyMoreThan100CharsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .key("A".repeat(101));

        ModelApiResponse response = $(api.createActionTypes(List.of(request)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createActionTypesWithKeyNotAllowedCharsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .key("#@)G?$0");

        ModelApiResponse response = $(api.createActionTypes(List.of(request)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //FixMe - Enable after custom fields have been implemented
    public void createActionTypesWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        request.setCustomFields(Map.of("",""));

        ModelApiResponse response = $(api.createActionTypes(List.of(request)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //FixMe - Enable after custom fields have been implemented
    public void createActionTypesWithCustomFieldsLimitMoreThan50ReturnErrorTest() throws ApiException {

        Map<String,Object> givenCustomFields = IntStream.range(0, 51)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        var request = loadTestData.getCreateRequest();
        request.setCustomFields(givenCustomFields);

        ModelApiResponse response = $(api.createActionTypes(List.of(request)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //FixMe - Enable after tags have been implemented
    public void createActionTypesWithIncorrectTagsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        request.setTags(List.of(""));

        ModelApiResponse response = $(api.createActionTypes(List.of(request)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //FixMe - Enable after tags have been implemented
    public void createActionTypesWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {

        List<String> tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        var request = loadTestData.getCreateRequest();
        request.setTags(tags);

        ModelApiResponse response = $(api.createActionTypes(List.of(request)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createActionTypesWithEmptyMetadataObjectReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .metadata(loadMetadata.getEmptyMetadataAsList());

        ModelApiResponse response = $(api.createActionTypes(List.of(request)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createActionTypesWithMetadataKeyLengthMoreThan100CharsReturnErrorTest() throws ApiException {

        var givenMetadata = Map.of("a".repeat(101),"x");

        var request = loadTestData.getCreateRequest()
                .metadata(givenMetadata);;

        ModelApiResponse response = $(api.createActionTypes(List.of(request)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createActionTypesWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {

        var givenMetadata = Map.of("#@)G?$0","x");

        var request = loadTestData.getCreateRequest()
                .metadata(givenMetadata);;

        ModelApiResponse response = $(api.createActionTypes(List.of(request)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createActionTypesWithMetadataValueLengthMoreThan200CharsReturnErrorTest() throws ApiException {

        var givenMetadata = Map.of("a".repeat(201), "x");

        var request = loadTestData.getCreateRequest()
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.createActionTypes(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createActionTypesWithDescriptionLengthMoreThan500CharsReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .description("a".repeat(501));

        ModelApiResponse response = $(api.createActionTypes(List.of(request)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }


    @Test
    public void createActionTypesWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {

        Map<String,String> metadataList = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(metadataList));

        var request = loadTestData.getCreateRequest()
                .metadata(metadataList);

        ModelApiResponse response = $(api.createActionTypes(List.of(request)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //This test is not valid since App Api cannot create a system level action type
    public void deleteActionTypesWithSystemConstraintReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest()
                .addConstraints(List.of("system"));

        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));
        var id = createResponse.getResults().get(0).getId();

        ModelApiResponse response = $(api.deleteActionTypes(List.of(id)));

        assertNotNull(response);
        
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getMeta().getResultCount(), "Results should be empty");
        assertEquals(0, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void getActionTypesNoArgumentsReturnEmptyTest() throws ApiException {
        List<String> id = Collections.emptyList();
        Integer limit = 0;
        Integer skip = 0;
        ActionTypeResponse response = $(api.getActionTypes( id, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getResults().isEmpty(), "Should have no result");
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
    }

    @Test
    public void getActionTypesNoIdsWithLimitReturnOkTest() throws ApiException {
        var numberOfItems = 2;
        var createResponse = loadTestData.createTestData(
                loadTestData.getCreateRequestAsList(numberOfItems)
        );
        List<String> ids = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        Integer limit = numberOfItems;
        Integer skip = 0;
        ActionTypeResponse response = $(api.getActionTypes( Collections.emptyList(), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(response.getResults().size(), numberOfItems, "Result count should match limit");

        idsToDelete.addAll(ids);
    }

    @Test
    public void getActionTypesMultipleIdsReturnOkTest() throws ApiException {
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(2));

        List<String> ids = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());
        Integer limit = ids.size();
        Integer skip = 0;
        ActionTypeResponse response = $(api.getActionTypes( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        Assertions.assertEquals(createResponse.getResults().size(), response.getResults().size(), "Should have single result");

        List<String> foundIds = response.getResults()
                .stream()
                .map(ActionType::getId)
                .collect(Collectors.toList());

        assertTrue(foundIds.containsAll(ids), "Found id should be equal to requested");

        idsToDelete.addAll(ids);
    }

    @Test
    public void getActionTypesMultipleIdsOneMalformedReturnErrorTest() throws ApiException {

        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(2));

        var givenIds = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        var nonExistingId = givenIds.get(0).toUpperCase();

        givenIds.add(nonExistingId);

        List<String> ids = List.copyOf(givenIds);
        Integer limit = ids.size();
        Integer skip = 0;
        ActionTypeResponse response = $(api.getActionTypes( ids, limit, skip));

        assertNotNull(response);
//        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
//        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have errors");
//        assertEquals(1, response.getErrors().size(), "Should have single error");
        Assertions.assertEquals(givenIds.size() - 1, response.getResults().size(), "Should have requested valid results");

        List<String> foundIds = response.getResults()
                .stream()
                .map(ActionType::getId)
                .collect(Collectors.toList());

        Assertions.assertTrue(givenIds.containsAll(foundIds), "Found id should be equal to requested");
        assertTrue(!foundIds.contains(nonExistingId), "Non existing Id found in response.");

        idsToDelete.addAll(givenIds);
    }

    @Test //FixME - when we start returning partial results
    public void getActionTypesMultipleIdsOneBlankReturnErrorTest() throws ApiException {

        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(2));

        var givenIds = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        givenIds.add("");
        Integer limit = givenIds.size();
        Integer skip = 0;
        ActionTypeResponse response = $(api.getActionTypes( givenIds, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
//        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getErrors().size(), "Should have single result");
//        assertEquals(givenIds.size() - 1, response.getResults().size(), "Should have requested valid results");
//
//        List<String> foundIds = response.getResults()
//                .stream()
//                .map(ActionType::getId)
//                .collect(Collectors.toList());
//
//        assertTrue(foundIds.containsAll(givenIds), "Found id should be equal to requested");

        givenIds.remove("");
        idsToDelete.addAll(givenIds);
    }

    @Test
    public void getActionTypesIdWithWhitespaceBetweenReturnErrorTest() throws ApiException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(List.of(request));
        var id = createResponse.getResults().get(0).getId();

        var idWithSpaces = id.substring(0, id.length() / 2).concat(" ").concat(id.substring(id.length() / 2));

        Integer limit = 1;
        Integer skip = 0;
        ActionTypeResponse response = $(api.getActionTypes( List.of(idWithSpaces), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have error");
        assertTrue(response.getResults().isEmpty(), "Should not return result");

        idsToDelete.add(id);
    }

    @Test
    public void deleteActionTypesByQueryTest() throws ApiException, InterruptedException {
        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(List.of(request));

        String givenId = createResponse.getResults().get(0).getId();
        assertNotNull(givenId, "Created entity should has id");

        Thread.sleep(5000);

        QueryRequest givenQuery = new QueryRequest()
                .addMustItem(new QueryMultiple().queryField("id").queryValues(List.of(givenId)));
        ModelApiResponse response = $(api.deleteActionTypesByQuery( givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");


    }

    @Test
    @Order(30)
    public void updateActionTypeRemoveConstraintReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadTestData.getCreateRequest();
        final var createRequestAsList = loadTestData.getCreateRequestAsList(createRequest);
        final var createResponse = loadTestData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        ActionTypeResponse responseAfterCreate = $(api.getActionTypes( List.of(id), 1, 0));

        assertNotNull(responseAfterCreate);
        assertNotNull(responseAfterCreate.getResults());
        assertNotNull(responseAfterCreate.getErrors());
        assertTrue(responseAfterCreate.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, responseAfterCreate.getResults().size(), "Should has single result");
        String givenDescription = UUID.randomUUID().toString();

        var updateConstraint = new ArrayList<String>();
        updateConstraint.add("system");

        UpdateActionTypeRequest given = new UpdateActionTypeRequest().id(id).description(givenDescription);
                given.setAddConstraints(updateConstraint);

        ModelApiResponse updated = $(api.updateActionTypes(List.of(given)));

        assertNotNull(updated);
        assertNotNull(updated.getResults());
        assertNotNull(updated.getErrors());
        assertEquals(1, updated.getResults().size(), "Should contain updated entity");
        assertNotNull(updated.getResults().get(0).getId(), "Created entity should has id");

        String updatedId = updated.getResults().get(0).getId();


        List<String> ids = List.of(updatedId);
        Integer limit = 1;
        Integer skip = 0;

        ActionTypeResponse response = $(api.getActionTypes(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        ActionType item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        Assertions.assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        Assertions.assertEquals(createRequest.getKey(), item.getKey(), "Found key should be equal to created previously");
//        Assertions.assertEquals(createRequest.getUnitOfMeasureType(), item.getUnitOfMeasureType(), "Found unit of measure should be equal to created previously");
        assertEquals(givenDescription, item.getDescription(), "Found description should be equal to created previously");

        idsToDelete.add(id);

    }

    @Test
    @Order(2)
    public void createActionTypeWithTagsAndCustomFieldsReturnOkTest() throws ApiException, InterruptedException {

        final var createRequest = loadTestData.getCreateRequest()
                .tags(List.of(tagKey))
                .customFields(Map.of(customFieldKey, "name"));

        ModelApiResponse createResponse =loadTestData.createTestData(List.of(createRequest));

        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);
        int limit = 1;
        int skip = 0;

        var response = $(api.getActionTypes(List.of(id), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");
        assertNotNull(response.getResults().get(0).getCustomFields());
        assertNotNull(response.getResults().get(0).getTags());
        assertEquals(1,response.getResults().get(0).getCustomFields().size());
        assertEquals(1,response.getResults().get(0).getTags().size());

        idsToDelete.add(id);
    }
    @Test
    @Order(5)
    public void updateActionTypeWithTagsReturnOkTest() throws ApiException, InterruptedException {

        var request = loadTestData.getCreateRequest();
        var createResponse = loadTestData.createTestData(loadTestData.getCreateRequestAsList(request));

        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        //GIVEN
        String givenDescription = "Test_update_description";


        UpdateActionTypeRequest given = new UpdateActionTypeRequest()
                .id(id)
                .description(givenDescription)
                .tags(List.of(tagKey));

        //WHEN
        var response = $(api.updateActionTypes(List.of(given)));

        //THAN
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain updated entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        var actionTypeResponse = $(api.getActionTypes( List.of(id), 1, 0));

        assertNotNull(actionTypeResponse);
        assertNotNull(actionTypeResponse.getResults());
        assertEquals(1, actionTypeResponse.getResults().size(), "Should contain entity");

        ActionType actionType = actionTypeResponse.getResults().get(0);

        assertEquals(id, actionType.getId(), "Found id should be equal to requested");
        Assertions.assertEquals(request.getName(), actionType.getName(), "Found name should be equal to created previously");
        Assertions.assertEquals(request.getKey(), actionType.getKey(), "Found key should be equal to created previously");
//        Assertions.assertEquals(request.getUnitOfMeasureType(), actionType.getUnitOfMeasureType(), "Found unit of measure should be " + request.getUnitOfMeasureType());
        Assertions.assertEquals(0, request.getAddConstraints().size(), "Found number of constraints should be equal " + request.getAddConstraints().size());
        Assertions.assertTrue(actionType.getConstraints().containsAll(request.getAddConstraints()), "Found constraints should collect all of" + request.getAddConstraints());

        assertNotNull(actionType.getDescription(), "Found description should be not blank");
        assertEquals(givenDescription, actionType.getDescription(), "Description should be the same as provided");
        assertNotNull(actionTypeResponse.getResults().get(0).getTags());
        assertEquals(1,actionTypeResponse.getResults().get(0).getTags().size());

        idsToDelete.add(id);
    }



}
