/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.admin.sdk.api;

import com.ziqni.admin.sdk.data.*;
import com.ziqni.admin.sdk.model.*;
import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
import com.ziqni.admin.sdk.configuration.AdminApiClientConfigBuilder;
import com.ziqni.admin.sdk.ApiException;
import com.ziqni.admin.sdk.model.*;
import com.ziqni.admin.sdk.data.*;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.*;


/**
 * API tests for ProductsApi
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class ProductsApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private static final Logger logger = LoggerFactory.getLogger(ProductsApiTest.class);

    private final ProductsApiWs api;
    private final LoadProductsData loadData;
    private final LoadActionTypesData loadActionTypesData;
    private final LoadTagsData loadTagsData;
    private final LoadCustomFieldsData loadCustomFieldsData;

    private String tagId;
    private String customFieldKey;

    private final List<String> idsToDelete = new ArrayList<>();
    private final List<String> actionTypesToDelete = new ArrayList<>();
    private final List<String> tagIdsToDelete = new ArrayList<>();
    private final List<String> customFieldIdsToDelete = new ArrayList<>();

    private String actionTypeId;

    public ProductsApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory(AdminApiClientConfigBuilder.build());
        this.api = ApiClientFactoryUtil.factory.getProductsApi();
        this.loadData = new LoadProductsData();
        this.loadActionTypesData = new LoadActionTypesData();
        this.loadCustomFieldsData = new LoadCustomFieldsData();
        this.loadTagsData = new LoadTagsData();
    }

    @BeforeAll
    public void setUp() {
        try {
            var actionTypeResponse = loadActionTypesData.createTestData(List.of(loadActionTypesData.getCreateRequest()));

            actionTypeId = actionTypeResponse.getResults().get(0).getId();
            actionTypesToDelete.add(actionTypeId);

            tagId = loadTagsData.getModel();
            customFieldKey = loadCustomFieldsData.getModel(customFieldIdsToDelete, AppliesTo.PRODUCT);
            tagIdsToDelete.add(tagId);
        } catch (ApiException e) {
            logger.error("error", e.getCause());
        }
    }

    @AfterAll
    public void cleanUp() {
        try {
            Thread.sleep(50000);
            loadData.deleteTestData(idsToDelete);
            loadActionTypesData.deleteTestData(actionTypesToDelete);
            loadTagsData.deleteTestData(tagIdsToDelete);
            loadCustomFieldsData.deleteTestData(customFieldIdsToDelete);
        }catch (ApiException | InterruptedException e){
            logger.error("error", e.getCause());
        }
    }


    @Test
    @Order(1)
    public void createProductReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(actionTypeId);
        ModelApiResponse response = $(api.createProducts(List.of(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        idsToDelete.add(response.getResults().get(0).getId());
    }

    @Test
    @Order(2)
    public void createProductWithTagsAndCustomFieldsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(actionTypeId)
                .tags(List.of(tagId))
                .customFields(Map.of(customFieldKey, List.of(1)));

        ModelApiResponse createResponse = $(api.createProducts(loadData.getCreateRequestAsList(createRequest)));

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        assertNotNull(createResponse.getErrors());
        assertEquals(1, createResponse.getResults().size(), "Should contain created entity");
        assertNotNull(createResponse.getResults().get(0).getId(), "Created entity should has id");

        final var id = createResponse.getResults().get(0).getId();
        int limit = 1;
        int skip = 0;

        Thread.sleep(5000);

        var response = $(api.getProducts(List.of(id), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");
        assertNotNull(response.getResults().get(0).getCustomFields());
        assertNotNull(response.getResults().get(0).getTags());
        assertEquals(1,response.getResults().get(0).getCustomFields().size());
        assertEquals(1,response.getResults().get(0).getTags().size());

        idsToDelete.add(id);
    }

    @Test
    @Order(2)
    public void createProductWithTagsAndCustomFieldsAndTranslationsReturnOkTest() throws ApiException, InterruptedException {
        TranslationEntry translationEntry = new TranslationEntry();
        translationEntry.setText("Given Pfunguro");
        translationEntry.setFieldName("name");
        Translation translation = new Translation();
        translation.setLanguageKey("en");
        translation.setTranslations(List.of(translationEntry));
        final var createRequest = loadData.getCreateRequest(actionTypeId)
                .tags(List.of(tagId))
                .customFields(Map.of(customFieldKey, List.of(1)))
                .translations(List.of(translation));

        ModelApiResponse createResponse = $(api.createProducts(loadData.getCreateRequestAsList(createRequest)));

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        assertNotNull(createResponse.getErrors());
        assertEquals(1, createResponse.getResults().size(), "Should contain created entity");
        assertNotNull(createResponse.getResults().get(0).getId(), "Created entity should has id");

        final var id = createResponse.getResults().get(0).getId();
        int limit = 1;
        int skip = 0;

        Thread.sleep(5000);

        var response = $(api.getProducts(List.of(id), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");
        assertNotNull(response.getResults().get(0).getCustomFields());
        assertNotNull(response.getResults().get(0).getTags());
        assertEquals(1,response.getResults().get(0).getCustomFields().size());
        assertEquals(1,response.getResults().get(0).getTags().size());

        idsToDelete.add(id);
    }

    @Test
    public void createProductWithIncorrectActionHelperIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest("wrong_actn_helper_id");
        ModelApiResponse response = $(api.createProducts(List.of(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getErrors().size(), "Should contain created entity");

    }

    @Test
    @Order(2)
    public void getProductSingleIdReturnOkTest() throws ApiException, InterruptedException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();
        List<String> ids = List.of(id);
        Integer limit = 1;
        Integer skip = 0;

        Thread.sleep(5000);

        ProductResponse response = $(api.getProducts( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        Product item = response.getResults().get(0);

        assertNotNull(item.getMetadata(), "Found metadata should be null");
        assertNotNull(item.getDescription(), "Found description should be null or blank");

//        Assertions.assertNull(item.getTags(), "Found tags should be null");
//        Assertions.assertNull(item.getCustomFields(), "Found custom fields should be null");

        idsToDelete.add(id);
    }

    @Test
    @Order(2)
    public void getProductByRefIdReturnOkTest() throws ApiException, InterruptedException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String refId = createResponse.getResults().get(0).getExternalReference();
        final String id = createResponse.getResults().get(0).getId();
        List<String> refIds = List.of(refId);
        Integer limit = 1;
        Integer skip = 0;

        Thread.sleep(5000);

        ProductResponse response = $(api.getProductsByRefId(refIds, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        Product item = response.getResults().get(0);

        assertNotNull(item.getMetadata(), "Found metadata should be null");
        assertNotNull(item.getDescription(), "Found description should be null or blank");

        idsToDelete.add(id);
    }

    @Test
    @Order(3)
    public void createProductWithDuplicatedProductRefIdReturnErrorTest() throws ApiException, InterruptedException {

        final var createRequest = loadData.getCreateRequest(actionTypeId);
        final var requestList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        ModelApiResponse response = $(api.createProducts(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    @Order(4)
    public void updateProductValidRequestReturnOkTest() throws ApiException {
        var request = loadData.getCreateRequest(actionTypeId);
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        //GIVEN
        String givenDescription = "Test_update_description";
        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put(UUID.randomUUID().toString(),UUID.randomUUID().toString());

        UpdateProductRequest given = new UpdateProductRequest()
                .id(id)
                .metadata(givenMetadata)
                .description(givenDescription);

        //WHEN
        ModelApiResponse response = $(api.updateProducts(List.of(given)));

        //THAN
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain updated entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        String updatedId = response.getResults().get(0).getId();


        List<String> ids = List.of(updatedId);
        Integer limit = 1;
        Integer skip = 0;
        ProductResponse itemResponse = $(api.getProducts( ids, limit, skip));

        assertNotNull(itemResponse);
        assertNotNull(itemResponse.getResults());
        assertEquals(1, itemResponse.getResults().size(), "Should contain entity");

        Product product = itemResponse.getResults().get(0);

        assertEquals(id, product.getId(), "Found id should be equal to requested");

//        assertNotNull(product.getMetadata(), "Found metadata should be null");
//        assertTrue(product.getMetadata().containsKey(givenMetadata.entrySet().f.getKey()));

        assertNotNull(product.getDescription(), "Found description should be not blank");
        assertEquals(givenDescription, product.getDescription(), "Description should be the same as provided");

        idsToDelete.add(id);
    }

    @Test
    @Order(5)
    public void updateProductWithoutIdReturnErrorTest() throws ApiException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateProductRequest given = new UpdateProductRequest()
                .id(null);

        ModelApiResponse response = $(api.updateProducts(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(6)
    public void updateProductWithoutIncorrectIdReturnErrorTest() throws ApiException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateProductRequest given = new UpdateProductRequest()
                .id("some_incorrect_id");

        ModelApiResponse response = $(api.updateProducts(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(7)
    @Disabled //fixme - enable after partial updates are implemented
    public void updateProductWithoutNameReturnErrorTest() throws ApiException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateProductRequest given = new UpdateProductRequest()
                .id(id)
                .name(null);

        ModelApiResponse response = $(api.updateProducts(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(8)
    public void updateProductWithoutNameLongerThan200CharsReturnErrorTest() throws ApiException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateProductRequest given = new UpdateProductRequest()
                .id(id)
                .name("x".repeat(201));

        ModelApiResponse response = $(api.updateProducts(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(9)
    @Disabled //fixme - enable after partial updates are implemented
    public void updateProductWithoutAdjustmentFactorReturnErrorTest() throws ApiException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateProductRequest given = new UpdateProductRequest()
                .id(id)
                .adjustmentFactor(null);

        ModelApiResponse response = $(api.updateProducts(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(10)
    @Disabled //FixMe - enable after custom fields are implemented
    public void updateProductWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateProductRequest given = new UpdateProductRequest()
                .id(id)
                .customFields(Map.of("",""));

        ModelApiResponse response = $(api.updateProducts(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(11)
    @Disabled //FixMe - enable after custom fields are implemented
    public void updateProductWithCustomFieldsLimitMoreThan50ReturnErrorTest() throws ApiException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        Map<String,Object> customFields = IntStream.range(0, 51)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        UpdateProductRequest given = new UpdateProductRequest()
                .id(id)
                .customFields(customFields);

        ModelApiResponse response = $(api.updateProducts(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(12)
    @Disabled //FixMe - enable after custom fields are implemented
    public void updateProductWithDuplicatedCustomFieldsReturnErrorTest() throws ApiException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        String uuid = UUID.randomUUID().toString();

        Map<String,Object> customFields = IntStream.range(0, 3)
                .mapToObj(i -> uuid)
                .collect(Collectors.toMap(x->x,x->x));

        UpdateProductRequest given = new UpdateProductRequest()
                .id(id)
                .customFields(customFields);

        ModelApiResponse response = $(api.updateProducts(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(13)
    @Disabled //FixMe - enable after tags are implemented
    public void updateProductWithIncorrectTagsReturnErrorTest() throws ApiException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateProductRequest given = new UpdateProductRequest()
                .id(id)
                .tags(List.of(""));

        ModelApiResponse response = $(api.updateProducts(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(14)
    @Disabled //FixMe - enable after tags are implemented
    public void updateProductWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        List<String> tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        UpdateProductRequest given = new UpdateProductRequest()
                .id(id)
                .tags(tags);

        ModelApiResponse response = $(api.updateProducts(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(15)
    @Disabled //FixMe - enable after tags are implemented
    public void updateProductWithDuplicatedTagsReturnErrorTest() throws ApiException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        String uuid = UUID.randomUUID().toString();

        List<String> tags = IntStream.range(0, 3)
                .mapToObj(i -> uuid)
                .collect(Collectors.toList());

        UpdateProductRequest given = new UpdateProductRequest()
                .id(id)
                .tags(tags);

        ModelApiResponse response = $(api.updateProducts(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(16)
    @Disabled
    //fixme will review later
    public void updateProductWithEmptyMetadataObjectReturnErrorTest() throws ApiException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = null;

        UpdateProductRequest given = new UpdateProductRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateProducts(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(17)
    public void updateProductWithMetadataKeyLengthMoreThan100CharsReturnErrorTest() throws ApiException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();
               givenMetadata.put("a".repeat(101),UUID.randomUUID().toString());

        UpdateProductRequest given = new UpdateProductRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateProducts(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(18)
    public void updateProductWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put("#@)G?$0",UUID.randomUUID().toString());

        UpdateProductRequest given = new UpdateProductRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateProducts(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(19)
    public void updateProductWithMetadataValueLengthMoreThan100CharsReturnErrorTest() throws ApiException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();
givenMetadata.put(UUID.randomUUID().toString(),"a".repeat(101));

        UpdateProductRequest given = new UpdateProductRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateProducts(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }


    @Test
    @Order(21)
    public void updateProductWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {

        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        UpdateProductRequest given = new UpdateProductRequest()
                .id(id)
                .metadata(givenMetas);

        ModelApiResponse response = $(api.updateProducts(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(22)
    public void updateProductWithDescriptionLengthMoreThan1000CharsReturnErrorTest() throws ApiException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        UpdateProductRequest given = new UpdateProductRequest()
                .id(id)
                .description("a".repeat(1001));

        ModelApiResponse response = $(api.updateProducts(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(23)
    public void getProductsByQueryWithSingleIdReturnOkTest() throws ApiException, InterruptedException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        QueryRequest givenQuery = new QueryRequest()
                .addShouldItem(new QueryMultiple().queryField("id").queryValues(List.of(id)))
                .shouldMatch(1);

        ProductResponse response = $(api.getProductsByQuery( givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

        idsToDelete.add(id);

    }

    @Test
    @Order(23)
    public void getProductsByQueryWithMultipleFieldsReturnOkTest() throws ApiException, InterruptedException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        var givenQuery = new QueryMultipleFields()
                .queryFields(List.of("id","spaceName","name", "productRefId","description","actionTypeAdjustmentFactors", "metadata", "tags", "customFields")).queryValue(id);

        QueryRequest qr = new QueryRequest().multiFields(List.of(givenQuery));

        ProductResponse response = $(api.getProductsByQuery(qr));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

        idsToDelete.add(id);

    }

    @Test
    @Order(23)
    public void getProductsByQuerySortBySpaceNameReturnOkTest() throws ApiException, InterruptedException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        final QuerySortBy sortBy = new QuerySortBy()
                .queryField("spaceName")
                .order(SortOrder.ASC);

        QueryRequest qr = new QueryRequest()
                .sortBy(List.of(sortBy));

        ProductResponse response = $(api.getProductsByQuery(qr));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

        idsToDelete.add(id);

    }

    @Test
    @Order(24)
    public void deleteProductSingleIdReturnOkTest() throws ApiException, InterruptedException {
        final List<CreateProductRequest> createRequestAsList = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        List<String> givenIds = List.of(id);

        ModelApiResponse response = $(api.deleteProducts(givenIds));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");
    }

    @Test
    public void deleteProductWithIncorrectIdReturnErrorTest() throws ApiException {

        List<String> givenIds = List.of("some_incorrect_id_for_delete");

        ModelApiResponse response = $(api.deleteProducts( givenIds));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createProductWithoutNameReturnErrorTest() throws ApiException {

        final var createRequest = loadData
                .getCreateRequest(actionTypeId)
                .name(null);

        ModelApiResponse response = $(api.createProducts(List.of(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createProductWithoutNameLongerThan200CharsReturnErrorTest() throws ApiException {

        final var createRequest = loadData
                .getCreateRequest(actionTypeId)
                .name("x".repeat(201));

        ModelApiResponse response = $(api.createProducts(List.of(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createProductWithoutAdjustmentFactorReturnErrorTest() throws ApiException {

        final var createRequest = loadData
                .getCreateRequest(actionTypeId)
                .adjustmentFactor(null);

        ModelApiResponse response = $(api.createProducts(List.of(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //FixMe - enable after custom fields are implemented
    public void createProductWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {

        final var createRequest = loadData
                .getCreateRequest(actionTypeId)
                .customFields(Map.of("",""));

        ModelApiResponse response = $(api.createProducts(List.of(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //FixMe - enable after custom fields are implemented
    public void createProductWithCustomFieldsLimitMoreThan50ReturnErrorTest() throws ApiException {

        Map<String,Object> customFields = IntStream.range(0, 51)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        final var createRequest = loadData
                .getCreateRequest(actionTypeId)
                .customFields(customFields);

        ModelApiResponse response = $(api.createProducts(List.of(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //FixMe - enable after custom fields are implemented
    public void createProductWithDuplicatedCustomFieldsReturnErrorTest() throws ApiException {

        String uuid = UUID.randomUUID().toString();

        Map<String,Object> customFields = IntStream.range(0, 3)
                .mapToObj(i -> uuid)
                .collect(Collectors.toMap(x->x,x->x));

        final var createRequest = loadData
                .getCreateRequest(actionTypeId)
                .customFields(customFields);

        ModelApiResponse response = $(api.createProducts(List.of(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //FixMe - enable after metadata are implemented
    public void createProductWithIncorrectTagsReturnErrorTest() throws ApiException {

        final var createRequest = loadData
                .getCreateRequest(actionTypeId)
                .tags(List.of(""));

        ModelApiResponse response = $(api.createProducts(List.of(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //FixMe - enable after tags are implemented
    public void createProductWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {

        List<String> tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        final var createRequest = loadData
                .getCreateRequest(actionTypeId)
                .tags(tags);

        ModelApiResponse response = $(api.createProducts(List.of(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //FixMe - enable after tags are implemented
    public void createProductWithDuplicatedTagsReturnErrorTest() throws ApiException {

        String uuid = UUID.randomUUID().toString();

        List<String> tags = IntStream.range(0, 3)
                .mapToObj(i -> uuid)
                .collect(Collectors.toList());

        final var createRequest = loadData
                .getCreateRequest(actionTypeId)
                .tags(tags);

        ModelApiResponse response = $(api.createProducts(List.of(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createProductWithEmptyMetadataObjectReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();

        final var createRequest = loadData
                .getCreateRequest(actionTypeId)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.createProducts(List.of(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createProductWithMetadataKeyLengthMoreThan100CharsReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();
               givenMetadata.put("a".repeat(101),UUID.randomUUID().toString());

        final var createRequest = loadData
                .getCreateRequest(actionTypeId)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.createProducts(List.of(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createProductWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put("#@)G?$0",UUID.randomUUID().toString());

        final var createRequest = loadData
                .getCreateRequest(actionTypeId)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.createProducts(List.of(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createProductWithMetadataValueLengthMoreThan100CharsReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();
givenMetadata.put(UUID.randomUUID().toString(),"a".repeat(101));

        final var createRequest = loadData
                .getCreateRequest(actionTypeId)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.createProducts(List.of(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }


    @Test
    public void createProductWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {

        Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        final var createRequest = loadData
                .getCreateRequest(actionTypeId)
                .metadata(givenMetas);

        ModelApiResponse response = $(api.createProducts(List.of(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createProductWithDescriptionLengthMoreThan1000CharsReturnErrorTest() throws ApiException {

        final var createRequest = loadData
                .getCreateRequest(actionTypeId)
                .description("a".repeat(1001));

        ModelApiResponse response = $(api.createProducts(List.of(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void getProductNoArgumentsReturnEmptyTest() throws ApiException {

        List<String> id = Collections.emptyList();
        Integer limit = 0;
        Integer skip = 0;
        ProductResponse response = $(api.getProducts(id, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getResults().isEmpty(), "Should have no result");
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

    }

    @Test
    public void getProductNoIdsWithLimitReturnOkTest() throws ApiException {

        final var createRequest = loadData.getCreateRequestAsList(3, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequest);

        final List<String> ids = createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList());

        List<String> id = Collections.emptyList();
        Integer limit = 3;
        Integer skip = 0;
        ProductResponse response = $(api.getProducts(id, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        assertEquals(limit, response.getResults().size(), "Result count should match limit");

        idsToDelete.addAll(ids);
    }

    @Test
    public void getProductMultipleIdsReturnOkTest() throws ApiException {

        final var createRequest = loadData.getCreateRequestAsList(3, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequest);

        final List<String> ids = createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList());

        Integer limit = ids.size();
        Integer skip = 0;
        ProductResponse response = $(api.getProducts( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(ids.size(), response.getResults().size(), "Should have single result");

        List<String> foundIds = response.getResults()
                .stream()
                .map(Product::getId)
                .collect(Collectors.toList());

        assertTrue(foundIds.containsAll(ids), "Found id should be equal to requested");

        idsToDelete.addAll(ids);
    }

    @Test
    public void getProductMultipleIdsOneMalformedReturnErrorTest() throws ApiException {

        Integer givenLimit = 1;

        final var createRequest = loadData.getCreateRequestAsList(givenLimit, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequest);

        final List<String> ids = createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList());

        idsToDelete.addAll(ids);

        ids.add("not_existed_id");

        Integer limit = ids.size();
        Integer skip = 0;
        ProductResponse response = $(api.getProducts( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have errors");
        assertEquals(1, response.getErrors().size(), "Should have single error");

    }

    @Test
    public void getProductMultipleIdsOneBlankReturnErrorTest() throws ApiException {

        Integer givenLimit = 3;

        final var createRequest = loadData.getCreateRequestAsList(givenLimit, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequest);

        final List<String> ids = createResponse.getResults()
                .stream()
                .limit(givenLimit - 1)
                .map(Result::getId)
                .collect(Collectors.toList());

        ProductResponse response = $(api.getProducts( ids, givenLimit, 0));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(0, response.getErrors().size(), "Should have single result");

        idsToDelete.addAll(createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList()));
    }

    @Test
    public void getProductIdWithWhitespaceReturnErrorTest() throws ApiException {

        final var createRequest = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequest);

        final List<String> givenIdsWithLeadingSpace = createResponse.getResults()
                .stream()
                .limit(1)
                .map(Result::getId)
                .map(" "::concat)
                .collect(Collectors.toList());

        Integer limit = givenIdsWithLeadingSpace.size();
        Integer skip = 0;
        ProductResponse response = $(api.getProducts(givenIdsWithLeadingSpace, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have error");

        idsToDelete.addAll(createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList()));
    }

    @Test
    public void getProductIdWithWhitespaceBetweenReturnErrorTest() throws ApiException {

        final var createRequest = loadData.getCreateRequestAsList(1, actionTypeId);
        final ModelApiResponse createResponse = loadData.createTestData(createRequest);
        assertNotNull(createResponse, "Test database should contain test data");
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");

        final List<String> givenIdsWithSpaceBetween = createResponse.getResults().stream()
                .limit(1)
                .map(Result::getId)
                .map(id -> id.substring(0, id.length() / 2).concat(" ").concat(id.substring(id.length() / 2)))
                .collect(Collectors.toList());

        Integer limit = givenIdsWithSpaceBetween.size();
        Integer skip = 0;
        ProductResponse response = $(api.getProducts(givenIdsWithSpaceBetween, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have error");

        idsToDelete.addAll(createResponse.getResults().stream().map(Result::getId)
                .collect(Collectors.toList()));
    }

    @Test
    public void deleteProductsByQueryTest() throws ApiException, InterruptedException {
        TranslationEntry translationEntry = new TranslationEntry();
        translationEntry.setText("Given Pfunguro");
        translationEntry.setFieldName("name");
        Translation translation = new Translation();
        translation.setLanguageKey("en");
        translation.setTranslations(List.of(translationEntry));

        final var createRequestAsList = loadData.getCreateRequest( actionTypeId).translations(List.of(translation));
        final ModelApiResponse createResponse = loadData.createTestData(List.of(createRequestAsList));
        final String id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        QueryRequest body = new QueryRequest()
                .addShouldItem(new QueryMultiple()
                        .queryField("id")
                        .queryValues(List.of(id)))
                .shouldMatch(1);

        ModelApiResponse deleteResponse = $(api.deleteProductsByQuery( body));

        assertNotNull(deleteResponse);
        assertNotNull(deleteResponse.getResults());
        assertNotNull(deleteResponse.getErrors());
        assertEquals(1, deleteResponse.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, deleteResponse.getErrors().size(), "Errors should be empty");
    }

        @Test
        @Order(1)
        public void readDataFromCsvAndCreateProductsReturnOkTest() throws ApiException {
            var resource = getClass().getClassLoader().getResource("game_table.csv");

            List<ProductDetails> records = new ArrayList<>();
            try (BufferedReader br = new BufferedReader(new FileReader(resource.getFile()))) {
                String line;
                while ((line = br.readLine()) != null) {
                    String[] values = line.split(",");
                    var prodDet = Arrays.asList(values);
                    if (prodDet.size() == 4)
                        records.add(new ProductDetails(prodDet.get(0), prodDet.get(1), prodDet.get(2), prodDet.get(3)));
                }
            } catch (IOException e) {
                throw new RuntimeException(e);
            }

            records.stream().skip(0).forEach(record -> {
                final var createRequest = loadData.getCreateRequest(actionTypeId)
                        .name(record.getGameName())
                        .tags(List.of(record.getGroupName()));
                try {
                    var response = $(api.createProducts(List.of(createRequest)));
                    assertNotNull(response);
                    assertNotNull(response.getResults());
                    assertNotNull(response.getErrors());
                    assertEquals(1, response.getResults().size(), "Should contain created entity");
                    assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

                } catch (ApiException e) {
                    throw new RuntimeException(e);
                }
            });

        }

        static class ProductDetails {

            private final String gameId;
            private final String gameName;
            private final String groupName;
            private final String provider;

            public ProductDetails(String gameId, String gameName, String groupName, String provider) {
                this.gameId = gameId;
                this.gameName = gameName;
                this.groupName = groupName;
                this.provider = provider;
            }

            public String getGameId() {
                return gameId;
            }

            public String getGameName() {
                return gameName;
            }

            public String getGroupName() {
                return groupName;
            }

            public String getProvider() {
                return provider;
            }
        }
}
