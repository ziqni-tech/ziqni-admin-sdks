///*
// * Ziqni Application Services
// * Ziqni Application Services are used to manage and configure spaces.
// *
// * The version of the OpenAPI document: 1.0.0
// * Contact: support@ziqni.com
// *
// * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
// * https://openapi-generator.tech
// * Do not edit the class manually.
// */
//
//
//package com.ziqni.admin.sdk.api;
//
//import com.ziqni.admin.sdk.data.LoadConnectionsData;
//import com.ziqni.admin.sdk.data.LoadCustomFieldsData;
//import com.ziqni.admin.sdk.data.LoadTagsData;
//import com.ziqni.admin.sdk.data.LoadTransformerData;
//import com.ziqni.admin.sdk.model.*;
//import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
//import com.ziqni.admin.sdk.ZiqniAdminApiFactory;
//import com.ziqni.admin.sdk.ApiException;
//
//import java.util.ArrayList;
//import java.util.Collections;
//
//import com.ziqni.admin.sdk.model.*;
//import org.junit.jupiter.api.*;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
//
//
//import java.util.List;
//import java.util.Map;
//import java.util.stream.Collectors;
//
//import static org.junit.jupiter.api.Assertions.*;
//
//
///**
// * API tests for ConsumersApi
// */
//
//@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
//@TestInstance(TestInstance.Lifecycle.PER_CLASS)
//public class ConsumersApiTest implements tests.utils.CompleteableFutureTestWrapper{
//
//    private static final Logger logger = LoggerFactory.getLogger(ConsumersApiTest.class);
//    private ConsumersApiWs api;
//    private LoadConnectionsData loadData;
//    private LoadTransformerData loadTransformerData;
//    private final LoadTagsData loadTagsData;
//    private final LoadCustomFieldsData loadCustomFieldsData;
//
//    private String tagId;
//    private String customFieldKey;
//
//    private List<String> rabbitMqIdsToDelete = new ArrayList<>();
//    private List<String> kafkaIdsToDelete = new ArrayList<>();
//    private List<String> sqsIdsToDelete = new ArrayList<>();
//    private List<String> transformerIdsToDelete = new ArrayList<>();
//    List<String> tagIdsToDelete = new ArrayList<>();
//    List<String> customFieldIdsToDelete = new ArrayList<>();
//
//    private String transformerId;
//
//    public ConsumersApiTest() throws Exception {
//        ApiClientFactoryUtil.initApiClientFactory();
//        this.api = ZiqniAdminApiFactory.getConsumersApi();
//
//        this.loadData = new LoadConnectionsData();
//        this.loadTransformerData = new LoadTransformerData();
//        this.loadCustomFieldsData = new LoadCustomFieldsData();
//        this.loadTagsData = new LoadTagsData();
//    }
//
//    @BeforeAll
//    public void setUp() throws ApiException, InterruptedException {
//        this.transformerId = loadTransformerData.createTestData(loadTransformerData.getCreateRequestAsList(loadTransformerData.getCreateRequest())).getResults().get(0).getId();
//
//        Thread.sleep(5000);
//        transformerIdsToDelete.add(transformerId);
//        tagId = loadTagsData.getModel();
//        customFieldKey = loadCustomFieldsData.getModel(customFieldIdsToDelete, AppliesTo.KAFKACONNECTION);
//
//        tagIdsToDelete.add(tagId);
//
//    }
//
//    @AfterAll
//    public void cleanUp() {
//        try {
//            loadData.deleteRabbitMqTestData(rabbitMqIdsToDelete);
//            loadData.deleteKafkaTestData(kafkaIdsToDelete);
//            loadData.deleteSqsTestData(sqsIdsToDelete);
//            loadTransformerData.deleteTestData(transformerIdsToDelete);
//        } catch (ApiException e) {
//            logger.error("error", e.getCause());
//        }
//
//    }
//
//    @Test
//    @Order(1)
//    public void createRabbitMQConnectionsReturnOkTest() throws ApiException {
//        final var createRequest = loadData.getCreateRabbitMQRequest(transformerId);
//        ModelApiResponse response = $(api.createRabbitMQConnections(createRequest));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertEquals(1, response.getResults().size(), "Should contain created entity");
//        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");
//
//        rabbitMqIdsToDelete.add(response.getResults().get(0).getId());
//
//    }
//
//    @Test
//    @Order(2)
//    public void createKafkaConnectionsReturnOkTest() throws ApiException {
//        final var createRequest = loadData.getCreateKafkaRequest(transformerId);
//        ModelApiResponse response = $(api.createKafkaConnections(createRequest));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertEquals(1, response.getResults().size(), "Should contain created entity");
//        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");
//
//        kafkaIdsToDelete.add(response.getResults().get(0).getId());
//
//    }
//
//    @Test
//    @Order(3)
//    public void createSqsConnectionsReturnOkTest() throws ApiException {
//        final var createRequest = loadData.getCreateSqsRequest(transformerId);
//        ModelApiResponse response = $(api.createSqsConnections(createRequest));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertEquals(1, response.getResults().size(), "Should contain created entity");
//        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");
//
//        sqsIdsToDelete.add(response.getResults().get(0).getId());
//
//    }
//
//    @Test
//    @Order(1)
//    public void createRabbitMQConnectionsWrongTransformerIdReturnErrorTest() throws ApiException {
//        final var createRequest = loadData.getCreateRabbitMQRequest("");
//        ModelApiResponse response = $(api.createRabbitMQConnections(createRequest));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertEquals(0, response.getResults().size(), "Should not contain created entity");
//        assertEquals(1, response.getErrors().size(), "Should contain error");
//    }
//
//    @Test
//    @Order(2)
//    public void createKafkaConnectionsWrongTransformerIdReturnErrorTest() throws ApiException {
//        final var createRequest = loadData.getCreateKafkaRequest("INCORRECT_TRANSFORMER_ID");
//        ModelApiResponse response = $(api.createKafkaConnections(createRequest));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertEquals(0, response.getResults().size(), "Should not contain created entity");
//        assertEquals(1, response.getErrors().size(), "Should contain error");
//
//    }
//
//    @Test
//    @Order(3)
//    public void createSqsConnectionsWrongTransformerIdReturnErrorTest() throws ApiException {
//        final var createRequest = loadData.getCreateSqsRequest("INCORRECT_TRANSFORMER_ID");
//        ModelApiResponse response = $(api.createSqsConnections(createRequest));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertEquals(0, response.getResults().size(), "Should not contain created entity");
//        assertEquals(1, response.getErrors().size(), "Should contain error");
//
//    }
//
//    @Test
//    public void deleteRabbitMqConsumersTest() throws ApiException, InterruptedException {
//        final var createRequest = loadData.getCreateRabbitMQRequest(transformerId);
//        final var id = loadData.createRabbitMqTestData(createRequest).getResults().get(0).getId();
//
//        Thread.sleep(5000);
//        ModelApiResponse response = $(api.deleteRabbitMQConnections(List.of(id)));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
//        assertEquals(0, response.getErrors().size(), "Errors should be empty");
//    }
//
//    @Test
//    public void deleteKafkaConsumersTest() throws ApiException, InterruptedException {
//        final var createRequest = loadData.getCreateKafkaRequest(transformerId);
//        final var id = loadData.createKafkaTestData(createRequest).getResults().get(0).getId();
//
//        Thread.sleep(5000);
//
//        ModelApiResponse response = $(api.deleteKafkaConnections(List.of(id)));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
//        assertEquals(0, response.getErrors().size(), "Errors should be empty");
//    }
//
//    @Test
//    public void deleteSqsConsumersTest() throws ApiException, InterruptedException {
//        final var createRequest = loadData.getCreateSqsRequest(transformerId);
//        final var id = loadData.createSqsTestData(createRequest).getResults().get(0).getId();
//
//        Thread.sleep(5000);
//        ModelApiResponse response = $(api.deleteSqsConnections(List.of(id)));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
//        assertEquals(0, response.getErrors().size(), "Errors should be empty");
//    }
//
//    @Test
//    public void deleteRabbitMqConnectionsByQueryTest() throws ApiException, InterruptedException {
//        final var createRequest = loadData.getCreateRabbitMQRequest(transformerId);
//        final var createdResponse = loadData.createRabbitMqTestData(createRequest);
//
//        assertNotNull(createdResponse);
//        assertNotNull(createdResponse.getResults());
//        assertNotNull(createdResponse.getErrors());
//        Assertions.assertEquals(1, createdResponse.getResults().size(), "Should contain created entity");
//        String givenId = createdResponse.getResults().get(0).getId();
//        assertNotNull(givenId, "Created entity should has id");
//
//        Thread.sleep(5000);
//
//        QueryRequest givenQuery = new QueryRequest()
//                .addMustItem(new QueryMultiple().queryField("id").queryValues(List.of(givenId)));
//        ModelApiResponse response = $(api.deleteRabbitMQConnectionsByQuery(givenQuery));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
//        assertEquals(0, response.getErrors().size(), "Errors should be empty");
//
//    }
//
//    @Test
//    public void deleteKafkaConnectionsByQueryTest() throws ApiException, InterruptedException {
//        final var createRequest = loadData.getCreateKafkaRequest(transformerId);
//        final var createdResponse = loadData.createKafkaTestData(createRequest);
//
//        assertNotNull(createdResponse);
//        assertNotNull(createdResponse.getResults());
//        assertNotNull(createdResponse.getErrors());
//        Assertions.assertEquals(1, createdResponse.getResults().size(), "Should contain created entity");
//        String givenId = createdResponse.getResults().get(0).getId();
//        assertNotNull(givenId, "Created entity should has id");
//
//        Thread.sleep(5000);
//
//        QueryRequest givenQuery = new QueryRequest()
//                .addMustItem(new QueryMultiple().queryField("id").queryValues(List.of(givenId)));;
//        ModelApiResponse response = $(api.deleteKafkaConnectionsByQuery(givenQuery));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
//        assertEquals(0, response.getErrors().size(), "Errors should be empty");
//
//    }
//
//    @Test
//    public void deleteSqsConnectionsByQueryTest() throws ApiException, InterruptedException {
//        final var createRequest = loadData.getCreateSqsRequest(transformerId);
//        final var createdResponse = loadData.createSqsTestData(createRequest);
//
//        assertNotNull(createdResponse);
//        assertNotNull(createdResponse.getResults());
//        assertNotNull(createdResponse.getErrors());
//        Assertions.assertEquals(1, createdResponse.getResults().size(), "Should contain created entity");
//        String givenId = createdResponse.getResults().get(0).getId();
//        assertNotNull(givenId, "Created entity should has id");
//
//        Thread.sleep(5000);
//
//        QueryRequest givenQuery = new QueryRequest()
//                .addMustItem(new QueryMultiple().queryField("id").queryValues(List.of(givenId)));;
//        ModelApiResponse response = $(api.deleteSqsConnectionsByQuery(givenQuery));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
//        assertEquals(0, response.getErrors().size(), "Errors should be empty");
//
//    }
//
//    @Test
//    public void getRabbitMqConsumersReturnOkTest() throws ApiException, InterruptedException {
//        var request = loadData.getCreateRabbitMQRequest(transformerId)
//                .addConstraints(List.of("constraint_1"))
//                .metadata(Map.of("Meta_key","Meta_value"));
//        var createResponse = loadData.createRabbitMqTestData(request);
//        var id = createResponse.getResults().get(0).getId();
//
//        Thread.sleep(5000);
//
//        Integer limit = 1;
//        Integer skip = 0;
//        var response = $(api.getRabbitMQConnections(List.of(id), limit, skip));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
//        assertEquals(1, response.getResults().size(), "Result count should match limit");
//
//        rabbitMqIdsToDelete.addAll(createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList()));
//    }
//
//    @Test
//    public void getKafkaConsumersReturnOkTest() throws ApiException, InterruptedException {
//        var request = loadData.getCreateKafkaRequest(transformerId).name("Kafka_2");
//        var createResponse = loadData.createKafkaTestData(request);
//        var id = createResponse.getResults().get(0).getId();
//
//        Thread.sleep(5000);
//
//        Integer limit = 1;
//        Integer skip = 0;
//        var response = $(api.getKafkaConnections(List.of(id), limit, skip));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
//        assertEquals(1, response.getResults().size(), "Result count should match limit");
//
//        kafkaIdsToDelete.addAll(createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList()));
//    }
//
//    @Test
//    public void getSqsConsumersReturnOkTest() throws ApiException, InterruptedException {
//        var request = loadData.getCreateSqsRequest(transformerId);
//        var createResponse = loadData.createSqsTestData(request);
//        var id = createResponse.getResults().get(0).getId();
//
//        Thread.sleep(5000);
//        Integer limit = 1;
//        Integer skip = 0;
//        var response = $(api.getSqsConnections(List.of(id), limit, skip));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
//        assertEquals(1, response.getResults().size(), "Result count should match limit");
//
//        sqsIdsToDelete.addAll(createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList()));
//    }
//
//    @Test
//    public void getRabbitMqConnectionsByQueryTest() throws ApiException, InterruptedException {
//        var request = loadData.getCreateRabbitMQRequest(transformerId)
//                .tags(List.of(tagId))
//                .customFields(Map.of(customFieldKey, "name"));
//        var createResponse = loadData.createRabbitMqTestData(request);
//        var id = createResponse.getResults().get(0).getId();
//
//        Thread.sleep(5000);
//
//        assertNotNull(createResponse);
//        assertNotNull(createResponse.getResults());
//        assertNotNull(createResponse.getErrors());
//        Assertions.assertEquals(1, createResponse.getResults().size(), "Should contain created entity");
//        String givenId = createResponse.getResults().get(0).getId();
//        assertNotNull(givenId, "Created entity should has id");
//
//        QueryRequest givenQuery = new QueryRequest()
//                .addMustItem(new QueryMultiple().queryField("id").queryValues(List.of(givenId)));
//
//        var response = $(api.getRabbitMQConnectionsByQuery(givenQuery));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
//        assertEquals(1, response.getResults().size(), "Result count should match limit");
//
//        rabbitMqIdsToDelete.add(id);
//    }
//
//    @Test
//    public void getKafkaConnectionsByQueryTest() throws ApiException, InterruptedException {
//        var request = loadData.getCreateKafkaRequest(transformerId);
//        var createResponse = loadData.createKafkaTestData(request);
//        var id = createResponse.getResults().get(0).getId();
//
//        Thread.sleep(5000);
//
//        assertNotNull(createResponse);
//        assertNotNull(createResponse.getResults());
//        assertNotNull(createResponse.getErrors());
//        Assertions.assertEquals(1, createResponse.getResults().size(), "Should contain created entity");
//        String givenId = createResponse.getResults().get(0).getId();
//        assertNotNull(givenId, "Created entity should has id");
//
//        QueryRequest givenQuery = new QueryRequest()
//                .addMustItem(new QueryMultiple().queryField("id").queryValues(List.of(givenId)));
//
//        var response = $(api.getKafkaConnectionsByQuery(givenQuery));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
//        assertEquals(1, response.getResults().size(), "Result count should match limit");
//
//        kafkaIdsToDelete.add(id);
//    }
//
//    @Test
//    public void getSqsConnectionsByQueryTest() throws ApiException, InterruptedException {
//        var request = loadData.getCreateSqsRequest(transformerId);
//        var createResponse = loadData.createSqsTestData(request);
//        var id = createResponse.getResults().get(0).getId();
//
//        Thread.sleep(5000);
//
//        assertNotNull(createResponse);
//        assertNotNull(createResponse.getResults());
//        assertNotNull(createResponse.getErrors());
//        Assertions.assertEquals(1, createResponse.getResults().size(), "Should contain created entity");
//        String givenId = createResponse.getResults().get(0).getId();
//        assertNotNull(givenId, "Created entity should has id");
//
//        QueryRequest givenQuery = new QueryRequest()
//                .addMustItem(new QueryMultiple().queryField("id").queryValues(List.of(givenId)));
//
//        var response = $(api.getSqsConnectionsByQuery(givenQuery));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
//        assertEquals(1, response.getResults().size(), "Result count should match limit");
//
//        sqsIdsToDelete.add(id);
//    }
//
//    @Test
//    public void updateRabbitMqConsumersTest() throws ApiException, InterruptedException {
//        final var createRequest = loadData.getCreateRabbitMQRequest(transformerId)
//                .tags(List.of(tagId))
//                .customFields(Map.of(customFieldKey, "name"));
//        final var id = loadData.createRabbitMqTestData(createRequest).getResults().get(0).getId();
//
//        Thread.sleep(5000);
//
//        UpdateRabbitMqConnectionRequest given = new UpdateRabbitMqConnectionRequest()
//                .id(id)
//                .description("Updated rabbitqm description")
//                .name("UPDATED_NAME")
//                .queueName("ADDED_QUEUE_NAME")
//                .uri("httpt://new.uri.com")
//                .transformerId("new_transformer")
//                .constraints(Collections.emptyList())
//                .customFields(Map.of(customFieldKey, "updated_name"));
//
//        ModelApiResponse updresponse = $(api.updateRabbitMQConnections(given));
//
//        Thread.sleep(5000);
//
//        QueryRequest givenQuery = new QueryRequest()
//                .addMustItem(new QueryMultiple().queryField("id").queryValues(List.of(given.getId())));
//
//        var response = $(api.getRabbitMQConnectionsByQuery(givenQuery));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertEquals(1, response.getResults().size(), "Results should be empty");
//        assertEquals(0, response.getErrors().size(), "Errors should contain entry");
//
//        rabbitMqIdsToDelete.add(id);
//    }
//
//    @Test
//    public void updateKafkaConsumersTest() throws ApiException, InterruptedException {
//        final var createRequest = loadData.getCreateKafkaRequest(transformerId)
//                .tags(List.of(tagId))
//                .customFields(Map.of(customFieldKey, "name"));
//        final var id = loadData.createKafkaTestData(createRequest).getResults().get(0).getId();
//
//        Thread.sleep(5000);
//
//        UpdateKafkaConnectionRequest given = new UpdateKafkaConnectionRequest()
//                .id(id)
//                .description("Updated kafka description");
//
//        ModelApiResponse updResponse = $(api.updateKafkaConnections(given));
//
//        QueryRequest givenQuery = new QueryRequest()
//                .addMustItem(new QueryMultiple().queryField("id").queryValues(List.of(given.getId())));
//
//        var response = $(api.getKafkaConnectionsByQuery(givenQuery));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertEquals(1, response.getResults().size(), "Results should be empty");
//        assertEquals(0, response.getErrors().size(), "Errors should contain entry");
//
//        kafkaIdsToDelete.add(id);
//    }
//
//    @Test
//    public void updateSqsConsumersTest() throws ApiException, InterruptedException {
//        final var createRequest = loadData.getCreateSqsRequest(transformerId)
//                .tags(List.of(tagId))
//                .customFields(Map.of(customFieldKey, "name"));
//        final var id = loadData.createSqsTestData(createRequest).getResults().get(0).getId();
//
//        UpdateSqsConnectionRequest given = new UpdateSqsConnectionRequest()
//                .id(id)
//                .description("Updated rabbitqm description");
//
//        Thread.sleep(5000);
//
//        ModelApiResponse updResponse = $(api.updateSqsConnections(given));
//
//        QueryRequest givenQuery = new QueryRequest()
//                .addMustItem(new QueryMultiple().queryField("id").queryValues(List.of(given.getId())));
//
//        var response = $(api.getSqsConnectionsByQuery(givenQuery));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertEquals(1, response.getResults().size(), "Results should be empty");
//        assertEquals(0, response.getErrors().size(), "Errors should contain entry");
//
//        sqsIdsToDelete.add(id);
//    }
//
//    @Test
//    @Disabled
//    //Fixme enable after implementing state logic
//    public void updateRabbitMQConsumersStateTest() throws ApiException {
//        ConnectionState givenState = ConnectionState.START;
//
//        var request = loadData.getCreateRabbitMQRequest(transformerId);
//        ModelApiResponse createdResponse = $(api.createRabbitMQConnections(request));
//
//        assertNotNull(createdResponse);
//        assertNotNull(createdResponse.getResults());
//        assertNotNull(createdResponse.getErrors());
//        assertEquals(1, createdResponse.getResults().size(), "Should contain created entity");
//        String givenId = createdResponse.getResults().get(0).getId();
//        assertNotNull(givenId, "Created entity should has id");
//
//        UpdateConnectionStateRequest whenUpdate = new UpdateConnectionStateRequest()
//                .id(givenId)
//                .status(givenState);
//        ModelApiResponse response = $(api.updateConnectionsState(List.of(whenUpdate)));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertEquals(1, response.getResults().size(), "Should contain updated entity");
//        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");
//
//        String updatedId = response.getResults().get(0).getId();
//
//        List<String> ids = List.of(updatedId);
//        Integer limit = 1;
//        Integer skip = 0;
//
//        //fixme - this is incorrect
////        var thanResponse = $(api.getConnections( ids, limit, skip));
////
////        assertNotNull(thanResponse);
////        assertNotNull(thanResponse.getResults());
////        assertEquals(1, thanResponse.getResults().size(), "Should contain entity");
////
////        var res = thanResponse.getResults().get(0);
//
//        //assertEquals(givenId, res.getId(), "Found id should be equal to requested");
//
//        rabbitMqIdsToDelete.add(givenId);
//    }
//
//    @Test
//    public void getRabbitMqConsumersNoArgumentsReturnEmptyTest() throws ApiException {
//        var request = loadData.getCreateRabbitMQRequest(transformerId);
//        var createResponse = loadData.createRabbitMqTestData(request);
//        var id = createResponse.getResults().get(0).getId();
//
//        List<String> ids = Collections.emptyList();
//        Integer limit = 0;
//        Integer skip = 0;
//        var response = $(api.getRabbitMQConnections(ids, limit, skip));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertTrue(response.getResults().isEmpty(), "Should have no result");
//        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
//
//        rabbitMqIdsToDelete.add(id);
//    }
//
//
//
//    @Test
//    public void getRabbitMqConsumerIdWithWhitespaceReturnErrorTest() throws ApiException {
//
//        var request = loadData.getCreateRabbitMQRequest(transformerId);
//        var createResponse = loadData.createRabbitMqTestData(request);
//        var id = createResponse.getResults().get(0).getId();
//
//        var idWithSpaces = id.stripTrailing() + " ";
//
//        Integer limit = 1;
//        Integer skip = 0;
//        var response = $(api.getRabbitMQConnections(List.of(idWithSpaces), limit, skip));
//
//        assertNotNull(response);
//        assertNotNull(response.getErrors());
//        assertNotNull(response.getResults());
//        Assertions.assertTrue(response.getErrors().isEmpty(), "Should not have error");
//        assertEquals(1, response.getResults().size(), "Should have single result");
//        assertTrue(response.getErrors().isEmpty(), "Should not return error");
//
//        rabbitMqIdsToDelete.add(id);
//    }
//
//    @Test
//    public void getKafkaConsumerIdWithWhitespaceReturnErrorTest() throws ApiException {
//
//        var request = loadData.getCreateKafkaRequest(transformerId);
//        var createResponse = loadData.createKafkaTestData(request);
//        var id = createResponse.getResults().get(0).getId();
//
//        var idWithSpaces = id.stripTrailing() + " ";
//
//        Integer limit = 1;
//        Integer skip = 0;
//        var response = $(api.getKafkaConnections(List.of(idWithSpaces), limit, skip));
//
//        assertNotNull(response);
//        assertNotNull(response.getErrors());
//        assertNotNull(response.getResults());
//        Assertions.assertTrue(response.getErrors().isEmpty(), "Should not have error");
//        assertEquals(1, response.getResults().size(), "Should have single result");
//        assertTrue(response.getErrors().isEmpty(), "Should not return error");
//
//        kafkaIdsToDelete.add(id);
//    }
//
//    @Test
//    public void getSqsConsumerIdWithWhitespaceReturnResultTest() throws ApiException, InterruptedException {
//        var request = loadData.getCreateSqsRequest(transformerId);
//        var createResponse = loadData.createSqsTestData(request);
//        var id = createResponse.getResults().get(0).getId();
//
//        Thread.sleep(5000);
//
//        var idWithSpaces = id.stripTrailing() + " ";
//
//        Integer limit = 1;
//        Integer skip = 0;
//        var response = $(api.getSqsConnections(List.of(idWithSpaces), limit, skip));
//
//        assertNotNull(response);
//        assertNotNull(response.getErrors());
//        assertNotNull(response.getResults());
//        Assertions.assertTrue(response.getErrors().isEmpty(), "Should not have error");
//        assertEquals(1, response.getResults().size(), "Should have single result");
//        assertTrue(response.getErrors().isEmpty(), "Should not return error");
//
//        sqsIdsToDelete.add(id);
//    }
//
//    @Test
//    public void getRabbitMqConsumersIdWithWhitespaceBetweenReturnResultTest() throws ApiException {
//        var request = loadData.getCreateRabbitMQRequest(transformerId);
//        var createResponse = loadData.createRabbitMqTestData(request);
//        var id = createResponse.getResults().get(0).getId();
//
//        var idWithSpaces = id.stripLeading().substring(0, id.length() / 2).concat(" ").concat(id.substring(id.length() / 2));
//
//        Integer limit = 1;
//        Integer skip = 0;
//        var response = $(api.getRabbitMQConnections( List.of(idWithSpaces), limit, skip));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have error");
//        assertEquals(1, response.getErrors().size(), "Should have single error");
//        assertTrue(response.getResults().isEmpty(), "Should not return result");
//
//        rabbitMqIdsToDelete.add(id);
//    }
//
//    @Test
//    public void getKafkaConsumersIdWithWhitespaceBetweenReturnResultTest() throws ApiException, InterruptedException {
//        var request = loadData.getCreateKafkaRequest(transformerId);
//        var createResponse = loadData.createKafkaTestData(request);
//        var id = createResponse.getResults().get(0).getId();
//
//        var idWithSpaces = id.stripLeading().substring(0, id.length() / 2).concat(" ").concat(id.substring(id.length() / 2));
//
//        Thread.sleep(5000);
//
//        Integer limit = 1;
//        Integer skip = 0;
//        var response = $(api.getKafkaConnections(List.of(idWithSpaces), limit, skip));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have error");
//        assertEquals(1, response.getErrors().size(), "Should have single error");
//        assertTrue(response.getResults().isEmpty(), "Should not return result");
//
//        kafkaIdsToDelete.add(id);
//    }
//
//    @Test
//    public void getSqsConsumersIdWithWhitespaceBetweenReturnErrorTest() throws ApiException {
//        var request = loadData.getCreateSqsRequest(transformerId);
//        var createResponse = loadData.createSqsTestData(request);
//        var id = createResponse.getResults().get(0).getId();
//
//        var idWithSpaces = id.stripLeading().substring(0, id.length() / 2).concat(" ").concat(id.substring(id.length() / 2));
//
//        Integer limit = 1;
//        Integer skip = 0;
//        var response = $(api.getSqsConnections(List.of(idWithSpaces), limit, skip));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have error");
//        assertEquals(1, response.getErrors().size(), "Should have single error");
//        assertTrue(response.getResults().isEmpty(), "Should not return result");
//
//        sqsIdsToDelete.add(id);
//    }
//    @Test
//    public void createRabbitMQConnectionsWithTagsAndCustomFieldsReturnOkTest() throws ApiException, InterruptedException {
//
//        final var createRequest = loadData.getCreateRabbitMQRequest(transformerId)
//                .tags(List.of(tagId))
//                .customFields(Map.of(customFieldKey, "name"));
//
//        ModelApiResponse createResponse =loadData.createRabbitMqTestData(createRequest);
//
//        final var id = createResponse.getResults().get(0).getId();
//
//        Thread.sleep(5000);
//        int limit = 1;
//        int skip = 0;
//
//        var response = $(api.getRabbitMQConnections(List.of(id), limit, skip));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
//        assertEquals(limit, response.getResults().size(), "Should has single result");
//        assertNotNull(response.getResults().get(0).getCustomFields());
//        assertNotNull(response.getResults().get(0).getTags());
//        assertEquals(1,response.getResults().get(0).getCustomFields().size());
//        assertEquals(1,response.getResults().get(0).getTags().size());
//
//        rabbitMqIdsToDelete.add(id);
//    }
//
//    @Test
//    public void createKafkaWithTagsAndCustomFieldsReturnOkTest() throws ApiException, InterruptedException {
//
//        final var createRequest = loadData.getCreateKafkaRequest(transformerId)
//                .tags(List.of(tagId))
//                .customFields(Map.of(customFieldKey, "name"));
//
//        ModelApiResponse createResponse =loadData.createKafkaTestData(createRequest);
//
//        final var id = createResponse.getResults().get(0).getId();
//
//        Thread.sleep(5000);
//        int limit = 1;
//        int skip = 0;
//
//        var response = $(api.getKafkaConnections(List.of(id), limit, skip));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
//        assertEquals(limit, response.getResults().size(), "Should has single result");
//        assertNotNull(response.getResults().get(0).getCustomFields());
//        assertNotNull(response.getResults().get(0).getTags());
//        assertEquals(1,response.getResults().get(0).getCustomFields().size());
//        assertEquals(1,response.getResults().get(0).getTags().size());
//
//        kafkaIdsToDelete.add(id);
//    }
//
//    @Test
//    public void createSqsWithTagsAndCustomFieldsReturnOkTest() throws ApiException, InterruptedException {
//
//        final var createRequest = loadData.getCreateSqsRequest(transformerId)
//                .tags(List.of(tagId))
//                .customFields(Map.of(customFieldKey, "name"));
//
//        ModelApiResponse createResponse =loadData.createSqsTestData(createRequest);
//
//        final var id = createResponse.getResults().get(0).getId();
//
//        Thread.sleep(5000);
//        int limit = 1;
//        int skip = 0;
//
//        var response = $(api.getSqsConnections(List.of(id), limit, skip));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
//        assertEquals(limit, response.getResults().size(), "Should has single result");
//        assertNotNull(response.getResults().get(0).getCustomFields());
//        assertNotNull(response.getResults().get(0).getTags());
//        assertNotNull(response.getResults().get(0).getMetadata());
//        assertEquals(1,response.getResults().get(0).getCustomFields().size());
//        assertEquals(1,response.getResults().get(0).getTags().size());
//
//        sqsIdsToDelete.add(id);
//    }
//
//    @Test //fixme - this test is incomplete - finish it once Compute Engine comms are sorted out.
//    public void updateRabbitMQConnectionsStateTest()  throws ApiException {
////        final var createRequest = loadData.getCreateRabbitMQRequest("08k9yH0BLoxI_0G7TZyZ");
////        final var createRequest = loadData.getCreateRabbitMQRequest("YU4MDH4BD9Qlc0ir0LjM");
////        ModelApiResponse res1 = $(api.createRabbitMQConnections(createRequest));
////        assertNotNull(res1);
////
////        var connId = res1.getResults().get(0).getId();
////        logger.error("Connection id is {}", connId);
//        var connId = "BmvHZ34BD31NfoNjLCxG";
////        var connId = "7NwuaH4B4qY4i1Tr8hHY";
//
//        final var updateStateRequest = new UpdateConnectionStateRequest().id(connId).status(ConnectionState.START);
//
//
//        var response = $(api.updateRabbitMQConnectionsState(List.of(updateStateRequest)));
//
//        assertNotNull(response);
//
//    }
//
//}
