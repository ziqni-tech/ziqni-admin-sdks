/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.admin.sdk.api;

import com.ziqni.admin.sdk.data.*;
import com.ziqni.admin.sdk.model.*;
import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
import com.ziqni.admin.sdk.ZiqniAdminApiFactory;
import com.ziqni.admin.sdk.ApiException;
import com.ziqni.admin.sdk.data.*;
import com.ziqni.admin.sdk.model.*;

import com.ziqni.admin.sdk.util.DateUtil;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertTrue;


/**
 * API tests for ContestsApi
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class ContestsApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private static final Logger logger = LoggerFactory.getLogger(ContestsApiTest.class);

    private final ContestsApiWs api;
    private final LoadContestsData loadData;
    private final LoadCompetitionsData loadCompetitionsData;
    private final LoadProductsData loadProductsData;
    private final LoadTagsData loadTagsData;
    private final LoadCustomFieldsData loadCustomFieldsData;

    private String tagKey;
    private String customFieldKey;
    private String competitionId;

    private final List<String> idsToDelete = new ArrayList<>();
    private final List<String> competitionIdsToDelete = new ArrayList<>();
    private final List<String> productIdsToDelete = new ArrayList<>();
    private final List<String> tagIdsToDelete = new ArrayList<>();
    private final List<String> customFieldIdsToDelete = new ArrayList<>();

    public ContestsApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory();
        this.api = ZiqniAdminApiFactory.getContestsApi();
        this.loadData = new LoadContestsData();
        this.loadCompetitionsData = new LoadCompetitionsData();
        this.loadProductsData = new LoadProductsData();
        this.loadCustomFieldsData = new LoadCustomFieldsData();
        this.loadTagsData = new LoadTagsData();
    }

    @BeforeAll
    public void setUp() {
        try {
            var productsReq = loadProductsData.getCreateRequest(null);
            var productRes = loadProductsData.createTestData(List.of(productsReq));

            Thread.sleep(5000);
            var productId = productRes.getResults().get(0).getId();

            final var createRequest = loadCompetitionsData.getCreateRequest(List.of(productId));
            this.competitionId = loadCompetitionsData.createTestData(createRequest)
                    .getResults()
                    .get(0)
                    .getId();
            Thread.sleep(5000);

            competitionIdsToDelete.add(competitionId);
            productIdsToDelete.add(productId);

            tagKey = loadTagsData.getModel();
            customFieldKey = loadCustomFieldsData.getModel(customFieldIdsToDelete, AppliesTo.CONTEST);
            tagIdsToDelete.add(tagKey);

        } catch (ApiException | InterruptedException e) {
            logger.error("error", e.getCause());
        }
    }

    // There is no Delete method exposed to achievements, competitions and contests, mark the states of these 3 resources as cancelled and clean them up later on.
    @AfterAll
    public void cleanUp() {
      try {
            Thread.sleep(5000);
            loadProductsData.deleteTestData(productIdsToDelete);
            loadTagsData.deleteTestData(tagIdsToDelete);
            loadCustomFieldsData.deleteTestData(customFieldIdsToDelete);
        } catch (ApiException | InterruptedException e) {
          logger.error("error", e.getCause());
        }
    }


    @Test
    public void createContestsReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId);

        ModelApiResponse response = api.createContests(createRequest).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        final var id = response.getResults().get(0).getId();

        idsToDelete.add(id);
    }

    @Test
    public void createContestsWithTranslationsReturnOkTest() throws ApiException {
        var translationEntry = new TranslationEntry();
        translationEntry.setFieldName("name");
        translationEntry.setText("Given");
        var translation = new Translation();
        translation.setTranslations(List.of(translationEntry));

        final var createRequest = loadData.getCreateRequest(competitionId).translations(List.of(translation));

        ModelApiResponse response = api.createContests(createRequest).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(4, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        final var id = response.getResults().get(0).getId();

        idsToDelete.add(id);
    }

    @Test
    @Order(2)
    public void createContestsWithTagsAndCustomFieldsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(competitionId)
                .tags(List.of(tagKey))
                .customFields(Map.of(customFieldKey, List.of(1)));

        ModelApiResponse createResponse = $(api.createContests(createRequest));

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        assertNotNull(createResponse.getErrors());
        assertEquals(1, createResponse.getResults().size(), "Should contain created entity");
        assertNotNull(createResponse.getResults().get(0).getId(), "Created entity should has id");

        final var id = createResponse.getResults().get(0).getId();
        int limit = 1;
        int skip = 0;

        Thread.sleep(5000);

        var response = $(api.getContests(List.of(id), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");
        assertNotNull(response.getResults().get(0).getCustomFields());
        assertNotNull(response.getResults().get(0).getTags());
        assertEquals(1,response.getResults().get(0).getCustomFields().size());
        assertEquals(1,response.getResults().get(0).getTags().size());

        idsToDelete.add(id);
    }

    @Test
    public void updateContestsWithTagsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(competitionId);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var givenDescription = UUID.randomUUID().toString();

        final var given = new UpdateContestRequest()
                .id(id)
                .tags(List.of(tagKey));
        Thread.sleep(15000);
        final var updated = $(api.updateContest(given));

        assertNotNull(updated);
        assertNotNull(updated.getResults());
        assertNotNull(updated.getErrors());
        assertEquals(1, updated.getResults().size(), "Should contain updated entity");
        assertNotNull(updated.getResults().get(0).getId(), "Created entity should has id");

        final var updatedId = updated.getResults().get(0).getId();


        final var ids = List.of(updatedId);
        final var limit = 1;
        final var skip = 0;

        final var response = $(api.getContests(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());
        assertNotNull(item.getTags());
        assertEquals(1,item.getTags().size());

        idsToDelete.add(id);
    }

    @Test
    @Disabled //Todo enable after implementation
    public void getChildrenOfContestTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(competitionId);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var limit = 1;
        final var skip = 0;

        Thread.sleep(5000);

        final var response = $(api.getChildrenOfContest(id, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getMaxNumberOfEntrants(), item.getMaxNumberOfEntrants(), "Found Competition Type should be equal to created previously");
        assertEquals(createRequest.getDescription(), item.getDescription(), "Found Description should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());
//        assertTrue(item.getRuleSets().containsAll(createRequest.getRuleSets()), "Found ruleset should contain all of" + createRequest.getRuleSets());

        idsToDelete.add(id);
    }

    @Test
    public void getSingleContestReturnsOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(competitionId);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var limit = 1;
        final var skip = 0;

        Thread.sleep(5000);

        final var response = $(api.getContests(List.of(id), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getDescription(), item.getDescription(), "Found Description should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());
//        assertTrue(!item.getRuleSets().isEmpty(), "Found ruleset should not be empty" + createRequest.getRuleSets());

        idsToDelete.add(id);
    }

    @Test
    public void getSingleContestMustHaveSubRulesReturnsOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(competitionId);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var limit = 1;
        final var skip = 0;

        Thread.sleep(5000);

        final var response = $(api.getContests(List.of(id), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getDescription(), item.getDescription(), "Found Description should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());
//        assertTrue(!item.getRuleSets().isEmpty(), "Found ruleset should not be empty" + createRequest.getRuleSets());

//        Assertions.assertEquals(loadData.subRuleConstant, response.getResults().get(0).getRuleSets().get(0).getConditions().get(0).getRules().get(0).getSubConditions().get(0).getSubRules().get(0).getConstant());
//        Assertions.assertEquals(loadData.subRuleFact, response.getResults().get(0).getRuleSets().get(0).getConditions().get(0).getRules().get(0).getSubConditions().get(0).getSubRules().get(0).getFact());
//        Assertions.assertEquals(loadData.subRuleOperator, response.getResults().get(0).getRuleSets().get(0).getConditions().get(0).getRules().get(0).getSubConditions().get(0).getSubRules().get(0).getOperator());

        idsToDelete.add(id);
    }

    @Test
    public void getContestsByQueryTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(competitionId);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var givenQuery = new QueryRequest()
                .addShouldItem(new QueryMultiple().queryField("id").queryValues(List.of(id)))
                .shouldMatch(1);

        Thread.sleep(5000);
        final var response = $(api.getContestsByQuery(givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getMaxNumberOfEntrants(), item.getMaxNumberOfEntrants(), "Found Competition Type should be equal to created previously");
        assertEquals(createRequest.getDescription(), item.getDescription(), "Found Description should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());
//        assertTrue(item.getRuleSets().containsAll(createRequest.getRuleSets()), "Found ruleset should contain all of" + createRequest.getRuleSets());

        idsToDelete.add(id);
    }

    @Test
    //Fixme after data will be populated in leaderboards
    public void getContestsLeaderboardByIdTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(competitionId);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var limit = 1;
        final var skip = 0;

        Thread.sleep(5000);

        final var response = $(api.getContestsLeaderboardById(id, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getConstraints(), item.getConstraints(), "Found Constraints should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());

        idsToDelete.add(id);
    }

    @Test
    public void getContestsToCloneTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(competitionId);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var limit = 1;

        Thread.sleep(10000);

        final var response = $(api.getContestsToClone(competitionId));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(createRequest.getConstraints(), item.getConstraints(), "Found Constraints should be equal to created previously");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());

        idsToDelete.add(id);
    }

    @Test
    @Disabled //Todo enable after implementation
    public void getListOfEntrantsForContestTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(competitionId);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var limit = 1;
        final var skip = 0;

        Thread.sleep(5000);

        final var response = $(api.getListOfEntrantsForContest(id, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        idsToDelete.add(id);
    }

    @Test
    @Disabled //Todo enable after implementation
    public void getParentsOfContestTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(competitionId);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var limit = 1;
        final var skip = 0;

        Thread.sleep(5000);

        final var response = $(api.getParentsOfContest(id, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getConstraints(), item.getConstraints(), "Found Constraints should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());

        idsToDelete.add(id);
    }

    @Test
    public void updateContestTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(competitionId);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var givenDescription = UUID.randomUUID().toString();

        final var given = new UpdateContestRequest()
                .id(id)
                .description(givenDescription);
        Thread.sleep(15000);
        final var updated = $(api.updateContest(given));

        assertNotNull(updated);
        assertNotNull(updated.getResults());
        assertNotNull(updated.getErrors());
        assertEquals(1, updated.getResults().size(), "Should contain updated entity");
        assertNotNull(updated.getResults().get(0).getId(), "Created entity should has id");

        final var updatedId = updated.getResults().get(0).getId();


        final var ids = List.of(updatedId);
        final var limit = 1;
        final var skip = 0;

        final var response = $(api.getContests(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        assertEquals(createRequest.getMaxNumberOfEntrants(), item.getMaxNumberOfEntrants(), "Found Competition Type should be equal to created previously");
        assertEquals(givenDescription, item.getDescription(), "Found Description should be equal to created previously");
        assertNotNull(item.getSpaceName(), "Space name should exist");
        assertTrue(item.getConstraints().containsAll(createRequest.getConstraints()), "Found constraints should contain all of" + createRequest.getConstraints());
//        assertTrue(!item.getRuleSets().isEmpty(), "Found ruleset should contain all of" + createRequest.getRuleSets());

        idsToDelete.add(id);
    }

    @Test
    @Disabled
    public void updateContestsStateTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(competitionId);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var givenStatus = ContestStateOperations.STARTING;

        final var given = new UpdateContestStateRequest()
                .contestId(id)
                .status(givenStatus);
        Thread.sleep(5000);
        final var updated = $(api.updateContestsState(List.of(given)));

        assertNotNull(updated);
        assertNotNull(updated.getResults());
        assertNotNull(updated.getErrors());
        assertEquals(1, updated.getResults().size(), "Should contain created entity");
        assertNotNull(updated.getResults().get(0).getId(), "Created entity should has id");

        final var updatedId = updated.getResults().get(0).getId();


        final var ids = List.of(updatedId);
        Integer limit = 1;
        Integer skip = 0;

        final var response = $(api.getContests(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
//        assertEquals(givenStatus, item.getStatus(), "Found live status should be equal to provided");

        idsToDelete.add(id);
    }

    @Test
    public void getContestsNoArgumentsReturnEmptyTest() throws ApiException {
        var request = loadData.getCreateRequest(competitionId);
        var createResponse = loadData.createTestData(request);
        var id = createResponse.getResults().get(0).getId();

        List<String> ids = Collections.emptyList();
        Integer limit = 0;
        Integer skip = 0;
        final var response = $(api.getContests( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getResults().isEmpty(), "Should have no result");
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        idsToDelete.add(id);
    }

    @Test
    public void getContestsNoIdsWithLimitReturnOkTest() throws ApiException {
        final var requestList = loadData.getCreateRequestAsList(3, competitionId);
        final var createResponse = loadData.createTestData(requestList);

        final var id = new ArrayList<String>();
        final var limit = 3;
        final var skip = 0;
        final var response = $(api.getContests( id, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(3, response.getResults().size(), "Result count should match limit");

        idsToDelete.addAll(createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList()));
    }

    @Test
    public void getContestsMultipleIdsReturnOkTest() throws ApiException {

        var requestList = loadData.getCreateRequestAsList(3, competitionId);
        var createResponse = loadData.createTestData(requestList);

        final var givenIds = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        final var ids = List.copyOf(givenIds);
        final var limit = ids.size();
        final var skip = 0;
        final var response = $(api.getContests( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(givenIds.size(), response.getResults().size(), "Should have single result");

        final var foundIds = response.getResults()
                .stream()
                .map(Contest::getId)
                .collect(Collectors.toList());

        assertTrue(foundIds.containsAll(givenIds), "Found id should be equal to requested");

        idsToDelete.addAll(givenIds);
    }

    @Test
    public void getContestsMultipleIdsOneMalformedReturnErrorTest() throws ApiException {

        final var requestList = loadData.getCreateRequestAsList(3, competitionId);
        final var createResponse = loadData.createTestData(requestList);

        final var givenIds = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        final var nonExistingId = givenIds.get(0).toUpperCase();
        givenIds.add(nonExistingId);

        final var ids = List.copyOf(givenIds);
        final var limit = ids.size();
        final var skip = 0;
        final var response = $(api.getContests( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(givenIds.size() - 1, response.getResults().size(), "Should have requested valid results");

        final var foundIds = response.getResults().stream().map(Contest::getId).collect(Collectors.toList());

        assertTrue(givenIds.containsAll(foundIds), "Found id should be equal to requested");

        givenIds.remove(nonExistingId);

        idsToDelete.addAll(givenIds);
    }

    @Test
    public void getContestsMultipleIdsOneBlankReturnErrorTest() throws ApiException, InterruptedException {
        final var requestList = loadData.getCreateRequestAsList(3, competitionId);
        final var createResponse = loadData.createTestData(requestList);

        final var givenIds = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        Thread.sleep(5000);

        final var nonExistingId = "nonExistingId";
        givenIds.add(nonExistingId);

        final var ids = List.copyOf(givenIds);
        final var limit = ids.size();
        final var skip = 0;
        final var response = $(api.getContests( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertFalse(response.getErrors().isEmpty(), "Should have errors");

        givenIds.remove(nonExistingId);

        idsToDelete.addAll(givenIds);
    }

    @Test
    public void getContestsIdWithWhitespaceReturnOkTest() throws ApiException {
        final var request = loadData.getCreateRequest(competitionId);
        final var createResponse = loadData.createTestData(request);
        final var id = createResponse.getResults().get(0).getId();

        final var idWithSpaces = id.stripTrailing() + " ";

        final var limit = 1;
        final var skip = 0;
        final var response = $(api.getContests( List.of(idWithSpaces), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no error");
        assertEquals(0, response.getErrors().size(), "Should have no error");
        assertFalse(response.getResults().isEmpty(), "Should not return result");

        idsToDelete.add(id);
    }

    @Test
    public void getContestsIdWithWhitespaceBetweenReturnErrorTest() throws ApiException, InterruptedException {
        final var request = loadData.getCreateRequest(competitionId);
        final var createResponse = loadData.createTestData(request);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        final var idWithSpaces = id.stripLeading().substring(0, id.length() / 2).concat(" ").concat(id.substring(id.length() / 2));

        final var limit = 1;
        final var skip = 0;
        final var response = $(api.getContests( List.of(idWithSpaces), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertFalse(response.getErrors().isEmpty(), "Should have error");
        assertEquals(1, response.getErrors().size(), "Should have single error");
        assertTrue(response.getResults().isEmpty(), "Should not return result");

        idsToDelete.add(id);
    }

    @Test
    public void createContestWithoutCompetitionIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).competitionId(null);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithNonExistentCompetitionIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).competitionId("competition_id_that_does_not_exist");

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled
    //fixme enable after row is added to core model
    public void createContestWithoutRowReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).row(null);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //fixme add row to model
    public void createContestWithIncorrectRowNotBetween1and20ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).row(25);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithoutRoundReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).round(null);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithIncorrectRoundNotBetween1and20ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).round(25);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithoutRoundTypeReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).roundType(null);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithIncorrectGroupStage0ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).groupStage(0);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithIncorrectGroupStageNegativeReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).groupStage(-1);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithIncorrectGroupStageLabelLengthReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).groupStageLabel("x".repeat(15001));

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithoutNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).name(null);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithIncorrectNameLengthReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).name("x".repeat(15001));

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithIncorrectDescriptionLengthReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).description("x".repeat(100001));

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithIncorrectTermsAndConditionsLengthReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).description("x".repeat(100001));

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Disabled //Fixme confirm if entrantsFromContest should be mandatory
    @Test
    public void createContestWithoutEntrantsFromContestsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).entrantsFromContest(null);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithEntrantsFromContestsHavingEmptyStringReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).entrantsFromContest(List.of(""));

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithIncorrectMaxNumberOfEntrants0ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).maxNumberOfEntrants(0);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithIncorrectMaxNumberOfEntrantsNegativeReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).maxNumberOfEntrants(-1);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithIncorrectMaxNumberOfEntrantsSameAsMinimumNumberOfEntrantsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId)
                .maxNumberOfEntrants(1)
                .minNumberOfEntrants(1);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithIncorrectMaxNumberOfEntrantsLowerThanMinimumNumberOfEntrantsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId)
                .maxNumberOfEntrants(1)
                .minNumberOfEntrants(2);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithoutMinimumNumberOfEntrantsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).minNumberOfEntrants(null);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithIncorrectMinNumberOfEntrants0ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).minNumberOfEntrants(0);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithIncorrectMinNumberOfEntrantsNegativeReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).minNumberOfEntrants(-1);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithoutRuleSetsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId);//.ruleSets(null);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithEmptyRuleSetsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId);//.ruleSets(new ArrayList<>());

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithoutScheduledStartDateReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).scheduledStartDate(null);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithoutScheduledEndDateReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).scheduledEndDate(null);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithScheduledStartDateAfterScheduledEndDateReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId)
                .scheduledStartDate(DateUtil.nowPlusDays(2))
                .scheduledEndDate(DateUtil.now());

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithoutStrategyReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).strategies(null);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestEmptyStrategyObjectReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).strategies(new Strategy());

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithoutStrategyTypeReturnErrorTest() throws ApiException {
        final var strategy = loadData.getCreateRequest(competitionId).getStrategies().strategyType(null);
        final var createRequest = loadData.getCreateRequest(competitionId).strategies(strategy);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithoutRankingStrategyReturnErrorTest() throws ApiException {
        final var strategy = loadData.getCreateRequest(competitionId).getStrategies().rankingStrategy(null);
        final var createRequest = loadData.getCreateRequest(competitionId).strategies(strategy);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled//fixme add constraint in core
    public void createContestWithoutRankingStrategyFieldConstraintsReturnErrorTest() throws ApiException {
        final var strategy = loadData.getCreateRequest(competitionId).getStrategies().rankingStrategy(new RankingStrategy().constraints(null));
        final var createRequest = loadData.getCreateRequest(competitionId).strategies(strategy);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //fixme add constraints in core
    public void createContestWithIncorrectRankingStrategyReturnErrorTest() throws ApiException {
        final var strategy = loadData.getCreateRequest(competitionId).getStrategies().rankingStrategy(new RankingStrategy().constraints(List.of("Non_existent_string")));
        final var createRequest = loadData.getCreateRequest(competitionId).strategies(strategy);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithoutScoringStrategyReturnErrorTest() throws ApiException {
        final var strategy = loadData.getCreateRequest(competitionId).getStrategies().scoringStrategy(null);
        final var createRequest = loadData.getCreateRequest(competitionId).strategies(strategy);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithEmptyScoringStrategyReturnErrorTest() throws ApiException {
        final var strategy = loadData.getCreateRequest(competitionId).getStrategies().scoringStrategy(null);
        final var createRequest = loadData.getCreateRequest(competitionId).strategies(strategy);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithoutScoringStrategyLimitUpdatesToReturnErrorTest() throws ApiException {
        final var scoringStrategy = loadData.getCreateRequest(competitionId).getStrategies().getScoringStrategy().limitUpdatesTo(null);
        final var strategy = loadData.getCreateRequest(competitionId).getStrategies().scoringStrategy(scoringStrategy);
        final var createRequest = loadData.getCreateRequest(competitionId).strategies(strategy);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithNegativeScoringStrategyLimitUpdatesToReturnErrorTest() throws ApiException {
        final var scoringStrategy = loadData.getCreateRequest(competitionId).getStrategies().getScoringStrategy().limitUpdatesTo(-1);
        final var strategy = loadData.getCreateRequest(competitionId).getStrategies().scoringStrategy(scoringStrategy);
        final var createRequest = loadData.getCreateRequest(competitionId).strategies(strategy);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithoutScoringStrategySumBestXOfReturnErrorTest() throws ApiException {
        final var scoringStrategy = loadData.getCreateRequest(competitionId).getStrategies().getScoringStrategy().sumBestXOf(null);
        final var strategy = loadData.getCreateRequest(competitionId).getStrategies().scoringStrategy(scoringStrategy);
        final var createRequest = loadData.getCreateRequest(competitionId).strategies(strategy);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithNegativeScoringStrategySumBestXOfToReturnErrorTest() throws ApiException {
        final var scoringStrategy = loadData.getCreateRequest(competitionId).getStrategies().getScoringStrategy().sumBestXOf(-1);
        final var strategy = loadData.getCreateRequest(competitionId).getStrategies().scoringStrategy(scoringStrategy);
        final var createRequest = loadData.getCreateRequest(competitionId).strategies(strategy);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithoutScoringStrategyLastUpdateTimeStampReturnErrorTest() throws ApiException {
        final var scoringStrategy = loadData.getCreateRequest(competitionId).getStrategies().getScoringStrategy().lastUpdateTimeStamp(null);
        final var strategy = loadData.getCreateRequest(competitionId).getStrategies().scoringStrategy(scoringStrategy);
        final var createRequest = loadData.getCreateRequest(competitionId).strategies(strategy);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithNegativeScoringStrategyLastUpdateTimeStampToReturnErrorTest() throws ApiException {
        final var scoringStrategy = loadData.getCreateRequest(competitionId).getStrategies().getScoringStrategy().lastUpdateTimeStamp(-1L);
        final var strategy = loadData.getCreateRequest(competitionId).getStrategies().scoringStrategy(scoringStrategy);
        final var createRequest = loadData.getCreateRequest(competitionId).strategies(strategy);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithoutScoringStrategyRecordTimeWhenSumReachesReturnErrorTest() throws ApiException {
        final var scoringStrategy = loadData.getCreateRequest(competitionId).getStrategies().getScoringStrategy().recordTimeWhenSumReaches(null);
        final var strategy = loadData.getCreateRequest(competitionId).getStrategies().scoringStrategy(scoringStrategy);
        final var createRequest = loadData.getCreateRequest(competitionId).strategies(strategy);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createContestWithNegativeScoringStrategyRecordTimeWhenSumReachesToReturnErrorTest() throws ApiException {
        final var scoringStrategy = loadData.getCreateRequest(competitionId).getStrategies().getScoringStrategy().recordTimeWhenSumReaches(-1D);
        final var strategy = loadData.getCreateRequest(competitionId).getStrategies().scoringStrategy(scoringStrategy);
        final var createRequest = loadData.getCreateRequest(competitionId).strategies(strategy);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled // fixme add Rewards conversion in core
    public void createContestWithRewardsObjectSizeGreaterThan100ReturnErrorTest() throws ApiException {
        List<CreateRewardRequest> givenRewards = IntStream.range(0, 101)
                .mapToObj(i -> new CreateRewardRequest())
                .collect(Collectors.toList());
        final var createRequest = loadData.getCreateRequest(competitionId).rewards(givenRewards);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //fixme add constraints in model
    public void createContestWithoutConstraintsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).constraints(null);

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled
    //fixme enable after implementation of constraints
    public void createContestWithConstraintsHavingAnEmptyStringReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).constraints(List.of(""));

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled  //fixme add constraints in model
    public void createContestWithConstraintsHavingIncorrectStringReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(competitionId).constraints(List.of("incorrect_string"));

        final var response = $(api.createContests(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Order(5)
    public void updateContestWithoutIdReturnErrorTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(competitionId);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateContestRequest()
                .id(null);

        Thread.sleep(15000);
        final var response = $(api.updateContest(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(6)
    public void updateContestWithoutIncorrectIdReturnErrorTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(competitionId);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateContestRequest()
                .id("incorrect_id");
        Thread.sleep(5000);
        final var response = $(api.updateContest(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(30)
    public void updateContestRemoveConstraintReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(competitionId);
        final var createResponse = loadData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        var responseAfterCreate = $(api.getContests( List.of(id), 1, 0));

        assertNotNull(responseAfterCreate);
        assertNotNull(responseAfterCreate.getResults());
        assertNotNull(responseAfterCreate.getErrors());
        assertTrue(responseAfterCreate.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, responseAfterCreate.getResults().size(), "Should has single result");
        String givenDescription = UUID.randomUUID().toString();

        var updateConstraint = new ArrayList<String>();
        updateConstraint.add("autoStart");

        final var given = new UpdateContestRequest().id(id);
        given.getConstraints().remove("autoStart");

        //WHEN
        final var updated = $(api.updateContest(given));

        assertNotNull(updated);
        assertNotNull(updated.getResults());
        assertNotNull(updated.getErrors());
        assertEquals(1, updated.getResults().size(), "Should contain updated entity");
        assertNotNull(updated.getResults().get(0).getId(), "Created entity should has id");

        String updatedId = updated.getResults().get(0).getId();


        List<String> ids = List.of(updatedId);
        Integer limit = 1;
        Integer skip = 0;

        var response = $(api.getContests(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(responseAfterCreate.getResults().get(0).getConstraints().size()-1, response.getResults().get(0).getConstraints().size(), "Should have 1 less constraint from the created request");

        var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");

        idsToDelete.add(id);

    }
}
