/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ziqni.admin.sdk.api;

import com.ziqni.admin.sdk.ApiException;
import com.ziqni.admin.sdk.configuration.AdminApiClientConfigBuilder;
import com.ziqni.admin.sdk.data.*;
import com.ziqni.admin.sdk.model.*;
import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for MembersApi
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class InstantWinsApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private static final Logger logger = LoggerFactory.getLogger(CompetitionsApiTest.class);

    private final InstantWinsApiWs api;
    private final LoadInstantWinsData loadTestData;
    private final LoadTagsData loadTagsData;
    private final LoadCustomFieldsData loadCustomFieldsData;

    private String tagKey;
    private String customFieldKey;

    private final List<String> idsToDelete = new ArrayList<>();
    private final List<String> tagIdsToDelete = new ArrayList<>();
    private final List<String> customFieldIdsToDelete = new ArrayList<>();

    public InstantWinsApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory(AdminApiClientConfigBuilder.build());
        this.api = ApiClientFactoryUtil.factory.getInstantWinsApi();
        this.loadTestData = new LoadInstantWinsData();
        this.loadCustomFieldsData = new LoadCustomFieldsData();
        this.loadTagsData = new LoadTagsData();
    }


    @BeforeAll
    public void setUp() {
        try {
            tagKey = loadTagsData.getModel();
            customFieldKey = loadCustomFieldsData.getModel(customFieldIdsToDelete, AppliesTo.MEMBER);
            tagIdsToDelete.add(tagKey);
        } catch (ApiException e){
                logger.error("error", e.getCause());
            }
    }

    @AfterAll
    public void cleanUp() {
        try {
            Thread.sleep(5000);
            loadTestData.deleteTestData(idsToDelete);
            loadTagsData.deleteTestData(tagIdsToDelete);
            loadCustomFieldsData.deleteTestData(customFieldIdsToDelete);
        }catch (ApiException | InterruptedException e){
            logger.error("error", e.getCause());
        }
    }

    @Test
    @Order(1)
    public void createInstantWinTest() throws ApiException {
        final var given = loadTestData.getCreateRequest();
        final var createRequestAsList = loadTestData.getCreateRequestAsList(given);

//        final var response = api.createMembers(createRequestAsList);
        ModelApiResponse response = $(api.createInstantWins(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

       // idsToDelete.add(response.getResults().get(0).getId());

    }
    @Test
    @Order(2)
    public void getInstantSingleIdReturnOkTest() throws ApiException, InterruptedException {
        final var request = loadTestData.getCreateRequest();
        final var createRequest = loadTestData.getCreateRequestAsList(request);
        final var createResponse = loadTestData.createTestData(createRequest);
        final var id = createResponse.getResults().get(0).getId();
           Thread.sleep(20000);
        final var ids = List.of(id);
        final var limit = 1;
        final var skip = 0;
        final var response = $(api.getInstantWins(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertEquals(request.getName(), item.getName(), "Found name should be equal to created previously");

     //   idsToDelete.add(id);

    }


}
