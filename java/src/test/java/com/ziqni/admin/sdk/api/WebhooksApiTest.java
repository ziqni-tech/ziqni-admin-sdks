/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.admin.sdk.api;

import com.ziqni.admin.sdk.data.*;
import com.ziqni.admin.sdk.model.*;
import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
import com.ziqni.admin.sdk.ZiqniAdminApiFactory;
import com.ziqni.admin.sdk.ApiException;
import com.ziqni.admin.sdk.data.*;
import com.ziqni.admin.sdk.model.*;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertTrue;


/**
 * API tests for WebhooksApi
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class WebhooksApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private static final Logger logger = LoggerFactory.getLogger(WebhooksApiTest.class);

    private WebhooksApiWs api;
    private LoadWebhooksData loadData;
    private LoadTransformerData loadTransformerData;
    private final LoadTagsData loadTagsData;
    private final LoadCustomFieldsData loadCustomFieldsData;

    private String transformerId;
    private String tagKey;
    private String customFieldKey;

    List<String> idsToDelete = new ArrayList<>();
    List<String> transformerIdsToDelete = new ArrayList<>();
    List<String> tagIdsToDelete = new ArrayList<>();
    List<String> customFieldIdsToDelete = new ArrayList<>();

    public WebhooksApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory();
        this.api = ZiqniAdminApiFactory.getWebhooksApi();

        this.loadData = new LoadWebhooksData();
        this.loadTransformerData = new LoadTransformerData();
        this.loadCustomFieldsData = new LoadCustomFieldsData();
        this.loadTagsData = new LoadTagsData();

    }


    @BeforeAll
    public void setUp(){
        try {
            final var createRequest = loadTransformerData.getCreateRequest();
            this.transformerId = loadTransformerData
                    .createTestData(List.of(createRequest))
                    .getResults()
                    .get(0)
                    .getId();

            tagKey = loadTagsData.getModel();
            customFieldKey = loadCustomFieldsData.getModel(customFieldIdsToDelete, AppliesTo.WEBHOOK);

            tagIdsToDelete.add(tagKey);

            transformerIdsToDelete.add(transformerId);

        }catch (ApiException e){
            logger.error("error", e.getCause());
        }
    }

    @AfterAll
    public void cleanUp() {
        try {
            Thread.sleep(5000);
            loadData.deleteTestData(idsToDelete);
            loadTransformerData.deleteTestData(transformerIdsToDelete);
            loadTagsData.deleteTestData(tagIdsToDelete);
            loadCustomFieldsData.deleteTestData(customFieldIdsToDelete);
        } catch (ApiException | InterruptedException e) {
            logger.error("error", e.getCause());
        }
    }

    @Test
    @Order(1)
    public void createWebhooksReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(transformerId);
        ModelApiResponse response = $(api.createWebhooks(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        idsToDelete.add(response.getResults().get(0).getId());
    }

    @Test
    @Order(2)
    public void getWebhooksSingleIdReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(transformerId);
        final var id = loadData.createTestData(createRequest).getResults().get(0).getId();

        List<String> ids = List.of(id);
        Integer limit = 1;
        Integer skip = 0;
        WebhookResponse response = $(api.getWebhooks( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        Webhook webhook = response.getResults().get(0);

        assertEquals(id, webhook.getId(), "Found id should be equal to requested");
        Assertions.assertEquals(createRequest.getName(), webhook.getName(),"Found tags should be null");

        idsToDelete.add(id);
    }
    @Test
    @Order(2)
    public void createWebhooksInvalidAddressReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(transformerId).postToUrl("www.google.com");
        ModelApiResponse response = $(api.createWebhooks(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertFalse(response.getErrors().isEmpty(), "Should have  errors");
        assertEquals(1, response.getErrors().size(), "Should have single error");
    }

    @Test
    @Order(2)
    public void createWebhooksWithTagsAndCustomFieldsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(transformerId)
                .tags(List.of(tagKey))
                .customFields(Map.of(customFieldKey, "name"));

        ModelApiResponse createResponse = $(api.createWebhooks(createRequest));

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        assertNotNull(createResponse.getErrors());
        assertEquals(1, createResponse.getResults().size(), "Should contain created entity");
        assertNotNull(createResponse.getResults().get(0).getId(), "Created entity should has id");

        final var id = createResponse.getResults().get(0).getId();
        int limit = 1;
        int skip = 0;

        Thread.sleep(5000);

        var response = $(api.getWebhooks(List.of(id), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");
        assertNotNull(response.getResults().get(0).getCustomFields());
        assertNotNull(response.getResults().get(0).getTags());
        assertEquals(1,response.getResults().get(0).getCustomFields().size());
        assertEquals(1,response.getResults().get(0).getTags().size());

        idsToDelete.add(id);
    }

    @Test
    @Order(2)
    public void getWebhooksByQueryTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(transformerId);
        final var id = loadData.createTestData(createRequest).getResults().get(0).getId();

        Thread.sleep(5000);

        QueryRequest givenQuery = new QueryRequest()
                .addShouldItem(new QueryMultiple().queryField("id").queryValues(List.of(id)))
                .shouldMatch(1);
        WebhookResponse response = $(api.getWebhooksByQuery( givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getResults().size(), "Should has single result");

        Webhook webhook = response.getResults().get(0);

        assertEquals(id, webhook.getId(), "Found id should be equal to requested");

        idsToDelete.add(id);
    }

    @Test
    @Order(3)
    public void createWebhookWithDuplicatedUrlOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(transformerId);

        ModelApiResponse response = $(api.createWebhooks(createRequest));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        idsToDelete.add(response.getResults().get(0).getId());
    }

    @Test
    public void getWebhooksTriggersTest() throws ApiException {

        final var response = $(api.getWebhooksTriggers());

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertTrue(response.getResults().size()>0,"Result size should be greater than zero");

    }
    @Test
    @Order(4)
    public void updateWebhooksValidRequestReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(transformerId);
        final var id = loadData.createTestData(createRequest).getResults().get(0).getId();
        //GIVEN
        String givenDescription = "Test_update_description";
        UpdateWebhookRequest given = new UpdateWebhookRequest()
                .id(id)
                .description(givenDescription)
                .headers(Map.of())
                ;


        //WHEN
        ModelApiResponse response = $(api.updateWebhooks(given));

        //THAN
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain updated entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        String updatedId = response.getResults().get(0).getId();


        List<String> ids = List.of(updatedId);
        Integer limit = 1;
        Integer skip = 0;
        WebhookResponse webhookResponse = $(api.getWebhooks( ids, limit, skip));

        assertNotNull(webhookResponse);
        assertNotNull(webhookResponse.getResults());
        assertEquals(1, webhookResponse.getResults().size(), "Should contain entity");

        Webhook webhook = webhookResponse.getResults().get(0);

        assertEquals(id, webhook.getId(), "Found id should be equal to requested");

        assertNotNull(webhook.getDescription(), "Found description should be not blank");
        assertEquals(givenDescription, webhook.getDescription(), "Description should be the same as provided");

        idsToDelete.add(id);
    }

    @Test
    @Order(5)
    public void updateWebhooksWithoutIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(transformerId);
        final var id = loadData.createTestData(createRequest).getResults().get(0).getId();

        UpdateWebhookRequest given = new UpdateWebhookRequest()
                .id(null);

        ModelApiResponse response = $(api.updateWebhooks(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(6)
    public void updateWebhooksWithIncorrectIdIdReturnErrorTest() throws ApiException {

        UpdateWebhookRequest given = new UpdateWebhookRequest()
                .id("updateWebhooksWithIncorrectIdIdReturnErrorTest");

        ModelApiResponse response = $(api.updateWebhooks(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Order(7)
    @Disabled
    //FixMe - enable after Custom Fields are implemented
    public void updateWebhooksWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(transformerId);
        final var id = loadData.createTestData(createRequest).getResults().get(0).getId();

        UpdateWebhookRequest given = new UpdateWebhookRequest()
                .id(id)
                .customFields(Map.of("",""));

        ModelApiResponse response = $(api.updateWebhooks(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(8)
    @Disabled
    //FixMe - enable after Custom Fields are implemented
    public void updateWebhooksWithCustomFieldsLimitMoreThan50ReturnErrorTest() throws ApiException {

        Map<String,Object> customFields = IntStream.range(0, 51)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        final var createRequest = loadData.getCreateRequest(transformerId);
        final var id = loadData.createTestData(createRequest).getResults().get(0).getId();

        UpdateWebhookRequest given = new UpdateWebhookRequest()
                .id(id)
                .customFields(customFields);

        ModelApiResponse response = $(api.updateWebhooks(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(9)
    @Disabled
    //FixMe - enable after tags are implemented
    public void updateWebhooksWithIncorrectTagsReturnErrorTest() throws ApiException {

        final var createRequest = loadData.getCreateRequest(transformerId);
        final var id = loadData.createTestData(createRequest).getResults().get(0).getId();

        UpdateWebhookRequest given = new UpdateWebhookRequest()
                .id(id)
                .tags(List.of(""));

        ModelApiResponse response = $(api.updateWebhooks(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(10)
    @Disabled
    //FixMe - enable after tags are implemented
    public void updateWebhooksWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {

        final var createRequest = loadData.getCreateRequest(transformerId);
        final var id = loadData.createTestData(createRequest).getResults().get(0).getId();

        List<String> tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        UpdateWebhookRequest given = new UpdateWebhookRequest()
                .id(id)
                .tags(tags);

        ModelApiResponse response = $(api.updateWebhooks(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(11)
    @Disabled
    //FixMe - enable after metadata are implemented
    public void updateWebhooksWithEmptyMetadataObjectReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(transformerId);
        final var id = loadData.createTestData(createRequest).getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();

        UpdateWebhookRequest given = new UpdateWebhookRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateWebhooks(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(12)
    @Disabled
    //FixMe - enable after metadata are implemented
    public void updateWebhooksWithMetadataKeyLengthMoreThan50CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(transformerId);
        final var id = loadData.createTestData(createRequest).getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put("a".repeat(51),UUID.randomUUID().toString());

        UpdateWebhookRequest given = new UpdateWebhookRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateWebhooks(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(13)
    @Disabled
    //FixMe - enable after metadata are implemented
    public void updateWebhooksWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(transformerId);
        final var id = loadData.createTestData(createRequest).getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put("#@)G?$0",UUID.randomUUID().toString());

        UpdateWebhookRequest given = new UpdateWebhookRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateWebhooks(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(14)
    @Disabled
    //FixMe - enable after metadata are implemented
    public void updateWebhooksWithMetadataValueLengthMoreThan200CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(transformerId);
        final var id = loadData.createTestData(createRequest).getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();
               givenMetadata.put(UUID.randomUUID().toString(),"a".repeat(201));

        UpdateWebhookRequest given = new UpdateWebhookRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateWebhooks(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }


    @Test
    @Order(16)
    @Disabled
    //FixMe - enable after metadata are implemented
    public void updateWebhooksWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(transformerId);
        final var id = loadData.createTestData(createRequest).getResults().get(0).getId();

        Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        UpdateWebhookRequest given = new UpdateWebhookRequest()
                .id(id)
                .metadata(givenMetas);

        ModelApiResponse response = $(api.updateWebhooks(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(17)
    public void updateWebhooksWithEmptyHeaderObjectReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(transformerId);
        final var id = loadData.createTestData(createRequest).getResults().get(0).getId();

        UpdateWebhookRequest given = new UpdateWebhookRequest()
                .id(id)
                .headers(Map.of());

        ModelApiResponse response = $(api.updateWebhooks(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(18)
    public void updateWebhooksWithNotAllowedCharsOfHeaderKeyReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(transformerId);
        final var id = loadData.createTestData(createRequest).getResults().get(0).getId();

        Map<String,String> givenMetadata = new HashMap<>();
        givenMetadata.put("#@)G?$0",UUID.randomUUID().toString());

        UpdateWebhookRequest given = new UpdateWebhookRequest()
                .id(id)
                .headers(givenMetadata);

        ModelApiResponse response = $(api.updateWebhooks(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(19)
    public void updateWebhooksWithHeadersLimitMoreThan50ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(transformerId);
        final var id = loadData.createTestData(createRequest).getResults().get(0).getId();

        Map<String,String> givenHeaders = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenHeaders));

        UpdateWebhookRequest given = new UpdateWebhookRequest()
                .id(id)
                .headers(givenHeaders);

        ModelApiResponse response = $(api.updateWebhooks(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(20)
    public void updateWebhooksWithDescriptionLengthMoreThan100CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(transformerId);
        final var id = loadData.createTestData(createRequest).getResults().get(0).getId();

        UpdateWebhookRequest given = new UpdateWebhookRequest()
                .id(id)
                .description("a".repeat(501));

        ModelApiResponse response = $(api.updateWebhooks(given));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(21)
    public void deleteWebhooksTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(transformerId);
        final var id = loadData.createTestData(createRequest).getResults().get(0).getId();

        Thread.sleep(5000);

        ModelApiResponse response = $(api.deleteWebhooks(List.of(id)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

    }


    @Test
    public void deleteWebhooksByQueryTest() throws ApiException , InterruptedException {
        final var createRequest = loadData.getCreateRequest(transformerId);
        final var createdResponse = loadData.createTestData(createRequest);
        final var id = createdResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        assertNotNull(createdResponse);
        assertNotNull(createdResponse.getResults());
        assertNotNull(createdResponse.getErrors());
        Assertions.assertEquals(1, createdResponse.getResults().size(), "Should contain created entity");
        String givenId = createdResponse.getResults().get(0).getId();
        assertNotNull(givenId, "Created entity should has id");

        QueryRequest givenQuery = new QueryRequest()
                .addShouldItem(new QueryMultiple().queryField("id").queryValues(List.of(givenId)))
                .shouldMatch(1);
        ModelApiResponse response = $(api.deleteWebhooksByQuery( givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

    }

    @Test
    public void deleteWebhooksWithIncorrectIdReturnErrorTest() throws ApiException {
        List<String> givenIds = List.of("some_incorrect_id_for_delete");

        ModelApiResponse response = $(api.deleteWebhooks(givenIds));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }


    @Test
    @Disabled
    //Fixme enable after implementing state logic
    public void updateWebhooksStateTest() throws ApiException {
        ConnectionState givenState = ConnectionState.START;
        
        CreateWebhookRequest given = new CreateWebhookRequest();

        ModelApiResponse createdResponse = $(api.createWebhooks(given));

        assertNotNull(createdResponse);
        assertNotNull(createdResponse.getResults());
        assertNotNull(createdResponse.getErrors());
        assertEquals(1, createdResponse.getResults().size(), "Should contain created entity");
        String givenId = createdResponse.getResults().get(0).getId();
        assertNotNull(givenId, "Created entity should has id");

        UpdateStateRequest whenUpdate = new UpdateStateRequest()
                .id(givenId)
                .status(givenState);
        ModelApiResponse response = $(api.updateWebhooksState( whenUpdate));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain updated entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        String updatedId = response.getResults().get(0).getId();
        
        List<String> ids = List.of(updatedId);
        Integer limit = 1;
        Integer skip = 0;
        WebhookResponse thanResponse = $(api.getWebhooks( ids, limit, skip));

        assertNotNull(thanResponse);
        assertNotNull(thanResponse.getResults());
        assertEquals(1, thanResponse.getResults().size(), "Should contain entity");

        Webhook webhook = thanResponse.getResults().get(0);

        assertEquals(givenId, webhook.getId(), "Found id should be equal to requested");
        assertEquals(givenState, webhook.getStatus(), "Found state should be equal to requested");

        idsToDelete.add(givenId);
    }

    @Test
    @Disabled
    //FixMe - enable after Custom Fields are implemented
    public void createWebhooksWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {

        final var createRequest = loadData
                .getCreateRequest(transformerId)
                .customFields(Map.of("",""));

        ModelApiResponse response = $(api.createWebhooks(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //FixMe - enable after Custom Fields are implemented
    public void createWebhooksWithCustomFieldsLimitMoreThan50ReturnErrorTest() throws ApiException {

        Map<String,Object> givenCustomFields = IntStream.range(0, 51)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        final var createRequest = loadData
                .getCreateRequest(transformerId)
                .customFields(givenCustomFields);

        ModelApiResponse response = $(api.createWebhooks(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled
    //FixMe - enable after tags are implemented
    public void createWebhooksWithIncorrectTagsReturnErrorTest() throws ApiException {

        final var createRequest = loadData
                .getCreateRequest(transformerId)
                .tags(List.of(""));

        ModelApiResponse response = $(api.createWebhooks(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //FixMe - enable after tags are implemented
    public void createWebhooksWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {

        List<String> tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        final var createRequest = loadData
                .getCreateRequest(transformerId)
                .tags(tags);

        ModelApiResponse response = $(api.createWebhooks(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled
    //FixMe - enable after metadata are implemented
    public void createWebhooksWithEmptyMetadataObjectReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();

        final var createRequest = loadData
                .getCreateRequest(transformerId)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.createWebhooks(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled
    //FixMe - enable after metadata are implemented
    public void createWebhooksWithMetadataKeyLengthMoreThan50CharsReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put("a".repeat(51),UUID.randomUUID().toString());

        final var createRequest = loadData
                .getCreateRequest(transformerId)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.createWebhooks(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled
    //FixMe - enable after metadata are implemented
    public void createWebhooksWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put("#@)G?$0",UUID.randomUUID().toString());

        final var createRequest = loadData
                .getCreateRequest(transformerId)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.createWebhooks(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled
    //FixMe - enable after metadata are implemented
    public void createWebhooksWithMetadataValueLengthMoreThan200CharsReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();
               givenMetadata.put(UUID.randomUUID().toString(),"a".repeat(201));

        final var createRequest = loadData
                .getCreateRequest(transformerId)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.createWebhooks(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createWebhooksWithDescriptionLengthMoreThan100CharsReturnErrorTest() throws ApiException {

        final var createRequest = loadData
                .getCreateRequest(transformerId)
                .description("a".repeat(501));

        ModelApiResponse response = $(api.createWebhooks(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled
    //FixMe - enable after metadata are implemented
    public void createWebhooksWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {

        Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        final var createRequest = loadData
                .getCreateRequest(transformerId)
                .metadata(givenMetas);

        ModelApiResponse response = $(api.createWebhooks(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createWebhooksWithoutNameReturnErrorTest() throws ApiException {

        final var createRequest = loadData
                .getCreateRequest(transformerId)
                .name(null);

        ModelApiResponse response = $(api.createWebhooks(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createWebhooksWithEmptyNameReturnErrorTest() throws ApiException {

        final var createRequest = loadData
                .getCreateRequest(transformerId)
                .name("");

        ModelApiResponse response = $(api.createWebhooks(createRequest));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

}
