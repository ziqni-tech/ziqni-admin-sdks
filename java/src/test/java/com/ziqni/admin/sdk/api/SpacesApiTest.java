/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.admin.sdk.api;

import com.ziqni.admin.sdk.data.LoadSpacesData;
import com.ziqni.admin.sdk.model.SpaceResponse;
import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
import com.ziqni.admin.sdk.configuration.AdminApiClientConfigBuilder;
import com.ziqni.admin.sdk.ApiException;
import com.ziqni.admin.sdk.model.CreateSpaceRequest;
import com.ziqni.admin.sdk.model.ModelApiResponse;
import com.ziqni.admin.sdk.model.UpdateSpaceRequest;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Random;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertNotNull;


/**
 * API tests for SpacesApi
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class SpacesApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private final SpacesApiWs api;

    private LoadSpacesData loadData;

    private List<String>  spaceNamesToDelete = new ArrayList<>();

    private static final Logger logger = LoggerFactory.getLogger(SpacesApiTest.class);

    public SpacesApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory(AdminApiClientConfigBuilder.build());
        this.api = ApiClientFactoryUtil.factory.getSpacesApi();
        ApiClientFactoryUtil.initApiClientFactory(AdminApiClientConfigBuilder.build());

        this.loadData = new LoadSpacesData();
    }

    @AfterAll
    public void cleanUp() throws Exception {
        try {
            Thread.sleep(5000);
            loadData.deleteTestData(spaceNamesToDelete);
        } catch (ApiException e) {
            logger.error("error", e.getCause());
        }

    }

    @Test
    @Order(1)
    public void createSpacesTest() throws ApiException {
        CreateSpaceRequest space = new CreateSpaceRequest();
        space.setAccountType("Trial");
        space.setName("tesew" + new Random().nextInt(10000));

        ModelApiResponse response =
                api.createSpace(List.of(space)).join();
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertEquals(0, response.getErrors().size());
        spaceNamesToDelete.add(space.getName());
    }


    @Test
    @Order(2)
    public void getListOfSpacesForUserTest() throws ApiException {

        Integer limit = 0;
        Integer skip = 1;
        SpaceResponse response =
                $(api.getSpaceInfromation(limit, skip));
        assertTrue(Objects.nonNull(response));
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
    }

    @Test
    @Order(3)
    public void getSpacesByNameTest() throws ApiException, InterruptedException {
        var spaceName = loadData.getSpaceName("tesew");
        Thread.sleep(10000);
        Integer limit = 1;
        Integer skip = 0;
        SpaceResponse response =
                $(api.getSpacesByName(spaceName, limit, skip));
        assertNotNull(response);
        logger.info("Response: "+response.toString());
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");
        spaceNamesToDelete.add(spaceName);
    }


    @Test
    @Order(4)
    public void createSpaceNameContainsAllowedCharactersReturnErrorTest() throws ApiException, InterruptedException {
        CreateSpaceRequest space = new CreateSpaceRequest();
        space.setAccountType("Trial");
        space.setName("*&^%$#" + new Random().nextInt(10000));
        ModelApiResponse response =
                $(api.createSpace(List.of(space)));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Should not contain created entity");
        assertEquals(1, response.getErrors().size());
        spaceNamesToDelete.add(space.getName());
    }

    @Test
    @Order(5)
    public void createSpaceSpaceNameIsNotSetReturnErrorTest() throws ApiException, InterruptedException {
        CreateSpaceRequest space = new CreateSpaceRequest();
        space.setAccountType("Trial");
        ModelApiResponse response =
                $(api.createSpace(List.of(space)));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Should not contain created entity");
        assertEquals(1, response.getErrors().size());
        spaceNamesToDelete.add(space.getName());
    }

    @Test
    @Order(5)
    public void createSpaceNameLengthNotValidReturnErrorTest() throws ApiException, InterruptedException {
        CreateSpaceRequest space = new CreateSpaceRequest();
        space.setAccountType("Trial");
        space.setName("q".repeat(35)
                + new Random().nextInt(10000));
        ModelApiResponse response =
                $(api.createSpace(List.of(space)));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Should not contain created entity");
        assertEquals(1, response.getErrors().size());
        spaceNamesToDelete.add(space.getName());
    }

    @Test
    @Order(6)
    public void createSpaceAccountTypeNotSetReturnErrorTest() throws ApiException, InterruptedException {
        CreateSpaceRequest space = new CreateSpaceRequest();
        space.setName("test-tm" + new Random().nextInt(10000));
        ModelApiResponse response =
                $(api.createSpace(List.of(space)));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Should not contain created entity");
        assertEquals(1, response.getErrors().size());
        spaceNamesToDelete.add(space.getName());
    }

    @Test
    @Order(7)
    public void createSpaceWrongAccountTypeReturnErrorTest() throws ApiException, InterruptedException {
        CreateSpaceRequest space = new CreateSpaceRequest();
        space.setAccountType("Non-Existing Account Type");
        space.setName("test-tm" + new Random().nextInt(10000));
        ModelApiResponse response =
                $(api.createSpace(List.of(space)));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Should not contain created entity");
        assertEquals(1, response.getErrors().size());
        spaceNamesToDelete.add(space.getName());
    }

    @Test
    @Order(8)
    public void createSpaceInvalidMasterSpaceReturnErrorTest() throws ApiException {
        CreateSpaceRequest space = new CreateSpaceRequest();
        space.setAccountType("Trial");
        space.setMasterSpace("anObk2cBGozaEWERtYY7");
        space.setName("tesew" + new Random().nextInt(10000));

        ModelApiResponse response =
                api.createSpace(List.of(space)).join();
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Should not contain created entity");
        assertEquals(1, response.getErrors().size());
        spaceNamesToDelete.add(space.getName());
    }

    @Test
    @Order(9)

    public void deleteSpacesTest() throws ApiException, InterruptedException {
        var spaceName = loadData.getSpaceName("tesew");
        Thread.sleep(15000);

        ModelApiResponse response =
                $(api.deleteSpaces(spaceName));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Should contain deleted entity");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

    }

    @Test
    @Order(10)
    public void createSpaceNameContainsUnderscoreReturnErrorTest() throws ApiException, InterruptedException {
        CreateSpaceRequest space = new CreateSpaceRequest();
        space.setAccountType("Trial");
        space.setName("test_name" + new Random().nextInt(10000));
        ModelApiResponse response =
                (api.createSpace(List.of(space)).join());
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Should not contain created entity");
        assertEquals(1, response.getErrors().size());
        spaceNamesToDelete.add(space.getName());
    }

    @Test
    @Order(11)
    public void createSpaceNameContainsDollarSignErrorTest() throws ApiException, InterruptedException {
        CreateSpaceRequest space = new CreateSpaceRequest();
        space.setAccountType("Trial");
        space.setName("test$name" + new Random().nextInt(10000));
        ModelApiResponse response =
                (api.createSpace(List.of(space)).join());
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Should not contain created entity");
        assertEquals(1, response.getErrors().size());
        spaceNamesToDelete.add(space.getName());
    }

    @Test
    @Order(12)
    public void createSpaceNameContainsSpaceReturnErrorTest() throws ApiException, InterruptedException {
        CreateSpaceRequest space = new CreateSpaceRequest();
        space.setAccountType("Trial");
        space.setName("test name" + new Random().nextInt(10000));
        ModelApiResponse response =
                (api.createSpace(List.of(space)).join());
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Should not contain created entity");
        assertTrue(response.getErrors().size()>0);
        spaceNamesToDelete.add(space.getName());
    }

    @Test
    @Order(13)
    public void createSpaceNameContainsOneSpecialCharacterReturnErrorTest() throws ApiException, InterruptedException {
        CreateSpaceRequest space = new CreateSpaceRequest();
        space.setAccountType("Trial");
        space.setName("test@name" + new Random().nextInt(10000));
        ModelApiResponse response =
                (api.createSpace(List.of(space)).join());
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Should not contain created entity");
        assertTrue(response.getErrors().size()>0);
        spaceNamesToDelete.add(space.getName());
    }

    @Test
    @Order(14)
    public void createSpaceWithHyphenTest() throws ApiException {
        CreateSpaceRequest space = new CreateSpaceRequest();
        space.setAccountType("Trial");
        space.setName("test-name" + new Random().nextInt(10000));

        ModelApiResponse response =
                api.createSpace(List.of(space)).join();
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertEquals(0, response.getErrors().size());
        spaceNamesToDelete.add(space.getName());
    }

    @Test
    @Order(15)
    public void createSpaceStartingWithNumericReturnErrorTest() throws ApiException {
        CreateSpaceRequest space = new CreateSpaceRequest();
        space.setAccountType("Trial");
        space.setName("123test" + new Random().nextInt(10000));
        ModelApiResponse response =
                (api.createSpace(List.of(space)).join());
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Should not contain created entity");
        assertTrue(response.getErrors().size()>0);
        spaceNamesToDelete.add(space.getName());
    }

    @Test
    @Order(16)
    public void createSpaceNameContainsAmpersandReturnErrorTest() throws ApiException, InterruptedException {
        CreateSpaceRequest space = new CreateSpaceRequest();
        space.setAccountType("Trial");
        space.setName("test&name" + new Random().nextInt(10000));
        ModelApiResponse response =
                (api.createSpace(List.of(space)).join());
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Should not contain created entity");
        assertTrue(response.getErrors().size()>0);
        spaceNamesToDelete.add(space.getName());
    }

    @Test
    @Order(17)
    public void createSpaceNameContainsBracketsReturnErrorTest() throws ApiException, InterruptedException {
        CreateSpaceRequest space = new CreateSpaceRequest();
        space.setAccountType("Trial");
        space.setName("test()name" + new Random().nextInt(10000));
        ModelApiResponse response =
                (api.createSpace(List.of(space)).join());
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Should not contain created entity");
        assertTrue(response.getErrors().size()>0);
        spaceNamesToDelete.add(space.getName());
    }

    @Test
    @Order(18)
    public void deleteSpaceInUseAsMasterSpaceUseReturnErrorTest() throws ApiException, InterruptedException {
        var spaceName = "myspace5";
        Thread.sleep(15000);

        ModelApiResponse response =
                $(api.deleteSpaces(spaceName));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getErrors().size(), "Errors should not be empty");
    }

    @Test
    @Order(19)
    public void deleteSpaceWithNonExistingSpaceNameReturnErrorTest() throws ApiException, InterruptedException {

        ModelApiResponse response =
                $(api.deleteSpaces("doesNotExist"));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue( response.getErrors().size()>0, "Errors should not be empty");
    }

    @Test
    @Order(20)
    public void deleteSpaceWithSpacesOnSpaceNameReturnErrorTest() throws ApiException, InterruptedException {

        ModelApiResponse response =
                $(api.deleteSpaces("myspace 5"));
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue( response.getErrors().size()>0, "Errors should not be empty");
    }

    @Test
    @Disabled
    public void updateSpacesTest() throws ApiException {
        UpdateSpaceRequest body = new UpdateSpaceRequest();
        String X_API_KEY = null;
        ModelApiResponse response =
                $(api.updateSpace(body));

        // TODO: test validations
    }

    @Test
    @Order(7)
    public void updateSpaceWrongAccountTypeReturnErrorTest() throws ApiException, InterruptedException {
        CreateSpaceRequest space = new CreateSpaceRequest();
        space.setAccountType("Trial");
        space.setName("test-" + new Random().nextInt(10000));

        ModelApiResponse createResponse = api.createSpace(List.of(space)).join();
        assertNotNull(createResponse);

        UpdateSpaceRequest updateSpaceRequest = new UpdateSpaceRequest();
        updateSpaceRequest.setAccountType("Business");

        final ModelApiResponse response = api.updateSpace(updateSpaceRequest).join();
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Should not contain created entity");
        assertEquals(1, response.getErrors().size());
        spaceNamesToDelete.add(space.getName());
    }

    @Test
    @Order(7)
    public void updateSpaceInvalidMasterSpaceReturnErrorTest() throws ApiException, InterruptedException {
        CreateSpaceRequest space = new CreateSpaceRequest();
        space.setAccountType("Trial");
        space.setName("test-" + new Random().nextInt(10000));

        ModelApiResponse createResponse = api.createSpace(List.of(space)).join();
        assertNotNull(createResponse);

        UpdateSpaceRequest updateSpaceRequest = new UpdateSpaceRequest();
        updateSpaceRequest.setMasterSpace("InvalidMasterSpace");

        final ModelApiResponse response = api.updateSpace(updateSpaceRequest).join();
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Should not contain created entity");
        assertEquals(1, response.getErrors().size());
        spaceNamesToDelete.add(space.getName());
    }

    @Test
    @Order(7)
    public void updateSpaceInvalidUnitOfMeasureReturnErrorTest() throws ApiException, InterruptedException {
        CreateSpaceRequest space = new CreateSpaceRequest();
        space.setAccountType("Trial");
        space.setName("test-" + new Random().nextInt(10000));

        ModelApiResponse createResponse = api.createSpace(List.of(space)).join();
        assertNotNull(createResponse);

        UpdateSpaceRequest updateSpaceRequest = new UpdateSpaceRequest();

        final ModelApiResponse response = api.updateSpace(updateSpaceRequest).join();
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Should not contain created entity");
        assertEquals(1, response.getErrors().size());
        spaceNamesToDelete.add(space.getName());
    }

}
