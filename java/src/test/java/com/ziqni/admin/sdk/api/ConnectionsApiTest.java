/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.admin.sdk.api;


import com.ziqni.admin.sdk.ApiException;
import com.ziqni.admin.sdk.ZiqniAdminApiFactory;
import com.ziqni.admin.sdk.data.LoadConnectionsData;
import com.ziqni.admin.sdk.data.LoadCustomFieldsData;
import com.ziqni.admin.sdk.data.LoadTagsData;
import com.ziqni.admin.sdk.data.LoadTransformerData;
import com.ziqni.admin.sdk.model.*;
import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
import org.apache.commons.collections.CollectionUtils;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.*;


/**
 * API tests for ConsumersApi
 */

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class ConnectionsApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private static final Logger logger = LoggerFactory.getLogger(ConnectionsApiTest.class);
    private ConnectionsApiWs api;
    private LoadConnectionsData loadData;
    private LoadTransformerData loadTransformerData;
    private final LoadTagsData loadTagsData;
    private final LoadCustomFieldsData loadCustomFieldsData;

    private String tagId;
    private String customFieldKey;

    private List<String> rabbitMqIdsToDelete = new ArrayList<>();
    private List<String> kafkaIdsToDelete = new ArrayList<>();
    private List<String> sqsIdsToDelete = new ArrayList<>();
    private List<String> transformerIdsToDelete = new ArrayList<>();
    List<String> tagIdsToDelete = new ArrayList<>();
    List<String> customFieldIdsToDelete = new ArrayList<>();

    private String transformerId;

    public ConnectionsApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory();
        this.api = ZiqniAdminApiFactory.getConnectionsApi();
        this.loadData = new LoadConnectionsData();
        this.loadTransformerData = new LoadTransformerData();
        this.loadCustomFieldsData = new LoadCustomFieldsData();
        this.loadTagsData = new LoadTagsData();
    }

    @BeforeAll
    public void setUp() throws ApiException, InterruptedException {
        this.transformerId = loadTransformerData.createTestData(loadTransformerData.getCreateRequestAsList(loadTransformerData.getCreateRequest())).getResults().get(0).getId();

        Thread.sleep(5000);
        transformerIdsToDelete.add(transformerId);
        tagId = loadTagsData.getModel();
        customFieldKey = loadCustomFieldsData.getModel(customFieldIdsToDelete, AppliesTo.KAFKACONNECTION);

        tagIdsToDelete.add(tagId);

    }

    @AfterAll
    public void cleanUp() {
        try {
            loadData.deleteRabbitMqTestData(rabbitMqIdsToDelete);
            loadData.deleteKafkaTestData(kafkaIdsToDelete);
            loadData.deleteSqsTestData(sqsIdsToDelete);
            loadTransformerData.deleteTestData(transformerIdsToDelete);
        } catch (ApiException e) {
            logger.error("error", e.getCause());
        }

    }

    @Test
    @Order(1)
    public void deleteAndUpdateOldConnections() throws ApiException {

        QueryRequest getQuery = new QueryRequest()
                .addMustItem(new QueryMultiple().queryField("consumerType").queryValues(List.of("RabbitMqConnection")))

                ;

        var getResponse = $(api.getConnectionsByQuery(getQuery));
           if(!CollectionUtils.isEmpty(getResponse.getResults()))
           {
               final var rabbitIds = getResponse.getResults().stream().map(Connection::getId).collect(Collectors.toList());

             var updateConnectionRequestList= rabbitIds.stream().map(id->{
                  var updateConnectionRequest=new UpdateConnectionRequest();
                  return updateConnectionRequest.id(id).connectionType(ConnectionType.RABBITMQ);

              }).collect(Collectors.toList());

               var updateResponse = $(api.updateConnections(updateConnectionRequestList));
               assertNotNull(updateResponse);
               assertNotNull(updateResponse.getResults());
               assertNotNull(updateResponse.getErrors());
               assertEquals(rabbitIds.size(), updateResponse.getResults().size(), "Should contain updated entities");
           }

        QueryRequest givenQuery = new QueryRequest()
                .addMustItem(new QueryMultiple().queryField("consumerType").queryValues(List.of("SqsConnection")))
                .addMustItem(new QueryMultiple().queryField("consumerType").queryValues(List.of("KafkaConnection")))
                ;

        ModelApiResponse response = $(api.deleteConnectionsByQuery(givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");



    }


}
