/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.admin.sdk.api;

import com.ziqni.admin.sdk.ApiException;
import com.ziqni.admin.sdk.configuration.AdminApiClientConfigBuilder;
import com.ziqni.admin.sdk.data.*;
import com.ziqni.admin.sdk.model.*;
import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for UnitsOfMeasureApi
 */

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class WalletTypesApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private static final Logger logger = LoggerFactory.getLogger(WalletTypesApiTest.class);

    private WalletTypesApiWs api;

    private LoadWalletTypeData loadTestData;
    private final LoadTagsData loadTagsData;
    private final LoadCustomFieldsData loadCustomFieldsData;

    private String tagKey;
    private String customFieldKey;

    private List<String> idsToDelete = new ArrayList<>();
    private List<String> tagIdsToDelete = new ArrayList<>();
    private List<String> customFieldIdsToDelete = new ArrayList<>();

    public WalletTypesApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory(AdminApiClientConfigBuilder.build());
        this.api = ApiClientFactoryUtil.factory.getWalletTypesApi();
        this.loadTestData = new LoadWalletTypeData();
        this.loadCustomFieldsData = new LoadCustomFieldsData();
        this.loadTagsData = new LoadTagsData();
    }


    @BeforeAll
    public void setUp() throws ApiException {
        tagKey = loadTagsData.getModel();
        customFieldKey = loadCustomFieldsData.getModel(customFieldIdsToDelete, AppliesTo.UNITOFMEASURE);

        tagIdsToDelete.add(tagKey);
    }

    @AfterAll
    public void cleanUp() throws ApiException {
        try {

            Thread.sleep(5000);

            loadTestData.deleteTestData(idsToDelete);
            loadTagsData.deleteTestData(tagIdsToDelete);
            loadCustomFieldsData.deleteTestData(customFieldIdsToDelete);
        } catch (ApiException | InterruptedException e) {
            logger.error("error", e.getCause());
        }

    }

    @Test
    @Order(1)
    public void createWalletTypeReturnOkTest() throws ApiException {

        final var createRequest = loadTestData.getCreateRequest("UeY-5pUBjhDu8JmkYkxI");
        ModelApiResponse response = $(api.createWalletTypes(loadTestData.getCreateRequestAsList(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");
        logger.info(response.getResults().get(0).getId());
     //   idsToDelete.add(response.getResults().get(0).getId());
    }

    @Test
    @Order(20)
    public void getWalletTypeSingleIdReturnOkTest() throws ApiException, InterruptedException {


        Integer limit = 1;
        Integer skip = 0;

        Thread.sleep(5000);

        var response = $(api.getWalletTypes(List.of("UeY-5pUBjhDu8JmkYkxI"), limit, skip));


        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        var item = response.getResults().get(0);
//
//        assertEquals(id, item.getId(), "Found id should be equal to requested");
//        Assertions.assertEquals(request.getName(), item.getName(), "Found name should be equal to created previously");
//        Assertions.assertEquals(request.getKey(), item.getKey(), "Found key should be equal to created previously");
//        Assertions.assertEquals(request.getUnitOfMeasureType(), item.getUnitOfMeasureType(), "Found unit of measure should be " + request.getUnitOfMeasureType());
//        Assertions.assertEquals(request.getMultiplier(), item.getMultiplier(), "Found multiplier of constraints should be equal " + request.getMultiplier());
//
//        idsToDelete.add(id);
    }


}
