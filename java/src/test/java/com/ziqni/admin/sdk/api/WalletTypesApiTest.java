/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.admin.sdk.api;

import com.ziqni.admin.sdk.ApiException;
import com.ziqni.admin.sdk.configuration.AdminApiClientConfigBuilder;
import com.ziqni.admin.sdk.data.*;
import com.ziqni.admin.sdk.model.*;
import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.math.BigDecimal;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.*;



@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class WalletTypesApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private static final Logger logger = LoggerFactory.getLogger(WalletTypesApiTest.class);

    private final WalletTypesApiWs api;
    private final WalletsApiWs walletsApi;

    private final LoadWalletTypeData loadTestData;
    private final LoadUnitsOfMeasureData loadUnitsOfMeasureData;
    private final LoadWalletData loadWalletData;

    private final LoadMembersData loadMembersData;
    private String unitOfMeasureId;
    private String memberId;

    private List<String> idsToDelete = new ArrayList<>();
    private List<String> unitOfMeasureIdsToDelete = new ArrayList<>();
    private List<String> memberIdsToDelete = new ArrayList<>();


    public WalletTypesApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory(AdminApiClientConfigBuilder.build());
        this.api = ApiClientFactoryUtil.factory.getWalletTypesApi();
        this.walletsApi = ApiClientFactoryUtil.factory.getWalletsApi();
        this.loadTestData = new LoadWalletTypeData();
        this.loadUnitsOfMeasureData = new LoadUnitsOfMeasureData();
        this.loadWalletData = new LoadWalletData();
        this.loadMembersData = new LoadMembersData();
    }


    @BeforeAll
    public void setUp() throws ApiException ,InterruptedException{
         unitOfMeasureId = loadUnitsOfMeasureData.createTestData(loadUnitsOfMeasureData.
                getCreateRequestAsList(1)).getResults().get(0).getId();
        unitOfMeasureIdsToDelete.add(unitOfMeasureId);
        Thread.sleep(5000);
        memberId=loadMembersData.createTestData(List.of(loadMembersData.getCreateRequest()))
                .getResults().get(0).getId();
        memberIdsToDelete.add(memberId);

    }

    @AfterAll
    public void cleanUp() throws ApiException {
        try {

            Thread.sleep(5000);

            loadTestData.deleteTestData(idsToDelete);
            loadUnitsOfMeasureData.deleteTestData(unitOfMeasureIdsToDelete);

        } catch (ApiException | InterruptedException e) {
            logger.error("error", e.getCause());
        }

    }

    @Test
    @Order(1)
    public void createWalletTypeReturnOkTest() throws ApiException {

        final var createRequest = loadTestData.getCreateRequest(unitOfMeasureId);
        ModelApiResponse response = $(api.createWalletTypes(loadTestData.getCreateRequestAsList(createRequest)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");
        logger.info(response.getResults().get(0).getId());
       idsToDelete.add(response.getResults().get(0).getId());
    }

    @Test
    @Order(2)
    public void getWalletTypeSingleIdReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadTestData.getCreateRequest(unitOfMeasureId);
        var walletTypeId = loadTestData.createTestData(List.of(createRequest)).getResults().get(0).getId();
        Integer limit = 1;
        Integer skip = 0;

        Thread.sleep(5000);

        var response = $(api.getWalletTypes(List.of(walletTypeId), limit, skip));


        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        var item = response.getResults().get(0);

        idsToDelete.add(item.getId());
    }
    @Test
    @Order(2)
    public void deleteWalletTypeSingleIdReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadTestData.getCreateRequest(unitOfMeasureId);
        var walletTypeId = loadTestData.createTestData(List.of(createRequest)).getResults().get(0).getId();
        Thread.sleep(10000);
        var response = $(api.deleteWalletTypes(List.of(walletTypeId)));


        assertNotNull(response);

        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");


    }
    @Test
    @Order(3)
    public void retrieveWalletTransactionsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadTestData.getCreateRequest(unitOfMeasureId);
        var id = loadTestData.createTestData(List.of(createRequest)).getResults().get(0).getId();
        final var createWalletRequest = loadWalletData.getCreateRequest(memberId, id);
        var walletId = loadWalletData.createTestData(List.of(createWalletRequest)).getResults().get(0).getId();

        BigDecimal amount = BigDecimal.valueOf(100);
        WalletTransactionType transactionType = WalletTransactionType.CREDIT;
        WalletTransactionRequest request = new WalletTransactionRequest()
                .amount(amount)
                .transactionType(transactionType)
                .sourceWalletId(walletId);

        Thread.sleep(5000);
        var response = $(walletsApi.manageWalletTransaction(request));

        assertNotNull(response);
        assertTrue(response.getErrors().isEmpty());



        var walletResponse = $(api.retrieveWalletTransactionsByWalletTypeId(List.of(id), 1, 0));
        assertNotNull(walletResponse);
        assertTrue(walletResponse.getErrors().isEmpty());

        WalletTransaction walletTransaction = walletResponse.getResults().get(0);
        BigDecimal walletBalance = walletTransaction.getAmount();
        assertEquals(amount, walletBalance, "Wallet balance should match transaction amount");
        assertEquals(transactionType.getValue(), walletTransaction.getTransactionType(), "Wallet type should match transaction type input");
        idsToDelete.add(walletId);
    }

}
