/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.admin.sdk.api;

import com.ziqni.admin.sdk.data.LoadMetadata;
import com.ziqni.admin.sdk.data.LoadTagsData;
import com.ziqni.admin.sdk.model.*;
import com.ziqni.admin.sdk.util.ApiClientFactoryUtil;
import com.ziqni.admin.sdk.configuration.AdminApiClientConfigBuilder;
import com.ziqni.admin.sdk.ApiException;
import com.ziqni.admin.sdk.model.*;
import com.ziqni.admin.sdk.model.Tag;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.*;


/**
 * API tests for TagsApi
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class TagsApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private static final Logger logger = LoggerFactory.getLogger(TagsApiTest.class);

    private TagsApiWs api;
    private LoadTagsData loadData;

    List<String> idsToDelete = new ArrayList<>();

    public TagsApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory(AdminApiClientConfigBuilder.build());
        this.api = ApiClientFactoryUtil.factory.getTagsApi();

        this.loadData = new LoadTagsData();
    }

    @BeforeAll
    private void setUp() {
        //
    }


    @AfterAll
    public void cleanUp() {
        try{
            Thread.sleep(5000);
            loadData.deleteTestData(idsToDelete);
        } catch (ApiException | InterruptedException e) {
            logger.error("error", e.getCause());
        }
    }


    /**
     * Create new Tag in the Ziqni database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Order(1)
    public void createTagsReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final List<CreateTagRequest> createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createTags(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        idsToDelete.add(response.getResults().get(0).getId());

    }

    @Test
    @Order(2)
    public void getTagsSingleIdReturnOkTest() throws ApiException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);

        List<String> ids = List.of(createResponse.getResults().get(0).getId());
        Integer limit = 1;
        Integer skip = 0;

        TagResponse response = $(api.getTags(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        final com.ziqni.admin.sdk.model.Tag tags = response.getResults().get(0);

        assertNotNull(tags.getEntityTypes(), "Found entity types should not be null");
        assertNotNull(tags.getMetadata(), "Found metadata should not be null");
        assertNotNull(tags.getKey(), "Keys should not be null");
        assertNotNull(tags.getName(), "Found name should be not null");
        assertNotNull(tags.getDescription(), "Found description should be not null or blank");

        idsToDelete.addAll(ids);
    }

    @Test
    @Order(3)
    public void createTagsWithDuplicatedKeyReturnErrorTest() throws ApiException, InterruptedException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        var key = createResponse.getResults().get(0).getExternalReference();
        request.setKey(key);

        ModelApiResponse response = $(api.createTags(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(4)
    public void updateTagsValidRequestReturnOkTest() throws ApiException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        //GIVEN
        String givenDescription = "Test_update_description";

        UpdateTagRequest given = new UpdateTagRequest()
                .id(id)
                .description(givenDescription)
                .entityTypes(new ArrayList<>());

        //WHEN
        ModelApiResponse response = $(api.updateTags(List.of(given)));

        //THAN
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain updated entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        String updatedId = response.getResults().get(0).getId();

        List<String> ids = List.of(updatedId);
        Integer limit = 1;
        Integer skip = 0;
        TagResponse item = $(api.getTags( ids, limit, skip));

        assertNotNull(item);
        assertNotNull(item.getResults());
        assertEquals(1, item.getResults().size(), "Should contain entity");

        com.ziqni.admin.sdk.model.Tag actionType = item.getResults().get(0);

        assertEquals(id, actionType.getId(), "Found id should be equal to requested");

        assertNotNull(actionType.getEntityTypes(), "Found entity types should not be null");

        assertNotNull(actionType.getDescription(), "Found description should be not blank");
        assertEquals(givenDescription, actionType.getDescription(), "Description should be the same as provided");

        idsToDelete.add(id);
    }
    @Test
    @Order(23)
    public void getTagByQueryWithMultipleFieldsReturnOkTest() throws ApiException, InterruptedException {

        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        var givenQuery = new QueryMultipleFields()
                .queryFields(List.of("id","spaceName","name")).queryValue(id);

        QueryRequest qr = new QueryRequest().multiFields(List.of(givenQuery));

        var response = $(api.getTagsByQuery(qr));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

        idsToDelete.add(id);

    }

    @Test
    @Order(5)
    @Disabled //fixme - enable after partial updates are implemented
    public void updateTagsWithoutNameReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateTagRequest given = new UpdateTagRequest()
                .id(id)
                .name(null);

        ModelApiResponse response = $(api.updateTags(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(6)
    public void updateTagsWithoutIdReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateTagRequest given = new UpdateTagRequest()
                .id(null);

        ModelApiResponse response = $(api.updateTags(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(7)
    public void updateTagsWithIncorrectIdReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateTagRequest given = new UpdateTagRequest()
                .id("updateRewardTypesWithIncorrectIdIdReturnErrorTest");

        ModelApiResponse response = $(api.updateTags(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(8)
    @Disabled //fixme - enable after partial updates are implemented
    public void updateTagsWithoutEntityTypesReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateTagRequest given = new UpdateTagRequest()
                .id(id)
                .entityTypes(null);

        ModelApiResponse response = $(api.updateTags(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(9)
    @Disabled //fixme - enable after partial updates are implemented
    public void updateTagsWithoutDescriptionReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateTagRequest given = new UpdateTagRequest()
                .id(id)
                .description(null);

        ModelApiResponse response = $(api.updateTags(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(10)
    public void updateTagsWithNameLongerThan100CharsReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateTagRequest given = new UpdateTagRequest()
                .id(id)
                .name("x".repeat(101));

        ModelApiResponse response = $(api.updateTags(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(11)
    public void updateTagsWithIncorrectEntityTypeReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateTagRequest given = new UpdateTagRequest()
                .id(id)
                .entityTypes(List.of("NonExistentEntityType"));

        ModelApiResponse response = $(api.updateTags(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(12)
    public void updateTagsWithDescriptionLengthMoreThan500ReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateTagRequest given = new UpdateTagRequest()
                .id(id)
                .description("D".repeat(501));

        ModelApiResponse response = $(api.updateTags(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(13)
    public void updateTagsWithEmptyMetadataReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateTagRequest given = new UpdateTagRequest()
                .id(id)
                .metadata(Collections.emptyMap());

        ModelApiResponse response = $(api.updateTags(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(14)
    public void updateTagsWithMetadataHasMoreThan51EntriesReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        Map<String,String> metadataList = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(metadataList));

        UpdateTagRequest given = new UpdateTagRequest()
                .id(id)
                .metadata(metadataList);

        ModelApiResponse response = $(api.updateTags(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(15)
    public void updateTagsWithEmptyMetadataObjectReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        UpdateTagRequest given = new UpdateTagRequest()
                .id(id)
                .metadata(Map.of());

        ModelApiResponse response = $(api.updateTags(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(16)
    public void updateTagsWithMetadataKeyLengthMoreThan50CharsReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        var givenMetadata = Map.of(
                "a".repeat(101),
                UUID.randomUUID().toString()
        );

        UpdateTagRequest given = new UpdateTagRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateTags(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(17)
    public void updateTagsWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        Map<String, String> givenMetadata = new HashMap<>();
        givenMetadata.put("#@)G?$0",UUID.randomUUID().toString());

        UpdateTagRequest given = new UpdateTagRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateTags(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(18)
    public void updateTagsWithMetadataValueLengthMoreThan200CharsReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        Map<String, String> givenMetadata = new HashMap<>();
        givenMetadata.put(UUID.randomUUID().toString(),"a".repeat(201));

        UpdateTagRequest given = new UpdateTagRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateTags(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }


    @Test
    @Order(20)
    public void updateTagsWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();


        Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        UpdateTagRequest given = new UpdateTagRequest()
                .id(id)
                .metadata(givenMetas);

        ModelApiResponse response = $(api.updateTags(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(22)
    public void getTagsByQueryWithSingleIdReturnOkTest() throws ApiException, InterruptedException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        while (!ApiClientFactoryUtil.factory.getStreamingClient().isConnected()){
            Thread.sleep(100);
        }

        QueryRequest givenQuery = new QueryRequest()
                .addShouldItem(new QueryMultiple().queryField("id").queryValues(List.of(id)))
                .shouldMatch(1);

        TagResponse response = $(api.getTagsByQuery( givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

        idsToDelete.add(id);
    }

    @Test
    @Order(23)
    public void deleteTagsSingleIdReturnOkTest() throws ApiException, InterruptedException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        List<String> givenIds = List.of(id);

        Thread.sleep(5000);

        ModelApiResponse response = $(api.deleteTags( givenIds));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

    }

    @Test
    public void deleteTagsWithIncorrectIdReturnErrorTest() throws ApiException {
        List<String> givenIds = List.of("some_incorrect_id_for_delete");

        ModelApiResponse response = $(api.deleteTags( givenIds));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createTagsWithoutNameReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest().name(null);
        var requestList = loadData.getCreateRequestAsList(request);

        ModelApiResponse response = $(api.createTags(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createTagsWithoutKeyReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest().key(null);
        var requestList = loadData.getCreateRequestAsList(request);

        ModelApiResponse response = $(api.createTags(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createTagsWithKeyMoreThan100CharsReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest().key("1".repeat(101));
        var requestList = loadData.getCreateRequestAsList(request);

        ModelApiResponse response = $(api.createTags(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createTagsWithKeyNotAllowedCharsReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest().key("#@)G?$0");
        var requestList = loadData.getCreateRequestAsList(request);

        ModelApiResponse response = $(api.createTags(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createTagsWithIncorrectEntityTypeReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest().entityTypes(List.of("NonExistentEntityType"));
        var requestList = loadData.getCreateRequestAsList(request);

        ModelApiResponse response = $(api.createTags(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //fixme - enable after metadata is implemented
    public void createTagsWithEmptyMetadataObjectReturnErrorTest() throws ApiException {
        Map<String, String> givenMetadata = new HashMap<>();;

        var request = loadData.getCreateRequest().metadata(givenMetadata);
        var requestList = loadData.getCreateRequestAsList(request);

        ModelApiResponse response = $(api.createTags(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //fixme - enable after metadata is implemented
    public void createTagsWithMetadataKeyLengthMoreThan50CharsReturnErrorTest() throws ApiException {
        Map<String, String> givenMetadata = new HashMap<>();
        givenMetadata.put("a".repeat(51),UUID.randomUUID().toString());

        var request = loadData.getCreateRequest().metadata(givenMetadata);
        var requestList = loadData.getCreateRequestAsList(request);

        ModelApiResponse response = $(api.createTags(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //fixme - enable after metadata is implemented
    public void createTagsWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {
        Map<String, String> givenMetadata = new HashMap<>();
        givenMetadata.put("#@)G?$0",UUID.randomUUID().toString());

        var request = loadData.getCreateRequest().metadata(givenMetadata);
        var requestList = loadData.getCreateRequestAsList(request);

        ModelApiResponse response = $(api.createTags(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //fixme - enable after metadata is implemented
    public void createTagsWithMetadataValueLengthMoreThan200CharsReturnErrorTest() throws ApiException {
        Map<String, String> givenMetadata = new HashMap<>();
        givenMetadata.put(UUID.randomUUID().toString(),"a".repeat(201));

        var request = loadData.getCreateRequest().metadata(givenMetadata);
        var requestList = loadData.getCreateRequestAsList(request);

        ModelApiResponse response = $(api.createTags(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createTagsWithDescriptionLengthMoreThan500CharsReturnErrorTest() throws ApiException {
        var request = loadData.getCreateRequest().description("a".repeat(501));
        var requestList = loadData.getCreateRequestAsList(request);

        ModelApiResponse response = $(api.createTags(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }


    @Test
    @Disabled //fixme - enable after metadata is implemented
    public void createTagsWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {

        Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        var request = loadData.getCreateRequest().metadata(givenMetas);
        var requestList = loadData.getCreateRequestAsList(request);

        ModelApiResponse response = $(api.createTags(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void getTagsNoArgumentsReturnEmptyTest() throws ApiException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        List<String> emptyIdList = Collections.emptyList();
        Integer limit = 0;
        Integer skip = 0;
        TagResponse response = $(api.getTags(emptyIdList, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getResults().isEmpty(), "Should have no result");
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        idsToDelete.add(id);
    }

    @Test
    public void getTagsNoIdsWithLimitReturnOkTest() throws ApiException {
        Integer limit = 3;
        Integer skip = 0;

        var requestList = loadData.getCreateRequestAsList(limit);
        var createResponse = loadData.createTestData(requestList);
        var ids = createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList());

        TagResponse response = $(api.getTags(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        assertEquals(limit, response.getResults().size(), "Result count should match limit");

        idsToDelete.addAll(ids);
    }

    @Test
    public void getTagsMultipleIdsReturnOkTest() throws ApiException {
        var requestList = loadData.getCreateRequestAsList(3);
        var createResponse = loadData.createTestData(requestList);
        var ids = createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList());

        Integer limit = ids.size();
        Integer skip = 0;
        TagResponse response = $(api.getTags( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(ids.size(), response.getResults().size(), "Should have single result");

        List<String> foundIds = response.getResults()
                .stream()
                .map(Tag::getId)
                .collect(Collectors.toList());

        assertTrue(foundIds.containsAll(ids), "Found id should be equal to requested");

        idsToDelete.addAll(ids);
    }

    @Test
    public void getTagsSingleBlankIdReturnOkTest() throws ApiException {
        var requestList = loadData.getCreateRequestAsList(3);
        var createResponse = loadData.createTestData(requestList);
        var ids = createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList());

        List<String> blankId = List.of("");
        Integer limit = ids.size();
        Integer skip = 0;
        TagResponse response = $(api.getTags(blankId, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should be empty");
        assertEquals(limit, response.getResults().size(), "Should have result");

        idsToDelete.addAll(ids);
    }

    @Test
    public void getTagsMultipleIdsOneMalformedReturnErrorTest() throws ApiException {

        int givenLimit = 3;

        var requestList = loadData.getCreateRequestAsList(givenLimit);
        var createResponse = loadData.createTestData(requestList);
        var ids = createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList());

        ids.add("not_existed_id");

        Integer limit = ids.size();
        Integer skip = 0;
        TagResponse response = $(api.getTags( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getErrors().size(), "Should have single result");

        idsToDelete.addAll(createResponse
                .getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList()));
    }

    @Test
    public void getTagsMultipleIdsOneBlankReturnErrorTest() throws ApiException {

        Integer givenLimit = 3;

        var requestList = loadData.getCreateRequestAsList(givenLimit);
        var createResponse = loadData.createTestData(requestList);

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
        assertEquals(givenLimit, createResponse.getResults().size());

        var ids = createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList());
        ids.add("");

        Integer limit = ids.size();
        Integer skip = 0;
        TagResponse response = $(api.getTags( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getErrors().size(), "Should have single result");
//        assertEquals(ids.size() - 1, response.getResults().size(), "Should have requested valid results");
//
//        List<String> foundIds = response.getResults()
//                .stream()
//                .map(Tag::getId)
//                .collect(Collectors.toList());
//
//        assertTrue(foundIds.containsAll(ids), "Found id should be equal to requested");

        idsToDelete.addAll(createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList()));
    }

    @Test
    public void getTagsIdWithWhitespaceReturnErrorTest() throws ApiException {

        var requestList = loadData.getCreateRequestAsList(1);
        var createResponse = loadData.createTestData(requestList);

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
        assertEquals(1, createResponse.getResults().size());

        var givenIdsWithLeadingSpace = createResponse.getResults()
                .stream()
                .limit(1)
                .map(Result::getId)
                .map(" "::concat)
                .collect(Collectors.toList());

        Integer limit = givenIdsWithLeadingSpace.size();
        Integer skip = 0;
        TagResponse response = $(api.getTags( givenIdsWithLeadingSpace, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have error");
//        assertEquals(givenIdsWithLeadingSpace.size(), response.getErrors().size(), "Should have single error");
        assertFalse(response.getResults().isEmpty(), "Should not return result");

        idsToDelete.addAll(createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList()));
    }

    @Test
    public void getTagsIdWithWhitespaceBetweenReturnErrorTest() throws ApiException {

        var requestList = loadData.getCreateRequestAsList(1);
        var createResponse = loadData.createTestData(requestList);

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
        assertEquals(1, createResponse.getResults().size());

        var givenIdsWithSpaceBetween = createResponse.getResults()
                .stream()
                .limit(1)
                .map(Result::getId)
                .map(id -> id.substring(0, id.length() / 2).concat(" ").concat(id.substring(id.length() / 2)))
                .collect(Collectors.toList());

        Integer limit = givenIdsWithSpaceBetween.size();
        Integer skip = 0;
        TagResponse response = $(api.getTags( givenIdsWithSpaceBetween, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have error");
        assertEquals(givenIdsWithSpaceBetween.size(), response.getErrors().size(), "Should have single error");
        assertTrue(response.getResults().isEmpty(), "Should not return result");

        idsToDelete.addAll(createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList()));
    }

    @Test
    public void deleteTagsByQueryTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest();
        final var createdResponse = loadData.createTestData(List.of(createRequest));
        final var id = createdResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        assertNotNull(createdResponse);
        assertNotNull(createdResponse.getResults());
        assertNotNull(createdResponse.getErrors());
        assertEquals(1, createdResponse.getResults().size(), "Should contain created entity");
        String givenId = createdResponse.getResults().get(0).getId();
        assertNotNull(givenId, "Created entity should has id");

        QueryRequest givenQuery = new QueryRequest()
                .addShouldItem(new QueryMultiple().queryField("id").queryValues(List.of(givenId)))
                .shouldMatch(1);
        ModelApiResponse response = $(api.deleteTagsByQuery(givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

    }


}
