/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.sdk.admin.api;

import com.ziqni.sdk.admin.ZiqniAdminApiFactory;
import com.ziqni.sdk.admin.ApiException;
import com.ziqni.sdk.admin.data.LoadCustomFieldsData;
import com.ziqni.sdk.admin.data.LoadMessagesData;
import com.ziqni.sdk.admin.data.LoadTagsData;
import com.ziqni.sdk.admin.model.*;
import com.ziqni.sdk.admin.data.LoadCustomFieldsData;
import com.ziqni.sdk.admin.data.LoadMessagesData;
import com.ziqni.sdk.admin.model.*;
import com.ziqni.sdk.admin.util.ApiClientFactoryUtil;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import static com.ziqni.sdk.admin.util.ApiClientFactoryUtil.initApiClientFactory;
import static org.junit.jupiter.api.Assertions.*;


/**
 * API tests for Messages API
 */

//Fixme - tests are missing for account message retrieval
//Fixme - tests need to check sending messages to multiple members
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class MemberMessagesApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private static final Logger logger = LoggerFactory.getLogger(MemberMessagesApiTest.class);

    private final MemberMessagesApiWs api;
    private final LoadMessagesData loadData;
    private final LoadTagsData loadTagsData;
    private final LoadCustomFieldsData loadCustomFieldsData;

    private String tagKey;
    private String customFieldKey;

    private List<String> memberMessageIdsToDelete = new ArrayList<>();
    private final List<String> tagIdsToDelete = new ArrayList<>();
    private final List<String> customFieldIdsToDelete = new ArrayList<>();


    public MemberMessagesApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory();
        this.api = ZiqniAdminApiFactory.getMemberMessagesApi();

        this.loadData = new LoadMessagesData();
        this.loadCustomFieldsData = new LoadCustomFieldsData();
        this.loadTagsData = new LoadTagsData();
    }

    @BeforeAll
    public void setUp() {
        try {
            tagKey = loadTagsData.getModel();
            customFieldKey = loadCustomFieldsData.getModel(customFieldIdsToDelete, AppliesTo.MESSAGE);

            tagIdsToDelete.add(tagKey);
        } catch (ApiException e) {
            logger.error("error", e.getCause());
        }
    }

    @AfterAll
    public void cleanUp() throws InterruptedException {
        try {
            Thread.sleep(5000);
            loadData.deleteMemberMessageTestData(memberMessageIdsToDelete);

            loadTagsData.deleteTestData(tagIdsToDelete);
            loadCustomFieldsData.deleteTestData(customFieldIdsToDelete);
        } catch (ApiException e) {
            logger.error("error", e.getCause());
        }

    }

    @Test
    @Order(1)
    public void createMemberMessagesReturnOkTest() throws ApiException {
        final var request = loadData.getCreateMemberMessageRequest();
        ModelApiResponse response = $(api.createMemberMessages(List.of(request)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        memberMessageIdsToDelete.add(response.getResults().get(0).getId());

    }

    @Test
    @Order(2)
    public void createMemberMessagesWithTagsAndCustomFieldsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateMemberMessageRequest()
                .tags(List.of(tagKey))
                .customFields(Map.of(customFieldKey, List.of(1)));

        ModelApiResponse createResponse = $(api.createMemberMessages(List.of(createRequest)));

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        assertNotNull(createResponse.getErrors());
        assertEquals(1, createResponse.getResults().size(), "Should contain created entity");
        assertNotNull(createResponse.getResults().get(0).getId(), "Created entity should has id");

        final var id = createResponse.getResults().get(0).getId();
        int limit = 1;
        int skip = 0;

        Thread.sleep(5000);

        var response = $(api.getMemberMessages(List.of(id), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");
        assertNotNull(response.getResults().get(0).getCustomFields());
        assertNotNull(response.getResults().get(0).getTags());
        assertEquals(1,response.getResults().get(0).getCustomFields().size());
        assertEquals(1,response.getResults().get(0).getTags().size());

        memberMessageIdsToDelete.add(id);
    }

    @Test
    public void deleteMemberMessagesTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateMemberMessageRequest();
        final var id = loadData.createMemberMessageTestData(createRequest).getResults().get(0).getId();

        Thread.sleep(10000);
        ModelApiResponse response = api.deleteMemberMessages(List.of(id)).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");
    }

    @Test
    public void deleteMemberMessagesByQueryTest() throws ApiException, InterruptedException {
        var translationEntry = new TranslationEntry();
        translationEntry.setFieldName("name");
        translationEntry.setText("Given");
        var translation = new Translation();
        translation.setLanguageKey("anp");
        translation.setTranslations(List.of(translationEntry));
        final var createRequest = loadData.getCreateMemberMessageRequest().translations(List.of(translation));
        final var createdResponse = loadData.createMemberMessageTestData(createRequest);

        assertNotNull(createdResponse);
        assertNotNull(createdResponse.getResults());
        assertNotNull(createdResponse.getErrors());
        assertEquals(1, createdResponse.getResults().size(), "Should contain created entity");
        String givenId = createdResponse.getResults().get(0).getId();
        assertNotNull(givenId, "Created entity should has id");

        Thread.sleep(5000);

        QueryRequest givenQuery = new QueryRequest()
                .addMustItem(new QueryMultiple().queryField("id").queryValues(List.of(givenId)));

        ModelApiResponse response = $(api.deleteMemberMessagesByQuery(givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

    }

    @Test
    public void getMemberMessagesReturnOkTest() throws ApiException, InterruptedException {
        var request = loadData.getCreateMemberMessageRequest();
        var createResponse = loadData.createMemberMessageTestData(request);
        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        Integer limit = 1;
        Integer skip = 0;
        var response = $(api.getMemberMessages(List.of(id), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getResults().size(), "Result count should match limit");

        memberMessageIdsToDelete.add(id);
    }

    @Test
    public void getMemberMessagesByQueryTest() throws ApiException, InterruptedException {
        var request = loadData.getCreateMemberMessageRequest();
        var createResponse = loadData.createMemberMessageTestData(request);
        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        assertNotNull(createResponse.getErrors());
        assertEquals(1, createResponse.getResults().size(), "Should contain created entity");
        String givenId = createResponse.getResults().get(0).getId();
        assertNotNull(givenId, "Created entity should has id");

        QueryRequest givenQuery = new QueryRequest()
                .addMustItem(new QueryMultiple().queryField("id").queryValues(List.of(givenId)));

        var response = $(api.getMemberMessagesByQuery(givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getResults().size(), "Result count should match limit");

        memberMessageIdsToDelete.add(id);
    }

    @Test
    public void getMemberMessagesNoArgumentsReturnAllTest() throws ApiException {
        var request = loadData.getCreateMemberMessageRequest();
        var createResponse = loadData.createMemberMessageTestData(request);
        var id = createResponse.getResults().get(0).getId();

        List<String> ids = Collections.emptyList();
        Integer limit = 0;
        Integer skip = 0;
        var response = $(api.getMemberMessages(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertFalse(response.getResults().isEmpty(), "Should have no result");
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        memberMessageIdsToDelete.add(id);
    }

    @Test
    public void getMemberMessageIdWithWhitespaceReturnErrorTest() throws ApiException, InterruptedException {
        var request = loadData.getCreateMemberMessageRequest();
        var createResponse = loadData.createMemberMessageTestData(request);
        var id = createResponse.getResults().get(0).getId();

        var idWithSpaces = id.stripTrailing() + " ";

        Thread.sleep(5000);

        Integer limit = 1;
        Integer skip = 0;
        var response = $(api.getMemberMessages(List.of(idWithSpaces), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        Assertions.assertTrue(response.getErrors().isEmpty(), "Should not have error");
        assertEquals(1, response.getResults().size(), "Should have single result");
        assertTrue(response.getErrors().isEmpty(), "Should not return error");

        memberMessageIdsToDelete.add(id);
    }

    @Test
    public void getMemberMessagesIdWithWhitespaceBetweenReturnNoResultTest() throws ApiException, InterruptedException {
        var request = loadData.getCreateMemberMessageRequest();
        var createResponse = loadData.createMemberMessageTestData(request);
        var id = createResponse.getResults().get(0).getId();

        var idWithSpaces = id.stripLeading().substring(0, id.length() / 2).concat(" ").concat(id.substring(id.length() / 2));

        Thread.sleep(5000);

        Integer limit = 1;
        Integer skip = 0;
        var response = $(api.getMemberMessages( List.of(idWithSpaces), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        Assertions.assertTrue(response.getErrors().isEmpty(), "Should have no error");
        assertEquals(0, response.getErrors().size(), "Should have no error");
        assertTrue(response.getResults().isEmpty(), "Should not return result");

        memberMessageIdsToDelete.add(id);
    }

}
