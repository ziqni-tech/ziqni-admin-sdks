/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.sdk.admin.api;

import com.ziqni.sdk.admin.ZiqniAdminApiFactory;
import com.ziqni.sdk.admin.ApiException;
import com.ziqni.sdk.admin.data.LoadCustomFieldsData;
import com.ziqni.sdk.admin.data.LoadMetadata;
import com.ziqni.sdk.admin.data.LoadRepositoriesData;
import com.ziqni.sdk.admin.data.LoadTagsData;
import com.ziqni.sdk.admin.model.*;
import com.ziqni.sdk.admin.data.LoadCustomFieldsData;
import com.ziqni.sdk.admin.data.LoadMetadata;
import com.ziqni.sdk.admin.data.LoadRepositoriesData;
import com.ziqni.sdk.admin.data.LoadTagsData;
import com.ziqni.sdk.admin.model.*;
import com.ziqni.sdk.admin.util.ApiClientFactoryUtil;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static com.ziqni.sdk.admin.util.ApiClientFactoryUtil.initApiClientFactory;
import static org.junit.jupiter.api.Assertions.*;


/**
 * API tests for RepositoriesApi
 */
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class RepositoriesApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private static final Logger logger = LoggerFactory.getLogger(RepositoriesApiTest.class);

    private final FileRepositoriesApiWs api;
    private final LoadRepositoriesData loadData;
    private final LoadTagsData loadTagsData;
    private final LoadCustomFieldsData loadCustomFieldsData;

    private String tagId;
    private String customFieldKey;

    private List<String> idsToDelete = new ArrayList<>();
    private List<String> tagIdsToDelete = new ArrayList<>();
    private List<String> customFieldIdsToDelete = new ArrayList<>();

    public RepositoriesApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory();
        this.api = ZiqniAdminApiFactory.getFileRepositoriesApi();
        this.loadData = new LoadRepositoriesData();
        this.loadCustomFieldsData = new LoadCustomFieldsData();
        this.loadTagsData = new LoadTagsData();

    }

    @BeforeAll
    public void setUp() {
        try {
            tagId = loadTagsData.getModel();
            customFieldKey = loadCustomFieldsData.getModel(customFieldIdsToDelete, AppliesTo.REPOSITORY);
        }catch (ApiException e){
            logger.error("error", e.getCause());
        }
    }

    @AfterAll
    public void cleanUp() throws InterruptedException {
        try{
            Thread.sleep(5000);
            loadData.deleteTestData(idsToDelete);
            loadTagsData.deleteTestData(tagIdsToDelete);
            loadCustomFieldsData.deleteTestData(customFieldIdsToDelete);
        }catch (ApiException e){
            logger.error("error", e.getCause());
        }
    }

    @Test
    @Order(1)
    public void createRepositoryReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        idsToDelete.add(response.getResults().get(0).getId());
    }

    @Test
    @Order(2)
    public void createRepositoryWithTagsAndCustomFieldsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest()
                .tags(List.of(tagId))
                .customFields(Map.of(customFieldKey, List.of(1)));

        ModelApiResponse createResponse = $(api.createFileRepositories(loadData.getCreateRequestAsList(createRequest)));

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        assertNotNull(createResponse.getErrors());
        assertEquals(1, createResponse.getResults().size(), "Should contain created entity");
        assertNotNull(createResponse.getResults().get(0).getId(), "Created entity should has id");

        final var id = createResponse.getResults().get(0).getId();
        int limit = 1;
        int skip = 0;

        Thread.sleep(5000);

        var response = $(api.getFileRepositories(limit, skip, List.of(id)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");
        assertNotNull(response.getResults().get(0).getCustomFields());
        assertNotNull(response.getResults().get(0).getTags());
        assertEquals(1,response.getResults().get(0).getCustomFields().size());
        assertEquals(1,response.getResults().get(0).getTags().size());

        idsToDelete.add(id);
    }

    @Test
    @Order(2)
    public void getRepositorySingleIdReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        List<String> ids = List.of(id);
        Integer limit = 1;
        Integer skip = 0;

        Thread.sleep(5000);

        RepositoryResponse response = $(api.getFileRepositories( limit, skip, ids));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        Repository item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");

        idsToDelete.add(id);
    }

    @Test
    @Order(2)
    public void getRepositoryByQueryReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        List<String> ids = List.of(id);
        Integer limit = 1;
        Integer skip = 0;

        Thread.sleep(5000);

        QueryRequest givenQuery = new QueryRequest()
                .addMustItem(new QueryMultiple().queryField("id").queryValues(ids));

        RepositoryResponse response = $(api.getFileRepositoriesByQuery(givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        Repository item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");

        idsToDelete.add(id);
    }

    @Test
    @Order(3)
    public void updateRepositoryValidRequestReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        //GIVEN


        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .removeConstraints(List.of("isPublic"));

        Thread.sleep(5000);

        //WHEN
        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        //THAN
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain updated entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        String updatedId = response.getResults().get(0).getId();


        List<String> ids = List.of(updatedId);
        Integer limit = 1;
        Integer skip = 0;
        RepositoryResponse itemResponse = $(api.getFileRepositories( limit, skip, ids));

        assertNotNull(itemResponse);
        assertNotNull(itemResponse.getResults());
        assertEquals(1, itemResponse.getResults().size(), "Should contain entity");

        Repository item = itemResponse.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
//        assertNotNull(item.getDescription(), "Found description should be not blank");

//        assertNotNull(item.getTags(), "Found tags should be null");
//        List<String> actualTagIds = item.getTags()
//                .stream()
//                .map(TagsReduced::getId)
//                .collect(Collectors.toList());
//
//        assertNotNull(item.getMetadata(), "Found metadata should be null");
//
//        assertNotNull(item.getCustomFields(), "Found custom fields should be null");
//        List<String> actualCustomFieldIds = item.getCustomFields()
//                .stream()
//                .map(CustomFieldReduced::getId)
//                .collect(Collectors.toList());

    }
    @Test
    @Order(3)
    public void updateRepositoryWithMetaDataReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        //GIVEN


        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .metadata(Map.of("hi","hi"));

        Thread.sleep(5000);

        //WHEN
        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        //THAN
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain updated entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        String updatedId = response.getResults().get(0).getId();


        List<String> ids = List.of(updatedId);
        Integer limit = 1;
        Integer skip = 0;
        RepositoryResponse itemResponse = $(api.getFileRepositories( limit, skip, ids));

        assertNotNull(itemResponse);
        assertNotNull(itemResponse.getResults());
        assertEquals(1, itemResponse.getResults().size(), "Should contain entity");

        Repository item = itemResponse.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");

    }

    @Test
    @Order(4)
    public void updateRepositoryWithoutIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(null);

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(5)
    public void updateRepositoryWithoutIncorrectIdReturnErrorTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id("incorrect_id");

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");

        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(6)
    @Disabled // fixme - enable after implementation
    public void updateRepositoryWithoutNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .name(null);

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(7)
    public void updateRepositoryWithBlankNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .name("");

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(8)
    public void updateRepositoryWithNameLongerThan100CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .name("x".repeat(101));


        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(9)
    public void updateRepositoryWithNotAllowedCharsOfNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .name("#@)G?$0");

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(10)
    public void updateRepositoryWithWhiteSpacesInNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .name("test name");

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(11)
    @Disabled // fixme - enable after implementation
    public void updateRepositoryWithoutConstraintsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .addConstraints(null);

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Disabled //Todo verify if this is correct
    @Test
    @Order(12)
    public void updateRepositoryWithEmptyConstraintsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .addConstraints(Collections.emptyList());

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(13)
    public void updateRepositoryWithBlankConstraintItemReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .addConstraints(List.of(""));

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(14)
    @Disabled // fixme - enable after implementation
    public void updateRepositoryWithoutHostingOptionsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .hostingOptions(null);

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(15)
    public void updateRepositoryWithEmptyHostingOptionsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        HostingOptions givenHostingOptions = new HostingOptions();

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .hostingOptions(givenHostingOptions);

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(16)
    public void updateRepositoryWithHostingOptionIndexFileNameLengthMoreThan300ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        HostingOptions givenHostingOptions = new HostingOptions()
                .indexFileName("a".repeat(301));

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .hostingOptions(givenHostingOptions);

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(17)
    public void updateRepositoryWithHostingOptionErrorFileNameLengthMoreThan300ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        HostingOptions givenHostingOptions = new HostingOptions()
                .errorFileName("a".repeat(301));

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .hostingOptions(givenHostingOptions);

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Disabled //todo Enable after implementation in core
    @Test
    @Order(18)
    public void updateRepositoryWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .customFields(Map.of("",""));

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Disabled //todo Enable after implementation in core
    @Test
    @Order(19)
    public void updateRepositoryWithCustomFieldsLimitMoreThan50ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        Map<String,Object> customFields = IntStream.range(0, 51)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .customFields(customFields);

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Disabled //todo Enable after implementation in core
    @Test
    @Order(20)
    public void updateRepositoryWithDuplicatedCustomFieldsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        String uuid = UUID.randomUUID().toString();

        Map<String,Object> customFields = IntStream.range(0, 3)
                .mapToObj(i -> uuid)
                .collect(Collectors.toMap(x->x,x->x));

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .customFields(customFields);

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Disabled //todo Enable after implementation in core
    @Test
    @Order(21)
    public void updateRepositoryWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        List<String> tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .tags(tags);

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Disabled //todo Enable after implementation in core
    @Test
    @Order(22)
    public void updateRepositoryWithDuplicatedTagsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        String uuid = UUID.randomUUID().toString();

        List<String> tags = IntStream.range(0, 3)
                .mapToObj(i -> uuid)
                .collect(Collectors.toList());

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .tags(tags);

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Disabled //todo Enable after implementation in core
    @Test
    @Order(23)
    public void updateRepositoryWithEmptyMetadataObjectReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();


        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Disabled //todo Enable after implementation in core
    @Test
    @Order(24)
    public void updateRepositoryWithMetadataKeyLengthMoreThan100CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();
        givenMetadata.put("a".repeat(101),UUID.randomUUID().toString());


        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Disabled //todo Enable after implementation in core
    @Test
    @Order(25)
    public void updateRepositoryWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();
        givenMetadata.put("#@)G?$0",UUID.randomUUID().toString());

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Disabled //todo Enable after implementation in core
    @Test
    @Order(26)
    public void updateRepositoryWithMetadataValueLengthMoreThan100CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();
        givenMetadata.put(UUID.randomUUID().toString(),"a".repeat(101));

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }


    @Disabled //todo Enable after implementation in core
    @Test
    @Order(28)
    public void updateRepositoryWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .metadata(givenMetas);

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(29)
    public void updateRepositoryWithDescriptionLengthMoreThan200CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateRepositoryRequest given = new UpdateRepositoryRequest()
                .id(id)
                .description("a".repeat(201));

        ModelApiResponse response = $(api.updateFileRepositories(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(30)
    public void deleteRepositorySingleIdReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        List<String> givenIds = List.of(id);

        Thread.sleep(5000);
        ModelApiResponse response = $(api.deleteFileRepositories( givenIds, true));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");
    }

    @Test
    public void deleteRepositoryWithIncorrectIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        List<String> givenIds = List.of("some_incorrect_id_for_delete");

        ModelApiResponse response = $(api.deleteFileRepositories( givenIds, true));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    public void createRepositoryWithoutNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest().name(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createRepositoryWithBlankNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest().name("");
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRepositoryWithoutNameLongerThan100CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest().name("x".repeat(101));
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRepositoryWithNotAllowedCharsOfNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest().name("#@)G?$0");
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRepositoryWithWhiteSpacesInNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest().name("test name");
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRepositoryWithoutConstraintsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest().constraints(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRepositoryWithEmptyConstraintsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest().constraints(Collections.emptyList());
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRepositoryWithBlankConstraintItemReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest().constraints(List.of(""));
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRepositoryWithoutHostingOptionsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest().hostingOptions(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRepositoryWithEmptyHostingOptionsReturnErrorTest() throws ApiException {
        HostingOptions givenHostingOptions = new HostingOptions();

        final var createRequest = loadData.getCreateRequest().hostingOptions(givenHostingOptions);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRepositoryWithHostingOptionIndexFileNameLengthMoreThan300ReturnErrorTest() throws ApiException {

        HostingOptions givenHostingOptions = new HostingOptions()
                .indexFileName("a".repeat(301));

        final var createRequest = loadData.getCreateRequest().hostingOptions(givenHostingOptions);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRepositoryWithHostingOptionErrorFileNameLengthMoreThan300ReturnErrorTest() throws ApiException {

        HostingOptions givenHostingOptions = new HostingOptions()
                .errorFileName("a".repeat(301));

        final var createRequest = loadData.getCreateRequest().hostingOptions(givenHostingOptions);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Disabled //todo Enable after implementation in core
    @Test
    public void createRepositoryWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest().customFields(Map.of("",""));
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Disabled //todo Enable after implementation in core
    @Test
    public void createRepositoryWithCustomFieldsLimitMoreThan50ReturnErrorTest() throws ApiException {
        Map<String,Object> customFields = IntStream.range(0, 51)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        final var createRequest = loadData.getCreateRequest().customFields(customFields);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Disabled //todo Enable after implementation in core
    @Test
    public void createRepositoryWithDuplicatedCustomFieldsReturnErrorTest() throws ApiException {

        String uuid = UUID.randomUUID().toString();

        Map<String,Object> customFields = IntStream.range(0, 3)
                .mapToObj(i -> uuid)
                .collect(Collectors.toMap(x->x,x->x));

        final var createRequest = loadData.getCreateRequest().customFields(customFields);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Disabled //todo Enable after implementation in core
    @Test
    public void createRepositoryWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {

        List<String> tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        final var createRequest = loadData.getCreateRequest().tags(tags);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Disabled //todo Enable after implementation in core
    @Test
    public void createRepositoryWithDuplicatedTagsReturnErrorTest() throws ApiException {
        String uuid = UUID.randomUUID().toString();

        List<String> tags = IntStream.range(0, 3)
                .mapToObj(i -> uuid)
                .collect(Collectors.toList());

        final var createRequest = loadData.getCreateRequest().tags(tags);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Disabled //todo Enable after implementation in core
    @Test
    public void createRepositoryWithEmptyMetadataObjectReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();

        final var createRequest = loadData.getCreateRequest().metadata(givenMetadata);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Disabled //todo Enable after implementation in core
    @Test
    public void createRepositoryWithMetadataKeyLengthMoreThan100CharsReturnErrorTest() throws ApiException {
        final var givenMetadata = Map.of("a".repeat(101),UUID.randomUUID().toString());

        final var createRequest = loadData.getCreateRequest().metadata(givenMetadata);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Disabled //todo Enable after implementation in core
    @Test
    public void createRepositoryWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {
        final var givenMetadata = Map.of("#@)G?$0",UUID.randomUUID().toString());

        final var createRequest = loadData.getCreateRequest().metadata(givenMetadata);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Disabled //todo Enable after implementation in core
    @Test
    public void createRepositoryWithMetadataValueLengthMoreThan100CharsReturnErrorTest() throws ApiException {
        final HashMap<String,String> givenMetadata = new HashMap<>();
givenMetadata.put(UUID.randomUUID().toString(),"a".repeat(101));

        final var createRequest = loadData.getCreateRequest().metadata(givenMetadata);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }


    @Disabled //todo Enable after implementation in core
    @Test
    public void createRepositoryWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {

        Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        final var createRequest = loadData.getCreateRequest().metadata(givenMetas);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRepositoryWithDescriptionLengthMoreThan200CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest().description("a".repeat(201));
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createFileRepositories(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void getRepositoryNoArgumentsReturnEmptyTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        List<String> ids = Collections.emptyList();
        Integer limit = 0;
        Integer skip = 0;
        RepositoryResponse response = $(api.getFileRepositories( limit, skip, ids));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getResults().isEmpty(), "Should have no result");
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        idsToDelete.add(id);
    }

    @Test
    public void getRepositoryNoIdsWithLimitReturnOkTest() throws ApiException {
        final var createRequestAsList = loadData.getCreateRequestAsList(3);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var ids = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        List<String> id = Collections.emptyList();
        Integer limit = 3;
        Integer skip = 0;
        RepositoryResponse response = $(api.getFileRepositories( limit, skip, id));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        assertEquals(response.getResults().size(), 3, "Result count should match limit");

        idsToDelete.addAll(ids);
    }

    @Test
    public void getRepositoryMultipleIdsReturnOkTest() throws ApiException {
        final var createRequestAsList = loadData.getCreateRequestAsList(3);
        final var createResponse = loadData.createTestData(createRequestAsList);
        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
        Assertions.assertEquals(3, createResponse.getResults().size());

        final var ids = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        Integer limit = ids.size();
        Integer skip = 0;
        RepositoryResponse response = $(api.getFileRepositories( limit, skip, ids));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        Assertions.assertEquals(ids.size(), response.getResults().size(), "Should have single result");

        List<String> foundIds = response.getResults()
                .stream()
                .map(Repository::getId)
                .collect(Collectors.toList());

        assertTrue(foundIds.containsAll(ids), "Found id should be equal to requested");

        idsToDelete.addAll(ids);
    }

    @Test
    public void getRepositorySingleBlankIdReturnErrorTest() throws ApiException {
        List<String> ids = List.of("");
        Integer limit = ids.size();
        Integer skip = 0;
        RepositoryResponse response = $(api.getFileRepositories( limit, skip, ids));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        Assertions.assertTrue(response.getErrors().isEmpty(), "Should have no error");
//        assertTrue(response.getResults().isEmpty(), "Should have no any result");
    }

    @Test
    public void getRepositoryMultipleIdsOneMalformedReturnErrorTest() throws ApiException, InterruptedException {
        Integer givenLimit = 3;

        final var createRequestAsList = loadData.getCreateRequestAsList(givenLimit);
        final var createResponse = loadData.createTestData(createRequestAsList);
        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
        Assertions.assertEquals(3, createResponse.getResults().size());

        Thread.sleep(5000);

        final var ids = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        idsToDelete.addAll(ids);
        ids.add("not_existed_id");

        Integer limit = ids.size();
        Integer skip = 0;
        RepositoryResponse response = $(api.getFileRepositories( limit, skip, ids));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have errors");
        assertEquals(1, response.getErrors().size(), "Should have single error");

    }

    @Test
    public void getRepositoryMultipleIdsOneBlankReturnErrorTest() throws ApiException {
        Integer givenLimit = 3;

        final var createRequestAsList = loadData.getCreateRequestAsList(givenLimit);
        final var createResponse = loadData.createTestData(createRequestAsList);
        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
        Assertions.assertEquals(3, createResponse.getResults().size());

        final var ids = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        idsToDelete.addAll(ids);
        ids.add("");

        Integer limit = ids.size();
        Integer skip = 0;
        RepositoryResponse response = $(api.getFileRepositories( limit, skip, ids));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getErrors().size(), "Should have single result");

    }

//    @Test
//    public void getRepositoryIdWithWhitespaceReturnErrorTest() throws ApiException {
//        final var createRequestAsList = loadData.getCreateRequestAsList(1);
//        final var createResponse = loadData.createTestData(createRequestAsList);
//        assertNotNull(createResponse);
//        assertNotNull(createResponse.getResults());
//        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
//        assertEquals(1, createResponse.getResults().size());
//
//        final var givenIdsWithLeadingSpace = createResponse.getResults()
//                .stream()
//                .limit(1)
//                .map(Result::getId)
//                .map(" "::concat)
//                .collect(Collectors.toList());
//
//        Integer limit = givenIdsWithLeadingSpace.size();
//        Integer skip = 0;
//        RepositoryResponse response = $(api.getFileRepositories( limit, skip, givenIdsWithLeadingSpace);
//
//        assertNotNull(response);
//        assertNotNull(response.getErrors());
//        assertNotNull(response.getResults());
//        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have error");
//        assertEquals(givenIdsWithLeadingSpace.size(), response.getErrors().size(), "Should have single error");
//        assertTrue(response.getResults().isEmpty(), "Should not return result");
//
//        idsToDelete.addAll(createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList()));
//    }

    @Test
    public void getRepositoryIdWithWhitespaceBetweenReturnErrorTest() throws ApiException {

        final var createRequestAsList = loadData.getCreateRequestAsList(1);
        final var createResponse = loadData.createTestData(createRequestAsList);
        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
        Assertions.assertEquals(1, createResponse.getResults().size());

        final var givenIdsWithSpaceBetween = createResponse.getResults()
                .stream()
                .limit(1)
                .map(Result::getId)
                .map(id -> id.substring(0, id.length() / 2).concat(" ").concat(id.substring(id.length() / 2)))
                .collect(Collectors.toList());

        Integer limit = givenIdsWithSpaceBetween.size();
        Integer skip = 0;
        RepositoryResponse response = $(api.getFileRepositories( limit, skip, givenIdsWithSpaceBetween));


        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have error");
        Assertions.assertEquals(givenIdsWithSpaceBetween.size(), response.getErrors().size(), "Should have single error");
        assertTrue(response.getResults().isEmpty(), "Should not return result");

        idsToDelete.addAll(createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList()));
    }

    @Test
    public void deleteRepositoryByQueryTest() throws ApiException, InterruptedException {

        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        QueryRequest body = new QueryRequest()
                .addShouldItem(new QueryMultiple()
                        .queryField("id")
                        .queryValues(List.of(id)))
                .shouldMatch(1);

        ModelApiResponse deleteResponse = $(api.deleteFileRepositoriesByQuery( body));

        assertNotNull(deleteResponse);
        assertNotNull(deleteResponse.getResults());
        assertNotNull(deleteResponse.getErrors());
        assertEquals(1, deleteResponse.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, deleteResponse.getErrors().size(), "Errors should be empty");
    }
}
