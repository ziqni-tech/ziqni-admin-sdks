/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.sdk.admin.api;

import com.ziqni.sdk.admin.ZiqniAdminApiFactory;
import com.ziqni.sdk.admin.ApiException;
import com.ziqni.sdk.admin.data.*;
import com.ziqni.sdk.admin.model.*;

import com.ziqni.sdk.admin.util.ApiClientFactoryUtil;
import com.ziqni.sdk.admin.util.DateUtil;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import java.time.OffsetDateTime;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertTrue;


/**
 * API tests for RewardsApi
 */

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class RewardsApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private static final Logger logger = LoggerFactory.getLogger(RewardsApiTest.class);

    private final RewardsApiWs api;
    private final LoadRewardsData loadData;
    private final LoadRewardTypesData loadRewardTypesData;
    private final LoadAchievementsData loadAchievementsData;
    private final LoadTagsData loadTagsData;
    private final LoadCustomFieldsData loadCustomFieldsData;

    private String rewardTypeId;
    private String achievementId;
    private String rewardEntityType;
    private String tagId;
    private String customFieldKey;

    private List<String> idsToDelete = new ArrayList<>();
    private List<String> rewardTypeIdsToDelete = new ArrayList<>();
    private List<String> achievementIdsToDelete = new ArrayList<>();
    private List<String> tagIdsToDelete = new ArrayList<>();
    private List<String> customFieldIdsToDelete = new ArrayList<>();

    public RewardsApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory();
        this.api = ZiqniAdminApiFactory.getRewardsApi();
        this.loadData = new LoadRewardsData();
        this.loadRewardTypesData = new LoadRewardTypesData();
        this.loadAchievementsData = new LoadAchievementsData();
        this.loadCustomFieldsData = new LoadCustomFieldsData();
        this.loadTagsData = new LoadTagsData();
    }

    @BeforeAll
    public void setUp() {
        try {
            final var createRequest = loadRewardTypesData.getCreateRequest();
            final var createRequestAsList = loadRewardTypesData.getCreateRequestAsList(createRequest);
            final var response = loadRewardTypesData.createTestData(createRequestAsList);
            this.rewardTypeId = response.getResults().get(0).getId();
            rewardTypeIdsToDelete.add(rewardTypeId);

            final var createAch = loadAchievementsData.getCreateRequest(rewardTypeId);
            final var createAchAsList   = loadAchievementsData.getCreateRequestAsList(createAch);
            final var achResponse = loadAchievementsData.createTestData(createAchAsList);
            this.achievementId = achResponse.getResults().get(0).getId();
            achievementIdsToDelete.add(achievementId);

            rewardEntityType = RewardEntityType.ACHIEVEMENT.getValue();

            tagId = loadTagsData.getModel();
            customFieldKey = loadCustomFieldsData.getModel(customFieldIdsToDelete, AppliesTo.REWARD);

            tagIdsToDelete.add(tagId);

        }catch (ApiException e){
            logger.error("error", e.getCause());
        }
    }

    @AfterAll
    public void cleanUp() throws ApiException {
        try{
            Thread.sleep(5000);
            loadData.deleteTestData(idsToDelete);
            loadRewardTypesData.deleteTestData(rewardTypeIdsToDelete);
            loadAchievementsData.deleteTestData(achievementIdsToDelete);
            loadTagsData.deleteTestData(tagIdsToDelete);
            loadCustomFieldsData.deleteTestData(customFieldIdsToDelete);
        }catch (ApiException | InterruptedException e){
            logger.error("error", e.getCause());
        }

    }

    @Test
    @Order(1)
    public void createRewardReturnOkTest() throws ApiException {

        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = api.createRewards(createRequestAsList).join();

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");
        logger.info(response.getResults().get(0).getId());
        idsToDelete.add(response.getResults().get(0).getId());
    }

    @Test
    @Order(2)
    public void createRewardWithTagsAndCustomFieldsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType)
                .tags(List.of(tagId))
                .customFields(Map.of(customFieldKey, List.of("name", "surname")));

        ModelApiResponse createResponse = $(api.createRewards(loadData.getCreateRequestAsList(createRequest)));

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        assertNotNull(createResponse.getErrors());
        assertEquals(1, createResponse.getResults().size(), "Should contain created entity");
        assertNotNull(createResponse.getResults().get(0).getId(), "Created entity should has id");

        final var id = createResponse.getResults().get(0).getId();
        int limit = 1;
        int skip = 0;

        Thread.sleep(5000);

        var response = $(api.getRewards(List.of(id), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");
        assertNotNull(response.getResults().get(0).getCustomFields());
        assertNotNull(response.getResults().get(0).getTags());
        assertEquals(1,response.getResults().get(0).getCustomFields().size());
        assertEquals(1,response.getResults().get(0).getTags().size());

        idsToDelete.add(id);
    }

    @Test
    @Order(2)
    public void getRewardSingleIdReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        List<String> ids = List.of(id);
        Integer limit = 1;
        Integer skip = 0;

        Thread.sleep(5000);

        RewardResponse response = $(api.getRewards(ids, limit, skip));

        if(response.getMeta().getResultCount() == 0) {
            Thread.sleep(5000);
            response = $(api.getRewards(ids, limit, skip));
        }

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        Reward item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        Assertions.assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        Assertions.assertEquals(createRequest.getRewardRank(), item.getRewardRank(), "Found reward rank should be " + createRequest.getRewardRank());
        Assertions.assertEquals(createRequest.getRewardTypeId(), item.getRewardType().getId(), "Found reward type should be " + createRequest.getRewardTypeId());
        Assertions.assertEquals(createRequest.getRewardValue(), item.getRewardValue(), "Found reward value should be " + createRequest.getRewardValue());
        Assertions.assertEquals(1, createRequest.getConstraints().size(), "Found number of constraints should be equal " + createRequest.getConstraints().size());
        Assertions.assertTrue(createRequest.getConstraints().containsAll(item.getConstraints()), "Found constraints should collect all of" + createRequest.getConstraints());
//        assertNull(item.getTags(), "Found tags should be null");
//        assertNull(item.getMetadata(), "Found metadata should be null");
//        assertNull(item.getCustomFields(), "Found custom fields should be null");
        assertNotNull(item.getDescription(), "Found description should be null or blank");
//        assertNull(item.getIcon(), "Found icon should be null or blank");
//        assertNull(item.getIssueLimit(), "Found issue limit should be null");
        assertNotNull(item.getDelay(), "Found delay should be null");
        assertNull(item.getPointInTime(), "Found point in time should be null");
        assertNotNull(item.getPeriod(), "Found period should be null");

        idsToDelete.add(id);
    }

    @Test
    @Order(4)
    public void updateRewardValidRequestReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        //GIVEN
        String givenDescription = "Test_update_description";
        Integer givenIssueLimit = 1;
        Integer givenDelay = 2;
        OffsetDateTime givenPointInTime = DateUtil.now();

        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put(UUID.randomUUID().toString(),UUID.randomUUID().toString());

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .addConstraints(List.of("memberAcknowledgmentRequired"))
                .description(givenDescription)
                .metadata(givenMetadata)
                //.icon(this.iconId) //todo define ID
                .issueLimit(givenIssueLimit)
                .delay(givenDelay)
                .pointInTime(givenPointInTime)
                .rewardTypeId(rewardTypeId)
                .rewardValue(100D);

        //WHEN
        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        //THAN
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain updated entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        String updatedId = response.getResults().get(0).getId();


        List<String> ids = List.of(updatedId);
        Integer limit = 1;
        Integer skip = 0;
        RewardResponse itemResponse = $(api.getRewards(ids, limit, skip));

        assertNotNull(itemResponse);
        assertNotNull(itemResponse.getResults());
        assertEquals(1, itemResponse.getResults().size(), "Should contain entity");

        Reward item = itemResponse.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        Assertions.assertEquals(createRequest.getName(), item.getName(), "Found name should be equal to created previously");
        Assertions.assertEquals(createRequest.getRewardRank(), item.getRewardRank(), "Found reward rank should be " + given.getRewardRank());
        assertEquals(given.getRewardTypeId(), item.getRewardType().getId(), "Found reward type should be " + given.getRewardTypeId());
        assertEquals(given.getRewardValue(), item.getRewardValue(), "Found reward value should be " + given.getRewardValue());
        assertEquals(1, item.getConstraints().size(), "Found number of constraints should be equal " + item.getConstraints().size());
        assertTrue(given.getAddConstraints().containsAll(item.getConstraints()), "Found constraints should collect all of" + given.getAddConstraints());
        assertNotNull(item.getDescription(), "Found description should be not blank");
        assertEquals(givenDescription, item.getDescription(), "Description should be the same as provided");

        assertEquals(givenDelay, item.getDelay(), "Found delay should be " + givenIssueLimit);
        Assertions.assertEquals(createRequest.getPeriod(), item.getPeriod(), "Found period in time should be " + givenPointInTime);

        idsToDelete.add(id);
    }

    @Test
    @Order(5)
    public void updateRewardWithoutIdReturnErrorTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateEntityRewardRequest()
                .id(null);
        Thread.sleep(10000);
        final var response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(6)
    public void updateRewardWithoutIncorrectIdReturnErrorTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateEntityRewardRequest()
                .id("incorrect_id");
        Thread.sleep(10000);
        final var response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(7)
    @Disabled // No need for mandatory on update
    public void updateRewardWithoutNameReturnErrorTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .name(null);
        Thread.sleep(10000);
        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(8)
    public void updateRewardWithBlankNameReturnErrorTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .name("");
        Thread.sleep(10000);
        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(9)
    public void updateRewardWithNameLongerThan500CharsReturnErrorTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .name("x".repeat(501));
        Thread.sleep(10000);
        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(10)
    @Disabled // fixme - enable after we implement partial updates
    public void updateRewardWithoutRewardRankReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .rewardRank(null);

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(11)
    public void updateRewardWithBlankRewardRankReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .rewardRank("");

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(12)
    @Disabled // fixme - enable after we implement partial updates
    public void updateRewardWithoutRewardTypeReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .rewardTypeId(null);

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(13)
    public void updateRewardWithBlankRewardTypeReturnErrorTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .rewardTypeId("");
        Thread.sleep(10000);
        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);

    }

    @Test
    @Order(14)
    @Disabled // fixme - enable after we implement partial updates
    public void updateRewardWithoutRewardValueReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .rewardValue(null);

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(15)
    @Disabled // fixme - enable after we implement partial updates
    public void updateRewardWithoutConstraintsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .addConstraints(null);

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(16) // this should cause validation failure
    public void updateRewardWithEmptyConstraintsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .addConstraints(Collections.emptyList());

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(17) // this should cause validation failure
    public void updateRewardWithBlankConstraintItemReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .addConstraints(List.of(""));

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(18)
    @Disabled // fixme - enable after we implement partial updates
    public void updateRewardWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .customFields(Map.of("",""));

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(19)
    @Disabled // fixme - enable after we implement partial updates
    public void updateRewardWithCustomFieldsLimitMoreThan50ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        Map<String,Object> customFields = IntStream.range(0, 51)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .customFields(customFields);

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(20)
    @Disabled // fixme - enable after we implement partial updates
    public void updateRewardWithDuplicatedCustomFieldsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        String uuid = UUID.randomUUID().toString();

        Map<String,Object> customFields = IntStream.range(0, 3)
                .mapToObj(i -> uuid)
                .collect(Collectors.toMap(x->x,x->x));

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .customFields(customFields);

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(21)
    @Disabled // fixme - enable after we implement partial updates
    public void updateRewardWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        List<String> tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .tags(tags);

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(22)
    @Disabled // fixme - enable after we implement partial updates
    public void updateRewardWithDuplicatedTagsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        String uuid = UUID.randomUUID().toString();

        List<String> tags = IntStream.range(0, 3)
                .mapToObj(i -> uuid)
                .collect(Collectors.toList());

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .tags(tags);

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(23)
    public void updateRewardWithEmptyMetadataObjectReturnErrorTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .metadata(givenMetadata);
        Thread.sleep(10000);
        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(24)
    public void updateRewardWithMetadataKeyLengthMoreThan100CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();
               givenMetadata.put("a".repeat(101),UUID.randomUUID().toString());

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(25)
    public void updateRewardWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put("#@)G?$0",UUID.randomUUID().toString());

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(26)
    public void updateRewardWithMetadataValueLengthMoreThan100CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        final HashMap<String,String> givenMetadata = new HashMap<>();
givenMetadata.put(UUID.randomUUID().toString(),"a".repeat(101));

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .metadata(givenMetadata);

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }


    @Test
    @Order(28)
    public void updateRewardWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .metadata(givenMetas);

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(29) //todo review it
    @Disabled // fixme - enable after we implement partial updates
    public void updateRewardWithBlankTranslationKeyReturnErrorTest() throws ApiException {
//        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
//        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
//        final var createResponse = loadData.createTestData(createRequestAsList);
//        final var id = createResponse.getResults().get(0).getId();
//
//        List<Map<String, TranslationValue>> givenTranslations = List.of(
//                Map.of(
//                        "", new TranslationValue()
//                )
//        );
//
//        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
//                .id(id)
//                .translations(givenTranslations);
//
//        ModelApiResponse response = $(api.updateRewards(List.of(given)));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertEquals(0, response.getResults().size(), "Results should be empty");
//        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
//
//        idsToDelete.add(id);
    }

    @Test
    @Order(30)
    public void updateRewardWithDescriptionLengthMoreThan5000CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .description("a".repeat(5001));

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(31)
    public void updateRewardWithIncorrectIconIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .icon("incorrect_id");

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(32)
    public void updateRewardWithBlankIconIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .icon("");

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(33)
    public void updateRewardWithNegativeDelayIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .delay(-1);

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(34)
    public void updateRewardWithNegativeIssueLimitReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .issueLimit(-1);

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(35)
    public void updateRewardWithZeroIssueLimitReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        UpdateEntityRewardRequest given = new UpdateEntityRewardRequest()
                .id(id)
                .issueLimit(0);

        ModelApiResponse response = $(api.updateRewards(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(36)
    public void deleteRewardSingleIdReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        List<String> givenIds = List.of(id);

        Thread.sleep(5000);
        ModelApiResponse response = $(api.deleteRewards(givenIds));

        if(response.getMeta().getResultCount() == 0) {
            Thread.sleep(5000);
            response = $(api.deleteRewards(givenIds));
        }

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");
    }

    @Test
    public void deleteRewardWithIncorrectIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
        final var createResponse = loadData.createTestData(createRequestAsList);
        final var id = createResponse.getResults().get(0).getId();

        List<String> givenIds = List.of("some_incorrect_id_for_delete");

        ModelApiResponse response = $(api.deleteRewards(givenIds));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getMeta().getResultCount(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    public void createRewardWithoutNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).name(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createRewardWithBlankNameReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).name("");
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardWithoutNameLongerThan500CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).name("x".repeat(501));
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createRewardWithoutRewardRankReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).rewardRank(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardWithBlankRewardRankReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).rewardRank("");
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardWithoutRewardTypeReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).rewardTypeId(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardWithBlankRewardTypeReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).rewardTypeId("");
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardWithoutRewardValueReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).rewardValue(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test // if constraints are empty we are supplying defaults
    public void createRewardWithoutConstraintsReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).constraints(null);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
//        assertEquals(0, response.getResults().size(), "Results should be empty");
//        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(response.getResults().get(0).getId());
    }

    @Test // if constraints are empty we are supplying defaults
    public void createRewardWithEmptyConstraintsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).constraints(Collections.emptyList());
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());

        idsToDelete.add(response.getResults().get(0).getId());
    }

    @Test // if constraints are empty we are supplying defaults
    public void createRewardWithBlankConstraintItemReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).constraints(List.of(""));
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
//        assertEquals(0, response.getResults().size(), "Results should be empty");
//        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(response.getResults().get(0).getId());
    }

    @Test
    @Disabled //Fixme enable after Custom Fields implementation
    public void createRewardWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).customFields(Map.of("",""));
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //Fixme enable after Custom Fields implementation
    public void createRewardWithCustomFieldsLimitMoreThan50ReturnErrorTest() throws ApiException {
        Map<String,Object> customFields = IntStream.range(0, 51)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).customFields(customFields);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //Fixme enable after Custom Fields implementation
    public void createRewardWithDuplicatedCustomFieldsReturnErrorTest() throws ApiException {

        String uuid = UUID.randomUUID().toString();

        Map<String,Object> customFields = IntStream.range(0, 3)
                .mapToObj(i -> uuid)
                .collect(Collectors.toMap(x->x,x->x));

        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).customFields(customFields);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //Fixme enable after tags implementation
    public void createRewardWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {

        List<String> tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).tags(tags);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //Fixme enable after tags implementation
    public void createRewardWithDuplicatedTagsReturnErrorTest() throws ApiException {

        String uuid = UUID.randomUUID().toString();

        List<String> tags = IntStream.range(0, 3)
                .mapToObj(i -> uuid)
                .collect(Collectors.toList());

        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).tags(tags);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardWithEmptyMetadataObjectReturnErrorTest() throws ApiException {

        final HashMap<String,String> givenMetadata = new HashMap<>();

        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).metadata(givenMetadata);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardWithMetadataKeyLengthMoreThan100CharsReturnErrorTest() throws ApiException {
        final HashMap<String,String> givenMetadata = new HashMap<>();
               givenMetadata.put("a".repeat(101),UUID.randomUUID().toString());

        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).metadata(givenMetadata);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {
        final HashMap<String,String> givenMetadata = new HashMap<>();
                givenMetadata.put("#@)G?$0",UUID.randomUUID().toString());

        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).metadata(givenMetadata);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardWithMetadataValueLengthMoreThan100CharsReturnErrorTest() throws ApiException {
        final HashMap<String,String> givenMetadata = new HashMap<>();
givenMetadata.put(UUID.randomUUID().toString(),"a".repeat(101));

        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).metadata(givenMetadata);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }


    @Test
    public void createRewardWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {
        Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).metadata(givenMetas);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled
    //todo review it
    public void createRewardWithBlankTranslationKeyReturnErrorTest() throws ApiException {
//        List<Map<String, TranslationValue>> givenTranslations = List.of(
//                Map.of(
//                        "", new TranslationValue()
//                )
//        );
//
//        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).translations(givenTranslations);
//        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);
//
//        ModelApiResponse response = $(api.createRewards(createRequestAsList));
//
//        assertNotNull(response);
//        assertNotNull(response.getResults());
//        assertNotNull(response.getErrors());
//        assertEquals(0, response.getResults().size(), "Results should be empty");
//        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardWithDescriptionLengthMoreThan5000CharsReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).description("a".repeat(5001));
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardWithIncorrectIconIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).icon("incorrect_id");
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardWithBlankIconIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).icon("");
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardWithNegativeDelayIdReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).delay(-1);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //fixme - enable after issue limit has been implemented
    public void createRewardWithNegativeIssueLimitReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).issueLimit(-1);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //fixme - enable after issue limit has been implemented
    public void createRewardWithZeroIssueLimitReturnErrorTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).issueLimit(0);
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        ModelApiResponse response = $(api.createRewards(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void getRewardNoArgumentsReturnEmptyTest() throws ApiException {
        List<String> id = Collections.emptyList();
        Integer limit = 0;
        Integer skip = 0;
        RewardResponse response = $(api.getRewards(id, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getResults().isEmpty(), "Should have no result");
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
    }

    @Test
    public void getRewardNoIdsWithLimitReturnOkTest() throws ApiException {
        List<String> id = Collections.emptyList();
        Integer limit = 3;
        Integer skip = 0;
        RewardResponse response = $(api.getRewards(id, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        assertEquals(response.getResults().size(), 3, "Result count should match limit");
    }

    @Test
    public void getRewardMultipleIdsReturnOkTest() throws ApiException {
        final var createRequestAsList = loadData.getCreateRequestAsList(3,rewardTypeId, achievementId, rewardEntityType);
        final var createResponse = loadData.createTestData(createRequestAsList);

        final var ids = createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList());

        Integer limit = ids.size();
        Integer skip = 0;
        RewardResponse response = $(api.getRewards(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        Assertions.assertEquals(ids.size(), response.getResults().size(), "Should have single result");

        List<String> foundIds = response.getResults()
                .stream()
                .map(Reward::getId)
                .collect(Collectors.toList());

        assertTrue(foundIds.containsAll(ids), "Found id should be equal to requested");

        idsToDelete.addAll(ids);
    }

    @Test
    public void getRewardMultipleIdsOneMalformedReturnErrorTest() throws ApiException {

        Integer givenLimit = 3;

        final var createRequestAsList = loadData.getCreateRequestAsList(givenLimit,rewardTypeId, achievementId, rewardEntityType);
        final var createResponse = loadData.createTestData(createRequestAsList);
        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
        assertNotNull(createResponse.getErrors());
        Assertions.assertTrue(createResponse.getErrors().isEmpty(), "Should have no errors");

        final var ids = createResponse.getResults().stream().limit(givenLimit - 1).map(Result::getId).collect(Collectors.toList());
        ids.add("not_existed_id");

        Integer limit = ids.size();
        Integer skip = 0;
        RewardResponse response = $(api.getRewards(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have errors");
        assertEquals(1, response.getErrors().size(), "Should have single error");
        ids.remove("not_existed_id");

        idsToDelete.addAll(ids);
    }

    @Test
    public void getRewardMultipleIdsOneBlankReturnErrorTest() throws ApiException, InterruptedException {

        Integer givenLimit = 3;

        final var createRequestAsList = loadData.getCreateRequestAsList(givenLimit,rewardTypeId, achievementId, rewardEntityType);
        final var createResponse = loadData.createTestData(createRequestAsList);
        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
        assertNotNull(createResponse.getErrors());
        Assertions.assertEquals(givenLimit, createResponse.getResults().size());

        final var ids = createResponse.getResults().stream().limit(givenLimit - 1).map(Result::getId).collect(Collectors.toList());
        ids.add("");

        Thread.sleep(5000);

        Integer limit = ids.size();
        Integer skip = 0;
        RewardResponse response = $(api.getRewards(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getErrors().size(), "Should have single result");
        ids.remove("");
        idsToDelete.addAll(ids);
    }

    @Test
    public void getRewardIdWithWhitespaceReturnErrorTest() throws ApiException {
        final var createRequestAsList = loadData.getCreateRequestAsList(1,rewardTypeId, achievementId, rewardEntityType);
        final var createResponse = loadData.createTestData(createRequestAsList);


        final var givenIdsWithLeadingSpace = createResponse
                .getResults()
                .stream()
                .limit(1)
                .map(Result::getId)
                .map(" "::concat)
                .collect(Collectors.toList());

        List<String> ids = List.copyOf(givenIdsWithLeadingSpace);
        Integer limit = ids.size();
        Integer skip = 0;
        RewardResponse response = $(api.getRewards(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have error");
        assertFalse(response.getResults().isEmpty(), "Should not return result");

        idsToDelete.addAll(createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList()));
    }

    @Test
    public void getRewardIdWithWhitespaceBetweenReturnErrorTest() throws ApiException {
        final var createRequestAsList = loadData.getCreateRequestAsList(1,rewardTypeId, achievementId, rewardEntityType);
        final var createResponse = loadData.createTestData(createRequestAsList);
        Assertions.assertNotNull(createResponse, "Test database should contain test data");
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");

        List<String> givenIdsWithSpaceBetween = createResponse.getResults()
                .stream()
                .limit(1)
                .map(Result::getId)
                .map(id -> id.substring(0, id.length() / 2).concat(" ").concat(id.substring(id.length() / 2)))
                .collect(Collectors.toList());

        List<String> ids = List.copyOf(givenIdsWithSpaceBetween);
        Integer limit = ids.size();
        Integer skip = 0;
        RewardResponse response = $(api.getRewards(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have error");
        assertEquals(givenIdsWithSpaceBetween.size(), response.getErrors().size(), "Should have single error");
        assertTrue(response.getResults().isEmpty(), "Should not return result");

        idsToDelete.addAll(createResponse.getResults().stream().map(Result::getId).collect(Collectors.toList()));
    }

    @Test
    public void deleteRewardsByQueryTest() throws ApiException, InterruptedException {
        var translationEntry = new TranslationEntry();
        translationEntry.setFieldName("name");
        translationEntry.setText("Given");
        var translation = new Translation();
        translation.setLanguageKey("anp");
        translation.setTranslations(List.of(translationEntry));
        final var createRequest = loadData.getCreateRequest(rewardTypeId, achievementId, rewardEntityType).translations(List.of(translation));
        final var createdResponse = loadData.createTestData(List.of(createRequest));
        final var id = createdResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        assertNotNull(createdResponse);
        assertNotNull(createdResponse.getResults());
        assertNotNull(createdResponse.getErrors());
        Assertions.assertEquals(1, createdResponse.getResults().size(), "Should contain created entity");
        String givenId = createdResponse.getResults().get(0).getId();
        assertNotNull(givenId, "Created entity should has id");

        QueryRequest givenQuery = new QueryRequest()
                .addShouldItem(new QueryMultiple().queryField("id").queryValues(List.of(givenId)))
                .shouldMatch(1);
        ModelApiResponse response = $(api.deleteRewardsByQuery(givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

    }

    @Test
    @Order(23)
    public void getRewardsByQuerySortBySpaceNameReturnOkTest() throws ApiException, InterruptedException {
        final var createRequestAsList = loadData.getCreateRequestAsList(1, rewardTypeId, achievementId, rewardEntityType);
        final ModelApiResponse createResponse = loadData.createTestData(createRequestAsList);
        final String id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        final QuerySortBy sortBy = new QuerySortBy()
                .queryField("created")
                .order(SortOrder.DESC);

        QueryRequest qr = new QueryRequest()
                .sortBy(List.of(sortBy));

        var response = $(api.getRewardsByQuery(qr));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getResults().size() > 0, "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

        idsToDelete.add(id);

    }
}
