/*
 * Ziqni Application Services
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.sdk.admin.api;

import com.ziqni.sdk.admin.ZiqniAdminApiFactory;
import com.ziqni.sdk.admin.ApiException;
import com.ziqni.sdk.admin.data.LoadCustomFieldsData;
import com.ziqni.sdk.admin.data.LoadMetadata;
import com.ziqni.sdk.admin.data.LoadRewardTypesData;
import com.ziqni.sdk.admin.data.LoadTagsData;
import com.ziqni.sdk.admin.model.*;
import com.ziqni.sdk.admin.data.LoadCustomFieldsData;
import com.ziqni.sdk.admin.data.LoadMetadata;
import com.ziqni.sdk.admin.data.LoadRewardTypesData;
import com.ziqni.sdk.admin.data.LoadTagsData;
import com.ziqni.sdk.admin.model.*;
import com.ziqni.sdk.admin.util.ApiClientFactoryUtil;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static com.ziqni.sdk.admin.util.ApiClientFactoryUtil.initApiClientFactory;
import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assertions.assertTrue;


/**
 * API tests for RewardTypesApi
 */

@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class RewardTypesApiTest implements tests.utils.CompleteableFutureTestWrapper{

    private static final Logger logger = LoggerFactory.getLogger(RewardTypesApiTest.class);

    private RewardTypesApiWs api;
    private LoadRewardTypesData loadData;
    private final LoadTagsData loadTagsData;
    private final LoadCustomFieldsData loadCustomFieldsData;

    private String tagKey;
    private String customFieldKey;

    private List<String> idsToDelete = new ArrayList<>();
    private List<String> tagIdsToDelete = new ArrayList<>();
    private List<String> customFieldIdsToDelete = new ArrayList<>();

    public RewardTypesApiTest() throws Exception {
        ApiClientFactoryUtil.initApiClientFactory();
        this.api = ZiqniAdminApiFactory.getRewardTypesApi();

        this.loadData = new LoadRewardTypesData();
        this.loadCustomFieldsData = new LoadCustomFieldsData();
        this.loadTagsData = new LoadTagsData();
    }

    @BeforeAll
    public void setUp() {
        try {
            tagKey = loadTagsData.getModel();
            customFieldKey = loadCustomFieldsData.getModel(customFieldIdsToDelete, AppliesTo.REWARDTYPE);

            tagIdsToDelete.add(tagKey);
        }catch (ApiException e){
        logger.error("error", e.getCause());
    }
    }

    @AfterAll
    public void cleanUp() {
        try{
            Thread.sleep(5000);
            loadData.deleteTestData(idsToDelete);
            loadTagsData.deleteTestData(tagIdsToDelete);
            loadCustomFieldsData.deleteTestData(customFieldIdsToDelete);
        } catch (ApiException | InterruptedException e) {
            logger.error("error", e.getCause());
        }
    }

    /**
     * Create new Reward types in the Ziqni database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    @Order(1)
    public void createRewardTypesReturnOkTest() throws ApiException {
        final var createRequest = loadData.getCreateRequest();
        final var createRequestAsList = loadData.getCreateRequestAsList(createRequest);

        final var response = $(api.createRewardTypes(createRequestAsList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain created entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        idsToDelete.add(response.getResults().get(0).getId());
    }

    @Test
    @Order(2)
    public void createRewardTypeWithTagsAndCustomFieldsReturnOkTest() throws ApiException, InterruptedException {
        final var createRequest = loadData.getCreateRequest()
                .tags(List.of(tagKey))
                .customFields(Map.of(customFieldKey, List.of(1, 2)));

        ModelApiResponse createResponse = $(api.createRewardTypes(loadData.getCreateRequestAsList(createRequest)));

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        assertNotNull(createResponse.getErrors());
        assertEquals(1, createResponse.getResults().size(), "Should contain created entity");
        assertNotNull(createResponse.getResults().get(0).getId(), "Created entity should has id");

        final var id = createResponse.getResults().get(0).getId();
        int limit = 1;
        int skip = 0;

        Thread.sleep(5000);

        var response = $(api.getRewardTypes(List.of(id), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");
        assertNotNull(response.getResults().get(0).getCustomFields());
        assertNotNull(response.getResults().get(0).getTags());
        assertEquals(1,response.getResults().get(0).getCustomFields().size());
        assertEquals(1,response.getResults().get(0).getTags().size());

        idsToDelete.add(id);
    }
    @Test
    @Order(23)
    public void getRewardTypesByQueryWithMultipleFieldsReturnOkTest() throws ApiException, InterruptedException {
        var request = loadData.getCreateRequest().customFields(Map.of(customFieldKey, List.of(3, 4)));
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        var givenQuery = new QueryMultipleFields()
                .queryFields(List.of("id","spaceName","name")).queryValue(id);

        QueryRequest qr = new QueryRequest().multiFields(List.of(givenQuery));

        var response = $(api.getRewardTypesByQuery(qr));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

        idsToDelete.add(id);

    }

    @Test
    @Order(2)
    public void createRewardTypeWithTagsAndCustomFieldsAndTranslationsReturnOkTest() throws ApiException, InterruptedException {
        var translationEntry = new TranslationEntry();
        translationEntry.setFieldName("name");
        translationEntry.setText("Given");
        var translation = new Translation();
        translation.setLanguageKey("anp");
        translation.setTranslations(List.of(translationEntry));
        final var createRequest = loadData.getCreateRequest()
                .tags(List.of(tagKey))
                .customFields(Map.of(customFieldKey, List.of(1, 2)))
                .translations(List.of(translation));

        ModelApiResponse createResponse = $(api.createRewardTypes(loadData.getCreateRequestAsList(createRequest)));

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        assertNotNull(createResponse.getErrors());
        assertEquals(1, createResponse.getResults().size(), "Should contain created entity");
        assertNotNull(createResponse.getResults().get(0).getId(), "Created entity should has id");

        final var id = createResponse.getResults().get(0).getId();
        int limit = 1;
        int skip = 0;

        Thread.sleep(5000);

        var response = $(api.getRewardTypes(List.of(id), limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");
        assertNotNull(response.getResults().get(0).getCustomFields());
        assertNotNull(response.getResults().get(0).getTags());
        assertEquals(1,response.getResults().get(0).getCustomFields().size());
        assertEquals(1,response.getResults().get(0).getTags().size());

        idsToDelete.add(id);
    }

    @Test
    @Order(4)
    public void updateRewardTypeWithCustomFieldsReturnOkTest() throws ApiException, InterruptedException {
        var request = loadData.getCreateRequest().customFields(Map.of(customFieldKey, List.of(3, 4)));
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(10000);
        final var limit = 1;
        final var skip = 0;


        final var created = $(api.getRewardTypes( List.of(id), limit, skip));

        assertNotNull(created);
        assertNotNull(created.getResults());
        assertEquals(1, created.getResults().size(), "Should contain entity");

        //GIVEN
        final var givenDescription = "Test_update_description";




        final var given = new UpdateRewardTypeRequest()
                .id(id)
                .customFields(Map.of(customFieldKey, "hie"));

        Thread.sleep(10000);
        //WHEN
        final var updated = $(api.updateRewardTypes(List.of(given)));

        //THAN
        assertNotNull(updated);
        assertNotNull(updated.getResults());
        assertNotNull(updated.getErrors());
        assertEquals(1, updated.getResults().size(), "Should contain updated entity");
        assertNotNull(updated.getResults().get(0).getId(), "Created entity should has id");

        final var updatedId = updated.getResults().get(0).getId();

        final var ids = List.of(updatedId);
        final var response = $(api.getRewardTypes( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertEquals(1, response.getResults().size(), "Should contain entity");

        final var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");
        assertNotNull(item.getCustomFields());
        assertEquals(1,item.getCustomFields().size());
        idsToDelete.add(id);
    }

    @Test
    @Order(2)
    public void getRewardTypesSingleIdReturnOkTest() throws ApiException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final var ids = List.of(id);
        final var limit = 1;
        final var skip = 0;

        final var response = $(api.getRewardTypes(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(limit, response.getResults().size(), "Should has single result");

        RewardType actionType = response.getResults().get(0);

//        Assertions.assertNull(actionType.getTags(), "Found tags should be null");
        Assertions.assertNotNull(actionType.getMetadata(), "Found metadata should not be null");
        Assertions.assertNotNull(actionType.getCustomFields(), "Found custom fields should not be null");

        idsToDelete.addAll(ids);
    }

    @Test
    @Order(3)
    public void createRewardTypesWithDuplicatedKeyReturnErrorTest() throws ApiException, InterruptedException {

        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        final var response = $(api.createRewardTypes(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(4)
    public void updateRewardTypesValidRequestReturnOkTest() throws ApiException, InterruptedException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(10000);
        //GIVEN
        final var givenDescription = "Test_update_description";


        final var given = new UpdateRewardTypeRequest()
                .id(id)
                .description(givenDescription)
                .metadata(Map.of(UUID.randomUUID().toString(),UUID.randomUUID().toString()));
//                .translations(Collections.emptyList());

        //WHEN
        final var response = $(api.updateRewardTypes(List.of(given)));

        //THAN
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Should contain updated entity");
        assertNotNull(response.getResults().get(0).getId(), "Created entity should has id");

        final var updatedId = response.getResults().get(0).getId();

        final var ids = List.of(updatedId);
        final var limit = 1;
        final var skip = 0;
        final var item = $(api.getRewardTypes( ids, limit, skip));

        assertNotNull(item);
        assertNotNull(item.getResults());
        assertEquals(1, item.getResults().size(), "Should contain entity");

        final var actionType = item.getResults().get(0);

        assertEquals(id, actionType.getId(), "Found id should be equal to requested");
        assertNotNull(actionType.getDescription(), "Found description should be not blank");
        assertEquals(givenDescription, actionType.getDescription(), "Description should be the same as provided");

        idsToDelete.add(id);
    }

    @Test
    @Order(5)
    @Disabled //fixme - enable after partial updates are implemented
    public void updateRewardTypesWithoutNameReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateRewardTypeRequest()
                .id(id)
                .name(null);

        final var response = $(api.updateRewardTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(6)
    public void updateRewardTypesWithoutIdReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateRewardTypeRequest()
                .id(null);

        final var response = $(api.updateRewardTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(7)
    public void updateRewardTypesWithIncorrectIdIdReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateRewardTypeRequest()
                .id("updateRewardTypesWithIncorrectIdIdReturnErrorTest");

        final var response = $(api.updateRewardTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(8)
    @Disabled //fixme - enable after partial updates are implemented
    public void updateRewardTypesWithoutConstraintsReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateRewardTypeRequest()
                .id(id)
                .addConstraints(null);

        final var response = $(api.updateRewardTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(9)
    @Disabled //fixme - enable after partial updates are implemented
    public void updateRewardTypesWithoutUnitsOfMeasureReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateRewardTypeRequest()
                .id(id)
                .unitOfMeasureType(null);

        final var response = $(api.updateRewardTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(10)
    public void updateRewardTypesWithNameLongerThan100CharsReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateRewardTypeRequest()
                .id(id)
                .name("x".repeat(101));

        final var response = $(api.updateRewardTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(11)
    @Disabled //fixme - enable after Custom Fields is implemented
    public void updateRewardTypesWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateRewardTypeRequest()
                .id(id)
                .customFields(Map.of("",""));

        final var response = $(api.updateRewardTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(12)
    @Disabled //fixme - enable after Custom Fields is implemented
    public void updateRewardTypesWithCustomFieldsLimitMoreThan20ReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final Map<String,Object> customFields = IntStream.range(0, 21)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x,x->x));

        final var given = new UpdateRewardTypeRequest()
                .id(id)
                .customFields(customFields);

        final var response = $(api.updateRewardTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(13)
    @Disabled //fixme - enable after Tag is implemented
    public void updateRewardTypesWithIncorrectTagsReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateRewardTypeRequest()
                .id(id)
                .tags(List.of(""));

        final var response = $(api.updateRewardTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(14)
    @Disabled //fixme - enable after Tag is implemented
    public void updateRewardTypesWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final var tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        final var given = new UpdateRewardTypeRequest()
                .id(id)
                .tags(tags);

        final var response = $(api.updateRewardTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(15)
    public void updateRewardTypesWithEmptyMetadataObjectReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateRewardTypeRequest()
                .id(id)
                .metadata(Map.of());

        final var response = $(api.updateRewardTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(16)
    public void updateRewardTypesWithMetadataKeyLengthMoreThan50CharsReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final var givenMetadata = Map.of("a".repeat(101),UUID.randomUUID().toString());

        final var given = new UpdateRewardTypeRequest()
                .id(id)
                .metadata(givenMetadata);

        final var response = $(api.updateRewardTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(17)
    public void updateRewardTypesWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final var givenMetadata = Map.of("#@)G?$0",UUID.randomUUID().toString());

        final var given = new UpdateRewardTypeRequest()
                .id(id)
                .metadata(givenMetadata);

        final var response = $(api.updateRewardTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(18)
    public void updateRewardTypesWithMetadataValueLengthMoreThan200CharsReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final var givenMetadata = Map.of(UUID.randomUUID().toString(),"a".repeat(201));

        final var given = new UpdateRewardTypeRequest()
                .id(id)
                .metadata(givenMetadata);

        final var response = $(api.updateRewardTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }


    @Test
    @Order(20)
    public void updateRewardTypesWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        final var given = new UpdateRewardTypeRequest()
                .id(id)
                .metadata(givenMetas);

        final var response = $(api.updateRewardTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(21)
    public void updateRewardTypesWithDescriptionLengthMoreThan500CharsReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final var given = new UpdateRewardTypeRequest()
                .id(id)
                .description("a".repeat(501));

        final var response = $(api.updateRewardTypes(List.of(given)));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

        idsToDelete.add(id);
    }

    @Test
    @Order(22)
    public void getRewardTypesByQueryWithSingleIdReturnOkTest() throws ApiException, InterruptedException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        final var givenQuery = new QueryRequest()
                .addShouldItem(new QueryMultiple().queryField("id").queryValues(List.of(id)))
                .shouldMatch(1);

        final var response = $(api.getRewardTypesByQuery( givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

        idsToDelete.add(id);
    }

    @Test
    @Order(23)
    public void deleteRewardTypesSingleIdReturnOkTest() throws ApiException, InterruptedException {
        var translationEntry = new TranslationEntry();
        translationEntry.setFieldName("name");
        translationEntry.setText("Given");
        var translation = new Translation();
        translation.setLanguageKey("anp");
        translation.setTranslations(List.of(translationEntry));
        final var request = loadData.getCreateRequest().translations(List.of(translation));
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final var givenIds = List.of(id);

        Thread.sleep(5000);

        final var response = $(api.deleteRewardTypes( givenIds));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

    }

    @Test
    public void deleteRewardTypesWithIncorrectIdReturnErrorTest() throws ApiException {

        final var givenIds = List.of("some_incorrect_id_for_delete");

        final var response = $(api.deleteRewardTypes( givenIds));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardTypesWithoutNameReturnOkTest() throws ApiException {
        final var request = loadData.getCreateRequest().name(null);
        final var requestList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createRewardTypes(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getResults().size(), "Results should be empty");
        assertEquals(0, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createRewardTypesWithoutKeyReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest().key(null);
        final var requestList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createRewardTypes(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardTypesWithKeyMoreThan100CharsReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest().key("1".repeat(101));
        final var requestList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createRewardTypes(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    public void createRewardTypesWithKeyNotAllowedCharsReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest().key("#@)G?$0");
        final var requestList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createRewardTypes(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //fixme - enable after Custom Fields is implemented
    public void createRewardTypesWithIncorrectCustomFieldsReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest().customFields(Map.of("",""));
        final var requestList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createRewardTypes(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");

    }

    @Test
    @Disabled //fixme - enable after Custom Fields is implemented
    public void createRewardTypesWithCustomFieldsLimitMoreThan20ReturnErrorTest() throws ApiException {
        final Map<String,Object> customFields = IntStream.range(0, 21)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toMap(x->x, x->x));

        final var request = loadData.getCreateRequest().customFields(customFields);
        final var requestList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createRewardTypes(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //fixme - enable after Tag is implemented
    public void createRewardTypesWithIncorrectTagsReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest().tags(List.of(""));
        final var requestList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createRewardTypes(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    @Disabled //fixme - enable after Tag is implemented
    public void createRewardTypesWithTagsLimitMoreThan500ReturnErrorTest() throws ApiException {
        final var tags = IntStream.range(0, 501)
                .mapToObj(i -> UUID.randomUUID().toString())
                .collect(Collectors.toList());

        final var request = loadData.getCreateRequest().tags(tags);
        final var requestList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createRewardTypes(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardTypesWithEmptyMetadataObjectReturnErrorTest() throws ApiException {

        final var request = loadData.getCreateRequest().metadata(Map.of());
        final var requestList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createRewardTypes(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardTypesWithMetadataKeyLengthMoreThan50CharsReturnErrorTest() throws ApiException {
        final var givenMetadata = Map.of("a".repeat(101),UUID.randomUUID().toString());

        final var request = loadData.getCreateRequest().metadata(givenMetadata);
        final var requestList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createRewardTypes(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardTypesWithNotAllowedCharsOfMetadataKeyReturnErrorTest() throws ApiException {
        final var givenMetadata =Map.of("#@)G?$0",UUID.randomUUID().toString());

        final var request = loadData.getCreateRequest().metadata(givenMetadata);
        final var requestList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createRewardTypes(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardTypesWithMetadataValueLengthMoreThan200CharsReturnErrorTest() throws ApiException {
        final var givenMetadata = Map.of(UUID.randomUUID().toString(),"a".repeat(201));

        final var request = loadData.getCreateRequest().metadata(givenMetadata);
        final var requestList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createRewardTypes(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void createRewardTypesWithDescriptionLengthMoreThan500CharsReturnErrorTest() throws ApiException {
        final var request = loadData.getCreateRequest().description("a".repeat(501));
        final var requestList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createRewardTypes(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }


    @Test
    public void createRewardTypesWithMetadataLimitMoreThan50ReturnErrorTest() throws ApiException {
        final Map<String,String> givenMetas = new HashMap<>();
        IntStream.range(0, 51).forEach( i -> LoadMetadata.addRandomMetadataEntry(givenMetas));

        final var request = loadData.getCreateRequest().metadata(givenMetas);
        final var requestList = loadData.getCreateRequestAsList(request);

        final var response = $(api.createRewardTypes(requestList));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(0, response.getResults().size(), "Results should be empty");
        assertEquals(1, response.getErrors().size(), "Errors should contain entry");
    }

    @Test
    public void getRewardTypesNoArgumentsReturnEmptyTest() throws ApiException {
        final var request = loadData.getCreateRequest();
        final var requestList = loadData.getCreateRequestAsList(request);
        final var createResponse = loadData.createTestData(requestList);
        final var id = createResponse.getResults().get(0).getId();

        final var emptyIdList = new ArrayList<String>();
        final var limit = 0;
        final var skip = 0;
        final var response = $(api.getRewardTypes(emptyIdList, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getResults().isEmpty(), "Should have no result");
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        idsToDelete.add(id);
    }

    @Test
    public void getRewardTypesNoIdsWithLimitReturnOkTest() throws ApiException, InterruptedException {
        final var limit = 3;
        final var skip = 0;

        final var requestList = loadData.getCreateRequestAsList(3);
        final var createResponse = loadData.createTestData(requestList);
        final var ids = createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList());

        Thread.sleep(5000);

        final var response = $(api.getRewardTypes(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");

        assertEquals(3, response.getResults().size(), "Result count should match limit");

        idsToDelete.addAll(ids);
    }

    @Test
    public void getRewardTypesMultipleIdsReturnOkTest() throws ApiException, InterruptedException {
        final var requestList = loadData.getCreateRequestAsList(3);
        final var createResponse = loadData.createTestData(requestList);
        final var ids = createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList());

        Thread.sleep(5000);

        final var limit = ids.size();
        final var skip = 0;
        final var response = $(api.getRewardTypes( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(ids.size(), response.getResults().size(), "Should have single result");

        final var foundIds = response.getResults()
                .stream()
                .map(RewardType::getId)
                .collect(Collectors.toList());

        assertTrue(foundIds.containsAll(ids), "Found id should be equal to requested");

        idsToDelete.addAll(ids);
    }

    @Test
    public void getRewardTypesSingleBlankIdReturnErrorOkTest() throws ApiException, InterruptedException {
        final var requestList = loadData.getCreateRequestAsList(3);
        final var createResponse = loadData.createTestData(requestList);
        final var ids = createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList());

        Thread.sleep(5000);

        final var blankId = List.of("");
        final var limit = ids.size();
        final var skip = 0;
        final var response = $(api.getRewardTypes(blankId, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertTrue(response.getErrors().isEmpty(), "Should be empty");
        assertEquals(limit, response.getResults().size(), "Should have result");

        idsToDelete.addAll(ids);
    }

    @Test
    public void getRewardTypesMultipleIdsOneMalformedReturnErrorTest() throws ApiException {

        final var givenLimit = 3;

        final var requestList = loadData.getCreateRequestAsList(givenLimit);
        final var createResponse = loadData.createTestData(requestList);
        final var ids = createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList());

        ids.add("not_existed_id");

        final var limit = ids.size();
        final var skip = 0;
        final var response = $(api.getRewardTypes( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getErrors().size(), "Should have single result");
//        assertEquals(ids.size() - 1, response.getResults().size(), "Should have requested valid results");
//
//        final var foundIds = response.getResults()
//                .stream()
//                .map(RewardType::getId)
//                .collect(Collectors.toList());
//
//        assertTrue(foundIds.containsAll(ids), "Found id should be equal to requested");

        idsToDelete.addAll(createResponse
                .getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList()));
    }

    @Test
    public void getRewardTypesMultipleIdsOneBlankReturnErrorTest() throws ApiException {

        final var givenLimit = 3;

        final var requestList = loadData.getCreateRequestAsList(givenLimit);
        final var createResponse = loadData.createTestData(requestList);

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
        Assertions.assertEquals(givenLimit, createResponse.getResults().size());

        final var ids = createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList());
        ids.add("");

        final var limit = ids.size();
        final var skip = 0;
        final var response = $(api.getRewardTypes( ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, response.getErrors().size(), "Should have single result");
//        assertEquals(ids.size() - 1, response.getResults().size(), "Should have requested valid results");
//
//        final var foundIds = response.getResults()
//                .stream()
//                .map(RewardType::getId)
//                .collect(Collectors.toList());
//
//        assertTrue(foundIds.containsAll(ids), "Found id should be equal to requested");

        idsToDelete.addAll(createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList()));
    }

    @Test
    public void getRewardTypesIdWithWhitespaceReturnErrorTest() throws ApiException {

        final var requestList = loadData.getCreateRequestAsList(1);
        final var createResponse = loadData.createTestData(requestList);

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
        Assertions.assertEquals(1, createResponse.getResults().size());

        final var givenIdsWithLeadingSpace = createResponse.getResults()
                .stream()
                .limit(1)
                .map(Result::getId)
                .map(" "::concat)
                .collect(Collectors.toList());

        final var limit = givenIdsWithLeadingSpace.size();
        final var skip = 0;
        final var response = $(api.getRewardTypes( givenIdsWithLeadingSpace, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getErrors());
        assertNotNull(response.getResults());
        assertFalse(response.getResults().isEmpty(), "Should not return result");

        idsToDelete.addAll(createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList()));
    }

    @Test
    public void getRewardTypesIdWithWhitespaceBetweenReturnErrorTest() throws ApiException {

        final var requestList = loadData.getCreateRequestAsList(1);
        final var createResponse = loadData.createTestData(requestList);

        assertNotNull(createResponse);
        assertNotNull(createResponse.getResults());
        Assertions.assertFalse(createResponse.getResults().isEmpty(), "Test database should contain test data");
        Assertions.assertEquals(1, createResponse.getResults().size());

        final var givenIdsWithSpaceBetween = createResponse.getResults()
                .stream()
                .limit(1)
                .map(Result::getId)
                .map(id -> id.substring(0, id.length() / 2).concat(" ").concat(id.substring(id.length() / 2)))
                .collect(Collectors.toList());

        final var limit = givenIdsWithSpaceBetween.size();
        final var skip = 0;
        final var response = $(api.getRewardTypes( givenIdsWithSpaceBetween, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        Assertions.assertFalse(response.getErrors().isEmpty(), "Should have error");
        assertEquals(givenIdsWithSpaceBetween.size(), response.getErrors().size(), "Should have single error");
        assertTrue(response.getResults().isEmpty(), "Should not return result");

        idsToDelete.addAll(createResponse.getResults()
                .stream()
                .map(Result::getId)
                .collect(Collectors.toList()));
    }

    @Test
    public void deleteRewardTypesByQueryTest() throws ApiException, InterruptedException {
        var translationEntry = new TranslationEntry();
        translationEntry.setFieldName("name");
        translationEntry.setText("Given");
        var translation = new Translation();
        translation.setLanguageKey("anp");
        translation.setTranslations(List.of(translationEntry));
        final var createRequest = loadData.getCreateRequest().translations(List.of(translation));
        final var createdResponse = loadData.createTestData(List.of(createRequest));
        final var id = createdResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        assertNotNull(createdResponse);
        assertNotNull(createdResponse.getResults());
        assertNotNull(createdResponse.getErrors());
        Assertions.assertEquals(1, createdResponse.getResults().size(), "Should contain created entity");
        String givenId = createdResponse.getResults().get(0).getId();
        assertNotNull(givenId, "Created entity should has id");

        QueryRequest givenQuery = new QueryRequest()
                .addShouldItem(new QueryMultiple().queryField("id").queryValues(List.of(givenId)))
                .shouldMatch(1);
        ModelApiResponse response = $(api.deleteRewardTypesByQuery(givenQuery));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertEquals(1, response.getMeta().getResultCount(), "Results should contain entry");
        assertEquals(0, response.getErrors().size(), "Errors should be empty");

    }

    @Test
    @Order(30)
    public void updateRewardTypesRemoveConstraintReturnOkTest() throws ApiException, InterruptedException {
        var request = loadData.getCreateRequest();
        var requestList = loadData.getCreateRequestAsList(request);
        var createResponse = loadData.createTestData(requestList);
        var id = createResponse.getResults().get(0).getId();

        Thread.sleep(5000);

        var responseAfterCreate = $(api.getRewardTypes( List.of(id), 1, 0));

        assertNotNull(responseAfterCreate);
        assertNotNull(responseAfterCreate.getResults());
        assertNotNull(responseAfterCreate.getErrors());
        assertTrue(responseAfterCreate.getErrors().isEmpty(), "Should have no errors");
        assertEquals(1, responseAfterCreate.getResults().size(), "Should has single result");
        String givenDescription = UUID.randomUUID().toString();

        var updateConstraint = new ArrayList<String>();
        updateConstraint.add("system");

        final var given = new UpdateRewardTypeRequest()
                .id(id)
                .description(givenDescription);
        given.setRemoveConstraints(updateConstraint);

        //WHEN
        final var updated = $(api.updateRewardTypes(List.of(given)));

        assertNotNull(updated);
        assertNotNull(updated.getResults());
        assertNotNull(updated.getErrors());
        assertEquals(1, updated.getResults().size(), "Should contain updated entity");
        assertNotNull(updated.getResults().get(0).getId(), "Created entity should has id");

        String updatedId = updated.getResults().get(0).getId();


        List<String> ids = List.of(updatedId);
        Integer limit = 1;
        Integer skip = 0;

        var response = $(api.getRewardTypes(ids, limit, skip));

        assertNotNull(response);
        assertNotNull(response.getResults());
        assertNotNull(response.getErrors());
        assertTrue(response.getErrors().isEmpty(), "Should have no errors");
        assertEquals(responseAfterCreate.getResults().get(0).getConstraints().size()-1, response.getResults().get(0).getConstraints().size(), "Should have 1 less constraint from the created request");

        var item = response.getResults().get(0);

        assertEquals(id, item.getId(), "Found id should be equal to requested");

        idsToDelete.add(id);

    }
}
