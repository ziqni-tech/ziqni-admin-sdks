/*
 * ZIQNI Admin API
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ziqni.sdk.admin.api;
import javax.ws.rs.core.GenericType;
import com.ziqni.sdk.admin.streaming.StreamingClient;
import com.ziqni.sdk.admin.streaming.EventHandler;
import com.ziqni.sdk.admin.streaming.handlers.CallbackConsumer;
import com.ziqni.sdk.admin.ApiException;
import org.springframework.messaging.simp.stomp.StompHeaders;
    import com.ziqni.sdk.admin.model.CreateFileObjectRequest;
    import java.io.File;
    import com.ziqni.sdk.admin.model.FileObjectsResponse;
    import com.ziqni.sdk.admin.model.ModelApiResponse;
    import com.ziqni.sdk.admin.model.QueryRequest;
    import com.ziqni.sdk.admin.model.UpdateFileObjectRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.ziqni.sdk.admin.model.*;
import java.time.Duration;
    import java.util.*;
//asyncNative:true
import java.util.concurrent.CompletableFuture;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.BiConsumer;
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
    public class FileObjectsApiWs {

    private final Duration memberVarReadTimeout;
    private final StreamingClient streamingClient;

    public FileObjectsApiWs(StreamingClient streamingClient, Duration readTimeout) {
    this.streamingClient = streamingClient;
    this.memberVarReadTimeout = readTimeout;
    }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Copy an existing file object
                * @param body Copy file objects inside a repository and dumplicate in another folder or repository. (required)
                * @param id The unique identifiers of the resources (optional
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> copyFileObjects(UpdateFileObjectRequest body, List<String> id) {
                var request = new HashMap<String, Object>();
            var queryParam = new HashMap<String, Object>();
            queryParam.put("id", id);
            request.put("query",queryParam);

            
                        

            request.put("body",body);

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/copyFileObjects", request);
            return result;
        }



            /**
            * 
            * 
                * @param body Create a new file object repository in your Ziqni space (required)
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> createFileObjects(CreateFileObjectRequest body) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            request.put("body",body);

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/createFileObjects", request);
            return result;
        }



            /**
            * 
            * 
                * @param id The unique identifiers of the resources (optional
                * @param permanent Permanently delete the file object. Default is false (optional)
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> deleteFileObjects(List<String> id, Boolean permanent) {
                var request = new HashMap<String, Object>();
            var queryParam = new HashMap<String, Object>();
            queryParam.put("id", id);
queryParam.put("permanent", permanent);
            request.put("query",queryParam);

            
                        

            

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/deleteFileObjects", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Delete file objects by query
                * @param id The unique identifiers of the resources (optional
                * @param body Delete file objects inside a repository from Ziqni by unique file by unique object ID&#39;s or any other POST body parameters using the POST method (optional)
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> deleteFileObjectsByQuery(List<String> id, QueryRequest body) {
                var request = new HashMap<String, Object>();
            var queryParam = new HashMap<String, Object>();
            queryParam.put("id", id);
            request.put("query",queryParam);

            
                        

            request.put("body",body);

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/deleteFileObjectsByQuery", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Download file objects from your Ziqni space
                * @param path The canonical path of the file to download (optional)
                * @return CompletableFuture&lt;File&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<File> downloadFileObjects(String path) {
                var request = new HashMap<String, Object>();
            var queryParam = new HashMap<String, Object>();
            queryParam.put("path", path);
            request.put("query",queryParam);

            
                        

            

            CompletableFuture<File> result = this.streamingClient.sendWithApiCallback("/gapi/downloadFileObjects", request);
            return result;
        }



            /**
            * 
            * Returns a list of file objects
                * @param limit Limit the returned total records found (optional)
                * @param skip Skip the returned records found and return the next batch of records (optional)
                * @param id The unique identifiers of the resources (optional
                * @param download  (optional)
                * @return CompletableFuture&lt;FileObjectsResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<FileObjectsResponse> getFileObjects(Integer limit, Integer skip, List<String> id, String download) {
                var request = new HashMap<String, Object>();
            var queryParam = new HashMap<String, Object>();
            queryParam.put("limit", limit);
queryParam.put("skip", skip);
queryParam.put("id", id);
queryParam.put("download", download);
            request.put("query",queryParam);

            
                        

            

            CompletableFuture<FileObjectsResponse> result = this.streamingClient.sendWithApiCallback("/gapi/getFileObjects", request);
            return result;
        }



            /**
            * 
            * Retrieve file objects by query
                * @param id The unique identifiers of the resources (optional
                * @param body Retrieve file objects inside a repository from Ziqni by unique file object ID&#39;s or any other POST body parameters using the POST method (optional)
                * @return CompletableFuture&lt;FileObjectsResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<FileObjectsResponse> getFileObjectsByQuery(List<String> id, QueryRequest body) {
                var request = new HashMap<String, Object>();
            var queryParam = new HashMap<String, Object>();
            queryParam.put("id", id);
            request.put("query",queryParam);

            
                        

            request.put("body",body);

            CompletableFuture<FileObjectsResponse> result = this.streamingClient.sendWithApiCallback("/gapi/getFileObjectsByQuery", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Create or update file objects and binaries in your Ziqni space
                * @param parentFolderPath The folder to save these file in. (optional)
                * @param repositoryId  (optional)
                * @param templateToSave  (optional)
                * @param templateName  (optional)
                * @param tags  (optional)
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> saveTemplates(String parentFolderPath, String repositoryId, String templateToSave, String templateName, String tags) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/saveTemplates", request);
            return result;
        }



            /**
            * 
            * 
                * @param body Update a file object in your Ziqni space. (required)
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> updateFileObjects(List<UpdateFileObjectRequest> body) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            request.put("body",body);

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/updateFileObjects", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Create or update file objects and binaries in your Ziqni space
                * @param parentFolderPath The folder to save these file in. (optional)
                * @param files The files to upload (optional
                * @param repositoryId  (optional)
                * @param tags  (optional)
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> uploadFileObjects(String parentFolderPath, List<File> files, String repositoryId, String tags) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/uploadFileObjects", request);
            return result;
        }

        private ApiException getApiException(String operationId, HttpResponse<String> response) {
        String message = formatExceptionMessage(operationId, response.statusCode(), response.body());
        return new ApiException(response.statusCode(), message, response.headers(), response.body());
    }

    private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
    body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
    }
}
