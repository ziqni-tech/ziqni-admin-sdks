/*
 * ZIQNI Admin API
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.sdk.admin.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ChangePasswordRequest
 */
@JsonPropertyOrder({
  ChangePasswordRequest.JSON_PROPERTY_EMAIL,
  ChangePasswordRequest.JSON_PROPERTY_PASSWORD,
  ChangePasswordRequest.JSON_PROPERTY_NEW_PASSWORD,
  ChangePasswordRequest.JSON_PROPERTY_CONFIRM_PASSWORD,
  ChangePasswordRequest.JSON_PROPERTY_TWO_FACTOR_ACCESS_CODE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ChangePasswordRequest {
  public static final String JSON_PROPERTY_EMAIL = "email";
  private String email;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  private String password;

  public static final String JSON_PROPERTY_NEW_PASSWORD = "newPassword";
  private String newPassword;

  public static final String JSON_PROPERTY_CONFIRM_PASSWORD = "confirmPassword";
  private String confirmPassword;

  public static final String JSON_PROPERTY_TWO_FACTOR_ACCESS_CODE = "twoFactorAccessCode";
  private String twoFactorAccessCode;


  public ChangePasswordRequest email(String email) {
    this.email = email;
    return this;
  }

   /**
   * The account username
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The account username")
  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEmail() {
    return email;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmail(String email) {
    this.email = email;
  }


  public ChangePasswordRequest password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Current password
   * @return password
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Current password")
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPassword(String password) {
    this.password = password;
  }


  public ChangePasswordRequest newPassword(String newPassword) {
    this.newPassword = newPassword;
    return this;
  }

   /**
   * New password
   * @return newPassword
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "New password")
  @JsonProperty(JSON_PROPERTY_NEW_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNewPassword() {
    return newPassword;
  }


  @JsonProperty(JSON_PROPERTY_NEW_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNewPassword(String newPassword) {
    this.newPassword = newPassword;
  }


  public ChangePasswordRequest confirmPassword(String confirmPassword) {
    this.confirmPassword = confirmPassword;
    return this;
  }

   /**
   * Confirm password
   * @return confirmPassword
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Confirm password")
  @JsonProperty(JSON_PROPERTY_CONFIRM_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getConfirmPassword() {
    return confirmPassword;
  }


  @JsonProperty(JSON_PROPERTY_CONFIRM_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConfirmPassword(String confirmPassword) {
    this.confirmPassword = confirmPassword;
  }


  public ChangePasswordRequest twoFactorAccessCode(String twoFactorAccessCode) {
    this.twoFactorAccessCode = twoFactorAccessCode;
    return this;
  }

   /**
   * Two factor access code if 2FA enabled
   * @return twoFactorAccessCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Two factor access code if 2FA enabled")
  @JsonProperty(JSON_PROPERTY_TWO_FACTOR_ACCESS_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTwoFactorAccessCode() {
    return twoFactorAccessCode;
  }


  @JsonProperty(JSON_PROPERTY_TWO_FACTOR_ACCESS_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTwoFactorAccessCode(String twoFactorAccessCode) {
    this.twoFactorAccessCode = twoFactorAccessCode;
  }


  /**
   * Return true if this ChangePasswordRequest object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangePasswordRequest changePasswordRequest = (ChangePasswordRequest) o;
    return Objects.equals(this.email, changePasswordRequest.email) &&
        Objects.equals(this.password, changePasswordRequest.password) &&
        Objects.equals(this.newPassword, changePasswordRequest.newPassword) &&
        Objects.equals(this.confirmPassword, changePasswordRequest.confirmPassword) &&
        Objects.equals(this.twoFactorAccessCode, changePasswordRequest.twoFactorAccessCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, password, newPassword, confirmPassword, twoFactorAccessCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangePasswordRequest {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    newPassword: ").append(toIndentedString(newPassword)).append("\n");
    sb.append("    confirmPassword: ").append(toIndentedString(confirmPassword)).append("\n");
    sb.append("    twoFactorAccessCode: ").append(toIndentedString(twoFactorAccessCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

