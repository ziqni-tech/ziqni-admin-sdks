/*
 * ZIQNI Admin API
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ziqni.sdk.admin.api;
import javax.ws.rs.core.GenericType;
import com.ziqni.sdk.admin.streaming.StreamingClient;
import com.ziqni.sdk.admin.streaming.EventHandler;
import com.ziqni.sdk.admin.streaming.handlers.CallbackConsumer;
import com.ziqni.sdk.admin.ApiException;
import org.springframework.messaging.simp.stomp.StompHeaders;
    import com.ziqni.sdk.admin.model.CreateKafkaConnectionRequest;
    import com.ziqni.sdk.admin.model.CreateRabbitMqConnectionRequest;
    import com.ziqni.sdk.admin.model.CreateSqsConnectionRequest;
    import com.ziqni.sdk.admin.model.KafkaConnectionResponse;
    import com.ziqni.sdk.admin.model.ModelApiResponse;
    import com.ziqni.sdk.admin.model.QueryRequest;
    import com.ziqni.sdk.admin.model.RabbitMqConnectionResponse;
    import com.ziqni.sdk.admin.model.SqsConnectionResponse;
    import com.ziqni.sdk.admin.model.UpdateConnectionStateRequest;
    import com.ziqni.sdk.admin.model.UpdateKafkaConnectionRequest;
    import com.ziqni.sdk.admin.model.UpdateRabbitMqConnectionRequest;
    import com.ziqni.sdk.admin.model.UpdateSqsConnectionRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.ziqni.sdk.admin.model.*;
import java.time.Duration;
    import java.util.*;
//asyncNative:true
import java.util.concurrent.CompletableFuture;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.BiConsumer;
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
    public class ConsumersApiWs {

    private final Duration memberVarReadTimeout;
    private final StreamingClient streamingClient;

    public ConsumersApiWs(StreamingClient streamingClient, Duration readTimeout) {
    this.streamingClient = streamingClient;
    this.memberVarReadTimeout = readTimeout;
    }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Create a new Kafka Consumer Connection in the Ziqni system
                * @param body Create a Kafka Consumer Connection in the Ziqni system (required)
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> createKafkaConnections(CreateKafkaConnectionRequest body) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            request.put("body",body);

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/createKafkaConnections", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Create a new RabbitMq Consumer Connection in the Ziqni system
                * @param body Create a RabbitMq Consumer Connection in the Ziqni system (required)
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> createRabbitMQConnections(CreateRabbitMqConnectionRequest body) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            request.put("body",body);

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/createRabbitMQConnections", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Create a new SQS Consumer Connection in the Ziqni system
                * @param body Create a SQS Consumer Connection in the Ziqni system (required)
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> createSqsConnections(CreateSqsConnectionRequest body) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            request.put("body",body);

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/createSqsConnections", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Delete the Kafka Consumer Connection for a given identifier specified
                * @param id The unique identifiers of the resources (optional
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> deleteKafkaConnections(List<String> id) {
                var request = new HashMap<String, Object>();
            var queryParam = new HashMap<String, Object>();
            queryParam.put("id", id);
            request.put("query",queryParam);

            
                        

            

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/deleteKafkaConnections", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Delete a Kafka Connection or a list of Kafka Connections from Ziqni by unique Connection ID&#39;s or any other POST body parameters using the POST method
                * @param body Delete a Kafka Connection or a list of Kafka Connections from Ziqni by unique Connection ID&#39;s or any other POST body parameters using the POST method (optional)
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> deleteKafkaConnectionsByQuery(QueryRequest body) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            request.put("body",body);

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/deleteKafkaConnectionsByQuery", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Delete the RabbitMq Consumer Connection for a given identifier specified
                * @param id The unique identifiers of the resources (optional
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> deleteRabbitMQConnections(List<String> id) {
                var request = new HashMap<String, Object>();
            var queryParam = new HashMap<String, Object>();
            queryParam.put("id", id);
            request.put("query",queryParam);

            
                        

            

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/deleteRabbitMQConnections", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Delete a RabbitMQ Connection or a list of RabbitMQ Connections from Ziqni by unique Connection ID&#39;s or any other POST body parameters using the POST method
                * @param body Delete a RabbitMQ Connection or a list of RabbitMQ Connections from Ziqni by unique Connection ID&#39;s or any other POST body parameters using the POST method (optional)
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> deleteRabbitMQConnectionsByQuery(QueryRequest body) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            request.put("body",body);

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/deleteRabbitMQConnectionsByQuery", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Delete the SQS Consumer Connection for a given identifier specified
                * @param id The unique identifiers of the resources (optional
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> deleteSqsConnections(List<String> id) {
                var request = new HashMap<String, Object>();
            var queryParam = new HashMap<String, Object>();
            queryParam.put("id", id);
            request.put("query",queryParam);

            
                        

            

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/deleteSqsConnections", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Delete a SQS Connection or a list of SQS Connections from Ziqni by unique Connection ID&#39;s or any other POST body parameters using the POST method
                * @param body Delete a SQS Connection or a list of SQS Connections from Ziqni by unique Connection ID&#39;s or any other POST body parameters using the POST method (optional)
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> deleteSqsConnectionsByQuery(QueryRequest body) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            request.put("body",body);

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/deleteSqsConnectionsByQuery", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Return a list of Kafka Consumer Connections
                * @param id The unique identifiers of the resources (optional
                * @param limit Limit the returned total records found (optional)
                * @param skip Skip the returned records found and return the next batch of records (optional)
                * @return CompletableFuture&lt;KafkaConnectionResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<KafkaConnectionResponse> getKafkaConnections(List<String> id, Integer limit, Integer skip) {
                var request = new HashMap<String, Object>();
            var queryParam = new HashMap<String, Object>();
            queryParam.put("id", id);
queryParam.put("limit", limit);
queryParam.put("skip", skip);
            request.put("query",queryParam);

            
                        

            

            CompletableFuture<KafkaConnectionResponse> result = this.streamingClient.sendWithApiCallback("/gapi/getKafkaConnections", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Retrieve a Kafka Connection or a list of Kafka Connections from Ziqni by unique Connection ID&#39;s or any other Post body parameters using the POST method
                * @param body Retrieve a Kafka Connection or a list of Kafka Connections from Ziqni by unique Connection ID&#39;s or any other Post body parameters using the POST method (optional)
                * @return CompletableFuture&lt;KafkaConnectionResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<KafkaConnectionResponse> getKafkaConnectionsByQuery(QueryRequest body) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            request.put("body",body);

            CompletableFuture<KafkaConnectionResponse> result = this.streamingClient.sendWithApiCallback("/gapi/getKafkaConnectionsByQuery", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Return a list of RabbitMq Consumer Connections
                * @param id The unique identifiers of the resources (optional
                * @param limit Limit the returned total records found (optional)
                * @param skip Skip the returned records found and return the next batch of records (optional)
                * @return CompletableFuture&lt;RabbitMqConnectionResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<RabbitMqConnectionResponse> getRabbitMQConnections(List<String> id, Integer limit, Integer skip) {
                var request = new HashMap<String, Object>();
            var queryParam = new HashMap<String, Object>();
            queryParam.put("id", id);
queryParam.put("limit", limit);
queryParam.put("skip", skip);
            request.put("query",queryParam);

            
                        

            

            CompletableFuture<RabbitMqConnectionResponse> result = this.streamingClient.sendWithApiCallback("/gapi/getRabbitMQConnections", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Retrieve a RabbitMQ Connection or a list of RabbitMQ Connections from Ziqni by unique Connection ID&#39;s or any other Post body parameters using the POST method
                * @param body Retrieve a RabbitMQ Connection or a list of RabbitMQ Connections from Ziqni by unique Connection ID&#39;s or any other Post body parameters using the POST method (optional)
                * @return CompletableFuture&lt;RabbitMqConnectionResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<RabbitMqConnectionResponse> getRabbitMQConnectionsByQuery(QueryRequest body) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            request.put("body",body);

            CompletableFuture<RabbitMqConnectionResponse> result = this.streamingClient.sendWithApiCallback("/gapi/getRabbitMQConnectionsByQuery", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Return a list of SQS Consumer Connections
                * @param id The unique identifiers of the resources (optional
                * @param limit Limit the returned total records found (optional)
                * @param skip Skip the returned records found and return the next batch of records (optional)
                * @return CompletableFuture&lt;SqsConnectionResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<SqsConnectionResponse> getSqsConnections(List<String> id, Integer limit, Integer skip) {
                var request = new HashMap<String, Object>();
            var queryParam = new HashMap<String, Object>();
            queryParam.put("id", id);
queryParam.put("limit", limit);
queryParam.put("skip", skip);
            request.put("query",queryParam);

            
                        

            

            CompletableFuture<SqsConnectionResponse> result = this.streamingClient.sendWithApiCallback("/gapi/getSqsConnections", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Retrieve a SQS Connection or a list of SQS Connections from Ziqni by unique Connection ID&#39;s or any other Post body parameters using the POST method
                * @param body Retrieve a SQS Connection or a list of SQS Connections from Ziqni by unique Connection ID&#39;s or any other Post body parameters using the POST method (optional)
                * @return CompletableFuture&lt;SqsConnectionResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<SqsConnectionResponse> getSqsConnectionsByQuery(QueryRequest body) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            request.put("body",body);

            CompletableFuture<SqsConnectionResponse> result = this.streamingClient.sendWithApiCallback("/gapi/getSqsConnectionsByQuery", request);
            return result;
        }



            /**
            * Update connection status
            * Update the state of a Consumer using the POST method
                * @param body Update the state of a Consumer using the POST method (optional
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> updateConnectionsState(List<UpdateConnectionStateRequest> body) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            request.put("body",body);

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/updateConnectionsState", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Update an existing Kafka Consumer Connection in the Ziqni system
                * @param body Update the Kafka Consumer Connection details in the Ziqni system (required)
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> updateKafkaConnections(UpdateKafkaConnectionRequest body) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            request.put("body",body);

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/updateKafkaConnections", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Update the state of a Kafka Connection using the POST method
                * @param body Update the state of a Kafka Connection using the POST method (optional
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> updateKafkaConnectionsState(List<UpdateConnectionStateRequest> body) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            request.put("body",body);

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/updateKafkaConnectionsState", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Update an existing RabbitMq Consumer Connection in the Ziqni system
                * @param body Update the RabbitMq Consumer Connection details in the Ziqni system (required)
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> updateRabbitMQConnections(UpdateRabbitMqConnectionRequest body) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            request.put("body",body);

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/updateRabbitMQConnections", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Update the state of a RabbitMQ Connection using the POST method
                * @param body Update the state of a RabbitMQ Connection using the POST method (optional
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> updateRabbitMQConnectionsState(List<UpdateConnectionStateRequest> body) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            request.put("body",body);

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/updateRabbitMQConnectionsState", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Update an existing SQS Consumer Connection in the Ziqni system
                * @param body Update the SQS Consumer Connection details in the Ziqni system (required)
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> updateSqsConnections(UpdateSqsConnectionRequest body) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            request.put("body",body);

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/updateSqsConnections", request);
            return result;
        }



            /**
            * NOT AVAILABLE IN CURRENT RELEASE
            * Update the state of an SQS Connection using the POST method
                * @param body Update the state of an SQS Connection using the POST method (optional
                * @return CompletableFuture&lt;ModelApiResponse&gt;
            * @throws ApiException if fails to make API call
            */
            public CompletableFuture<ModelApiResponse> updateSqsConnectionsState(List<UpdateConnectionStateRequest> body) {
                var request = new HashMap<String, Object>();
            
                        

            
                        

            request.put("body",body);

            CompletableFuture<ModelApiResponse> result = this.streamingClient.sendWithApiCallback("/gapi/updateSqsConnectionsState", request);
            return result;
        }

        private ApiException getApiException(String operationId, HttpResponse<String> response) {
        String message = formatExceptionMessage(operationId, response.statusCode(), response.body());
        return new ApiException(response.statusCode(), message, response.headers(), response.body());
    }

    private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
    body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
    }
}
