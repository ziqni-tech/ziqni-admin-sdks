/*
 * ZIQNI Admin API
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.sdk.admin.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ziqni.sdk.admin.model.CreateRewardRequest;
import com.ziqni.sdk.admin.model.RoundType;
import com.ziqni.sdk.admin.model.Rule;
import com.ziqni.sdk.admin.model.Strategy;
import com.ziqni.sdk.admin.model.Translation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * CreateContestForCompetitionRequestAllOf
 */
@JsonPropertyOrder({
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_COMPETITION_ID,
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_ROW,
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_ROUND,
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_GROUP_STAGE,
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_GROUP_STAGE_LABEL,
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_ENTRANTS_FROM_CONTEST,
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_NAME,
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_DESCRIPTION,
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_TERMS_AND_CONDITIONS,
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_ROUND_TYPE,
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_MAX_NUMBER_OF_ENTRANTS,
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_MIN_NUMBER_OF_ENTRANTS,
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_RULES,
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_SCHEDULED_START_DATE,
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_SCHEDULED_END_DATE,
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_STRATEGIES,
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_TRANSLATIONS,
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_REWARDS,
  CreateContestForCompetitionRequestAllOf.JSON_PROPERTY_CONSTRAINTS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateContestForCompetitionRequestAllOf {
  public static final String JSON_PROPERTY_COMPETITION_ID = "competitionId";
  private String competitionId;

  public static final String JSON_PROPERTY_ROW = "row";
  private Integer row;

  public static final String JSON_PROPERTY_ROUND = "round";
  private Integer round;

  public static final String JSON_PROPERTY_GROUP_STAGE = "groupStage";
  private Integer groupStage;

  public static final String JSON_PROPERTY_GROUP_STAGE_LABEL = "groupStageLabel";
  private String groupStageLabel;

  public static final String JSON_PROPERTY_ENTRANTS_FROM_CONTEST = "entrantsFromContest";
  private List<String> entrantsFromContest = null;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_TERMS_AND_CONDITIONS = "termsAndConditions";
  private String termsAndConditions;

  public static final String JSON_PROPERTY_ROUND_TYPE = "roundType";
  private RoundType roundType;

  public static final String JSON_PROPERTY_MAX_NUMBER_OF_ENTRANTS = "maxNumberOfEntrants";
  private Integer maxNumberOfEntrants;

  public static final String JSON_PROPERTY_MIN_NUMBER_OF_ENTRANTS = "minNumberOfEntrants";
  private Integer minNumberOfEntrants;

  public static final String JSON_PROPERTY_RULES = "rules";
  private List<Rule> rules = null;

  public static final String JSON_PROPERTY_SCHEDULED_START_DATE = "scheduledStartDate";
  private OffsetDateTime scheduledStartDate;

  public static final String JSON_PROPERTY_SCHEDULED_END_DATE = "scheduledEndDate";
  private OffsetDateTime scheduledEndDate;

  public static final String JSON_PROPERTY_STRATEGIES = "strategies";
  private Strategy strategies;

  public static final String JSON_PROPERTY_TRANSLATIONS = "translations";
  private List<Translation> translations = null;

  public static final String JSON_PROPERTY_REWARDS = "rewards";
  private List<CreateRewardRequest> rewards = null;

  public static final String JSON_PROPERTY_CONSTRAINTS = "constraints";
  private List<String> constraints = new ArrayList<>();


  public CreateContestForCompetitionRequestAllOf competitionId(String competitionId) {
    this.competitionId = competitionId;
    return this;
  }

   /**
   * A unique identifier of a Competition
   * @return competitionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Dc4swmQBVd51K6gPQqFx", required = true, value = "A unique identifier of a Competition")
  @JsonProperty(JSON_PROPERTY_COMPETITION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCompetitionId() {
    return competitionId;
  }


  @JsonProperty(JSON_PROPERTY_COMPETITION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCompetitionId(String competitionId) {
    this.competitionId = competitionId;
  }


  public CreateContestForCompetitionRequestAllOf row(Integer row) {
    this.row = row;
    return this;
  }

   /**
   * The row number for displaying the Contest in a table
   * @return row
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2", required = true, value = "The row number for displaying the Contest in a table")
  @JsonProperty(JSON_PROPERTY_ROW)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getRow() {
    return row;
  }


  @JsonProperty(JSON_PROPERTY_ROW)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRow(Integer row) {
    this.row = row;
  }


  public CreateContestForCompetitionRequestAllOf round(Integer round) {
    this.round = round;
    return this;
  }

   /**
   * To what round does the contest belong
   * @return round
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2", required = true, value = "To what round does the contest belong")
  @JsonProperty(JSON_PROPERTY_ROUND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getRound() {
    return round;
  }


  @JsonProperty(JSON_PROPERTY_ROUND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRound(Integer round) {
    this.round = round;
  }


  public CreateContestForCompetitionRequestAllOf groupStage(Integer groupStage) {
    this.groupStage = groupStage;
    return this;
  }

   /**
   * Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
   * @return groupStage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2")
  @JsonProperty(JSON_PROPERTY_GROUP_STAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getGroupStage() {
    return groupStage;
  }


  @JsonProperty(JSON_PROPERTY_GROUP_STAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroupStage(Integer groupStage) {
    this.groupStage = groupStage;
  }


  public CreateContestForCompetitionRequestAllOf groupStageLabel(String groupStageLabel) {
    this.groupStageLabel = groupStageLabel;
    return this;
  }

   /**
   * The name of the group stages
   * @return groupStageLabel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Semi-finals", value = "The name of the group stages")
  @JsonProperty(JSON_PROPERTY_GROUP_STAGE_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGroupStageLabel() {
    return groupStageLabel;
  }


  @JsonProperty(JSON_PROPERTY_GROUP_STAGE_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroupStageLabel(String groupStageLabel) {
    this.groupStageLabel = groupStageLabel;
  }


  public CreateContestForCompetitionRequestAllOf entrantsFromContest(List<String> entrantsFromContest) {
    this.entrantsFromContest = entrantsFromContest;
    return this;
  }

  public CreateContestForCompetitionRequestAllOf addEntrantsFromContestItem(String entrantsFromContestItem) {
    if (this.entrantsFromContest == null) {
      this.entrantsFromContest = new ArrayList<>();
    }
    this.entrantsFromContest.add(entrantsFromContestItem);
    return this;
  }

   /**
   * A list of Ziqni contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.
   * @return entrantsFromContest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "- Dc4swmQBVd51K6gPQqFx - sc3jsrfLewVdt6KugPqFx", value = "A list of Ziqni contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.")
  @JsonProperty(JSON_PROPERTY_ENTRANTS_FROM_CONTEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getEntrantsFromContest() {
    return entrantsFromContest;
  }


  @JsonProperty(JSON_PROPERTY_ENTRANTS_FROM_CONTEST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEntrantsFromContest(List<String> entrantsFromContest) {
    this.entrantsFromContest = entrantsFromContest;
  }


  public CreateContestForCompetitionRequestAllOf name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A name for the Contest. Can be translated
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Fish and Chips", required = true, value = "A name for the Contest. Can be translated")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public CreateContestForCompetitionRequestAllOf description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A name for the Contest. Can be translated
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Fish and Chips contest", value = "A name for the Contest. Can be translated")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public CreateContestForCompetitionRequestAllOf termsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
    return this;
  }

   /**
   * A name for the Contest. Can be translated
   * @return termsAndConditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Buy 1 get 1 free", value = "A name for the Contest. Can be translated")
  @JsonProperty(JSON_PROPERTY_TERMS_AND_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTermsAndConditions() {
    return termsAndConditions;
  }


  @JsonProperty(JSON_PROPERTY_TERMS_AND_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTermsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
  }


  public CreateContestForCompetitionRequestAllOf roundType(RoundType roundType) {
    this.roundType = roundType;
    return this;
  }

   /**
   * Get roundType
   * @return roundType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ROUND_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RoundType getRoundType() {
    return roundType;
  }


  @JsonProperty(JSON_PROPERTY_ROUND_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRoundType(RoundType roundType) {
    this.roundType = roundType;
  }


  public CreateContestForCompetitionRequestAllOf maxNumberOfEntrants(Integer maxNumberOfEntrants) {
    this.maxNumberOfEntrants = maxNumberOfEntrants;
    return this;
  }

   /**
   * Maximum number of entrants for the contest
   * @return maxNumberOfEntrants
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9999", value = "Maximum number of entrants for the contest")
  @JsonProperty(JSON_PROPERTY_MAX_NUMBER_OF_ENTRANTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMaxNumberOfEntrants() {
    return maxNumberOfEntrants;
  }


  @JsonProperty(JSON_PROPERTY_MAX_NUMBER_OF_ENTRANTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxNumberOfEntrants(Integer maxNumberOfEntrants) {
    this.maxNumberOfEntrants = maxNumberOfEntrants;
  }


  public CreateContestForCompetitionRequestAllOf minNumberOfEntrants(Integer minNumberOfEntrants) {
    this.minNumberOfEntrants = minNumberOfEntrants;
    return this;
  }

   /**
   * Minimum number of entrants for the contest
   * @return minNumberOfEntrants
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "Minimum number of entrants for the contest")
  @JsonProperty(JSON_PROPERTY_MIN_NUMBER_OF_ENTRANTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMinNumberOfEntrants() {
    return minNumberOfEntrants;
  }


  @JsonProperty(JSON_PROPERTY_MIN_NUMBER_OF_ENTRANTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMinNumberOfEntrants(Integer minNumberOfEntrants) {
    this.minNumberOfEntrants = minNumberOfEntrants;
  }


  public CreateContestForCompetitionRequestAllOf rules(List<Rule> rules) {
    this.rules = rules;
    return this;
  }

  public CreateContestForCompetitionRequestAllOf addRulesItem(Rule rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * Get rules
   * @return rules
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_RULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Rule> getRules() {
    return rules;
  }


  @JsonProperty(JSON_PROPERTY_RULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRules(List<Rule> rules) {
    this.rules = rules;
  }


  public CreateContestForCompetitionRequestAllOf scheduledStartDate(OffsetDateTime scheduledStartDate) {
    this.scheduledStartDate = scheduledStartDate;
    return this;
  }

   /**
   * ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
   * @return scheduledStartDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone")
  @JsonProperty(JSON_PROPERTY_SCHEDULED_START_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getScheduledStartDate() {
    return scheduledStartDate;
  }


  @JsonProperty(JSON_PROPERTY_SCHEDULED_START_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setScheduledStartDate(OffsetDateTime scheduledStartDate) {
    this.scheduledStartDate = scheduledStartDate;
  }


  public CreateContestForCompetitionRequestAllOf scheduledEndDate(OffsetDateTime scheduledEndDate) {
    this.scheduledEndDate = scheduledEndDate;
    return this;
  }

   /**
   * ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
   * @return scheduledEndDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone")
  @JsonProperty(JSON_PROPERTY_SCHEDULED_END_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getScheduledEndDate() {
    return scheduledEndDate;
  }


  @JsonProperty(JSON_PROPERTY_SCHEDULED_END_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setScheduledEndDate(OffsetDateTime scheduledEndDate) {
    this.scheduledEndDate = scheduledEndDate;
  }


  public CreateContestForCompetitionRequestAllOf strategies(Strategy strategies) {
    this.strategies = strategies;
    return this;
  }

   /**
   * Get strategies
   * @return strategies
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_STRATEGIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Strategy getStrategies() {
    return strategies;
  }


  @JsonProperty(JSON_PROPERTY_STRATEGIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStrategies(Strategy strategies) {
    this.strategies = strategies;
  }


  public CreateContestForCompetitionRequestAllOf translations(List<Translation> translations) {
    this.translations = translations;
    return this;
  }

  public CreateContestForCompetitionRequestAllOf addTranslationsItem(Translation translationsItem) {
    if (this.translations == null) {
      this.translations = new ArrayList<>();
    }
    this.translations.add(translationsItem);
    return this;
  }

   /**
   * Get translations
   * @return translations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_TRANSLATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Translation> getTranslations() {
    return translations;
  }


  @JsonProperty(JSON_PROPERTY_TRANSLATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTranslations(List<Translation> translations) {
    this.translations = translations;
  }


  public CreateContestForCompetitionRequestAllOf rewards(List<CreateRewardRequest> rewards) {
    this.rewards = rewards;
    return this;
  }

  public CreateContestForCompetitionRequestAllOf addRewardsItem(CreateRewardRequest rewardsItem) {
    if (this.rewards == null) {
      this.rewards = new ArrayList<>();
    }
    this.rewards.add(rewardsItem);
    return this;
  }

   /**
   * Get rewards
   * @return rewards
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_REWARDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CreateRewardRequest> getRewards() {
    return rewards;
  }


  @JsonProperty(JSON_PROPERTY_REWARDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRewards(List<CreateRewardRequest> rewards) {
    this.rewards = rewards;
  }


  public CreateContestForCompetitionRequestAllOf constraints(List<String> constraints) {
    this.constraints = constraints;
    return this;
  }

  public CreateContestForCompetitionRequestAllOf addConstraintsItem(String constraintsItem) {
    this.constraints.add(constraintsItem);
    return this;
  }

   /**
   * Additional constraints
   * @return constraints
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "- notifyMember - memberAcknowledgmentRequired - autoStart - auto Stop", required = true, value = "Additional constraints")
  @JsonProperty(JSON_PROPERTY_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getConstraints() {
    return constraints;
  }


  @JsonProperty(JSON_PROPERTY_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConstraints(List<String> constraints) {
    this.constraints = constraints;
  }


  /**
   * Return true if this CreateContestForCompetitionRequest_allOf object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateContestForCompetitionRequestAllOf createContestForCompetitionRequestAllOf = (CreateContestForCompetitionRequestAllOf) o;
    return Objects.equals(this.competitionId, createContestForCompetitionRequestAllOf.competitionId) &&
        Objects.equals(this.row, createContestForCompetitionRequestAllOf.row) &&
        Objects.equals(this.round, createContestForCompetitionRequestAllOf.round) &&
        Objects.equals(this.groupStage, createContestForCompetitionRequestAllOf.groupStage) &&
        Objects.equals(this.groupStageLabel, createContestForCompetitionRequestAllOf.groupStageLabel) &&
        Objects.equals(this.entrantsFromContest, createContestForCompetitionRequestAllOf.entrantsFromContest) &&
        Objects.equals(this.name, createContestForCompetitionRequestAllOf.name) &&
        Objects.equals(this.description, createContestForCompetitionRequestAllOf.description) &&
        Objects.equals(this.termsAndConditions, createContestForCompetitionRequestAllOf.termsAndConditions) &&
        Objects.equals(this.roundType, createContestForCompetitionRequestAllOf.roundType) &&
        Objects.equals(this.maxNumberOfEntrants, createContestForCompetitionRequestAllOf.maxNumberOfEntrants) &&
        Objects.equals(this.minNumberOfEntrants, createContestForCompetitionRequestAllOf.minNumberOfEntrants) &&
        Objects.equals(this.rules, createContestForCompetitionRequestAllOf.rules) &&
        Objects.equals(this.scheduledStartDate, createContestForCompetitionRequestAllOf.scheduledStartDate) &&
        Objects.equals(this.scheduledEndDate, createContestForCompetitionRequestAllOf.scheduledEndDate) &&
        Objects.equals(this.strategies, createContestForCompetitionRequestAllOf.strategies) &&
        Objects.equals(this.translations, createContestForCompetitionRequestAllOf.translations) &&
        Objects.equals(this.rewards, createContestForCompetitionRequestAllOf.rewards) &&
        Objects.equals(this.constraints, createContestForCompetitionRequestAllOf.constraints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(competitionId, row, round, groupStage, groupStageLabel, entrantsFromContest, name, description, termsAndConditions, roundType, maxNumberOfEntrants, minNumberOfEntrants, rules, scheduledStartDate, scheduledEndDate, strategies, translations, rewards, constraints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateContestForCompetitionRequestAllOf {\n");
    sb.append("    competitionId: ").append(toIndentedString(competitionId)).append("\n");
    sb.append("    row: ").append(toIndentedString(row)).append("\n");
    sb.append("    round: ").append(toIndentedString(round)).append("\n");
    sb.append("    groupStage: ").append(toIndentedString(groupStage)).append("\n");
    sb.append("    groupStageLabel: ").append(toIndentedString(groupStageLabel)).append("\n");
    sb.append("    entrantsFromContest: ").append(toIndentedString(entrantsFromContest)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    termsAndConditions: ").append(toIndentedString(termsAndConditions)).append("\n");
    sb.append("    roundType: ").append(toIndentedString(roundType)).append("\n");
    sb.append("    maxNumberOfEntrants: ").append(toIndentedString(maxNumberOfEntrants)).append("\n");
    sb.append("    minNumberOfEntrants: ").append(toIndentedString(minNumberOfEntrants)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    scheduledStartDate: ").append(toIndentedString(scheduledStartDate)).append("\n");
    sb.append("    scheduledEndDate: ").append(toIndentedString(scheduledEndDate)).append("\n");
    sb.append("    strategies: ").append(toIndentedString(strategies)).append("\n");
    sb.append("    translations: ").append(toIndentedString(translations)).append("\n");
    sb.append("    rewards: ").append(toIndentedString(rewards)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

