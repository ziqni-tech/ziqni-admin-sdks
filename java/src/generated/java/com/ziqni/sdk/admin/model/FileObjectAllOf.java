/*
 * ZIQNI Admin API
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.sdk.admin.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * FileObjectAllOf
 */
@JsonPropertyOrder({
  FileObjectAllOf.JSON_PROPERTY_REPOSITORY_ID,
  FileObjectAllOf.JSON_PROPERTY_NAME,
  FileObjectAllOf.JSON_PROPERTY_MIME_TYPE,
  FileObjectAllOf.JSON_PROPERTY_PATH,
  FileObjectAllOf.JSON_PROPERTY_PARENT_FOLDER_PATH,
  FileObjectAllOf.JSON_PROPERTY_URI,
  FileObjectAllOf.JSON_PROPERTY_SIZE,
  FileObjectAllOf.JSON_PROPERTY_CONSTRAINTS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FileObjectAllOf {
  public static final String JSON_PROPERTY_REPOSITORY_ID = "repositoryId";
  private String repositoryId;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_MIME_TYPE = "mimeType";
  private String mimeType;

  public static final String JSON_PROPERTY_PATH = "path";
  private String path;

  public static final String JSON_PROPERTY_PARENT_FOLDER_PATH = "parentFolderPath";
  private String parentFolderPath;

  public static final String JSON_PROPERTY_URI = "uri";
  private String uri;

  public static final String JSON_PROPERTY_SIZE = "size";
  private Long size;

  public static final String JSON_PROPERTY_CONSTRAINTS = "constraints";
  private List<String> constraints = null;


  public FileObjectAllOf repositoryId(String repositoryId) {
    this.repositoryId = repositoryId;
    return this;
  }

   /**
   * The repository identifier this file belongs too
   * @return repositoryId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "sample", required = true, value = "The repository identifier this file belongs too")
  @JsonProperty(JSON_PROPERTY_REPOSITORY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRepositoryId() {
    return repositoryId;
  }


  @JsonProperty(JSON_PROPERTY_REPOSITORY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRepositoryId(String repositoryId) {
    this.repositoryId = repositoryId;
  }


  public FileObjectAllOf name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the original file uploaded
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "First-upload-file-sample.png", required = true, value = "Name of the original file uploaded")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public FileObjectAllOf mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

   /**
   * Mime type of the file. Valid mime types - text/csv or application/vmd.ms-excelor or application/x-directory for directories
   * @return mimeType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "application/vnd.png", required = true, value = "Mime type of the file. Valid mime types - text/csv or application/vmd.ms-excelor or application/x-directory for directories")
  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMimeType() {
    return mimeType;
  }


  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public FileObjectAllOf path(String path) {
    this.path = path;
    return this;
  }

   /**
   * The name of the attachment within the bucket
   * @return path
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/achievement-icons/images.png", required = true, value = "The name of the attachment within the bucket")
  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPath() {
    return path;
  }


  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPath(String path) {
    this.path = path;
  }


  public FileObjectAllOf parentFolderPath(String parentFolderPath) {
    this.parentFolderPath = parentFolderPath;
    return this;
  }

   /**
   * The folder name containing the attachment within the bucket
   * @return parentFolderPath
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/achievement-icons", required = true, value = "The folder name containing the attachment within the bucket")
  @JsonProperty(JSON_PROPERTY_PARENT_FOLDER_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getParentFolderPath() {
    return parentFolderPath;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_FOLDER_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setParentFolderPath(String parentFolderPath) {
    this.parentFolderPath = parentFolderPath;
  }


  public FileObjectAllOf uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * The uniform resource identifier where the file can be viewed/downloaded
   * @return uri
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://resource/location/file.ext", value = "The uniform resource identifier where the file can be viewed/downloaded")
  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUri() {
    return uri;
  }


  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUri(String uri) {
    this.uri = uri;
  }


  public FileObjectAllOf size(Long size) {
    this.size = size;
    return this;
  }

   /**
   * The size of the file
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123456", value = "The size of the file")
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(Long size) {
    this.size = size;
  }


  public FileObjectAllOf constraints(List<String> constraints) {
    this.constraints = constraints;
    return this;
  }

  public FileObjectAllOf addConstraintsItem(String constraintsItem) {
    if (this.constraints == null) {
      this.constraints = new ArrayList<>();
    }
    this.constraints.add(constraintsItem);
    return this;
  }

   /**
   * Additional constraints, if the value is present it means the
   * @return constraints
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Additional constraints, if the value is present it means the")
  @JsonProperty(JSON_PROPERTY_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getConstraints() {
    return constraints;
  }


  @JsonProperty(JSON_PROPERTY_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConstraints(List<String> constraints) {
    this.constraints = constraints;
  }


  /**
   * Return true if this FileObject_allOf object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileObjectAllOf fileObjectAllOf = (FileObjectAllOf) o;
    return Objects.equals(this.repositoryId, fileObjectAllOf.repositoryId) &&
        Objects.equals(this.name, fileObjectAllOf.name) &&
        Objects.equals(this.mimeType, fileObjectAllOf.mimeType) &&
        Objects.equals(this.path, fileObjectAllOf.path) &&
        Objects.equals(this.parentFolderPath, fileObjectAllOf.parentFolderPath) &&
        Objects.equals(this.uri, fileObjectAllOf.uri) &&
        Objects.equals(this.size, fileObjectAllOf.size) &&
        Objects.equals(this.constraints, fileObjectAllOf.constraints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(repositoryId, name, mimeType, path, parentFolderPath, uri, size, constraints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileObjectAllOf {\n");
    sb.append("    repositoryId: ").append(toIndentedString(repositoryId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    parentFolderPath: ").append(toIndentedString(parentFolderPath)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

