/*
 * ZIQNI Admin API
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.sdk.admin.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ziqni.sdk.admin.model.ContestStatus;
import com.ziqni.sdk.admin.model.RoundType;
import com.ziqni.sdk.admin.model.Strategy;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ContestAllOf
 */
@JsonPropertyOrder({
  ContestAllOf.JSON_PROPERTY_COMPETITION_ID,
  ContestAllOf.JSON_PROPERTY_ROW,
  ContestAllOf.JSON_PROPERTY_NAME,
  ContestAllOf.JSON_PROPERTY_DESCRIPTION,
  ContestAllOf.JSON_PROPERTY_TERMS_AND_CONDITIONS,
  ContestAllOf.JSON_PROPERTY_ROUND,
  ContestAllOf.JSON_PROPERTY_ROUND_TYPE,
  ContestAllOf.JSON_PROPERTY_GROUP_STAGE,
  ContestAllOf.JSON_PROPERTY_GROUP_STAGE_LABEL,
  ContestAllOf.JSON_PROPERTY_ENTRANTS_FROM_CONTEST,
  ContestAllOf.JSON_PROPERTY_MAX_NUMBER_OF_ENTRANTS,
  ContestAllOf.JSON_PROPERTY_MIN_NUMBER_OF_ENTRANTS,
  ContestAllOf.JSON_PROPERTY_SCHEDULED_START_DATE,
  ContestAllOf.JSON_PROPERTY_SCHEDULED_END_DATE,
  ContestAllOf.JSON_PROPERTY_ACTUAL_START_DATE,
  ContestAllOf.JSON_PROPERTY_ACTUAL_END_DATE,
  ContestAllOf.JSON_PROPERTY_STRATEGIES,
  ContestAllOf.JSON_PROPERTY_STATUS,
  ContestAllOf.JSON_PROPERTY_STATUS_CODE,
  ContestAllOf.JSON_PROPERTY_CONSTRAINTS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ContestAllOf {
  public static final String JSON_PROPERTY_COMPETITION_ID = "competitionId";
  private String competitionId;

  public static final String JSON_PROPERTY_ROW = "row";
  private Integer row;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_TERMS_AND_CONDITIONS = "termsAndConditions";
  private String termsAndConditions;

  public static final String JSON_PROPERTY_ROUND = "round";
  private Integer round;

  public static final String JSON_PROPERTY_ROUND_TYPE = "roundType";
  private RoundType roundType;

  public static final String JSON_PROPERTY_GROUP_STAGE = "groupStage";
  private Integer groupStage;

  public static final String JSON_PROPERTY_GROUP_STAGE_LABEL = "groupStageLabel";
  private String groupStageLabel;

  public static final String JSON_PROPERTY_ENTRANTS_FROM_CONTEST = "entrantsFromContest";
  private List<String> entrantsFromContest = new ArrayList<>();

  public static final String JSON_PROPERTY_MAX_NUMBER_OF_ENTRANTS = "maxNumberOfEntrants";
  private Integer maxNumberOfEntrants;

  public static final String JSON_PROPERTY_MIN_NUMBER_OF_ENTRANTS = "minNumberOfEntrants";
  private Integer minNumberOfEntrants;

  public static final String JSON_PROPERTY_SCHEDULED_START_DATE = "scheduledStartDate";
  private OffsetDateTime scheduledStartDate;

  public static final String JSON_PROPERTY_SCHEDULED_END_DATE = "scheduledEndDate";
  private OffsetDateTime scheduledEndDate;

  public static final String JSON_PROPERTY_ACTUAL_START_DATE = "actualStartDate";
  private OffsetDateTime actualStartDate;

  public static final String JSON_PROPERTY_ACTUAL_END_DATE = "actualEndDate";
  private OffsetDateTime actualEndDate;

  public static final String JSON_PROPERTY_STRATEGIES = "strategies";
  private Strategy strategies;

  public static final String JSON_PROPERTY_STATUS = "status";
  private ContestStatus status;

  public static final String JSON_PROPERTY_STATUS_CODE = "statusCode";
  private Integer statusCode;

  public static final String JSON_PROPERTY_CONSTRAINTS = "constraints";
  private List<String> constraints = new ArrayList<>();


  public ContestAllOf competitionId(String competitionId) {
    this.competitionId = competitionId;
    return this;
  }

   /**
   * A unique identifier of a Competition
   * @return competitionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Dc4swmQBVd51K6gPQqFx", required = true, value = "A unique identifier of a Competition")
  @JsonProperty(JSON_PROPERTY_COMPETITION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCompetitionId() {
    return competitionId;
  }


  @JsonProperty(JSON_PROPERTY_COMPETITION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCompetitionId(String competitionId) {
    this.competitionId = competitionId;
  }


  public ContestAllOf row(Integer row) {
    this.row = row;
    return this;
  }

   /**
   * The row number for displaying the Contest in a table
   * @return row
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2", required = true, value = "The row number for displaying the Contest in a table")
  @JsonProperty(JSON_PROPERTY_ROW)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getRow() {
    return row;
  }


  @JsonProperty(JSON_PROPERTY_ROW)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRow(Integer row) {
    this.row = row;
  }


  public ContestAllOf name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A name for the Contest. Can be translated
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Fish and Chips", required = true, value = "A name for the Contest. Can be translated")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public ContestAllOf description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the contest
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Fish and Chips contest", value = "Description of the contest")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public ContestAllOf termsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
    return this;
  }

   /**
   * Terms and conditions for participating in the Contest. Can be translated
   * @return termsAndConditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Buy 1 get 1 free", value = "Terms and conditions for participating in the Contest. Can be translated")
  @JsonProperty(JSON_PROPERTY_TERMS_AND_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTermsAndConditions() {
    return termsAndConditions;
  }


  @JsonProperty(JSON_PROPERTY_TERMS_AND_CONDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTermsAndConditions(String termsAndConditions) {
    this.termsAndConditions = termsAndConditions;
  }


  public ContestAllOf round(Integer round) {
    this.round = round;
    return this;
  }

   /**
   * To what round does the contest belong
   * @return round
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2", required = true, value = "To what round does the contest belong")
  @JsonProperty(JSON_PROPERTY_ROUND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getRound() {
    return round;
  }


  @JsonProperty(JSON_PROPERTY_ROUND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRound(Integer round) {
    this.round = round;
  }


  public ContestAllOf roundType(RoundType roundType) {
    this.roundType = roundType;
    return this;
  }

   /**
   * Get roundType
   * @return roundType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_ROUND_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RoundType getRoundType() {
    return roundType;
  }


  @JsonProperty(JSON_PROPERTY_ROUND_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRoundType(RoundType roundType) {
    this.roundType = roundType;
  }


  public ContestAllOf groupStage(Integer groupStage) {
    this.groupStage = groupStage;
    return this;
  }

   /**
   * Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
   * @return groupStage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2")
  @JsonProperty(JSON_PROPERTY_GROUP_STAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getGroupStage() {
    return groupStage;
  }


  @JsonProperty(JSON_PROPERTY_GROUP_STAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroupStage(Integer groupStage) {
    this.groupStage = groupStage;
  }


  public ContestAllOf groupStageLabel(String groupStageLabel) {
    this.groupStageLabel = groupStageLabel;
    return this;
  }

   /**
   * The name of the group stages
   * @return groupStageLabel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Semi-finals", value = "The name of the group stages")
  @JsonProperty(JSON_PROPERTY_GROUP_STAGE_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGroupStageLabel() {
    return groupStageLabel;
  }


  @JsonProperty(JSON_PROPERTY_GROUP_STAGE_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroupStageLabel(String groupStageLabel) {
    this.groupStageLabel = groupStageLabel;
  }


  public ContestAllOf entrantsFromContest(List<String> entrantsFromContest) {
    this.entrantsFromContest = entrantsFromContest;
    return this;
  }

  public ContestAllOf addEntrantsFromContestItem(String entrantsFromContestItem) {
    this.entrantsFromContest.add(entrantsFromContestItem);
    return this;
  }

   /**
   * A list of Ziqni contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.
   * @return entrantsFromContest
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "- Dc4swmQBVd51K6gPQqFx - sc3jsrfLewVdt6KugPqFx", required = true, value = "A list of Ziqni contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.")
  @JsonProperty(JSON_PROPERTY_ENTRANTS_FROM_CONTEST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getEntrantsFromContest() {
    return entrantsFromContest;
  }


  @JsonProperty(JSON_PROPERTY_ENTRANTS_FROM_CONTEST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntrantsFromContest(List<String> entrantsFromContest) {
    this.entrantsFromContest = entrantsFromContest;
  }


  public ContestAllOf maxNumberOfEntrants(Integer maxNumberOfEntrants) {
    this.maxNumberOfEntrants = maxNumberOfEntrants;
    return this;
  }

   /**
   * Maximum number of entrants for the contest
   * @return maxNumberOfEntrants
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "9999", value = "Maximum number of entrants for the contest")
  @JsonProperty(JSON_PROPERTY_MAX_NUMBER_OF_ENTRANTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMaxNumberOfEntrants() {
    return maxNumberOfEntrants;
  }


  @JsonProperty(JSON_PROPERTY_MAX_NUMBER_OF_ENTRANTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxNumberOfEntrants(Integer maxNumberOfEntrants) {
    this.maxNumberOfEntrants = maxNumberOfEntrants;
  }


  public ContestAllOf minNumberOfEntrants(Integer minNumberOfEntrants) {
    this.minNumberOfEntrants = minNumberOfEntrants;
    return this;
  }

   /**
   * Minimum number of entrants for the contest
   * @return minNumberOfEntrants
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "0", required = true, value = "Minimum number of entrants for the contest")
  @JsonProperty(JSON_PROPERTY_MIN_NUMBER_OF_ENTRANTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMinNumberOfEntrants() {
    return minNumberOfEntrants;
  }


  @JsonProperty(JSON_PROPERTY_MIN_NUMBER_OF_ENTRANTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMinNumberOfEntrants(Integer minNumberOfEntrants) {
    this.minNumberOfEntrants = minNumberOfEntrants;
  }


  public ContestAllOf scheduledStartDate(OffsetDateTime scheduledStartDate) {
    this.scheduledStartDate = scheduledStartDate;
    return this;
  }

   /**
   * ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
   * @return scheduledStartDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone")
  @JsonProperty(JSON_PROPERTY_SCHEDULED_START_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getScheduledStartDate() {
    return scheduledStartDate;
  }


  @JsonProperty(JSON_PROPERTY_SCHEDULED_START_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setScheduledStartDate(OffsetDateTime scheduledStartDate) {
    this.scheduledStartDate = scheduledStartDate;
  }


  public ContestAllOf scheduledEndDate(OffsetDateTime scheduledEndDate) {
    this.scheduledEndDate = scheduledEndDate;
    return this;
  }

   /**
   * ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
   * @return scheduledEndDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone")
  @JsonProperty(JSON_PROPERTY_SCHEDULED_END_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getScheduledEndDate() {
    return scheduledEndDate;
  }


  @JsonProperty(JSON_PROPERTY_SCHEDULED_END_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setScheduledEndDate(OffsetDateTime scheduledEndDate) {
    this.scheduledEndDate = scheduledEndDate;
  }


   /**
   * ISO8601 timestamp for when a Competition started. All records are stored in UTC time zone
   * @return actualStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO8601 timestamp for when a Competition started. All records are stored in UTC time zone")
  @JsonProperty(JSON_PROPERTY_ACTUAL_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getActualStartDate() {
    return actualStartDate;
  }




   /**
   * ISO8601 timestamp for when a Competition ended. All records are stored in UTC time zone
   * @return actualEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO8601 timestamp for when a Competition ended. All records are stored in UTC time zone")
  @JsonProperty(JSON_PROPERTY_ACTUAL_END_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getActualEndDate() {
    return actualEndDate;
  }




  public ContestAllOf strategies(Strategy strategies) {
    this.strategies = strategies;
    return this;
  }

   /**
   * Get strategies
   * @return strategies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_STRATEGIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Strategy getStrategies() {
    return strategies;
  }


  @JsonProperty(JSON_PROPERTY_STRATEGIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStrategies(Strategy strategies) {
    this.strategies = strategies;
  }


  public ContestAllOf status(ContestStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ContestStatus getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(ContestStatus status) {
    this.status = status;
  }


   /**
   * The code of the contest
   * @return statusCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "3", required = true, value = "The code of the contest")
  @JsonProperty(JSON_PROPERTY_STATUS_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getStatusCode() {
    return statusCode;
  }




  public ContestAllOf constraints(List<String> constraints) {
    this.constraints = constraints;
    return this;
  }

  public ContestAllOf addConstraintsItem(String constraintsItem) {
    this.constraints.add(constraintsItem);
    return this;
  }

   /**
   * Additional constraints
   * @return constraints
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "- isPublic - autoStart - auto Stop - memberAcknowledgmentRequired", required = true, value = "Additional constraints")
  @JsonProperty(JSON_PROPERTY_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getConstraints() {
    return constraints;
  }


  @JsonProperty(JSON_PROPERTY_CONSTRAINTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConstraints(List<String> constraints) {
    this.constraints = constraints;
  }


  /**
   * Return true if this Contest_allOf object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContestAllOf contestAllOf = (ContestAllOf) o;
    return Objects.equals(this.competitionId, contestAllOf.competitionId) &&
        Objects.equals(this.row, contestAllOf.row) &&
        Objects.equals(this.name, contestAllOf.name) &&
        Objects.equals(this.description, contestAllOf.description) &&
        Objects.equals(this.termsAndConditions, contestAllOf.termsAndConditions) &&
        Objects.equals(this.round, contestAllOf.round) &&
        Objects.equals(this.roundType, contestAllOf.roundType) &&
        Objects.equals(this.groupStage, contestAllOf.groupStage) &&
        Objects.equals(this.groupStageLabel, contestAllOf.groupStageLabel) &&
        Objects.equals(this.entrantsFromContest, contestAllOf.entrantsFromContest) &&
        Objects.equals(this.maxNumberOfEntrants, contestAllOf.maxNumberOfEntrants) &&
        Objects.equals(this.minNumberOfEntrants, contestAllOf.minNumberOfEntrants) &&
        Objects.equals(this.scheduledStartDate, contestAllOf.scheduledStartDate) &&
        Objects.equals(this.scheduledEndDate, contestAllOf.scheduledEndDate) &&
        Objects.equals(this.actualStartDate, contestAllOf.actualStartDate) &&
        Objects.equals(this.actualEndDate, contestAllOf.actualEndDate) &&
        Objects.equals(this.strategies, contestAllOf.strategies) &&
        Objects.equals(this.status, contestAllOf.status) &&
        Objects.equals(this.statusCode, contestAllOf.statusCode) &&
        Objects.equals(this.constraints, contestAllOf.constraints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(competitionId, row, name, description, termsAndConditions, round, roundType, groupStage, groupStageLabel, entrantsFromContest, maxNumberOfEntrants, minNumberOfEntrants, scheduledStartDate, scheduledEndDate, actualStartDate, actualEndDate, strategies, status, statusCode, constraints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContestAllOf {\n");
    sb.append("    competitionId: ").append(toIndentedString(competitionId)).append("\n");
    sb.append("    row: ").append(toIndentedString(row)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    termsAndConditions: ").append(toIndentedString(termsAndConditions)).append("\n");
    sb.append("    round: ").append(toIndentedString(round)).append("\n");
    sb.append("    roundType: ").append(toIndentedString(roundType)).append("\n");
    sb.append("    groupStage: ").append(toIndentedString(groupStage)).append("\n");
    sb.append("    groupStageLabel: ").append(toIndentedString(groupStageLabel)).append("\n");
    sb.append("    entrantsFromContest: ").append(toIndentedString(entrantsFromContest)).append("\n");
    sb.append("    maxNumberOfEntrants: ").append(toIndentedString(maxNumberOfEntrants)).append("\n");
    sb.append("    minNumberOfEntrants: ").append(toIndentedString(minNumberOfEntrants)).append("\n");
    sb.append("    scheduledStartDate: ").append(toIndentedString(scheduledStartDate)).append("\n");
    sb.append("    scheduledEndDate: ").append(toIndentedString(scheduledEndDate)).append("\n");
    sb.append("    actualStartDate: ").append(toIndentedString(actualStartDate)).append("\n");
    sb.append("    actualEndDate: ").append(toIndentedString(actualEndDate)).append("\n");
    sb.append("    strategies: ").append(toIndentedString(strategies)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    constraints: ").append(toIndentedString(constraints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

