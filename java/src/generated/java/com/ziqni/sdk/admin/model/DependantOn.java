/*
 * ZIQNI Admin API
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ziqni.sdk.admin.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * DependantOn
 */
@JsonPropertyOrder({
  DependantOn.JSON_PROPERTY_MUST,
  DependantOn.JSON_PROPERTY_MUST_NOT,
  DependantOn.JSON_PROPERTY_SHOULD,
  DependantOn.JSON_PROPERTY_SHOULD_MATCH_AT_LEAST
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DependantOn {
  public static final String JSON_PROPERTY_MUST = "must";
  private List<String> must = null;

  public static final String JSON_PROPERTY_MUST_NOT = "mustNot";
  private List<String> mustNot = null;

  public static final String JSON_PROPERTY_SHOULD = "should";
  private List<String> should = null;

  public static final String JSON_PROPERTY_SHOULD_MATCH_AT_LEAST = "shouldMatchAtLeast";
  private Integer shouldMatchAtLeast;


  public DependantOn must(List<String> must) {
    this.must = must;
    return this;
  }

  public DependantOn addMustItem(String mustItem) {
    if (this.must == null) {
      this.must = new ArrayList<>();
    }
    this.must.add(mustItem);
    return this;
  }

   /**
   * A rule indicating that it has to be included. Players that are in the EU group with a MUST rule - that means only players that have that group can participate
   * @return must
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "- EU - DE", value = "A rule indicating that it has to be included. Players that are in the EU group with a MUST rule - that means only players that have that group can participate")
  @JsonProperty(JSON_PROPERTY_MUST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getMust() {
    return must;
  }


  @JsonProperty(JSON_PROPERTY_MUST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMust(List<String> must) {
    this.must = must;
  }


  public DependantOn mustNot(List<String> mustNot) {
    this.mustNot = mustNot;
    return this;
  }

  public DependantOn addMustNotItem(String mustNotItem) {
    if (this.mustNot == null) {
      this.mustNot = new ArrayList<>();
    }
    this.mustNot.add(mustNotItem);
    return this;
  }

   /**
   * A rule indicating that it will not be included. Players that are in the EU group with a MUST-NOT rule - that means that players that have that group can NOT participate
   * @return mustNot
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "- CH", value = "A rule indicating that it will not be included. Players that are in the EU group with a MUST-NOT rule - that means that players that have that group can NOT participate")
  @JsonProperty(JSON_PROPERTY_MUST_NOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getMustNot() {
    return mustNot;
  }


  @JsonProperty(JSON_PROPERTY_MUST_NOT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMustNot(List<String> mustNot) {
    this.mustNot = mustNot;
  }


  public DependantOn should(List<String> should) {
    this.should = should;
    return this;
  }

  public DependantOn addShouldItem(String shouldItem) {
    if (this.should == null) {
      this.should = new ArrayList<>();
    }
    this.should.add(shouldItem);
    return this;
  }

   /**
   * A rule indicating that some of them have to be included. Dependancy on shouldMatchAtLeast parameter. Players that are in the EU and DE groups with a SHOULD rule and a shouldMatchAtLeast with a value of 1 - that means that players that have 1 of the groups can participate
   * @return should
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "- FR - UK", value = "A rule indicating that some of them have to be included. Dependancy on shouldMatchAtLeast parameter. Players that are in the EU and DE groups with a SHOULD rule and a shouldMatchAtLeast with a value of 1 - that means that players that have 1 of the groups can participate")
  @JsonProperty(JSON_PROPERTY_SHOULD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getShould() {
    return should;
  }


  @JsonProperty(JSON_PROPERTY_SHOULD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShould(List<String> should) {
    this.should = should;
  }


  public DependantOn shouldMatchAtLeast(Integer shouldMatchAtLeast) {
    this.shouldMatchAtLeast = shouldMatchAtLeast;
    return this;
  }

   /**
   * Dependant on should. Triggered when 2 or more should parameters selected
   * @return shouldMatchAtLeast
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Dependant on should. Triggered when 2 or more should parameters selected")
  @JsonProperty(JSON_PROPERTY_SHOULD_MATCH_AT_LEAST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getShouldMatchAtLeast() {
    return shouldMatchAtLeast;
  }


  @JsonProperty(JSON_PROPERTY_SHOULD_MATCH_AT_LEAST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShouldMatchAtLeast(Integer shouldMatchAtLeast) {
    this.shouldMatchAtLeast = shouldMatchAtLeast;
  }


  /**
   * Return true if this DependantOn object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DependantOn dependantOn = (DependantOn) o;
    return Objects.equals(this.must, dependantOn.must) &&
        Objects.equals(this.mustNot, dependantOn.mustNot) &&
        Objects.equals(this.should, dependantOn.should) &&
        Objects.equals(this.shouldMatchAtLeast, dependantOn.shouldMatchAtLeast);
  }

  @Override
  public int hashCode() {
    return Objects.hash(must, mustNot, should, shouldMatchAtLeast);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DependantOn {\n");
    sb.append("    must: ").append(toIndentedString(must)).append("\n");
    sb.append("    mustNot: ").append(toIndentedString(mustNot)).append("\n");
    sb.append("    should: ").append(toIndentedString(should)).append("\n");
    sb.append("    shouldMatchAtLeast: ").append(toIndentedString(shouldMatchAtLeast)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

