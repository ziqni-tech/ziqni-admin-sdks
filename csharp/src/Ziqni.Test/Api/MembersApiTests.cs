/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Ziqni.Client;
using Ziqni.Api;
using Ziqni.Model;

namespace Ziqni.Test
{
    /// <summary>
    ///  Class for testing MembersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MembersApiTests
    {
        private MembersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new MembersApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MembersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' MembersApi
            //Assert.IsInstanceOf(typeof(MembersApi), instance);
        }

        
        /// <summary>
        /// Test CreateMembers
        /// </summary>
        [Test]
        public void CreateMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<CreateMemberRequest> body = null;
            //var response = instance.CreateMembers(body);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
        /// <summary>
        /// Test DeleteMembers
        /// </summary>
        [Test]
        public void DeleteMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> id = null;
            //var response = instance.DeleteMembers(id);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
        /// <summary>
        /// Test DeleteMembersByQuery
        /// </summary>
        [Test]
        public void DeleteMembersByQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QueryRequest body = null;
            //var response = instance.DeleteMembersByQuery(body);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
        /// <summary>
        /// Test GetMembers
        /// </summary>
        [Test]
        public void GetMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> id = null;
            //int? limit = null;
            //int? skip = null;
            //var response = instance.GetMembers(id, limit, skip);
            //Assert.IsInstanceOf(typeof(MemberResponse), response, "response is MemberResponse");
        }
        
        /// <summary>
        /// Test GetMembersByQuery
        /// </summary>
        [Test]
        public void GetMembersByQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QueryRequest body = null;
            //var response = instance.GetMembersByQuery(body);
            //Assert.IsInstanceOf(typeof(MemberResponse), response, "response is MemberResponse");
        }
        
        /// <summary>
        /// Test GetMembersByRefId
        /// </summary>
        [Test]
        public void GetMembersByRefIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> refIds = null;
            //int? limit = null;
            //int? skip = null;
            //var response = instance.GetMembersByRefId(refIds, limit, skip);
            //Assert.IsInstanceOf(typeof(MemberResponse), response, "response is MemberResponse");
        }
        
        /// <summary>
        /// Test UpdateMembers
        /// </summary>
        [Test]
        public void UpdateMembersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<UpdateMemberRequest> body = null;
            //var response = instance.UpdateMembers(body);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
    }

}
