/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Ziqni.Client;
using Ziqni.Api;
using Ziqni.Model;

namespace Ziqni.Test
{
    /// <summary>
    ///  Class for testing ComputeEngineApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ComputeEngineApiTests
    {
        private ComputeEngineApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ComputeEngineApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ComputeEngineApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ComputeEngineApi
            //Assert.IsInstanceOf(typeof(ComputeEngineApi), instance);
        }

        
        /// <summary>
        /// Test CreateComputeEngines
        /// </summary>
        [Test]
        public void CreateComputeEnginesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateComputeEngineRequest body = null;
            //var response = instance.CreateComputeEngines(body);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
        /// <summary>
        /// Test DeleteComputeEnginesById
        /// </summary>
        [Test]
        public void DeleteComputeEnginesByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.DeleteComputeEnginesById(id);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
        /// <summary>
        /// Test DeleteComputeEnginesByQuery
        /// </summary>
        [Test]
        public void DeleteComputeEnginesByQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QueryRequest body = null;
            //var response = instance.DeleteComputeEnginesByQuery(body);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
        /// <summary>
        /// Test GetComputeEngines
        /// </summary>
        [Test]
        public void GetComputeEnginesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> id = null;
            //int? limit = null;
            //int? skip = null;
            //var response = instance.GetComputeEngines(id, limit, skip);
            //Assert.IsInstanceOf(typeof(ComputeEngineResponse), response, "response is ComputeEngineResponse");
        }
        
        /// <summary>
        /// Test GetComputeEnginesById
        /// </summary>
        [Test]
        public void GetComputeEnginesByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetComputeEnginesById(id);
            //Assert.IsInstanceOf(typeof(ComputeEngineResponse), response, "response is ComputeEngineResponse");
        }
        
        /// <summary>
        /// Test GetComputeEnginesByQuery
        /// </summary>
        [Test]
        public void GetComputeEnginesByQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QueryRequest body = null;
            //var response = instance.GetComputeEnginesByQuery(body);
            //Assert.IsInstanceOf(typeof(ComputeEngineResponse), response, "response is ComputeEngineResponse");
        }
        
        /// <summary>
        /// Test UpdateComputeEngines
        /// </summary>
        [Test]
        public void UpdateComputeEnginesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateComputeEngineRequest body = null;
            //var response = instance.UpdateComputeEngines(body);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
    }

}
