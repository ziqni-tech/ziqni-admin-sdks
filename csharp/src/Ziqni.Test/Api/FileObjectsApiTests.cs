/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Ziqni.Client;
using Ziqni.Api;
using Ziqni.Model;

namespace Ziqni.Test
{
    /// <summary>
    ///  Class for testing FileObjectsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class FileObjectsApiTests
    {
        private FileObjectsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new FileObjectsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of FileObjectsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' FileObjectsApi
            //Assert.IsInstanceOf(typeof(FileObjectsApi), instance);
        }

        
        /// <summary>
        /// Test CreateFileObjects
        /// </summary>
        [Test]
        public void CreateFileObjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateFileObjectRequest body = null;
            //var response = instance.CreateFileObjects(body);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
        /// <summary>
        /// Test DeleteFileObjects
        /// </summary>
        [Test]
        public void DeleteFileObjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> id = null;
            //bool? permanent = null;
            //var response = instance.DeleteFileObjects(id, permanent);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
        /// <summary>
        /// Test DeleteFileObjectsByQuery
        /// </summary>
        [Test]
        public void DeleteFileObjectsByQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> id = null;
            //QueryRequest body = null;
            //var response = instance.DeleteFileObjectsByQuery(id, body);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
        /// <summary>
        /// Test DownloadFileObjects
        /// </summary>
        [Test]
        public void DownloadFileObjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string path = null;
            //var response = instance.DownloadFileObjects(path);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetFileObjects
        /// </summary>
        [Test]
        public void GetFileObjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //int? skip = null;
            //List<string> id = null;
            //string download = null;
            //var response = instance.GetFileObjects(limit, skip, id, download);
            //Assert.IsInstanceOf(typeof(FileObjectsResponse), response, "response is FileObjectsResponse");
        }
        
        /// <summary>
        /// Test GetFileObjectsByQuery
        /// </summary>
        [Test]
        public void GetFileObjectsByQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> id = null;
            //QueryRequest body = null;
            //var response = instance.GetFileObjectsByQuery(id, body);
            //Assert.IsInstanceOf(typeof(FileObjectsResponse), response, "response is FileObjectsResponse");
        }
        
        /// <summary>
        /// Test SaveTemplates
        /// </summary>
        [Test]
        public void SaveTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentFolderPath = null;
            //string repositoryId = null;
            //string templateToSave = null;
            //string templateName = null;
            //string tags = null;
            //var response = instance.SaveTemplates(parentFolderPath, repositoryId, templateToSave, templateName, tags);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
        /// <summary>
        /// Test UpdateFileObjects
        /// </summary>
        [Test]
        public void UpdateFileObjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<UpdateFileObjectRequest> body = null;
            //var response = instance.UpdateFileObjects(body);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
        /// <summary>
        /// Test UploadFileObjects
        /// </summary>
        [Test]
        public void UploadFileObjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string parentFolderPath = null;
            //List<System.IO.Stream> files = null;
            //string repositoryId = null;
            //string tags = null;
            //var response = instance.UploadFileObjects(parentFolderPath, files, repositoryId, tags);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
    }

}
