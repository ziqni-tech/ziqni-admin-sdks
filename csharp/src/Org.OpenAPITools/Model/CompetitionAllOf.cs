/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CompetitionAllOf
    /// </summary>
    [DataContract]
    public partial class CompetitionAllOf :  IEquatable<CompetitionAllOf>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets CompetitionType
        /// </summary>
        [DataMember(Name="competitionType", EmitDefaultValue=true)]
        public CompetitionType CompetitionType { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public CompetitionStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompetitionAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CompetitionAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CompetitionAllOf" /> class.
        /// </summary>
        /// <param name="competitionType">competitionType (required).</param>
        /// <param name="numberOfRounds">Number of rounds to be played in a competition (required).</param>
        /// <param name="numberOfGroupStages">Number of group stages.</param>
        /// <param name="name">A name or a name of a competition. Can be translated (required).</param>
        /// <param name="description">Description of the competition. Can be translated.</param>
        /// <param name="termsAndConditions">Terms and conditions of a competition. Can be translated.</param>
        /// <param name="maxNumberOfEntrants">Maximum number of partiipants allowed in a competition.</param>
        /// <param name="minNumberOfEntrants">Maximum number of partiipants allowed in a competition (required).</param>
        /// <param name="entrantMemberType">entrantMemberType.</param>
        /// <param name="scheduledStartDate">ISO8601 timestamp for when a Competition should start. All records are stored in UTC time zone (required).</param>
        /// <param name="scheduledEndDate">ISO8601 timestamp for when a Competition should end. All records are stored in UTC time zone (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="constraints">Additional constraints (required).</param>
        /// <param name="products">products (required).</param>
        /// <param name="entrantMemberTagsFilter">entrantMemberTagsFilter.</param>
        /// <param name="productTagsFilter">productTagsFilter.</param>
        public CompetitionAllOf(CompetitionType competitionType = default(CompetitionType), int numberOfRounds = default(int), int numberOfGroupStages = default(int), string name = default(string), string description = default(string), string termsAndConditions = default(string), int maxNumberOfEntrants = default(int), int minNumberOfEntrants = default(int), string entrantMemberType = default(string), DateTime scheduledStartDate = default(DateTime), DateTime scheduledEndDate = default(DateTime), CompetitionStatus status = default(CompetitionStatus), List<string> constraints = default(List<string>), List<ProductReduced> products = default(List<ProductReduced>), DependantOn entrantMemberTagsFilter = default(DependantOn), DependantOn productTagsFilter = default(DependantOn))
        {
            // to ensure "competitionType" is required (not null)
            if (competitionType == null)
            {
                throw new InvalidDataException("competitionType is a required property for CompetitionAllOf and cannot be null");
            }
            else
            {
                this.CompetitionType = competitionType;
            }

            // to ensure "numberOfRounds" is required (not null)
            if (numberOfRounds == null)
            {
                throw new InvalidDataException("numberOfRounds is a required property for CompetitionAllOf and cannot be null");
            }
            else
            {
                this.NumberOfRounds = numberOfRounds;
            }

            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CompetitionAllOf and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "minNumberOfEntrants" is required (not null)
            if (minNumberOfEntrants == null)
            {
                throw new InvalidDataException("minNumberOfEntrants is a required property for CompetitionAllOf and cannot be null");
            }
            else
            {
                this.MinNumberOfEntrants = minNumberOfEntrants;
            }

            // to ensure "scheduledStartDate" is required (not null)
            if (scheduledStartDate == null)
            {
                throw new InvalidDataException("scheduledStartDate is a required property for CompetitionAllOf and cannot be null");
            }
            else
            {
                this.ScheduledStartDate = scheduledStartDate;
            }

            // to ensure "scheduledEndDate" is required (not null)
            if (scheduledEndDate == null)
            {
                throw new InvalidDataException("scheduledEndDate is a required property for CompetitionAllOf and cannot be null");
            }
            else
            {
                this.ScheduledEndDate = scheduledEndDate;
            }

            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for CompetitionAllOf and cannot be null");
            }
            else
            {
                this.Status = status;
            }

            // to ensure "constraints" is required (not null)
            if (constraints == null)
            {
                throw new InvalidDataException("constraints is a required property for CompetitionAllOf and cannot be null");
            }
            else
            {
                this.Constraints = constraints;
            }

            // to ensure "products" is required (not null)
            if (products == null)
            {
                throw new InvalidDataException("products is a required property for CompetitionAllOf and cannot be null");
            }
            else
            {
                this.Products = products;
            }

            this.NumberOfGroupStages = numberOfGroupStages;
            this.Description = description;
            this.TermsAndConditions = termsAndConditions;
            this.MaxNumberOfEntrants = maxNumberOfEntrants;
            this.EntrantMemberType = entrantMemberType;
            this.EntrantMemberTagsFilter = entrantMemberTagsFilter;
            this.ProductTagsFilter = productTagsFilter;
        }


        /// <summary>
        /// Number of rounds to be played in a competition
        /// </summary>
        /// <value>Number of rounds to be played in a competition</value>
        [DataMember(Name="numberOfRounds", EmitDefaultValue=true)]
        public int NumberOfRounds { get; set; }

        /// <summary>
        /// Number of group stages
        /// </summary>
        /// <value>Number of group stages</value>
        [DataMember(Name="numberOfGroupStages", EmitDefaultValue=false)]
        public int NumberOfGroupStages { get; set; }

        /// <summary>
        /// A name or a name of a competition. Can be translated
        /// </summary>
        /// <value>A name or a name of a competition. Can be translated</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the competition. Can be translated
        /// </summary>
        /// <value>Description of the competition. Can be translated</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Terms and conditions of a competition. Can be translated
        /// </summary>
        /// <value>Terms and conditions of a competition. Can be translated</value>
        [DataMember(Name="termsAndConditions", EmitDefaultValue=false)]
        public string TermsAndConditions { get; set; }

        /// <summary>
        /// Maximum number of partiipants allowed in a competition
        /// </summary>
        /// <value>Maximum number of partiipants allowed in a competition</value>
        [DataMember(Name="maxNumberOfEntrants", EmitDefaultValue=false)]
        public int MaxNumberOfEntrants { get; set; }

        /// <summary>
        /// Maximum number of partiipants allowed in a competition
        /// </summary>
        /// <value>Maximum number of partiipants allowed in a competition</value>
        [DataMember(Name="minNumberOfEntrants", EmitDefaultValue=true)]
        public int MinNumberOfEntrants { get; set; }

        /// <summary>
        /// Gets or Sets EntrantMemberType
        /// </summary>
        [DataMember(Name="entrantMemberType", EmitDefaultValue=false)]
        public string EntrantMemberType { get; set; }

        /// <summary>
        /// ISO8601 timestamp for when a Competition should start. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Competition should start. All records are stored in UTC time zone</value>
        [DataMember(Name="scheduledStartDate", EmitDefaultValue=true)]
        public DateTime ScheduledStartDate { get; set; }

        /// <summary>
        /// ISO8601 timestamp for when a Competition should end. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Competition should end. All records are stored in UTC time zone</value>
        [DataMember(Name="scheduledEndDate", EmitDefaultValue=true)]
        public DateTime ScheduledEndDate { get; set; }

        /// <summary>
        /// ISO8601 timestamp for when a Competition started. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Competition started. All records are stored in UTC time zone</value>
        [DataMember(Name="actualStartDate", EmitDefaultValue=false)]
        public DateTime ActualStartDate { get; private set; }

        /// <summary>
        /// ISO8601 timestamp for when a Competition ended. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Competition ended. All records are stored in UTC time zone</value>
        [DataMember(Name="actualEndDate", EmitDefaultValue=false)]
        public DateTime ActualEndDate { get; private set; }


        /// <summary>
        /// The code of the competition
        /// </summary>
        /// <value>The code of the competition</value>
        [DataMember(Name="statusCode", EmitDefaultValue=false)]
        public int StatusCode { get; private set; }

        /// <summary>
        /// Additional constraints
        /// </summary>
        /// <value>Additional constraints</value>
        [DataMember(Name="constraints", EmitDefaultValue=true)]
        public List<string> Constraints { get; set; }

        /// <summary>
        /// Gets or Sets Products
        /// </summary>
        [DataMember(Name="products", EmitDefaultValue=true)]
        public List<ProductReduced> Products { get; set; }

        /// <summary>
        /// Gets or Sets EntrantMemberTagsFilter
        /// </summary>
        [DataMember(Name="entrantMemberTagsFilter", EmitDefaultValue=false)]
        public DependantOn EntrantMemberTagsFilter { get; set; }

        /// <summary>
        /// Gets or Sets ProductTagsFilter
        /// </summary>
        [DataMember(Name="productTagsFilter", EmitDefaultValue=false)]
        public DependantOn ProductTagsFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompetitionAllOf {\n");
            sb.Append("  CompetitionType: ").Append(CompetitionType).Append("\n");
            sb.Append("  NumberOfRounds: ").Append(NumberOfRounds).Append("\n");
            sb.Append("  NumberOfGroupStages: ").Append(NumberOfGroupStages).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TermsAndConditions: ").Append(TermsAndConditions).Append("\n");
            sb.Append("  MaxNumberOfEntrants: ").Append(MaxNumberOfEntrants).Append("\n");
            sb.Append("  MinNumberOfEntrants: ").Append(MinNumberOfEntrants).Append("\n");
            sb.Append("  EntrantMemberType: ").Append(EntrantMemberType).Append("\n");
            sb.Append("  ScheduledStartDate: ").Append(ScheduledStartDate).Append("\n");
            sb.Append("  ScheduledEndDate: ").Append(ScheduledEndDate).Append("\n");
            sb.Append("  ActualStartDate: ").Append(ActualStartDate).Append("\n");
            sb.Append("  ActualEndDate: ").Append(ActualEndDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  EntrantMemberTagsFilter: ").Append(EntrantMemberTagsFilter).Append("\n");
            sb.Append("  ProductTagsFilter: ").Append(ProductTagsFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompetitionAllOf);
        }

        /// <summary>
        /// Returns true if CompetitionAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of CompetitionAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompetitionAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CompetitionType == input.CompetitionType ||
                    (this.CompetitionType != null &&
                    this.CompetitionType.Equals(input.CompetitionType))
                ) && 
                (
                    this.NumberOfRounds == input.NumberOfRounds ||
                    (this.NumberOfRounds != null &&
                    this.NumberOfRounds.Equals(input.NumberOfRounds))
                ) && 
                (
                    this.NumberOfGroupStages == input.NumberOfGroupStages ||
                    (this.NumberOfGroupStages != null &&
                    this.NumberOfGroupStages.Equals(input.NumberOfGroupStages))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TermsAndConditions == input.TermsAndConditions ||
                    (this.TermsAndConditions != null &&
                    this.TermsAndConditions.Equals(input.TermsAndConditions))
                ) && 
                (
                    this.MaxNumberOfEntrants == input.MaxNumberOfEntrants ||
                    (this.MaxNumberOfEntrants != null &&
                    this.MaxNumberOfEntrants.Equals(input.MaxNumberOfEntrants))
                ) && 
                (
                    this.MinNumberOfEntrants == input.MinNumberOfEntrants ||
                    (this.MinNumberOfEntrants != null &&
                    this.MinNumberOfEntrants.Equals(input.MinNumberOfEntrants))
                ) && 
                (
                    this.EntrantMemberType == input.EntrantMemberType ||
                    (this.EntrantMemberType != null &&
                    this.EntrantMemberType.Equals(input.EntrantMemberType))
                ) && 
                (
                    this.ScheduledStartDate == input.ScheduledStartDate ||
                    (this.ScheduledStartDate != null &&
                    this.ScheduledStartDate.Equals(input.ScheduledStartDate))
                ) && 
                (
                    this.ScheduledEndDate == input.ScheduledEndDate ||
                    (this.ScheduledEndDate != null &&
                    this.ScheduledEndDate.Equals(input.ScheduledEndDate))
                ) && 
                (
                    this.ActualStartDate == input.ActualStartDate ||
                    (this.ActualStartDate != null &&
                    this.ActualStartDate.Equals(input.ActualStartDate))
                ) && 
                (
                    this.ActualEndDate == input.ActualEndDate ||
                    (this.ActualEndDate != null &&
                    this.ActualEndDate.Equals(input.ActualEndDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && 
                (
                    this.Products == input.Products ||
                    this.Products != null &&
                    input.Products != null &&
                    this.Products.SequenceEqual(input.Products)
                ) && 
                (
                    this.EntrantMemberTagsFilter == input.EntrantMemberTagsFilter ||
                    (this.EntrantMemberTagsFilter != null &&
                    this.EntrantMemberTagsFilter.Equals(input.EntrantMemberTagsFilter))
                ) && 
                (
                    this.ProductTagsFilter == input.ProductTagsFilter ||
                    (this.ProductTagsFilter != null &&
                    this.ProductTagsFilter.Equals(input.ProductTagsFilter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompetitionType != null)
                    hashCode = hashCode * 59 + this.CompetitionType.GetHashCode();
                if (this.NumberOfRounds != null)
                    hashCode = hashCode * 59 + this.NumberOfRounds.GetHashCode();
                if (this.NumberOfGroupStages != null)
                    hashCode = hashCode * 59 + this.NumberOfGroupStages.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TermsAndConditions != null)
                    hashCode = hashCode * 59 + this.TermsAndConditions.GetHashCode();
                if (this.MaxNumberOfEntrants != null)
                    hashCode = hashCode * 59 + this.MaxNumberOfEntrants.GetHashCode();
                if (this.MinNumberOfEntrants != null)
                    hashCode = hashCode * 59 + this.MinNumberOfEntrants.GetHashCode();
                if (this.EntrantMemberType != null)
                    hashCode = hashCode * 59 + this.EntrantMemberType.GetHashCode();
                if (this.ScheduledStartDate != null)
                    hashCode = hashCode * 59 + this.ScheduledStartDate.GetHashCode();
                if (this.ScheduledEndDate != null)
                    hashCode = hashCode * 59 + this.ScheduledEndDate.GetHashCode();
                if (this.ActualStartDate != null)
                    hashCode = hashCode * 59 + this.ActualStartDate.GetHashCode();
                if (this.ActualEndDate != null)
                    hashCode = hashCode * 59 + this.ActualEndDate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                if (this.Products != null)
                    hashCode = hashCode * 59 + this.Products.GetHashCode();
                if (this.EntrantMemberTagsFilter != null)
                    hashCode = hashCode * 59 + this.EntrantMemberTagsFilter.GetHashCode();
                if (this.ProductTagsFilter != null)
                    hashCode = hashCode * 59 + this.ProductTagsFilter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

 
            yield break;
        }
    }

}
