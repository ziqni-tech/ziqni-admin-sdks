/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// LeaderboardFilter
    /// </summary>
    [DataContract]
    public partial class LeaderboardFilter :  IEquatable<LeaderboardFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardFilter" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LeaderboardFilter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardFilter" /> class.
        /// </summary>
        /// <param name="topRanksToInclude">Include rank from one [1] to the rank specified here. The maximum allowed is 50 (required).</param>
        /// <param name="ranksAboveToInclude">Include ranks above member position. The maximum allowed is 20.</param>
        /// <param name="ranksBelowToInclude">Include ranks below member position. The maximum allowed is 20.</param>
        public LeaderboardFilter(int topRanksToInclude = default(int), int ranksAboveToInclude = default(int), int ranksBelowToInclude = default(int))
        {
            // to ensure "topRanksToInclude" is required (not null)
            if (topRanksToInclude == null)
            {
                throw new InvalidDataException("topRanksToInclude is a required property for LeaderboardFilter and cannot be null");
            }
            else
            {
                this.TopRanksToInclude = topRanksToInclude;
            }

            this.RanksAboveToInclude = ranksAboveToInclude;
            this.RanksBelowToInclude = ranksBelowToInclude;
        }

        /// <summary>
        /// Include rank from one [1] to the rank specified here. The maximum allowed is 50
        /// </summary>
        /// <value>Include rank from one [1] to the rank specified here. The maximum allowed is 50</value>
        [DataMember(Name="topRanksToInclude", EmitDefaultValue=true)]
        public int TopRanksToInclude { get; set; }

        /// <summary>
        /// Include ranks above member position. The maximum allowed is 20
        /// </summary>
        /// <value>Include ranks above member position. The maximum allowed is 20</value>
        [DataMember(Name="ranksAboveToInclude", EmitDefaultValue=false)]
        public int RanksAboveToInclude { get; set; }

        /// <summary>
        /// Include ranks below member position. The maximum allowed is 20
        /// </summary>
        /// <value>Include ranks below member position. The maximum allowed is 20</value>
        [DataMember(Name="ranksBelowToInclude", EmitDefaultValue=false)]
        public int RanksBelowToInclude { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LeaderboardFilter {\n");
            sb.Append("  TopRanksToInclude: ").Append(TopRanksToInclude).Append("\n");
            sb.Append("  RanksAboveToInclude: ").Append(RanksAboveToInclude).Append("\n");
            sb.Append("  RanksBelowToInclude: ").Append(RanksBelowToInclude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LeaderboardFilter);
        }

        /// <summary>
        /// Returns true if LeaderboardFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of LeaderboardFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LeaderboardFilter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TopRanksToInclude == input.TopRanksToInclude ||
                    (this.TopRanksToInclude != null &&
                    this.TopRanksToInclude.Equals(input.TopRanksToInclude))
                ) && 
                (
                    this.RanksAboveToInclude == input.RanksAboveToInclude ||
                    (this.RanksAboveToInclude != null &&
                    this.RanksAboveToInclude.Equals(input.RanksAboveToInclude))
                ) && 
                (
                    this.RanksBelowToInclude == input.RanksBelowToInclude ||
                    (this.RanksBelowToInclude != null &&
                    this.RanksBelowToInclude.Equals(input.RanksBelowToInclude))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TopRanksToInclude != null)
                    hashCode = hashCode * 59 + this.TopRanksToInclude.GetHashCode();
                if (this.RanksAboveToInclude != null)
                    hashCode = hashCode * 59 + this.RanksAboveToInclude.GetHashCode();
                if (this.RanksBelowToInclude != null)
                    hashCode = hashCode * 59 + this.RanksBelowToInclude.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

 
            // TopRanksToInclude (int) maximum
            if(this.TopRanksToInclude > (int)50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TopRanksToInclude, must be a value less than or equal to 50.", new [] { "TopRanksToInclude" });
            }

            // TopRanksToInclude (int) minimum
            if(this.TopRanksToInclude < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TopRanksToInclude, must be a value greater than or equal to 1.", new [] { "TopRanksToInclude" });
            }


 
            // RanksAboveToInclude (int) maximum
            if(this.RanksAboveToInclude > (int)20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RanksAboveToInclude, must be a value less than or equal to 20.", new [] { "RanksAboveToInclude" });
            }

            // RanksAboveToInclude (int) minimum
            if(this.RanksAboveToInclude < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RanksAboveToInclude, must be a value greater than or equal to 0.", new [] { "RanksAboveToInclude" });
            }


 
            // RanksBelowToInclude (int) maximum
            if(this.RanksBelowToInclude > (int)20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RanksBelowToInclude, must be a value less than or equal to 20.", new [] { "RanksBelowToInclude" });
            }

            // RanksBelowToInclude (int) minimum
            if(this.RanksBelowToInclude < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RanksBelowToInclude, must be a value greater than or equal to 0.", new [] { "RanksBelowToInclude" });
            }

            yield break;
        }
    }

}
