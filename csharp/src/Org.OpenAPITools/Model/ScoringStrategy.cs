/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ScoringStrategy
    /// </summary>
    [DataContract]
    public partial class ScoringStrategy :  IEquatable<ScoringStrategy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScoringStrategy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScoringStrategy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScoringStrategy" /> class.
        /// </summary>
        /// <param name="limitUpdatesTo">The scoring strategies types \&quot;SumBest\&quot; value (required).</param>
        /// <param name="sumBestXOf">The scoring strategies types \&quot;LimitedTo\&quot; value (required).</param>
        /// <param name="lastUpdateTimeStamp">The scoring strategies types \&quot;FirstTo\&quot; value (required).</param>
        /// <param name="recordTimeWhenSumReaches">Not supported at the moment (required).</param>
        public ScoringStrategy(int limitUpdatesTo = default(int), int sumBestXOf = default(int), long lastUpdateTimeStamp = default(long), double recordTimeWhenSumReaches = default(double))
        {
            // to ensure "limitUpdatesTo" is required (not null)
            if (limitUpdatesTo == null)
            {
                throw new InvalidDataException("limitUpdatesTo is a required property for ScoringStrategy and cannot be null");
            }
            else
            {
                this.LimitUpdatesTo = limitUpdatesTo;
            }

            // to ensure "sumBestXOf" is required (not null)
            if (sumBestXOf == null)
            {
                throw new InvalidDataException("sumBestXOf is a required property for ScoringStrategy and cannot be null");
            }
            else
            {
                this.SumBestXOf = sumBestXOf;
            }

            // to ensure "lastUpdateTimeStamp" is required (not null)
            if (lastUpdateTimeStamp == null)
            {
                throw new InvalidDataException("lastUpdateTimeStamp is a required property for ScoringStrategy and cannot be null");
            }
            else
            {
                this.LastUpdateTimeStamp = lastUpdateTimeStamp;
            }

            // to ensure "recordTimeWhenSumReaches" is required (not null)
            if (recordTimeWhenSumReaches == null)
            {
                throw new InvalidDataException("recordTimeWhenSumReaches is a required property for ScoringStrategy and cannot be null");
            }
            else
            {
                this.RecordTimeWhenSumReaches = recordTimeWhenSumReaches;
            }

        }

        /// <summary>
        /// The scoring strategies types \&quot;SumBest\&quot; value
        /// </summary>
        /// <value>The scoring strategies types \&quot;SumBest\&quot; value</value>
        [DataMember(Name="limitUpdatesTo", EmitDefaultValue=true)]
        public int LimitUpdatesTo { get; set; }

        /// <summary>
        /// The scoring strategies types \&quot;LimitedTo\&quot; value
        /// </summary>
        /// <value>The scoring strategies types \&quot;LimitedTo\&quot; value</value>
        [DataMember(Name="sumBestXOf", EmitDefaultValue=true)]
        public int SumBestXOf { get; set; }

        /// <summary>
        /// The scoring strategies types \&quot;FirstTo\&quot; value
        /// </summary>
        /// <value>The scoring strategies types \&quot;FirstTo\&quot; value</value>
        [DataMember(Name="lastUpdateTimeStamp", EmitDefaultValue=true)]
        public long LastUpdateTimeStamp { get; set; }

        /// <summary>
        /// Not supported at the moment
        /// </summary>
        /// <value>Not supported at the moment</value>
        [DataMember(Name="recordTimeWhenSumReaches", EmitDefaultValue=true)]
        public double RecordTimeWhenSumReaches { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScoringStrategy {\n");
            sb.Append("  LimitUpdatesTo: ").Append(LimitUpdatesTo).Append("\n");
            sb.Append("  SumBestXOf: ").Append(SumBestXOf).Append("\n");
            sb.Append("  LastUpdateTimeStamp: ").Append(LastUpdateTimeStamp).Append("\n");
            sb.Append("  RecordTimeWhenSumReaches: ").Append(RecordTimeWhenSumReaches).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScoringStrategy);
        }

        /// <summary>
        /// Returns true if ScoringStrategy instances are equal
        /// </summary>
        /// <param name="input">Instance of ScoringStrategy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScoringStrategy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LimitUpdatesTo == input.LimitUpdatesTo ||
                    (this.LimitUpdatesTo != null &&
                    this.LimitUpdatesTo.Equals(input.LimitUpdatesTo))
                ) && 
                (
                    this.SumBestXOf == input.SumBestXOf ||
                    (this.SumBestXOf != null &&
                    this.SumBestXOf.Equals(input.SumBestXOf))
                ) && 
                (
                    this.LastUpdateTimeStamp == input.LastUpdateTimeStamp ||
                    (this.LastUpdateTimeStamp != null &&
                    this.LastUpdateTimeStamp.Equals(input.LastUpdateTimeStamp))
                ) && 
                (
                    this.RecordTimeWhenSumReaches == input.RecordTimeWhenSumReaches ||
                    (this.RecordTimeWhenSumReaches != null &&
                    this.RecordTimeWhenSumReaches.Equals(input.RecordTimeWhenSumReaches))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LimitUpdatesTo != null)
                    hashCode = hashCode * 59 + this.LimitUpdatesTo.GetHashCode();
                if (this.SumBestXOf != null)
                    hashCode = hashCode * 59 + this.SumBestXOf.GetHashCode();
                if (this.LastUpdateTimeStamp != null)
                    hashCode = hashCode * 59 + this.LastUpdateTimeStamp.GetHashCode();
                if (this.RecordTimeWhenSumReaches != null)
                    hashCode = hashCode * 59 + this.RecordTimeWhenSumReaches.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
