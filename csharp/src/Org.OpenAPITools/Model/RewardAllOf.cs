/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RewardAllOf
    /// </summary>
    [DataContract]
    public partial class RewardAllOf :  IEquatable<RewardAllOf>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name="entityType", EmitDefaultValue=false)]
        public EntityType? EntityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RewardAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RewardAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RewardAllOf" /> class.
        /// </summary>
        /// <param name="entityType">entityType.</param>
        /// <param name="entityId">A unique identifier of an achievement or contest. Dependant on entityType.</param>
        /// <param name="name">The name of a reward.</param>
        /// <param name="description">The description of a Reward.</param>
        /// <param name="rewardRank">If used in the context of contest this will associate with the rank of the leaderboard (required).</param>
        /// <param name="rewardValue">Numerical value of the reward that will be issued based on the reward type (required).</param>
        /// <param name="rewardType">rewardType (required).</param>
        /// <param name="icon">An Icon id that has been pre uploaded to the system to display for reward.</param>
        /// <param name="issueLimit">how many of thsese rewards are.</param>
        /// <param name="delay">Delay of issuing a reward in minutes.</param>
        /// <param name="pointInTime">ISO8601 timestamp for when a Reward is available until a specific point in time. All records are stored in UTC time zone.</param>
        /// <param name="period">Reward available for a period of time from issuing in minutes.</param>
        /// <param name="constraints">Additional constraints (required).</param>
        public RewardAllOf(EntityType? entityType = default(EntityType?), string entityId = default(string), string name = default(string), string description = default(string), string rewardRank = default(string), double rewardValue = default(double), RewardTypeReduced rewardType = default(RewardTypeReduced), string icon = default(string), int issueLimit = default(int), int delay = default(int), DateTime pointInTime = default(DateTime), int period = default(int), List<string> constraints = default(List<string>))
        {
            // to ensure "rewardRank" is required (not null)
            if (rewardRank == null)
            {
                throw new InvalidDataException("rewardRank is a required property for RewardAllOf and cannot be null");
            }
            else
            {
                this.RewardRank = rewardRank;
            }

            // to ensure "rewardValue" is required (not null)
            if (rewardValue == null)
            {
                throw new InvalidDataException("rewardValue is a required property for RewardAllOf and cannot be null");
            }
            else
            {
                this.RewardValue = rewardValue;
            }

            // to ensure "rewardType" is required (not null)
            if (rewardType == null)
            {
                throw new InvalidDataException("rewardType is a required property for RewardAllOf and cannot be null");
            }
            else
            {
                this.RewardType = rewardType;
            }

            // to ensure "constraints" is required (not null)
            if (constraints == null)
            {
                throw new InvalidDataException("constraints is a required property for RewardAllOf and cannot be null");
            }
            else
            {
                this.Constraints = constraints;
            }

            this.EntityType = entityType;
            this.EntityId = entityId;
            this.Name = name;
            this.Description = description;
            this.Icon = icon;
            this.IssueLimit = issueLimit;
            this.Delay = delay;
            this.PointInTime = pointInTime;
            this.Period = period;
        }


        /// <summary>
        /// A unique identifier of an achievement or contest. Dependant on entityType
        /// </summary>
        /// <value>A unique identifier of an achievement or contest. Dependant on entityType</value>
        [DataMember(Name="entityId", EmitDefaultValue=false)]
        public string EntityId { get; set; }

        /// <summary>
        /// The name of a reward
        /// </summary>
        /// <value>The name of a reward</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The description of a Reward
        /// </summary>
        /// <value>The description of a Reward</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// If used in the context of contest this will associate with the rank of the leaderboard
        /// </summary>
        /// <value>If used in the context of contest this will associate with the rank of the leaderboard</value>
        [DataMember(Name="rewardRank", EmitDefaultValue=true)]
        public string RewardRank { get; set; }

        /// <summary>
        /// Numerical value of the reward that will be issued based on the reward type
        /// </summary>
        /// <value>Numerical value of the reward that will be issued based on the reward type</value>
        [DataMember(Name="rewardValue", EmitDefaultValue=true)]
        public double RewardValue { get; set; }

        /// <summary>
        /// Gets or Sets RewardType
        /// </summary>
        [DataMember(Name="rewardType", EmitDefaultValue=true)]
        public RewardTypeReduced RewardType { get; set; }

        /// <summary>
        /// An Icon id that has been pre uploaded to the system to display for reward
        /// </summary>
        /// <value>An Icon id that has been pre uploaded to the system to display for reward</value>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public string Icon { get; set; }

        /// <summary>
        /// how many of thsese rewards are
        /// </summary>
        /// <value>how many of thsese rewards are</value>
        [DataMember(Name="issueLimit", EmitDefaultValue=false)]
        public int IssueLimit { get; set; }

        /// <summary>
        /// Delay of issuing a reward in minutes
        /// </summary>
        /// <value>Delay of issuing a reward in minutes</value>
        [DataMember(Name="delay", EmitDefaultValue=false)]
        public int Delay { get; set; }

        /// <summary>
        /// ISO8601 timestamp for when a Reward is available until a specific point in time. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Reward is available until a specific point in time. All records are stored in UTC time zone</value>
        [DataMember(Name="pointInTime", EmitDefaultValue=false)]
        public DateTime PointInTime { get; set; }

        /// <summary>
        /// Reward available for a period of time from issuing in minutes
        /// </summary>
        /// <value>Reward available for a period of time from issuing in minutes</value>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public int Period { get; set; }

        /// <summary>
        /// Additional constraints
        /// </summary>
        /// <value>Additional constraints</value>
        [DataMember(Name="constraints", EmitDefaultValue=true)]
        public List<string> Constraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RewardAllOf {\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RewardRank: ").Append(RewardRank).Append("\n");
            sb.Append("  RewardValue: ").Append(RewardValue).Append("\n");
            sb.Append("  RewardType: ").Append(RewardType).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  IssueLimit: ").Append(IssueLimit).Append("\n");
            sb.Append("  Delay: ").Append(Delay).Append("\n");
            sb.Append("  PointInTime: ").Append(PointInTime).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RewardAllOf);
        }

        /// <summary>
        /// Returns true if RewardAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of RewardAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RewardAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.RewardRank == input.RewardRank ||
                    (this.RewardRank != null &&
                    this.RewardRank.Equals(input.RewardRank))
                ) && 
                (
                    this.RewardValue == input.RewardValue ||
                    (this.RewardValue != null &&
                    this.RewardValue.Equals(input.RewardValue))
                ) && 
                (
                    this.RewardType == input.RewardType ||
                    (this.RewardType != null &&
                    this.RewardType.Equals(input.RewardType))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.IssueLimit == input.IssueLimit ||
                    (this.IssueLimit != null &&
                    this.IssueLimit.Equals(input.IssueLimit))
                ) && 
                (
                    this.Delay == input.Delay ||
                    (this.Delay != null &&
                    this.Delay.Equals(input.Delay))
                ) && 
                (
                    this.PointInTime == input.PointInTime ||
                    (this.PointInTime != null &&
                    this.PointInTime.Equals(input.PointInTime))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.RewardRank != null)
                    hashCode = hashCode * 59 + this.RewardRank.GetHashCode();
                if (this.RewardValue != null)
                    hashCode = hashCode * 59 + this.RewardValue.GetHashCode();
                if (this.RewardType != null)
                    hashCode = hashCode * 59 + this.RewardType.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.IssueLimit != null)
                    hashCode = hashCode * 59 + this.IssueLimit.GetHashCode();
                if (this.Delay != null)
                    hashCode = hashCode * 59 + this.Delay.GetHashCode();
                if (this.PointInTime != null)
                    hashCode = hashCode * 59 + this.PointInTime.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
