/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// This is a request for Member creation
    /// </summary>
    [DataContract]
    public partial class CreateMemberRequest :  IEquatable<CreateMemberRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets MemberType
        /// </summary>
        [DataMember(Name="memberType", EmitDefaultValue=true)]
        public MemberType MemberType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMemberRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateMemberRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMemberRequest" /> class.
        /// </summary>
        /// <param name="name">The name of the member that is used on leader boards and public displays (required).</param>
        /// <param name="memberRefId">The reference to this member in your system (required).</param>
        /// <param name="memberType">memberType (required).</param>
        /// <param name="teamMembers">A social group like Guilds.</param>
        /// <param name="addConstraints">Additional constraints.</param>
        /// <param name="timeZoneOffset">To what time zone teh emmber belongs to.</param>
        /// <param name="customFields">A list of custom field entries.</param>
        /// <param name="tags">A list of id&#39;s used to tag models.</param>
        /// <param name="metadata">metadata.</param>
        public CreateMemberRequest(string name = default(string), string memberRefId = default(string), MemberType memberType = default(MemberType), List<string> teamMembers = default(List<string>), List<string> addConstraints = default(List<string>), string timeZoneOffset = default(string), Dictionary<string, Object> customFields = default(Dictionary<string, Object>), List<string> tags = default(List<string>), Dictionary<string, string> metadata = default(Dictionary<string, string>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CreateMemberRequest and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "memberRefId" is required (not null)
            if (memberRefId == null)
            {
                throw new InvalidDataException("memberRefId is a required property for CreateMemberRequest and cannot be null");
            }
            else
            {
                this.MemberRefId = memberRefId;
            }

            // to ensure "memberType" is required (not null)
            if (memberType == null)
            {
                throw new InvalidDataException("memberType is a required property for CreateMemberRequest and cannot be null");
            }
            else
            {
                this.MemberType = memberType;
            }

            this.TeamMembers = teamMembers;
            this.AddConstraints = addConstraints;
            this.TimeZoneOffset = timeZoneOffset;
            this.CustomFields = customFields;
            this.Tags = tags;
            this.Metadata = metadata;
        }

        /// <summary>
        /// The name of the member that is used on leader boards and public displays
        /// </summary>
        /// <value>The name of the member that is used on leader boards and public displays</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// The reference to this member in your system
        /// </summary>
        /// <value>The reference to this member in your system</value>
        [DataMember(Name="memberRefId", EmitDefaultValue=true)]
        public string MemberRefId { get; set; }


        /// <summary>
        /// A social group like Guilds
        /// </summary>
        /// <value>A social group like Guilds</value>
        [DataMember(Name="teamMembers", EmitDefaultValue=false)]
        public List<string> TeamMembers { get; set; }

        /// <summary>
        /// Additional constraints
        /// </summary>
        /// <value>Additional constraints</value>
        [DataMember(Name="addConstraints", EmitDefaultValue=false)]
        public List<string> AddConstraints { get; set; }

        /// <summary>
        /// To what time zone teh emmber belongs to
        /// </summary>
        /// <value>To what time zone teh emmber belongs to</value>
        [DataMember(Name="timeZoneOffset", EmitDefaultValue=false)]
        public string TimeZoneOffset { get; set; }

        /// <summary>
        /// A list of custom field entries
        /// </summary>
        /// <value>A list of custom field entries</value>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// A list of id&#39;s used to tag models
        /// </summary>
        /// <value>A list of id&#39;s used to tag models</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateMemberRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MemberRefId: ").Append(MemberRefId).Append("\n");
            sb.Append("  MemberType: ").Append(MemberType).Append("\n");
            sb.Append("  TeamMembers: ").Append(TeamMembers).Append("\n");
            sb.Append("  AddConstraints: ").Append(AddConstraints).Append("\n");
            sb.Append("  TimeZoneOffset: ").Append(TimeZoneOffset).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateMemberRequest);
        }

        /// <summary>
        /// Returns true if CreateMemberRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateMemberRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateMemberRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MemberRefId == input.MemberRefId ||
                    (this.MemberRefId != null &&
                    this.MemberRefId.Equals(input.MemberRefId))
                ) && 
                (
                    this.MemberType == input.MemberType ||
                    (this.MemberType != null &&
                    this.MemberType.Equals(input.MemberType))
                ) && 
                (
                    this.TeamMembers == input.TeamMembers ||
                    this.TeamMembers != null &&
                    input.TeamMembers != null &&
                    this.TeamMembers.SequenceEqual(input.TeamMembers)
                ) && 
                (
                    this.AddConstraints == input.AddConstraints ||
                    this.AddConstraints != null &&
                    input.AddConstraints != null &&
                    this.AddConstraints.SequenceEqual(input.AddConstraints)
                ) && 
                (
                    this.TimeZoneOffset == input.TimeZoneOffset ||
                    (this.TimeZoneOffset != null &&
                    this.TimeZoneOffset.Equals(input.TimeZoneOffset))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.MemberRefId != null)
                    hashCode = hashCode * 59 + this.MemberRefId.GetHashCode();
                if (this.MemberType != null)
                    hashCode = hashCode * 59 + this.MemberType.GetHashCode();
                if (this.TeamMembers != null)
                    hashCode = hashCode * 59 + this.TeamMembers.GetHashCode();
                if (this.AddConstraints != null)
                    hashCode = hashCode * 59 + this.AddConstraints.GetHashCode();
                if (this.TimeZoneOffset != null)
                    hashCode = hashCode * 59 + this.TimeZoneOffset.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
