/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MessageLink
    /// </summary>
    [DataContract]
    public partial class MessageLink :  IEquatable<MessageLink>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageLink" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageLink() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageLink" /> class.
        /// </summary>
        /// <param name="entityId">The identifier of the entity (required).</param>
        /// <param name="entityType">The type of entity the link refers to like Award or Achievement, Contest, etc (required).</param>
        /// <param name="linkType">The type of link, relatesTo, refersTo, describes (required).</param>
        public MessageLink(string entityId = default(string), string entityType = default(string), string linkType = default(string))
        {
            // to ensure "entityId" is required (not null)
            if (entityId == null)
            {
                throw new InvalidDataException("entityId is a required property for MessageLink and cannot be null");
            }
            else
            {
                this.EntityId = entityId;
            }

            // to ensure "entityType" is required (not null)
            if (entityType == null)
            {
                throw new InvalidDataException("entityType is a required property for MessageLink and cannot be null");
            }
            else
            {
                this.EntityType = entityType;
            }

            // to ensure "linkType" is required (not null)
            if (linkType == null)
            {
                throw new InvalidDataException("linkType is a required property for MessageLink and cannot be null");
            }
            else
            {
                this.LinkType = linkType;
            }

        }

        /// <summary>
        /// The identifier of the entity
        /// </summary>
        /// <value>The identifier of the entity</value>
        [DataMember(Name="entityId", EmitDefaultValue=true)]
        public string EntityId { get; set; }

        /// <summary>
        /// The type of entity the link refers to like Award or Achievement, Contest, etc
        /// </summary>
        /// <value>The type of entity the link refers to like Award or Achievement, Contest, etc</value>
        [DataMember(Name="entityType", EmitDefaultValue=true)]
        public string EntityType { get; set; }

        /// <summary>
        /// The type of link, relatesTo, refersTo, describes
        /// </summary>
        /// <value>The type of link, relatesTo, refersTo, describes</value>
        [DataMember(Name="linkType", EmitDefaultValue=true)]
        public string LinkType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageLink {\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  LinkType: ").Append(LinkType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageLink);
        }

        /// <summary>
        /// Returns true if MessageLink instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageLink to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageLink input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.LinkType == input.LinkType ||
                    (this.LinkType != null &&
                    this.LinkType.Equals(input.LinkType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.LinkType != null)
                    hashCode = hashCode * 59 + this.LinkType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
