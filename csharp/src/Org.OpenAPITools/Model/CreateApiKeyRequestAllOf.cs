/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CreateApiKeyRequestAllOf
    /// </summary>
    [DataContract]
    public partial class CreateApiKeyRequestAllOf :  IEquatable<CreateApiKeyRequestAllOf>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=true)]
        public Role Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateApiKeyRequestAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateApiKeyRequestAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateApiKeyRequestAllOf" /> class.
        /// </summary>
        /// <param name="description">The description of an Api key.</param>
        /// <param name="whiteListIPs">the IP&#39;s that need to be whitelisted with the Api key.</param>
        /// <param name="role">role (required).</param>
        /// <param name="addConstraints">Additional constraints.</param>
        public CreateApiKeyRequestAllOf(string description = default(string), List<string> whiteListIPs = default(List<string>), Role role = default(Role), List<string> addConstraints = default(List<string>))
        {
            // to ensure "role" is required (not null)
            if (role == null)
            {
                throw new InvalidDataException("role is a required property for CreateApiKeyRequestAllOf and cannot be null");
            }
            else
            {
                this.Role = role;
            }

            this.Description = description;
            this.WhiteListIPs = whiteListIPs;
            this.AddConstraints = addConstraints;
        }

        /// <summary>
        /// The description of an Api key
        /// </summary>
        /// <value>The description of an Api key</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// the IP&#39;s that need to be whitelisted with the Api key
        /// </summary>
        /// <value>the IP&#39;s that need to be whitelisted with the Api key</value>
        [DataMember(Name="whiteListIPs", EmitDefaultValue=false)]
        public List<string> WhiteListIPs { get; set; }


        /// <summary>
        /// Additional constraints
        /// </summary>
        /// <value>Additional constraints</value>
        [DataMember(Name="addConstraints", EmitDefaultValue=false)]
        public List<string> AddConstraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateApiKeyRequestAllOf {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  WhiteListIPs: ").Append(WhiteListIPs).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  AddConstraints: ").Append(AddConstraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateApiKeyRequestAllOf);
        }

        /// <summary>
        /// Returns true if CreateApiKeyRequestAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateApiKeyRequestAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateApiKeyRequestAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.WhiteListIPs == input.WhiteListIPs ||
                    this.WhiteListIPs != null &&
                    input.WhiteListIPs != null &&
                    this.WhiteListIPs.SequenceEqual(input.WhiteListIPs)
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.AddConstraints == input.AddConstraints ||
                    this.AddConstraints != null &&
                    input.AddConstraints != null &&
                    this.AddConstraints.SequenceEqual(input.AddConstraints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.WhiteListIPs != null)
                    hashCode = hashCode * 59 + this.WhiteListIPs.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.AddConstraints != null)
                    hashCode = hashCode * 59 + this.AddConstraints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
