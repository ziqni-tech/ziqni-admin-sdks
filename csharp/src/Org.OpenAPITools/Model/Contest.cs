/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contest
    /// </summary>
    [DataContract]
    public partial class Contest :  IEquatable<Contest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets RoundType
        /// </summary>
        [DataMember(Name="roundType", EmitDefaultValue=true)]
        public RoundType RoundType { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public ContestStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Contest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Contest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Contest" /> class.
        /// </summary>
        /// <param name="id">A unique system generated identifier (required).</param>
        /// <param name="spaceName">This is the space name which is linked to the account (required).</param>
        /// <param name="created">ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone (required).</param>
        /// <param name="customFields">customFields.</param>
        /// <param name="tags">A list of id&#39;s used to tag models.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="competitionId">A unique identifier of a Competition (required).</param>
        /// <param name="row">The row number for displaying the Contest in a table (required).</param>
        /// <param name="name">A name for the Contest. Can be translated (required).</param>
        /// <param name="description">Description of the contest.</param>
        /// <param name="termsAndConditions">Terms and conditions for participating in the Contest. Can be translated.</param>
        /// <param name="round">To what round does the contest belong (required).</param>
        /// <param name="roundType">roundType (required).</param>
        /// <param name="groupStage">Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2.</param>
        /// <param name="groupStageLabel">The name of the group stages.</param>
        /// <param name="entrantsFromContest">A list of Ziqni contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional. (required).</param>
        /// <param name="maxNumberOfEntrants">Maximum number of entrants for the contest.</param>
        /// <param name="minNumberOfEntrants">Minimum number of entrants for the contest (required).</param>
        /// <param name="scheduledStartDate">ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone (required).</param>
        /// <param name="scheduledEndDate">ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone (required).</param>
        /// <param name="strategies">strategies.</param>
        /// <param name="status">status (required).</param>
        /// <param name="constraints">Additional constraints (required).</param>
        public Contest(string id = default(string), string spaceName = default(string), DateTime created = default(DateTime), Dictionary<string, Object> customFields = default(Dictionary<string, Object>), List<string> tags = default(List<string>), Dictionary<string, string> metadata = default(Dictionary<string, string>), string competitionId = default(string), int row = default(int), string name = default(string), string description = default(string), string termsAndConditions = default(string), int round = default(int), RoundType roundType = default(RoundType), int groupStage = default(int), string groupStageLabel = default(string), List<string> entrantsFromContest = default(List<string>), int maxNumberOfEntrants = default(int), int minNumberOfEntrants = default(int), DateTime scheduledStartDate = default(DateTime), DateTime scheduledEndDate = default(DateTime), Strategy strategies = default(Strategy), ContestStatus status = default(ContestStatus), List<string> constraints = default(List<string>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Contest and cannot be null");
            }
            else
            {
                this.Id = id;
            }

            // to ensure "spaceName" is required (not null)
            if (spaceName == null)
            {
                throw new InvalidDataException("spaceName is a required property for Contest and cannot be null");
            }
            else
            {
                this.SpaceName = spaceName;
            }

            // to ensure "created" is required (not null)
            if (created == null)
            {
                throw new InvalidDataException("created is a required property for Contest and cannot be null");
            }
            else
            {
                this.Created = created;
            }

            // to ensure "competitionId" is required (not null)
            if (competitionId == null)
            {
                throw new InvalidDataException("competitionId is a required property for Contest and cannot be null");
            }
            else
            {
                this.CompetitionId = competitionId;
            }

            // to ensure "row" is required (not null)
            if (row == null)
            {
                throw new InvalidDataException("row is a required property for Contest and cannot be null");
            }
            else
            {
                this.Row = row;
            }

            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Contest and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "round" is required (not null)
            if (round == null)
            {
                throw new InvalidDataException("round is a required property for Contest and cannot be null");
            }
            else
            {
                this.Round = round;
            }

            // to ensure "roundType" is required (not null)
            if (roundType == null)
            {
                throw new InvalidDataException("roundType is a required property for Contest and cannot be null");
            }
            else
            {
                this.RoundType = roundType;
            }

            // to ensure "entrantsFromContest" is required (not null)
            if (entrantsFromContest == null)
            {
                throw new InvalidDataException("entrantsFromContest is a required property for Contest and cannot be null");
            }
            else
            {
                this.EntrantsFromContest = entrantsFromContest;
            }

            // to ensure "minNumberOfEntrants" is required (not null)
            if (minNumberOfEntrants == null)
            {
                throw new InvalidDataException("minNumberOfEntrants is a required property for Contest and cannot be null");
            }
            else
            {
                this.MinNumberOfEntrants = minNumberOfEntrants;
            }

            // to ensure "scheduledStartDate" is required (not null)
            if (scheduledStartDate == null)
            {
                throw new InvalidDataException("scheduledStartDate is a required property for Contest and cannot be null");
            }
            else
            {
                this.ScheduledStartDate = scheduledStartDate;
            }

            // to ensure "scheduledEndDate" is required (not null)
            if (scheduledEndDate == null)
            {
                throw new InvalidDataException("scheduledEndDate is a required property for Contest and cannot be null");
            }
            else
            {
                this.ScheduledEndDate = scheduledEndDate;
            }

            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for Contest and cannot be null");
            }
            else
            {
                this.Status = status;
            }

            // to ensure "constraints" is required (not null)
            if (constraints == null)
            {
                throw new InvalidDataException("constraints is a required property for Contest and cannot be null");
            }
            else
            {
                this.Constraints = constraints;
            }

            this.CustomFields = customFields;
            this.Tags = tags;
            this.Metadata = metadata;
            this.Description = description;
            this.TermsAndConditions = termsAndConditions;
            this.GroupStage = groupStage;
            this.GroupStageLabel = groupStageLabel;
            this.MaxNumberOfEntrants = maxNumberOfEntrants;
            this.Strategies = strategies;
        }

        /// <summary>
        /// A unique system generated identifier
        /// </summary>
        /// <value>A unique system generated identifier</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// This is the space name which is linked to the account
        /// </summary>
        /// <value>This is the space name which is linked to the account</value>
        [DataMember(Name="spaceName", EmitDefaultValue=true)]
        public string SpaceName { get; set; }

        /// <summary>
        /// ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone</value>
        [DataMember(Name="created", EmitDefaultValue=true)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets CustomFields
        /// </summary>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// A list of id&#39;s used to tag models
        /// </summary>
        /// <value>A list of id&#39;s used to tag models</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// A unique identifier of a Competition
        /// </summary>
        /// <value>A unique identifier of a Competition</value>
        [DataMember(Name="competitionId", EmitDefaultValue=true)]
        public string CompetitionId { get; set; }

        /// <summary>
        /// The row number for displaying the Contest in a table
        /// </summary>
        /// <value>The row number for displaying the Contest in a table</value>
        [DataMember(Name="row", EmitDefaultValue=true)]
        public int Row { get; set; }

        /// <summary>
        /// A name for the Contest. Can be translated
        /// </summary>
        /// <value>A name for the Contest. Can be translated</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the contest
        /// </summary>
        /// <value>Description of the contest</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Terms and conditions for participating in the Contest. Can be translated
        /// </summary>
        /// <value>Terms and conditions for participating in the Contest. Can be translated</value>
        [DataMember(Name="termsAndConditions", EmitDefaultValue=false)]
        public string TermsAndConditions { get; set; }

        /// <summary>
        /// To what round does the contest belong
        /// </summary>
        /// <value>To what round does the contest belong</value>
        [DataMember(Name="round", EmitDefaultValue=true)]
        public int Round { get; set; }


        /// <summary>
        /// Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
        /// </summary>
        /// <value>Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2</value>
        [DataMember(Name="groupStage", EmitDefaultValue=false)]
        public int GroupStage { get; set; }

        /// <summary>
        /// The name of the group stages
        /// </summary>
        /// <value>The name of the group stages</value>
        [DataMember(Name="groupStageLabel", EmitDefaultValue=false)]
        public string GroupStageLabel { get; set; }

        /// <summary>
        /// A list of Ziqni contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.
        /// </summary>
        /// <value>A list of Ziqni contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.</value>
        [DataMember(Name="entrantsFromContest", EmitDefaultValue=true)]
        public List<string> EntrantsFromContest { get; set; }

        /// <summary>
        /// Maximum number of entrants for the contest
        /// </summary>
        /// <value>Maximum number of entrants for the contest</value>
        [DataMember(Name="maxNumberOfEntrants", EmitDefaultValue=false)]
        public int MaxNumberOfEntrants { get; set; }

        /// <summary>
        /// Minimum number of entrants for the contest
        /// </summary>
        /// <value>Minimum number of entrants for the contest</value>
        [DataMember(Name="minNumberOfEntrants", EmitDefaultValue=true)]
        public int MinNumberOfEntrants { get; set; }

        /// <summary>
        /// ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone</value>
        [DataMember(Name="scheduledStartDate", EmitDefaultValue=true)]
        public DateTime ScheduledStartDate { get; set; }

        /// <summary>
        /// ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone</value>
        [DataMember(Name="scheduledEndDate", EmitDefaultValue=true)]
        public DateTime ScheduledEndDate { get; set; }

        /// <summary>
        /// ISO8601 timestamp for when a Competition started. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Competition started. All records are stored in UTC time zone</value>
        [DataMember(Name="actualStartDate", EmitDefaultValue=false)]
        public DateTime ActualStartDate { get; private set; }

        /// <summary>
        /// ISO8601 timestamp for when a Competition ended. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Competition ended. All records are stored in UTC time zone</value>
        [DataMember(Name="actualEndDate", EmitDefaultValue=false)]
        public DateTime ActualEndDate { get; private set; }

        /// <summary>
        /// Gets or Sets Strategies
        /// </summary>
        [DataMember(Name="strategies", EmitDefaultValue=false)]
        public Strategy Strategies { get; set; }


        /// <summary>
        /// The code of the contest
        /// </summary>
        /// <value>The code of the contest</value>
        [DataMember(Name="statusCode", EmitDefaultValue=true)]
        public int StatusCode { get; private set; }

        /// <summary>
        /// Additional constraints
        /// </summary>
        /// <value>Additional constraints</value>
        [DataMember(Name="constraints", EmitDefaultValue=true)]
        public List<string> Constraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Contest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SpaceName: ").Append(SpaceName).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  CompetitionId: ").Append(CompetitionId).Append("\n");
            sb.Append("  Row: ").Append(Row).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TermsAndConditions: ").Append(TermsAndConditions).Append("\n");
            sb.Append("  Round: ").Append(Round).Append("\n");
            sb.Append("  RoundType: ").Append(RoundType).Append("\n");
            sb.Append("  GroupStage: ").Append(GroupStage).Append("\n");
            sb.Append("  GroupStageLabel: ").Append(GroupStageLabel).Append("\n");
            sb.Append("  EntrantsFromContest: ").Append(EntrantsFromContest).Append("\n");
            sb.Append("  MaxNumberOfEntrants: ").Append(MaxNumberOfEntrants).Append("\n");
            sb.Append("  MinNumberOfEntrants: ").Append(MinNumberOfEntrants).Append("\n");
            sb.Append("  ScheduledStartDate: ").Append(ScheduledStartDate).Append("\n");
            sb.Append("  ScheduledEndDate: ").Append(ScheduledEndDate).Append("\n");
            sb.Append("  ActualStartDate: ").Append(ActualStartDate).Append("\n");
            sb.Append("  ActualEndDate: ").Append(ActualEndDate).Append("\n");
            sb.Append("  Strategies: ").Append(Strategies).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Contest);
        }

        /// <summary>
        /// Returns true if Contest instances are equal
        /// </summary>
        /// <param name="input">Instance of Contest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Contest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SpaceName == input.SpaceName ||
                    (this.SpaceName != null &&
                    this.SpaceName.Equals(input.SpaceName))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.CompetitionId == input.CompetitionId ||
                    (this.CompetitionId != null &&
                    this.CompetitionId.Equals(input.CompetitionId))
                ) && 
                (
                    this.Row == input.Row ||
                    (this.Row != null &&
                    this.Row.Equals(input.Row))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TermsAndConditions == input.TermsAndConditions ||
                    (this.TermsAndConditions != null &&
                    this.TermsAndConditions.Equals(input.TermsAndConditions))
                ) && 
                (
                    this.Round == input.Round ||
                    (this.Round != null &&
                    this.Round.Equals(input.Round))
                ) && 
                (
                    this.RoundType == input.RoundType ||
                    (this.RoundType != null &&
                    this.RoundType.Equals(input.RoundType))
                ) && 
                (
                    this.GroupStage == input.GroupStage ||
                    (this.GroupStage != null &&
                    this.GroupStage.Equals(input.GroupStage))
                ) && 
                (
                    this.GroupStageLabel == input.GroupStageLabel ||
                    (this.GroupStageLabel != null &&
                    this.GroupStageLabel.Equals(input.GroupStageLabel))
                ) && 
                (
                    this.EntrantsFromContest == input.EntrantsFromContest ||
                    this.EntrantsFromContest != null &&
                    input.EntrantsFromContest != null &&
                    this.EntrantsFromContest.SequenceEqual(input.EntrantsFromContest)
                ) && 
                (
                    this.MaxNumberOfEntrants == input.MaxNumberOfEntrants ||
                    (this.MaxNumberOfEntrants != null &&
                    this.MaxNumberOfEntrants.Equals(input.MaxNumberOfEntrants))
                ) && 
                (
                    this.MinNumberOfEntrants == input.MinNumberOfEntrants ||
                    (this.MinNumberOfEntrants != null &&
                    this.MinNumberOfEntrants.Equals(input.MinNumberOfEntrants))
                ) && 
                (
                    this.ScheduledStartDate == input.ScheduledStartDate ||
                    (this.ScheduledStartDate != null &&
                    this.ScheduledStartDate.Equals(input.ScheduledStartDate))
                ) && 
                (
                    this.ScheduledEndDate == input.ScheduledEndDate ||
                    (this.ScheduledEndDate != null &&
                    this.ScheduledEndDate.Equals(input.ScheduledEndDate))
                ) && 
                (
                    this.ActualStartDate == input.ActualStartDate ||
                    (this.ActualStartDate != null &&
                    this.ActualStartDate.Equals(input.ActualStartDate))
                ) && 
                (
                    this.ActualEndDate == input.ActualEndDate ||
                    (this.ActualEndDate != null &&
                    this.ActualEndDate.Equals(input.ActualEndDate))
                ) && 
                (
                    this.Strategies == input.Strategies ||
                    (this.Strategies != null &&
                    this.Strategies.Equals(input.Strategies))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SpaceName != null)
                    hashCode = hashCode * 59 + this.SpaceName.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.CompetitionId != null)
                    hashCode = hashCode * 59 + this.CompetitionId.GetHashCode();
                if (this.Row != null)
                    hashCode = hashCode * 59 + this.Row.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TermsAndConditions != null)
                    hashCode = hashCode * 59 + this.TermsAndConditions.GetHashCode();
                if (this.Round != null)
                    hashCode = hashCode * 59 + this.Round.GetHashCode();
                if (this.RoundType != null)
                    hashCode = hashCode * 59 + this.RoundType.GetHashCode();
                if (this.GroupStage != null)
                    hashCode = hashCode * 59 + this.GroupStage.GetHashCode();
                if (this.GroupStageLabel != null)
                    hashCode = hashCode * 59 + this.GroupStageLabel.GetHashCode();
                if (this.EntrantsFromContest != null)
                    hashCode = hashCode * 59 + this.EntrantsFromContest.GetHashCode();
                if (this.MaxNumberOfEntrants != null)
                    hashCode = hashCode * 59 + this.MaxNumberOfEntrants.GetHashCode();
                if (this.MinNumberOfEntrants != null)
                    hashCode = hashCode * 59 + this.MinNumberOfEntrants.GetHashCode();
                if (this.ScheduledStartDate != null)
                    hashCode = hashCode * 59 + this.ScheduledStartDate.GetHashCode();
                if (this.ScheduledEndDate != null)
                    hashCode = hashCode * 59 + this.ScheduledEndDate.GetHashCode();
                if (this.ActualStartDate != null)
                    hashCode = hashCode * 59 + this.ActualStartDate.GetHashCode();
                if (this.ActualEndDate != null)
                    hashCode = hashCode * 59 + this.ActualEndDate.GetHashCode();
                if (this.Strategies != null)
                    hashCode = hashCode * 59 + this.Strategies.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusCode != null)
                    hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
