/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing ContestsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ContestsApiTests
    {
        private ContestsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ContestsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ContestsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ContestsApi
            //Assert.IsInstanceOf(typeof(ContestsApi), instance);
        }

        
        /// <summary>
        /// Test CreateContests
        /// </summary>
        [Test]
        public void CreateContestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateContestForCompetitionRequest body = null;
            //var response = instance.CreateContests(body);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
        /// <summary>
        /// Test GetContests
        /// </summary>
        [Test]
        public void GetContestsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> id = null;
            //int? limit = null;
            //int? skip = null;
            //var response = instance.GetContests(id, limit, skip);
            //Assert.IsInstanceOf(typeof(ContestResponse), response, "response is ContestResponse");
        }
        
        /// <summary>
        /// Test GetContestsByQuery
        /// </summary>
        [Test]
        public void GetContestsByQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QueryRequest body = null;
            //var response = instance.GetContestsByQuery(body);
            //Assert.IsInstanceOf(typeof(ContestResponse), response, "response is ContestResponse");
        }
        
        /// <summary>
        /// Test GetContestsLeaderboardById
        /// </summary>
        [Test]
        public void GetContestsLeaderboardByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //int? skip = null;
            //var response = instance.GetContestsLeaderboardById(id, limit, skip);
            //Assert.IsInstanceOf(typeof(ContestLeaderboardResponse), response, "response is ContestLeaderboardResponse");
        }
        
        /// <summary>
        /// Test GetContestsToClone
        /// </summary>
        [Test]
        public void GetContestsToCloneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetContestsToClone(id);
            //Assert.IsInstanceOf(typeof(CloneContestResponse), response, "response is CloneContestResponse");
        }
        
        /// <summary>
        /// Test GetListOfEntrantsForContest
        /// </summary>
        [Test]
        public void GetListOfEntrantsForContestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? limit = null;
            //int? skip = null;
            //var response = instance.GetListOfEntrantsForContest(id, limit, skip);
            //Assert.IsInstanceOf(typeof(EntrantResponse), response, "response is EntrantResponse");
        }
        
        /// <summary>
        /// Test UpdateContest
        /// </summary>
        [Test]
        public void UpdateContestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateContestRequest body = null;
            //var response = instance.UpdateContest(body);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
        /// <summary>
        /// Test UpdateContestsState
        /// </summary>
        [Test]
        public void UpdateContestsStateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<UpdateContestStateRequest> body = null;
            //var response = instance.UpdateContestsState(body);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
    }

}
