/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing LanguagesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class LanguagesApiTests
    {
        private LanguagesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LanguagesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LanguagesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' LanguagesApi
            //Assert.IsInstanceOf(typeof(LanguagesApi), instance);
        }

        
        /// <summary>
        /// Test CreateLanguages
        /// </summary>
        [Test]
        public void CreateLanguagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<CreateLanguageRequest> body = null;
            //var response = instance.CreateLanguages(body);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
        /// <summary>
        /// Test DeleteLanguages
        /// </summary>
        [Test]
        public void DeleteLanguagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> id = null;
            //var response = instance.DeleteLanguages(id);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
        /// <summary>
        /// Test DeleteLanguagesByQuery
        /// </summary>
        [Test]
        public void DeleteLanguagesByQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QueryRequest body = null;
            //var response = instance.DeleteLanguagesByQuery(body);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
        /// <summary>
        /// Test GetLanguages
        /// </summary>
        [Test]
        public void GetLanguagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> id = null;
            //int? limit = null;
            //int? skip = null;
            //var response = instance.GetLanguages(id, limit, skip);
            //Assert.IsInstanceOf(typeof(LanguageResponse), response, "response is LanguageResponse");
        }
        
        /// <summary>
        /// Test GetLanguagesByQuery
        /// </summary>
        [Test]
        public void GetLanguagesByQueryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //QueryRequest body = null;
            //var response = instance.GetLanguagesByQuery(body);
            //Assert.IsInstanceOf(typeof(LanguageResponse), response, "response is LanguageResponse");
        }
        
        /// <summary>
        /// Test GetListOfAllLanguages
        /// </summary>
        [Test]
        public void GetListOfAllLanguagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? limit = null;
            //int? skip = null;
            //var response = instance.GetListOfAllLanguages(limit, skip);
            //Assert.IsInstanceOf(typeof(LanguageResponse), response, "response is LanguageResponse");
        }
        
        /// <summary>
        /// Test UpdateLanguages
        /// </summary>
        [Test]
        public void UpdateLanguagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<UpdateLanguageRequest> body = null;
            //var response = instance.UpdateLanguages(body);
            //Assert.IsInstanceOf(typeof(ApiResponse), response, "response is ApiResponse");
        }
        
    }

}
