/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Ziqni.Model;

namespace Ziqni.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompetitionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new Competition in the Ziqni database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a Competition in the Ziqni database</param>
        /// <returns>ApiResponse</returns>
        ApiResponse CreateCompetitions(CreateCompetitionRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new Competition in the Ziqni database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a Competition in the Ziqni database</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> CreateCompetitionsWithHttpInfo(CreateCompetitionRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a Simple Competition in the Ziqni database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a Competition in the Ziqni database</param>
        /// <returns>ApiResponse</returns>
        ApiResponse CreateSimpleCompetitions(CreateSimpleCompetitionRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a Simple Competition in the Ziqni database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a Competition in the Ziqni database</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> CreateSimpleCompetitionsWithHttpInfo(CreateSimpleCompetitionRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Competitions. This assumes that competitions have first been uploaded via a POST request or web console
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <returns>CompetitionResponse</returns>
        CompetitionResponse GetCompetitions(List<string> id = default(List<string>), int? limit = default(int?), int? skip = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Competitions. This assumes that competitions have first been uploaded via a POST request or web console
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <returns>ApiResponse of CompetitionResponse</returns>
        ApiResponse<CompetitionResponse> GetCompetitionsWithHttpInfo(List<string> id = default(List<string>), int? limit = default(int?), int? skip = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Competitions from Ziqni database by unique Competition ID&#39;s or any other POST body parameters using the POST method
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Retrieve Competitions from Ziqni database by unique Competition ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>CompetitionResponse</returns>
        CompetitionResponse GetCompetitionsByQuery(QueryRequest body = default(QueryRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Competitions from Ziqni database by unique Competition ID&#39;s or any other POST body parameters using the POST method
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Retrieve Competitions from Ziqni database by unique Competition ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>ApiResponse of CompetitionResponse</returns>
        ApiResponse<CompetitionResponse> GetCompetitionsByQueryWithHttpInfo(QueryRequest body = default(QueryRequest));
        /// <summary>
        /// Get Competition To Clone
        /// </summary>
        /// <remarks>
        /// Clones a Competition for the identifier provided
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the resource</param>
        /// <returns>CloneCompetitionResponse</returns>
        CloneCompetitionResponse GetCompetitionsToClone(string id);

        /// <summary>
        /// Get Competition To Clone
        /// </summary>
        /// <remarks>
        /// Clones a Competition for the identifier provided
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the resource</param>
        /// <returns>ApiResponse of CloneCompetitionResponse</returns>
        ApiResponse<CloneCompetitionResponse> GetCompetitionsToCloneWithHttpInfo(string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Use /leadeboard instead. Returns a list of Leaderborads for the Competition id provided
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the resource</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <returns>CompetitionLeaderboardResponse</returns>
        [Obsolete]
        CompetitionLeaderboardResponse GetLeaderboardByCompetitionId(string id, int? limit = default(int?), int? skip = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Use /leadeboard instead. Returns a list of Leaderborads for the Competition id provided
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the resource</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <returns>ApiResponse of CompetitionLeaderboardResponse</returns>
        [Obsolete]
        ApiResponse<CompetitionLeaderboardResponse> GetLeaderboardByCompetitionIdWithHttpInfo(string id, int? limit = default(int?), int? skip = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update an existing Competition in the Ziqni database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update a Competition in the Ziqni database. * A Competitions Id must exist in the Ziqni database for update</param>
        /// <returns>ApiResponse</returns>
        ApiResponse UpdateCompetitions(UpdateCompetitionRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update an existing Competition in the Ziqni database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update a Competition in the Ziqni database. * A Competitions Id must exist in the Ziqni database for update</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> UpdateCompetitionsWithHttpInfo(UpdateCompetitionRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Manages the Competitions state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updates the state of the Competition (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse UpdateCompetitionsState(List<UpdateCompetitionStatusRequest> body = default(List<UpdateCompetitionStatusRequest>));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Manages the Competitions state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updates the state of the Competition (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> UpdateCompetitionsStateWithHttpInfo(List<UpdateCompetitionStatusRequest> body = default(List<UpdateCompetitionStatusRequest>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompetitionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new Competition in the Ziqni database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a Competition in the Ziqni database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> CreateCompetitionsAsync(CreateCompetitionRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a new Competition in the Ziqni database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a Competition in the Ziqni database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> CreateCompetitionsWithHttpInfoAsync(CreateCompetitionRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a Simple Competition in the Ziqni database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a Competition in the Ziqni database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> CreateSimpleCompetitionsAsync(CreateSimpleCompetitionRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a Simple Competition in the Ziqni database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a Competition in the Ziqni database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> CreateSimpleCompetitionsWithHttpInfoAsync(CreateSimpleCompetitionRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Competitions. This assumes that competitions have first been uploaded via a POST request or web console
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompetitionResponse</returns>
        System.Threading.Tasks.Task<CompetitionResponse> GetCompetitionsAsync(List<string> id = default(List<string>), int? limit = default(int?), int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of Competitions. This assumes that competitions have first been uploaded via a POST request or web console
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompetitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompetitionResponse>> GetCompetitionsWithHttpInfoAsync(List<string> id = default(List<string>), int? limit = default(int?), int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Competitions from Ziqni database by unique Competition ID&#39;s or any other POST body parameters using the POST method
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Retrieve Competitions from Ziqni database by unique Competition ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompetitionResponse</returns>
        System.Threading.Tasks.Task<CompetitionResponse> GetCompetitionsByQueryAsync(QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve Competitions from Ziqni database by unique Competition ID&#39;s or any other POST body parameters using the POST method
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Retrieve Competitions from Ziqni database by unique Competition ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompetitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CompetitionResponse>> GetCompetitionsByQueryWithHttpInfoAsync(QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Competition To Clone
        /// </summary>
        /// <remarks>
        /// Clones a Competition for the identifier provided
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloneCompetitionResponse</returns>
        System.Threading.Tasks.Task<CloneCompetitionResponse> GetCompetitionsToCloneAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Competition To Clone
        /// </summary>
        /// <remarks>
        /// Clones a Competition for the identifier provided
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloneCompetitionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloneCompetitionResponse>> GetCompetitionsToCloneWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Use /leadeboard instead. Returns a list of Leaderborads for the Competition id provided
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the resource</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompetitionLeaderboardResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<CompetitionLeaderboardResponse> GetLeaderboardByCompetitionIdAsync(string id, int? limit = default(int?), int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Use /leadeboard instead. Returns a list of Leaderborads for the Competition id provided
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the resource</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompetitionLeaderboardResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<CompetitionLeaderboardResponse>> GetLeaderboardByCompetitionIdWithHttpInfoAsync(string id, int? limit = default(int?), int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update an existing Competition in the Ziqni database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update a Competition in the Ziqni database. * A Competitions Id must exist in the Ziqni database for update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> UpdateCompetitionsAsync(UpdateCompetitionRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update an existing Competition in the Ziqni database
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update a Competition in the Ziqni database. * A Competitions Id must exist in the Ziqni database for update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> UpdateCompetitionsWithHttpInfoAsync(UpdateCompetitionRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Manages the Competitions state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updates the state of the Competition (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> UpdateCompetitionsStateAsync(List<UpdateCompetitionStatusRequest> body = default(List<UpdateCompetitionStatusRequest>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Manages the Competitions state
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updates the state of the Competition (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> UpdateCompetitionsStateWithHttpInfoAsync(List<UpdateCompetitionStatusRequest> body = default(List<UpdateCompetitionStatusRequest>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICompetitionsApi : ICompetitionsApiSync, ICompetitionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CompetitionsApi : ICompetitionsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CompetitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CompetitionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompetitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CompetitionsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompetitionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CompetitionsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CompetitionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CompetitionsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Create a new Competition in the Ziqni database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a Competition in the Ziqni database</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse CreateCompetitions(CreateCompetitionRequest body)
        {
            Org.OpenAPITools.Client.ApiResponse<ApiResponse> localVarResponse = CreateCompetitionsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new Competition in the Ziqni database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a Competition in the Ziqni database</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ApiResponse> CreateCompetitionsWithHttpInfo(CreateCompetitionRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling CompetitionsApi->CreateCompetitions");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/competitions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCompetitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a new Competition in the Ziqni database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a Competition in the Ziqni database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> CreateCompetitionsAsync(CreateCompetitionRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ApiResponse> localVarResponse = await CreateCompetitionsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a new Competition in the Ziqni database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a Competition in the Ziqni database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ApiResponse>> CreateCompetitionsWithHttpInfoAsync(CreateCompetitionRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling CompetitionsApi->CreateCompetitions");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/competitions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCompetitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a Simple Competition in the Ziqni database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a Competition in the Ziqni database</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse CreateSimpleCompetitions(CreateSimpleCompetitionRequest body)
        {
            Org.OpenAPITools.Client.ApiResponse<ApiResponse> localVarResponse = CreateSimpleCompetitionsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a Simple Competition in the Ziqni database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a Competition in the Ziqni database</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ApiResponse> CreateSimpleCompetitionsWithHttpInfo(CreateSimpleCompetitionRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling CompetitionsApi->CreateSimpleCompetitions");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/competitions/simple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSimpleCompetitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a Simple Competition in the Ziqni database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a Competition in the Ziqni database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> CreateSimpleCompetitionsAsync(CreateSimpleCompetitionRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ApiResponse> localVarResponse = await CreateSimpleCompetitionsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a Simple Competition in the Ziqni database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a Competition in the Ziqni database</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ApiResponse>> CreateSimpleCompetitionsWithHttpInfoAsync(CreateSimpleCompetitionRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling CompetitionsApi->CreateSimpleCompetitions");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/competitions/simple", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSimpleCompetitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of Competitions. This assumes that competitions have first been uploaded via a POST request or web console
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <returns>CompetitionResponse</returns>
        public CompetitionResponse GetCompetitions(List<string> id = default(List<string>), int? limit = default(int?), int? skip = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<CompetitionResponse> localVarResponse = GetCompetitionsWithHttpInfo(id, limit, skip);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of Competitions. This assumes that competitions have first been uploaded via a POST request or web console
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <returns>ApiResponse of CompetitionResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<CompetitionResponse> GetCompetitionsWithHttpInfo(List<string> id = default(List<string>), int? limit = default(int?), int? skip = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "_limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "_skip", skip));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CompetitionResponse>("/competitions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompetitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of Competitions. This assumes that competitions have first been uploaded via a POST request or web console
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompetitionResponse</returns>
        public async System.Threading.Tasks.Task<CompetitionResponse> GetCompetitionsAsync(List<string> id = default(List<string>), int? limit = default(int?), int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CompetitionResponse> localVarResponse = await GetCompetitionsWithHttpInfoAsync(id, limit, skip, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of Competitions. This assumes that competitions have first been uploaded via a POST request or web console
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompetitionResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CompetitionResponse>> GetCompetitionsWithHttpInfoAsync(List<string> id = default(List<string>), int? limit = default(int?), int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "_limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "_skip", skip));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CompetitionResponse>("/competitions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompetitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve Competitions from Ziqni database by unique Competition ID&#39;s or any other POST body parameters using the POST method
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Retrieve Competitions from Ziqni database by unique Competition ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>CompetitionResponse</returns>
        public CompetitionResponse GetCompetitionsByQuery(QueryRequest body = default(QueryRequest))
        {
            Org.OpenAPITools.Client.ApiResponse<CompetitionResponse> localVarResponse = GetCompetitionsByQueryWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve Competitions from Ziqni database by unique Competition ID&#39;s or any other POST body parameters using the POST method
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Retrieve Competitions from Ziqni database by unique Competition ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>ApiResponse of CompetitionResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<CompetitionResponse> GetCompetitionsByQueryWithHttpInfo(QueryRequest body = default(QueryRequest))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CompetitionResponse>("/competitions/query", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompetitionsByQuery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve Competitions from Ziqni database by unique Competition ID&#39;s or any other POST body parameters using the POST method
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Retrieve Competitions from Ziqni database by unique Competition ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompetitionResponse</returns>
        public async System.Threading.Tasks.Task<CompetitionResponse> GetCompetitionsByQueryAsync(QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CompetitionResponse> localVarResponse = await GetCompetitionsByQueryWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve Competitions from Ziqni database by unique Competition ID&#39;s or any other POST body parameters using the POST method
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Retrieve Competitions from Ziqni database by unique Competition ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompetitionResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CompetitionResponse>> GetCompetitionsByQueryWithHttpInfoAsync(QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CompetitionResponse>("/competitions/query", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompetitionsByQuery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Competition To Clone Clones a Competition for the identifier provided
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the resource</param>
        /// <returns>CloneCompetitionResponse</returns>
        public CloneCompetitionResponse GetCompetitionsToClone(string id)
        {
            Org.OpenAPITools.Client.ApiResponse<CloneCompetitionResponse> localVarResponse = GetCompetitionsToCloneWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Competition To Clone Clones a Competition for the identifier provided
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the resource</param>
        /// <returns>ApiResponse of CloneCompetitionResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<CloneCompetitionResponse> GetCompetitionsToCloneWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling CompetitionsApi->GetCompetitionsToClone");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CloneCompetitionResponse>("/competitions/{id}/clone", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompetitionsToClone", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Competition To Clone Clones a Competition for the identifier provided
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloneCompetitionResponse</returns>
        public async System.Threading.Tasks.Task<CloneCompetitionResponse> GetCompetitionsToCloneAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CloneCompetitionResponse> localVarResponse = await GetCompetitionsToCloneWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Competition To Clone Clones a Competition for the identifier provided
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the resource</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloneCompetitionResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CloneCompetitionResponse>> GetCompetitionsToCloneWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling CompetitionsApi->GetCompetitionsToClone");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CloneCompetitionResponse>("/competitions/{id}/clone", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCompetitionsToClone", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Use /leadeboard instead. Returns a list of Leaderborads for the Competition id provided
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the resource</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <returns>CompetitionLeaderboardResponse</returns>
        [Obsolete]
        public CompetitionLeaderboardResponse GetLeaderboardByCompetitionId(string id, int? limit = default(int?), int? skip = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<CompetitionLeaderboardResponse> localVarResponse = GetLeaderboardByCompetitionIdWithHttpInfo(id, limit, skip);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Use /leadeboard instead. Returns a list of Leaderborads for the Competition id provided
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the resource</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <returns>ApiResponse of CompetitionLeaderboardResponse</returns>
        [Obsolete]
        public Org.OpenAPITools.Client.ApiResponse<CompetitionLeaderboardResponse> GetLeaderboardByCompetitionIdWithHttpInfo(string id, int? limit = default(int?), int? skip = default(int?))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling CompetitionsApi->GetLeaderboardByCompetitionId");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "_limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "_skip", skip));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CompetitionLeaderboardResponse>("/competitions/{id}/leaderboard", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeaderboardByCompetitionId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Use /leadeboard instead. Returns a list of Leaderborads for the Competition id provided
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the resource</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CompetitionLeaderboardResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<CompetitionLeaderboardResponse> GetLeaderboardByCompetitionIdAsync(string id, int? limit = default(int?), int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<CompetitionLeaderboardResponse> localVarResponse = await GetLeaderboardByCompetitionIdWithHttpInfoAsync(id, limit, skip, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Use /leadeboard instead. Returns a list of Leaderborads for the Competition id provided
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique identifier of the resource</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CompetitionLeaderboardResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<CompetitionLeaderboardResponse>> GetLeaderboardByCompetitionIdWithHttpInfoAsync(string id, int? limit = default(int?), int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling CompetitionsApi->GetLeaderboardByCompetitionId");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "_limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "_skip", skip));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<CompetitionLeaderboardResponse>("/competitions/{id}/leaderboard", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLeaderboardByCompetitionId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update an existing Competition in the Ziqni database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update a Competition in the Ziqni database. * A Competitions Id must exist in the Ziqni database for update</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse UpdateCompetitions(UpdateCompetitionRequest body)
        {
            Org.OpenAPITools.Client.ApiResponse<ApiResponse> localVarResponse = UpdateCompetitionsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update an existing Competition in the Ziqni database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update a Competition in the Ziqni database. * A Competitions Id must exist in the Ziqni database for update</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ApiResponse> UpdateCompetitionsWithHttpInfo(UpdateCompetitionRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling CompetitionsApi->UpdateCompetitions");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiResponse>("/competitions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCompetitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update an existing Competition in the Ziqni database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update a Competition in the Ziqni database. * A Competitions Id must exist in the Ziqni database for update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> UpdateCompetitionsAsync(UpdateCompetitionRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ApiResponse> localVarResponse = await UpdateCompetitionsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update an existing Competition in the Ziqni database
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update a Competition in the Ziqni database. * A Competitions Id must exist in the Ziqni database for update</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ApiResponse>> UpdateCompetitionsWithHttpInfoAsync(UpdateCompetitionRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling CompetitionsApi->UpdateCompetitions");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiResponse>("/competitions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCompetitions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Manages the Competitions state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updates the state of the Competition (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse UpdateCompetitionsState(List<UpdateCompetitionStatusRequest> body = default(List<UpdateCompetitionStatusRequest>))
        {
            Org.OpenAPITools.Client.ApiResponse<ApiResponse> localVarResponse = UpdateCompetitionsStateWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Manages the Competitions state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updates the state of the Competition (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ApiResponse> UpdateCompetitionsStateWithHttpInfo(List<UpdateCompetitionStatusRequest> body = default(List<UpdateCompetitionStatusRequest>))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiResponse>("/competitions/state", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCompetitionsState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Manages the Competitions state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updates the state of the Competition (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> UpdateCompetitionsStateAsync(List<UpdateCompetitionStatusRequest> body = default(List<UpdateCompetitionStatusRequest>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ApiResponse> localVarResponse = await UpdateCompetitionsStateWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Manages the Competitions state
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Updates the state of the Competition (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ApiResponse>> UpdateCompetitionsStateWithHttpInfoAsync(List<UpdateCompetitionStatusRequest> body = default(List<UpdateCompetitionStatusRequest>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiResponse>("/competitions/state", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCompetitionsState", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
