/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Ziqni
{
    /// <summary>
    /// SpaceTokenRequest
    /// </summary>
    [DataContract]
    public partial class SpaceTokenRequest :  IEquatable<SpaceTokenRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpaceTokenRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SpaceTokenRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpaceTokenRequest" /> class.
        /// </summary>
        /// <param name="userToken">The token recevied with key&#x3D;\&quot;user\&quot; from the login response.</param>
        /// <param name="spaceName">Name of the space user is trying to login to (required).</param>
        public SpaceTokenRequest(string userToken = default(string), string spaceName = default(string))
        {
            // to ensure "spaceName" is required (not null)
            if (spaceName == null)
            {
                throw new InvalidDataException("spaceName is a required property for SpaceTokenRequest and cannot be null");
            }
            else
            {
                this.SpaceName = spaceName;
            }

            this.UserToken = userToken;
        }

        /// <summary>
        /// The token recevied with key&#x3D;\&quot;user\&quot; from the login response
        /// </summary>
        /// <value>The token recevied with key&#x3D;\&quot;user\&quot; from the login response</value>
        [DataMember(Name="userToken", EmitDefaultValue=false)]
        public string UserToken { get; set; }

        /// <summary>
        /// Name of the space user is trying to login to
        /// </summary>
        /// <value>Name of the space user is trying to login to</value>
        [DataMember(Name="spaceName", EmitDefaultValue=true)]
        public string SpaceName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SpaceTokenRequest {\n");
            sb.Append("  UserToken: ").Append(UserToken).Append("\n");
            sb.Append("  SpaceName: ").Append(SpaceName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpaceTokenRequest);
        }

        /// <summary>
        /// Returns true if SpaceTokenRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SpaceTokenRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpaceTokenRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserToken == input.UserToken ||
                    (this.UserToken != null &&
                    this.UserToken.Equals(input.UserToken))
                ) && 
                (
                    this.SpaceName == input.SpaceName ||
                    (this.SpaceName != null &&
                    this.SpaceName.Equals(input.SpaceName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserToken != null)
                    hashCode = hashCode * 59 + this.UserToken.GetHashCode();
                if (this.SpaceName != null)
                    hashCode = hashCode * 59 + this.SpaceName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
