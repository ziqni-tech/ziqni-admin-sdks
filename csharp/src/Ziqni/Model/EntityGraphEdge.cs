/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// EntityGraphEdge
    /// </summary>
    [DataContract(Name = "EntityGraphEdge")]
    public partial class EntityGraphEdge : IEquatable<EntityGraphEdge>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets GraphEdgeType
        /// </summary>
        [DataMember(Name = "graphEdgeType", EmitDefaultValue = false)]
        public EntityGraphEdgeType? GraphEdgeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityGraphEdge" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EntityGraphEdge() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityGraphEdge" /> class.
        /// </summary>
        /// <param name="ordering">ordering (required).</param>
        /// <param name="constraints">constraints.</param>
        /// <param name="tailEntityId">X the tail of the edge .</param>
        /// <param name="headEntityId">Y the head of the edge..</param>
        /// <param name="graphEdgeType">graphEdgeType.</param>
        public EntityGraphEdge(int ordering = default(int), List<string> constraints = default(List<string>), string tailEntityId = default(string), string headEntityId = default(string), EntityGraphEdgeType? graphEdgeType = default(EntityGraphEdgeType?))
        {
            this.Ordering = ordering;
            this.Constraints = constraints;
            this.TailEntityId = tailEntityId;
            this.HeadEntityId = headEntityId;
            this.GraphEdgeType = graphEdgeType;
        }

        /// <summary>
        /// Gets or Sets Ordering
        /// </summary>
        [DataMember(Name = "ordering", IsRequired = true, EmitDefaultValue = false)]
        public int Ordering { get; set; }

        /// <summary>
        /// Gets or Sets Constraints
        /// </summary>
        [DataMember(Name = "constraints", EmitDefaultValue = false)]
        public List<string> Constraints { get; set; }

        /// <summary>
        /// X the tail of the edge 
        /// </summary>
        /// <value>X the tail of the edge </value>
        [DataMember(Name = "tailEntityId", EmitDefaultValue = false)]
        public string TailEntityId { get; set; }

        /// <summary>
        /// Y the head of the edge.
        /// </summary>
        /// <value>Y the head of the edge.</value>
        [DataMember(Name = "headEntityId", EmitDefaultValue = false)]
        public string HeadEntityId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntityGraphEdge {\n");
            sb.Append("  Ordering: ").Append(Ordering).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  TailEntityId: ").Append(TailEntityId).Append("\n");
            sb.Append("  HeadEntityId: ").Append(HeadEntityId).Append("\n");
            sb.Append("  GraphEdgeType: ").Append(GraphEdgeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntityGraphEdge);
        }

        /// <summary>
        /// Returns true if EntityGraphEdge instances are equal
        /// </summary>
        /// <param name="input">Instance of EntityGraphEdge to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityGraphEdge input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ordering == input.Ordering ||
                    this.Ordering.Equals(input.Ordering)
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && 
                (
                    this.TailEntityId == input.TailEntityId ||
                    (this.TailEntityId != null &&
                    this.TailEntityId.Equals(input.TailEntityId))
                ) && 
                (
                    this.HeadEntityId == input.HeadEntityId ||
                    (this.HeadEntityId != null &&
                    this.HeadEntityId.Equals(input.HeadEntityId))
                ) && 
                (
                    this.GraphEdgeType == input.GraphEdgeType ||
                    this.GraphEdgeType.Equals(input.GraphEdgeType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Ordering.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                if (this.TailEntityId != null)
                    hashCode = hashCode * 59 + this.TailEntityId.GetHashCode();
                if (this.HeadEntityId != null)
                    hashCode = hashCode * 59 + this.HeadEntityId.GetHashCode();
                hashCode = hashCode * 59 + this.GraphEdgeType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
