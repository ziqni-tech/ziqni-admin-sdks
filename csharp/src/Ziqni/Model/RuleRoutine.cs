/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Ziqni
{
    /// <summary>
    /// RuleRoutine
    /// </summary>
    [DataContract]
    public partial class RuleRoutine :  IEquatable<RuleRoutine>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleRoutine" /> class.
        /// </summary>
        /// <param name="routine">A routine to execute if the conditional expressions in the matching group evaluted to true.</param>
        /// <param name="arguments">The arguments of the routine..</param>
        /// <param name="lineNumber">lineNumber.</param>
        public RuleRoutine(string routine = default(string), List<RuleArgument> arguments = default(List<RuleArgument>), int lineNumber = default(int))
        {
            this.Routine = routine;
            this.Arguments = arguments;
            this.LineNumber = lineNumber;
        }

        /// <summary>
        /// A routine to execute if the conditional expressions in the matching group evaluted to true
        /// </summary>
        /// <value>A routine to execute if the conditional expressions in the matching group evaluted to true</value>
        [DataMember(Name="routine", EmitDefaultValue=false)]
        public string Routine { get; set; }

        /// <summary>
        /// The arguments of the routine.
        /// </summary>
        /// <value>The arguments of the routine.</value>
        [DataMember(Name="arguments", EmitDefaultValue=false)]
        public List<RuleArgument> Arguments { get; set; }

        /// <summary>
        /// Gets or Sets LineNumber
        /// </summary>
        [DataMember(Name="lineNumber", EmitDefaultValue=false)]
        public int LineNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuleRoutine {\n");
            sb.Append("  Routine: ").Append(Routine).Append("\n");
            sb.Append("  Arguments: ").Append(Arguments).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuleRoutine);
        }

        /// <summary>
        /// Returns true if RuleRoutine instances are equal
        /// </summary>
        /// <param name="input">Instance of RuleRoutine to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuleRoutine input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Routine == input.Routine ||
                    (this.Routine != null &&
                    this.Routine.Equals(input.Routine))
                ) && 
                (
                    this.Arguments == input.Arguments ||
                    this.Arguments != null &&
                    input.Arguments != null &&
                    this.Arguments.SequenceEqual(input.Arguments)
                ) && 
                (
                    this.LineNumber == input.LineNumber ||
                    (this.LineNumber != null &&
                    this.LineNumber.Equals(input.LineNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Routine != null)
                    hashCode = hashCode * 59 + this.Routine.GetHashCode();
                if (this.Arguments != null)
                    hashCode = hashCode * 59 + this.Arguments.GetHashCode();
                if (this.LineNumber != null)
                    hashCode = hashCode * 59 + this.LineNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
