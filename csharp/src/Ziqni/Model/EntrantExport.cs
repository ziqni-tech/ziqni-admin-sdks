/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// EntrantExport
    /// </summary>
    [DataContract(Name = "EntrantExport")]
    public partial class EntrantExport : IEquatable<EntrantExport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntrantExport" /> class.
        /// </summary>
        /// <param name="memberId">memberId.</param>
        /// <param name="memberRefId">memberRefId.</param>
        /// <param name="name">name.</param>
        /// <param name="points">double.</param>
        /// <param name="rank">integer.</param>
        /// <param name="groups">groups.</param>
        /// <param name="rewards">Rewards.</param>
        public EntrantExport(string memberId = default(string), string memberRefId = default(string), string name = default(string), decimal points = default(decimal), int rank = default(int), List<string> groups = default(List<string>), List<Reward> rewards = default(List<Reward>))
        {
            this.MemberId = memberId;
            this.MemberRefId = memberRefId;
            this.Name = name;
            this.Points = points;
            this.Rank = rank;
            this.Groups = groups;
            this.Rewards = rewards;
        }

        /// <summary>
        /// Gets or Sets MemberId
        /// </summary>
        [DataMember(Name = "memberId", EmitDefaultValue = false)]
        public string MemberId { get; set; }

        /// <summary>
        /// Gets or Sets MemberRefId
        /// </summary>
        [DataMember(Name = "memberRefId", EmitDefaultValue = false)]
        public string MemberRefId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// double
        /// </summary>
        /// <value>double</value>
        [DataMember(Name = "points", EmitDefaultValue = false)]
        public decimal Points { get; set; }

        /// <summary>
        /// integer
        /// </summary>
        /// <value>integer</value>
        [DataMember(Name = "rank", EmitDefaultValue = false)]
        public int Rank { get; set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name = "groups", EmitDefaultValue = false)]
        public List<string> Groups { get; set; }

        /// <summary>
        /// Rewards
        /// </summary>
        /// <value>Rewards</value>
        [DataMember(Name = "rewards", EmitDefaultValue = false)]
        public List<Reward> Rewards { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntrantExport {\n");
            sb.Append("  MemberId: ").Append(MemberId).Append("\n");
            sb.Append("  MemberRefId: ").Append(MemberRefId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Rewards: ").Append(Rewards).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntrantExport);
        }

        /// <summary>
        /// Returns true if EntrantExport instances are equal
        /// </summary>
        /// <param name="input">Instance of EntrantExport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntrantExport input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MemberId == input.MemberId ||
                    (this.MemberId != null &&
                    this.MemberId.Equals(input.MemberId))
                ) && 
                (
                    this.MemberRefId == input.MemberRefId ||
                    (this.MemberRefId != null &&
                    this.MemberRefId.Equals(input.MemberRefId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Points == input.Points ||
                    this.Points.Equals(input.Points)
                ) && 
                (
                    this.Rank == input.Rank ||
                    this.Rank.Equals(input.Rank)
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    input.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.Rewards == input.Rewards ||
                    this.Rewards != null &&
                    input.Rewards != null &&
                    this.Rewards.SequenceEqual(input.Rewards)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MemberId != null)
                    hashCode = hashCode * 59 + this.MemberId.GetHashCode();
                if (this.MemberRefId != null)
                    hashCode = hashCode * 59 + this.MemberRefId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Points.GetHashCode();
                hashCode = hashCode * 59 + this.Rank.GetHashCode();
                if (this.Groups != null)
                    hashCode = hashCode * 59 + this.Groups.GetHashCode();
                if (this.Rewards != null)
                    hashCode = hashCode * 59 + this.Rewards.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
