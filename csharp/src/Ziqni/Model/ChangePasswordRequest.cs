/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// ChangePasswordRequest
    /// </summary>
    [DataContract(Name = "ChangePasswordRequest")]
    public partial class ChangePasswordRequest : IEquatable<ChangePasswordRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangePasswordRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChangePasswordRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChangePasswordRequest" /> class.
        /// </summary>
        /// <param name="email">The account username (required).</param>
        /// <param name="password">Current password (required).</param>
        /// <param name="newPassword">New password (required).</param>
        /// <param name="confirmPassword">Confirm password (required).</param>
        /// <param name="twoFactorAccessCode">Two factor access code if 2FA enabled.</param>
        public ChangePasswordRequest(string email = default(string), string password = default(string), string newPassword = default(string), string confirmPassword = default(string), string twoFactorAccessCode = default(string))
        {
            // to ensure "email" is required (not null)
            this.Email = email ?? throw new ArgumentNullException("email is a required property for ChangePasswordRequest and cannot be null");
            // to ensure "password" is required (not null)
            this.Password = password ?? throw new ArgumentNullException("password is a required property for ChangePasswordRequest and cannot be null");
            // to ensure "newPassword" is required (not null)
            this.NewPassword = newPassword ?? throw new ArgumentNullException("newPassword is a required property for ChangePasswordRequest and cannot be null");
            // to ensure "confirmPassword" is required (not null)
            this.ConfirmPassword = confirmPassword ?? throw new ArgumentNullException("confirmPassword is a required property for ChangePasswordRequest and cannot be null");
            this.TwoFactorAccessCode = twoFactorAccessCode;
        }

        /// <summary>
        /// The account username
        /// </summary>
        /// <value>The account username</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Current password
        /// </summary>
        /// <value>Current password</value>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// New password
        /// </summary>
        /// <value>New password</value>
        [DataMember(Name = "newPassword", IsRequired = true, EmitDefaultValue = false)]
        public string NewPassword { get; set; }

        /// <summary>
        /// Confirm password
        /// </summary>
        /// <value>Confirm password</value>
        [DataMember(Name = "confirmPassword", IsRequired = true, EmitDefaultValue = false)]
        public string ConfirmPassword { get; set; }

        /// <summary>
        /// Two factor access code if 2FA enabled
        /// </summary>
        /// <value>Two factor access code if 2FA enabled</value>
        [DataMember(Name = "twoFactorAccessCode", EmitDefaultValue = false)]
        public string TwoFactorAccessCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangePasswordRequest {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  NewPassword: ").Append(NewPassword).Append("\n");
            sb.Append("  ConfirmPassword: ").Append(ConfirmPassword).Append("\n");
            sb.Append("  TwoFactorAccessCode: ").Append(TwoFactorAccessCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChangePasswordRequest);
        }

        /// <summary>
        /// Returns true if ChangePasswordRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ChangePasswordRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangePasswordRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.NewPassword == input.NewPassword ||
                    (this.NewPassword != null &&
                    this.NewPassword.Equals(input.NewPassword))
                ) && 
                (
                    this.ConfirmPassword == input.ConfirmPassword ||
                    (this.ConfirmPassword != null &&
                    this.ConfirmPassword.Equals(input.ConfirmPassword))
                ) && 
                (
                    this.TwoFactorAccessCode == input.TwoFactorAccessCode ||
                    (this.TwoFactorAccessCode != null &&
                    this.TwoFactorAccessCode.Equals(input.TwoFactorAccessCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.NewPassword != null)
                    hashCode = hashCode * 59 + this.NewPassword.GetHashCode();
                if (this.ConfirmPassword != null)
                    hashCode = hashCode * 59 + this.ConfirmPassword.GetHashCode();
                if (this.TwoFactorAccessCode != null)
                    hashCode = hashCode * 59 + this.TwoFactorAccessCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
