/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// EntityGraph
    /// </summary>
    [DataContract]
    public partial class EntityGraph :  IEquatable<EntityGraph>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityGraph" /> class.
        /// </summary>
        /// <param name="edges">Pairs of nodes that specify a line joining these two nodes are said to form an edge.</param>
        /// <param name="nodesInCompletedState">Nodes in this graph that are in state greater than 35.</param>
        public EntityGraph(List<EntityGraphEdge> edges = default(List<EntityGraphEdge>), int nodesInCompletedState = default(int))
        {
            this.Edges = edges;
            this.NodesInCompletedState = nodesInCompletedState;
        }

        /// <summary>
        /// Pairs of nodes that specify a line joining these two nodes are said to form an edge
        /// </summary>
        /// <value>Pairs of nodes that specify a line joining these two nodes are said to form an edge</value>
        [DataMember(Name="edges", EmitDefaultValue=false)]
        public List<EntityGraphEdge> Edges { get; set; }

        /// <summary>
        /// Nodes in this graph that are in state greater than 35
        /// </summary>
        /// <value>Nodes in this graph that are in state greater than 35</value>
        [DataMember(Name="nodesInCompletedState", EmitDefaultValue=false)]
        public int NodesInCompletedState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntityGraph {\n");
            sb.Append("  Edges: ").Append(Edges).Append("\n");
            sb.Append("  NodesInCompletedState: ").Append(NodesInCompletedState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntityGraph);
        }

        /// <summary>
        /// Returns true if EntityGraph instances are equal
        /// </summary>
        /// <param name="input">Instance of EntityGraph to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityGraph input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Edges == input.Edges ||
                    this.Edges != null &&
                    input.Edges != null &&
                    this.Edges.SequenceEqual(input.Edges)
                ) && 
                (
                    this.NodesInCompletedState == input.NodesInCompletedState ||
                    (this.NodesInCompletedState != null &&
                    this.NodesInCompletedState.Equals(input.NodesInCompletedState))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Edges != null)
                    hashCode = hashCode * 59 + this.Edges.GetHashCode();
                if (this.NodesInCompletedState != null)
                    hashCode = hashCode * 59 + this.NodesInCompletedState.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
