/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// MemberTokenRequest
    /// </summary>
    [DataContract]
    public partial class MemberTokenRequest :  IEquatable<MemberTokenRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberTokenRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MemberTokenRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberTokenRequest" /> class.
        /// </summary>
        /// <param name="apiKey">The API key to use to generate this token. (required).</param>
        /// <param name="isReferenceId">Default is FALSE, if set to TRUE then the meberId will be assumed to be client provided reference id, if set to false then the memberId will be assumed to be a ZIQNI generated identifier..</param>
        /// <param name="origins">Allowed origins for the generated token. Leave empty to permit all origins, Alternative provide up to 3 allowed origin URIs like https://my-space.api.ziqni.app .</param>
        /// <param name="member">The identifier used to find the member information. if this value is set to \&quot;__PUBLIC__\&quot; and isReferenceId is set to \&quot;FALSE\&quot; then a genral use, non-member specific token will be issued (required).</param>
        /// <param name="expires">The number of minutes this token will be valid for. If left blank the token will only be valid for 30 minutes.</param>
        /// <param name="resource">This will be ziqni-gapi or similar (required).</param>
        /// <param name="disabledServices">A list of services to be disabled for this web token .</param>
        /// <param name="languageKey">The language code to use if none is provided in the member api requests .</param>
        /// <param name="currencyKey">The language key to use if none is provided in the member api requests.</param>
        /// <param name="timeZoneOffset">The time zone to use when returning date and time values.</param>
        public MemberTokenRequest(string apiKey = default(string), bool isReferenceId = default(bool), List<string> origins = default(List<string>), string member = default(string), int expires = default(int), string resource = default(string), List<string> disabledServices = default(List<string>), string languageKey = default(string), string currencyKey = default(string), int timeZoneOffset = default(int))
        {
            // to ensure "apiKey" is required (not null)
            if (apiKey == null)
            {
                throw new InvalidDataException("apiKey is a required property for MemberTokenRequest and cannot be null");
            }
            else
            {
                this.ApiKey = apiKey;
            }

            // to ensure "member" is required (not null)
            if (member == null)
            {
                throw new InvalidDataException("member is a required property for MemberTokenRequest and cannot be null");
            }
            else
            {
                this.Member = member;
            }

            // to ensure "resource" is required (not null)
            if (resource == null)
            {
                throw new InvalidDataException("resource is a required property for MemberTokenRequest and cannot be null");
            }
            else
            {
                this.Resource = resource;
            }

            this.IsReferenceId = isReferenceId;
            this.Origins = origins;
            this.Expires = expires;
            this.DisabledServices = disabledServices;
            this.LanguageKey = languageKey;
            this.CurrencyKey = currencyKey;
            this.TimeZoneOffset = timeZoneOffset;
        }

        /// <summary>
        /// The API key to use to generate this token.
        /// </summary>
        /// <value>The API key to use to generate this token.</value>
        [DataMember(Name="apiKey", EmitDefaultValue=true)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Default is FALSE, if set to TRUE then the meberId will be assumed to be client provided reference id, if set to false then the memberId will be assumed to be a ZIQNI generated identifier.
        /// </summary>
        /// <value>Default is FALSE, if set to TRUE then the meberId will be assumed to be client provided reference id, if set to false then the memberId will be assumed to be a ZIQNI generated identifier.</value>
        [DataMember(Name="isReferenceId", EmitDefaultValue=false)]
        public bool IsReferenceId { get; set; }

        /// <summary>
        /// Allowed origins for the generated token. Leave empty to permit all origins, Alternative provide up to 3 allowed origin URIs like https://my-space.api.ziqni.app 
        /// </summary>
        /// <value>Allowed origins for the generated token. Leave empty to permit all origins, Alternative provide up to 3 allowed origin URIs like https://my-space.api.ziqni.app </value>
        [DataMember(Name="origins", EmitDefaultValue=false)]
        public List<string> Origins { get; set; }

        /// <summary>
        /// The identifier used to find the member information. if this value is set to \&quot;__PUBLIC__\&quot; and isReferenceId is set to \&quot;FALSE\&quot; then a genral use, non-member specific token will be issued
        /// </summary>
        /// <value>The identifier used to find the member information. if this value is set to \&quot;__PUBLIC__\&quot; and isReferenceId is set to \&quot;FALSE\&quot; then a genral use, non-member specific token will be issued</value>
        [DataMember(Name="member", EmitDefaultValue=true)]
        public string Member { get; set; }

        /// <summary>
        /// The number of minutes this token will be valid for. If left blank the token will only be valid for 30 minutes
        /// </summary>
        /// <value>The number of minutes this token will be valid for. If left blank the token will only be valid for 30 minutes</value>
        [DataMember(Name="expires", EmitDefaultValue=false)]
        public int Expires { get; set; }

        /// <summary>
        /// This will be ziqni-gapi or similar
        /// </summary>
        /// <value>This will be ziqni-gapi or similar</value>
        [DataMember(Name="resource", EmitDefaultValue=true)]
        public string Resource { get; set; }

        /// <summary>
        /// A list of services to be disabled for this web token 
        /// </summary>
        /// <value>A list of services to be disabled for this web token </value>
        [DataMember(Name="disabledServices", EmitDefaultValue=false)]
        public List<string> DisabledServices { get; set; }

        /// <summary>
        /// The language code to use if none is provided in the member api requests 
        /// </summary>
        /// <value>The language code to use if none is provided in the member api requests </value>
        [DataMember(Name="languageKey", EmitDefaultValue=false)]
        public string LanguageKey { get; set; }

        /// <summary>
        /// The language key to use if none is provided in the member api requests
        /// </summary>
        /// <value>The language key to use if none is provided in the member api requests</value>
        [DataMember(Name="currencyKey", EmitDefaultValue=false)]
        public string CurrencyKey { get; set; }

        /// <summary>
        /// The time zone to use when returning date and time values
        /// </summary>
        /// <value>The time zone to use when returning date and time values</value>
        [DataMember(Name="timeZoneOffset", EmitDefaultValue=false)]
        public int TimeZoneOffset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MemberTokenRequest {\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  IsReferenceId: ").Append(IsReferenceId).Append("\n");
            sb.Append("  Origins: ").Append(Origins).Append("\n");
            sb.Append("  Member: ").Append(Member).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  DisabledServices: ").Append(DisabledServices).Append("\n");
            sb.Append("  LanguageKey: ").Append(LanguageKey).Append("\n");
            sb.Append("  CurrencyKey: ").Append(CurrencyKey).Append("\n");
            sb.Append("  TimeZoneOffset: ").Append(TimeZoneOffset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MemberTokenRequest);
        }

        /// <summary>
        /// Returns true if MemberTokenRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MemberTokenRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MemberTokenRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.IsReferenceId == input.IsReferenceId ||
                    (this.IsReferenceId != null &&
                    this.IsReferenceId.Equals(input.IsReferenceId))
                ) && 
                (
                    this.Origins == input.Origins ||
                    this.Origins != null &&
                    input.Origins != null &&
                    this.Origins.SequenceEqual(input.Origins)
                ) && 
                (
                    this.Member == input.Member ||
                    (this.Member != null &&
                    this.Member.Equals(input.Member))
                ) && 
                (
                    this.Expires == input.Expires ||
                    (this.Expires != null &&
                    this.Expires.Equals(input.Expires))
                ) && 
                (
                    this.Resource == input.Resource ||
                    (this.Resource != null &&
                    this.Resource.Equals(input.Resource))
                ) && 
                (
                    this.DisabledServices == input.DisabledServices ||
                    this.DisabledServices != null &&
                    input.DisabledServices != null &&
                    this.DisabledServices.SequenceEqual(input.DisabledServices)
                ) && 
                (
                    this.LanguageKey == input.LanguageKey ||
                    (this.LanguageKey != null &&
                    this.LanguageKey.Equals(input.LanguageKey))
                ) && 
                (
                    this.CurrencyKey == input.CurrencyKey ||
                    (this.CurrencyKey != null &&
                    this.CurrencyKey.Equals(input.CurrencyKey))
                ) && 
                (
                    this.TimeZoneOffset == input.TimeZoneOffset ||
                    (this.TimeZoneOffset != null &&
                    this.TimeZoneOffset.Equals(input.TimeZoneOffset))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.IsReferenceId != null)
                    hashCode = hashCode * 59 + this.IsReferenceId.GetHashCode();
                if (this.Origins != null)
                    hashCode = hashCode * 59 + this.Origins.GetHashCode();
                if (this.Member != null)
                    hashCode = hashCode * 59 + this.Member.GetHashCode();
                if (this.Expires != null)
                    hashCode = hashCode * 59 + this.Expires.GetHashCode();
                if (this.Resource != null)
                    hashCode = hashCode * 59 + this.Resource.GetHashCode();
                if (this.DisabledServices != null)
                    hashCode = hashCode * 59 + this.DisabledServices.GetHashCode();
                if (this.LanguageKey != null)
                    hashCode = hashCode * 59 + this.LanguageKey.GetHashCode();
                if (this.CurrencyKey != null)
                    hashCode = hashCode * 59 + this.CurrencyKey.GetHashCode();
                if (this.TimeZoneOffset != null)
                    hashCode = hashCode * 59 + this.TimeZoneOffset.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
