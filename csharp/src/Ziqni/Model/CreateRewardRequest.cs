/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// CreateRewardRequest
    /// </summary>
    [DataContract]
    public partial class CreateRewardRequest :  IEquatable<CreateRewardRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRewardRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateRewardRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRewardRequest" /> class.
        /// </summary>
        /// <param name="customFields">A list of custom field entries.</param>
        /// <param name="tags">A list of id&#39;s used to tag models.</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="name">The name of a reward (required).</param>
        /// <param name="description">The description of a Reward.</param>
        /// <param name="rewardRank">If used in the context of contest this will associate with the rank of the leaderboard (required).</param>
        /// <param name="rewardValue">Numerical value of the reward that will be issued based on the reward type (required).</param>
        /// <param name="icon">An Icon id that has been pre uploaded to the system to display for reward.</param>
        /// <param name="issueLimit">how many of thsese rewards are.</param>
        /// <param name="delay">Delay of issuing a reward in minutes (required).</param>
        /// <param name="pointInTime">ISO8601 timestamp for when a Reward is available until a specific point in time. All records are stored in UTC time zone.</param>
        /// <param name="period">Reward available for a period of time from issuing in minutes.</param>
        /// <param name="translations">translations.</param>
        /// <param name="addConstraints">Additional constraints.</param>
        /// <param name="rewardTypeId">A unique id of the Reward Type (required).</param>
        public CreateRewardRequest(Dictionary<string, Object> customFields = default(Dictionary<string, Object>), List<string> tags = default(List<string>), Dictionary<string, string> metadata = default(Dictionary<string, string>), string name = default(string), string description = default(string), string rewardRank = default(string), double rewardValue = default(double), string icon = default(string), int issueLimit = default(int), int delay = default(int), DateTime pointInTime = default(DateTime), int period = default(int), List<Translation> translations = default(List<Translation>), List<string> addConstraints = default(List<string>), string rewardTypeId = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for CreateRewardRequest and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "rewardRank" is required (not null)
            if (rewardRank == null)
            {
                throw new InvalidDataException("rewardRank is a required property for CreateRewardRequest and cannot be null");
            }
            else
            {
                this.RewardRank = rewardRank;
            }

            // to ensure "rewardValue" is required (not null)
            if (rewardValue == null)
            {
                throw new InvalidDataException("rewardValue is a required property for CreateRewardRequest and cannot be null");
            }
            else
            {
                this.RewardValue = rewardValue;
            }

            // to ensure "delay" is required (not null)
            if (delay == null)
            {
                throw new InvalidDataException("delay is a required property for CreateRewardRequest and cannot be null");
            }
            else
            {
                this.Delay = delay;
            }

            // to ensure "rewardTypeId" is required (not null)
            if (rewardTypeId == null)
            {
                throw new InvalidDataException("rewardTypeId is a required property for CreateRewardRequest and cannot be null");
            }
            else
            {
                this.RewardTypeId = rewardTypeId;
            }

            this.CustomFields = customFields;
            this.Tags = tags;
            this.Metadata = metadata;
            this.Description = description;
            this.Icon = icon;
            this.IssueLimit = issueLimit;
            this.PointInTime = pointInTime;
            this.Period = period;
            this.Translations = translations;
            this.AddConstraints = addConstraints;
        }

        /// <summary>
        /// A list of custom field entries
        /// </summary>
        /// <value>A list of custom field entries</value>
        [DataMember(Name="customFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> CustomFields { get; set; }

        /// <summary>
        /// A list of id&#39;s used to tag models
        /// </summary>
        /// <value>A list of id&#39;s used to tag models</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// The name of a reward
        /// </summary>
        /// <value>The name of a reward</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// The description of a Reward
        /// </summary>
        /// <value>The description of a Reward</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// If used in the context of contest this will associate with the rank of the leaderboard
        /// </summary>
        /// <value>If used in the context of contest this will associate with the rank of the leaderboard</value>
        [DataMember(Name="rewardRank", EmitDefaultValue=true)]
        public string RewardRank { get; set; }

        /// <summary>
        /// Numerical value of the reward that will be issued based on the reward type
        /// </summary>
        /// <value>Numerical value of the reward that will be issued based on the reward type</value>
        [DataMember(Name="rewardValue", EmitDefaultValue=true)]
        public double RewardValue { get; set; }

        /// <summary>
        /// An Icon id that has been pre uploaded to the system to display for reward
        /// </summary>
        /// <value>An Icon id that has been pre uploaded to the system to display for reward</value>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public string Icon { get; set; }

        /// <summary>
        /// how many of thsese rewards are
        /// </summary>
        /// <value>how many of thsese rewards are</value>
        [DataMember(Name="issueLimit", EmitDefaultValue=false)]
        public int IssueLimit { get; set; }

        /// <summary>
        /// Delay of issuing a reward in minutes
        /// </summary>
        /// <value>Delay of issuing a reward in minutes</value>
        [DataMember(Name="delay", EmitDefaultValue=true)]
        public int Delay { get; set; }

        /// <summary>
        /// ISO8601 timestamp for when a Reward is available until a specific point in time. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Reward is available until a specific point in time. All records are stored in UTC time zone</value>
        [DataMember(Name="pointInTime", EmitDefaultValue=false)]
        public DateTime PointInTime { get; set; }

        /// <summary>
        /// Reward available for a period of time from issuing in minutes
        /// </summary>
        /// <value>Reward available for a period of time from issuing in minutes</value>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public int Period { get; set; }

        /// <summary>
        /// Gets or Sets Translations
        /// </summary>
        [DataMember(Name="translations", EmitDefaultValue=false)]
        public List<Translation> Translations { get; set; }

        /// <summary>
        /// Additional constraints
        /// </summary>
        /// <value>Additional constraints</value>
        [DataMember(Name="addConstraints", EmitDefaultValue=false)]
        public List<string> AddConstraints { get; set; }

        /// <summary>
        /// A unique id of the Reward Type
        /// </summary>
        /// <value>A unique id of the Reward Type</value>
        [DataMember(Name="rewardTypeId", EmitDefaultValue=true)]
        public string RewardTypeId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateRewardRequest {\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RewardRank: ").Append(RewardRank).Append("\n");
            sb.Append("  RewardValue: ").Append(RewardValue).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  IssueLimit: ").Append(IssueLimit).Append("\n");
            sb.Append("  Delay: ").Append(Delay).Append("\n");
            sb.Append("  PointInTime: ").Append(PointInTime).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Translations: ").Append(Translations).Append("\n");
            sb.Append("  AddConstraints: ").Append(AddConstraints).Append("\n");
            sb.Append("  RewardTypeId: ").Append(RewardTypeId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateRewardRequest);
        }

        /// <summary>
        /// Returns true if CreateRewardRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateRewardRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateRewardRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomFields == input.CustomFields ||
                    this.CustomFields != null &&
                    input.CustomFields != null &&
                    this.CustomFields.SequenceEqual(input.CustomFields)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.RewardRank == input.RewardRank ||
                    (this.RewardRank != null &&
                    this.RewardRank.Equals(input.RewardRank))
                ) && 
                (
                    this.RewardValue == input.RewardValue ||
                    (this.RewardValue != null &&
                    this.RewardValue.Equals(input.RewardValue))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.IssueLimit == input.IssueLimit ||
                    (this.IssueLimit != null &&
                    this.IssueLimit.Equals(input.IssueLimit))
                ) && 
                (
                    this.Delay == input.Delay ||
                    (this.Delay != null &&
                    this.Delay.Equals(input.Delay))
                ) && 
                (
                    this.PointInTime == input.PointInTime ||
                    (this.PointInTime != null &&
                    this.PointInTime.Equals(input.PointInTime))
                ) && 
                (
                    this.Period == input.Period ||
                    (this.Period != null &&
                    this.Period.Equals(input.Period))
                ) && 
                (
                    this.Translations == input.Translations ||
                    this.Translations != null &&
                    input.Translations != null &&
                    this.Translations.SequenceEqual(input.Translations)
                ) && 
                (
                    this.AddConstraints == input.AddConstraints ||
                    this.AddConstraints != null &&
                    input.AddConstraints != null &&
                    this.AddConstraints.SequenceEqual(input.AddConstraints)
                ) && 
                (
                    this.RewardTypeId == input.RewardTypeId ||
                    (this.RewardTypeId != null &&
                    this.RewardTypeId.Equals(input.RewardTypeId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomFields != null)
                    hashCode = hashCode * 59 + this.CustomFields.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.RewardRank != null)
                    hashCode = hashCode * 59 + this.RewardRank.GetHashCode();
                if (this.RewardValue != null)
                    hashCode = hashCode * 59 + this.RewardValue.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.IssueLimit != null)
                    hashCode = hashCode * 59 + this.IssueLimit.GetHashCode();
                if (this.Delay != null)
                    hashCode = hashCode * 59 + this.Delay.GetHashCode();
                if (this.PointInTime != null)
                    hashCode = hashCode * 59 + this.PointInTime.GetHashCode();
                if (this.Period != null)
                    hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.Translations != null)
                    hashCode = hashCode * 59 + this.Translations.GetHashCode();
                if (this.AddConstraints != null)
                    hashCode = hashCode * 59 + this.AddConstraints.GetHashCode();
                if (this.RewardTypeId != null)
                    hashCode = hashCode * 59 + this.RewardTypeId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
