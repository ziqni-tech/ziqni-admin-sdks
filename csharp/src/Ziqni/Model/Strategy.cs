/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Ziqni
{
    /// <summary>
    /// Strategy
    /// </summary>
    [DataContract]
    public partial class Strategy :  IEquatable<Strategy>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets StrategyType
        /// </summary>
        [DataMember(Name="strategyType", EmitDefaultValue=true)]
        public StrategyType StrategyType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Strategy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Strategy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Strategy" /> class.
        /// </summary>
        /// <param name="strategyType">strategyType (required).</param>
        /// <param name="rankingStrategy">rankingStrategy (required).</param>
        /// <param name="scoringStrategy">scoringStrategy (required).</param>
        public Strategy(StrategyType strategyType = default(StrategyType), RankingStrategy rankingStrategy = default(RankingStrategy), ScoringStrategy scoringStrategy = default(ScoringStrategy))
        {
            // to ensure "strategyType" is required (not null)
            if (strategyType == null)
            {
                throw new InvalidDataException("strategyType is a required property for Strategy and cannot be null");
            }
            else
            {
                this.StrategyType = strategyType;
            }

            // to ensure "rankingStrategy" is required (not null)
            if (rankingStrategy == null)
            {
                throw new InvalidDataException("rankingStrategy is a required property for Strategy and cannot be null");
            }
            else
            {
                this.RankingStrategy = rankingStrategy;
            }

            // to ensure "scoringStrategy" is required (not null)
            if (scoringStrategy == null)
            {
                throw new InvalidDataException("scoringStrategy is a required property for Strategy and cannot be null");
            }
            else
            {
                this.ScoringStrategy = scoringStrategy;
            }

        }


        /// <summary>
        /// Gets or Sets RankingStrategy
        /// </summary>
        [DataMember(Name="rankingStrategy", EmitDefaultValue=true)]
        public RankingStrategy RankingStrategy { get; set; }

        /// <summary>
        /// Gets or Sets ScoringStrategy
        /// </summary>
        [DataMember(Name="scoringStrategy", EmitDefaultValue=true)]
        public ScoringStrategy ScoringStrategy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Strategy {\n");
            sb.Append("  StrategyType: ").Append(StrategyType).Append("\n");
            sb.Append("  RankingStrategy: ").Append(RankingStrategy).Append("\n");
            sb.Append("  ScoringStrategy: ").Append(ScoringStrategy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Strategy);
        }

        /// <summary>
        /// Returns true if Strategy instances are equal
        /// </summary>
        /// <param name="input">Instance of Strategy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Strategy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StrategyType == input.StrategyType ||
                    (this.StrategyType != null &&
                    this.StrategyType.Equals(input.StrategyType))
                ) && 
                (
                    this.RankingStrategy == input.RankingStrategy ||
                    (this.RankingStrategy != null &&
                    this.RankingStrategy.Equals(input.RankingStrategy))
                ) && 
                (
                    this.ScoringStrategy == input.ScoringStrategy ||
                    (this.ScoringStrategy != null &&
                    this.ScoringStrategy.Equals(input.ScoringStrategy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StrategyType != null)
                    hashCode = hashCode * 59 + this.StrategyType.GetHashCode();
                if (this.RankingStrategy != null)
                    hashCode = hashCode * 59 + this.RankingStrategy.GetHashCode();
                if (this.ScoringStrategy != null)
                    hashCode = hashCode * 59 + this.ScoringStrategy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
