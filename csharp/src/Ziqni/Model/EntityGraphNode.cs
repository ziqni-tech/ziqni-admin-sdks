/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// Mission is a specialised view of connected achievements. The first achievement is the container, every dependant achievement is a chained dependency
    /// </summary>
    [DataContract]
    public partial class EntityGraphNode :  IEquatable<EntityGraphNode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityGraphNode" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EntityGraphNode() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityGraphNode" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="optInStatus">optInStatus (required).</param>
        /// <param name="constraints">isCompleted, etc.</param>
        /// <param name="entityType">entityType.</param>
        /// <param name="entityId">entityId (required).</param>
        /// <param name="entityStatusCode">entityStatusCode.</param>
        /// <param name="entityStatus">entityStatus.</param>
        /// <param name="includes">includes.</param>
        public EntityGraphNode(string name = default(string), OptinStatus optInStatus = default(OptinStatus), List<string> constraints = default(List<string>), string entityType = default(string), string entityId = default(string), int entityStatusCode = default(int), string entityStatus = default(string), Dictionary<string, Object> includes = default(Dictionary<string, Object>))
        {
            // to ensure "optInStatus" is required (not null)
            if (optInStatus == null)
            {
                throw new InvalidDataException("optInStatus is a required property for EntityGraphNode and cannot be null");
            }
            else
            {
                this.OptInStatus = optInStatus;
            }

            // to ensure "entityId" is required (not null)
            if (entityId == null)
            {
                throw new InvalidDataException("entityId is a required property for EntityGraphNode and cannot be null");
            }
            else
            {
                this.EntityId = entityId;
            }

            this.Name = name;
            this.Constraints = constraints;
            this.EntityType = entityType;
            this.EntityStatusCode = entityStatusCode;
            this.EntityStatus = entityStatus;
            this.Includes = includes;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OptInStatus
        /// </summary>
        [DataMember(Name="optInStatus", EmitDefaultValue=true)]
        public OptinStatus OptInStatus { get; set; }

        /// <summary>
        /// isCompleted, etc
        /// </summary>
        /// <value>isCompleted, etc</value>
        [DataMember(Name="constraints", EmitDefaultValue=false)]
        public List<string> Constraints { get; set; }

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name="entityType", EmitDefaultValue=false)]
        public string EntityType { get; set; }

        /// <summary>
        /// Gets or Sets EntityId
        /// </summary>
        [DataMember(Name="entityId", EmitDefaultValue=true)]
        public string EntityId { get; set; }

        /// <summary>
        /// Gets or Sets EntityStatusCode
        /// </summary>
        [DataMember(Name="entityStatusCode", EmitDefaultValue=false)]
        public int EntityStatusCode { get; set; }

        /// <summary>
        /// Gets or Sets EntityStatus
        /// </summary>
        [DataMember(Name="entityStatus", EmitDefaultValue=false)]
        public string EntityStatus { get; set; }

        /// <summary>
        /// Gets or Sets Includes
        /// </summary>
        [DataMember(Name="includes", EmitDefaultValue=false)]
        public Dictionary<string, Object> Includes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntityGraphNode {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OptInStatus: ").Append(OptInStatus).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityStatusCode: ").Append(EntityStatusCode).Append("\n");
            sb.Append("  EntityStatus: ").Append(EntityStatus).Append("\n");
            sb.Append("  Includes: ").Append(Includes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntityGraphNode);
        }

        /// <summary>
        /// Returns true if EntityGraphNode instances are equal
        /// </summary>
        /// <param name="input">Instance of EntityGraphNode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityGraphNode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OptInStatus == input.OptInStatus ||
                    (this.OptInStatus != null &&
                    this.OptInStatus.Equals(input.OptInStatus))
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.EntityStatusCode == input.EntityStatusCode ||
                    (this.EntityStatusCode != null &&
                    this.EntityStatusCode.Equals(input.EntityStatusCode))
                ) && 
                (
                    this.EntityStatus == input.EntityStatus ||
                    (this.EntityStatus != null &&
                    this.EntityStatus.Equals(input.EntityStatus))
                ) && 
                (
                    this.Includes == input.Includes ||
                    this.Includes != null &&
                    input.Includes != null &&
                    this.Includes.SequenceEqual(input.Includes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OptInStatus != null)
                    hashCode = hashCode * 59 + this.OptInStatus.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.EntityStatusCode != null)
                    hashCode = hashCode * 59 + this.EntityStatusCode.GetHashCode();
                if (this.EntityStatus != null)
                    hashCode = hashCode * 59 + this.EntityStatus.GetHashCode();
                if (this.Includes != null)
                    hashCode = hashCode * 59 + this.Includes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
