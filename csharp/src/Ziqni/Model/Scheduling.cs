/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// Scheduling
    /// </summary>
    [DataContract]
    public partial class Scheduling :  IEquatable<Scheduling>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets ScheduleType
        /// </summary>
        [DataMember(Name="scheduleType", EmitDefaultValue=true)]
        public ScheduleType ScheduleType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Scheduling" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Scheduling() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Scheduling" /> class.
        /// </summary>
        /// <param name="scheduleType">scheduleType (required).</param>
        /// <param name="scheduleOccurrencesLimit">A value indicating how many times it will be issued (required).</param>
        /// <param name="every">every (required).</param>
        /// <param name="startDate">The start date and time of a schedule. ISO8601 timestamp (required).</param>
        /// <param name="endDate">The end date and time of a schedule. ISO8601 timestamp.</param>
        /// <param name="constraints">Additional constraints (required).</param>
        public Scheduling(ScheduleType scheduleType = default(ScheduleType), int scheduleOccurrencesLimit = default(int), List<int> every = default(List<int>), DateTime startDate = default(DateTime), DateTime endDate = default(DateTime), List<string> constraints = default(List<string>))
        {
            // to ensure "scheduleType" is required (not null)
            if (scheduleType == null)
            {
                throw new InvalidDataException("scheduleType is a required property for Scheduling and cannot be null");
            }
            else
            {
                this.ScheduleType = scheduleType;
            }

            // to ensure "scheduleOccurrencesLimit" is required (not null)
            if (scheduleOccurrencesLimit == null)
            {
                throw new InvalidDataException("scheduleOccurrencesLimit is a required property for Scheduling and cannot be null");
            }
            else
            {
                this.ScheduleOccurrencesLimit = scheduleOccurrencesLimit;
            }

            // to ensure "every" is required (not null)
            if (every == null)
            {
                throw new InvalidDataException("every is a required property for Scheduling and cannot be null");
            }
            else
            {
                this.Every = every;
            }

            // to ensure "startDate" is required (not null)
            if (startDate == null)
            {
                throw new InvalidDataException("startDate is a required property for Scheduling and cannot be null");
            }
            else
            {
                this.StartDate = startDate;
            }

            // to ensure "constraints" is required (not null)
            if (constraints == null)
            {
                throw new InvalidDataException("constraints is a required property for Scheduling and cannot be null");
            }
            else
            {
                this.Constraints = constraints;
            }

            this.EndDate = endDate;
        }


        /// <summary>
        /// A value indicating how many times it will be issued
        /// </summary>
        /// <value>A value indicating how many times it will be issued</value>
        [DataMember(Name="scheduleOccurrencesLimit", EmitDefaultValue=true)]
        public int ScheduleOccurrencesLimit { get; set; }

        /// <summary>
        /// Gets or Sets Every
        /// </summary>
        [DataMember(Name="every", EmitDefaultValue=true)]
        public List<int> Every { get; set; }

        /// <summary>
        /// The start date and time of a schedule. ISO8601 timestamp
        /// </summary>
        /// <value>The start date and time of a schedule. ISO8601 timestamp</value>
        [DataMember(Name="startDate", EmitDefaultValue=true)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// The end date and time of a schedule. ISO8601 timestamp
        /// </summary>
        /// <value>The end date and time of a schedule. ISO8601 timestamp</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Additional constraints
        /// </summary>
        /// <value>Additional constraints</value>
        [DataMember(Name="constraints", EmitDefaultValue=true)]
        public List<string> Constraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Scheduling {\n");
            sb.Append("  ScheduleType: ").Append(ScheduleType).Append("\n");
            sb.Append("  ScheduleOccurrencesLimit: ").Append(ScheduleOccurrencesLimit).Append("\n");
            sb.Append("  Every: ").Append(Every).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Scheduling);
        }

        /// <summary>
        /// Returns true if Scheduling instances are equal
        /// </summary>
        /// <param name="input">Instance of Scheduling to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Scheduling input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ScheduleType == input.ScheduleType ||
                    (this.ScheduleType != null &&
                    this.ScheduleType.Equals(input.ScheduleType))
                ) && 
                (
                    this.ScheduleOccurrencesLimit == input.ScheduleOccurrencesLimit ||
                    (this.ScheduleOccurrencesLimit != null &&
                    this.ScheduleOccurrencesLimit.Equals(input.ScheduleOccurrencesLimit))
                ) && 
                (
                    this.Every == input.Every ||
                    this.Every != null &&
                    input.Every != null &&
                    this.Every.SequenceEqual(input.Every)
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScheduleType != null)
                    hashCode = hashCode * 59 + this.ScheduleType.GetHashCode();
                if (this.ScheduleOccurrencesLimit != null)
                    hashCode = hashCode * 59 + this.ScheduleOccurrencesLimit.GetHashCode();
                if (this.Every != null)
                    hashCode = hashCode * 59 + this.Every.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
