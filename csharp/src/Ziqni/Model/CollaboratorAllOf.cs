/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// CollaboratorAllOf
    /// </summary>
    [DataContract]
    public partial class CollaboratorAllOf :  IEquatable<CollaboratorAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollaboratorAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CollaboratorAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CollaboratorAllOf" /> class.
        /// </summary>
        /// <param name="email">The email of the user to log in (required).</param>
        /// <param name="roles">The access role of an individual.</param>
        /// <param name="lastName">The Surname of an individual.</param>
        /// <param name="firstName">The Name of an individual.</param>
        /// <param name="availableRoles">availableRoles.</param>
        /// <param name="id">A unique system generated identifier.</param>
        /// <param name="spaceName">This is the space name which is linked to the account.</param>
        public CollaboratorAllOf(string email = default(string), List<string> roles = default(List<string>), string lastName = default(string), string firstName = default(string), CollaboratorRolesAvailable availableRoles = default(CollaboratorRolesAvailable), string id = default(string), string spaceName = default(string))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for CollaboratorAllOf and cannot be null");
            }
            else
            {
                this.Email = email;
            }

            this.Roles = roles;
            this.LastName = lastName;
            this.FirstName = firstName;
            this.AvailableRoles = availableRoles;
            this.Id = id;
            this.SpaceName = spaceName;
        }

        /// <summary>
        /// The email of the user to log in
        /// </summary>
        /// <value>The email of the user to log in</value>
        [DataMember(Name="email", EmitDefaultValue=true)]
        public string Email { get; set; }

        /// <summary>
        /// The access role of an individual
        /// </summary>
        /// <value>The access role of an individual</value>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public List<string> Roles { get; set; }

        /// <summary>
        /// The Surname of an individual
        /// </summary>
        /// <value>The Surname of an individual</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// The Name of an individual
        /// </summary>
        /// <value>The Name of an individual</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets AvailableRoles
        /// </summary>
        [DataMember(Name="availableRoles", EmitDefaultValue=false)]
        public CollaboratorRolesAvailable AvailableRoles { get; set; }

        /// <summary>
        /// A unique system generated identifier
        /// </summary>
        /// <value>A unique system generated identifier</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// This is the space name which is linked to the account
        /// </summary>
        /// <value>This is the space name which is linked to the account</value>
        [DataMember(Name="spaceName", EmitDefaultValue=false)]
        public string SpaceName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CollaboratorAllOf {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  AvailableRoles: ").Append(AvailableRoles).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SpaceName: ").Append(SpaceName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CollaboratorAllOf);
        }

        /// <summary>
        /// Returns true if CollaboratorAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of CollaboratorAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollaboratorAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Roles == input.Roles ||
                    this.Roles != null &&
                    input.Roles != null &&
                    this.Roles.SequenceEqual(input.Roles)
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.AvailableRoles == input.AvailableRoles ||
                    (this.AvailableRoles != null &&
                    this.AvailableRoles.Equals(input.AvailableRoles))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SpaceName == input.SpaceName ||
                    (this.SpaceName != null &&
                    this.SpaceName.Equals(input.SpaceName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Roles != null)
                    hashCode = hashCode * 59 + this.Roles.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.AvailableRoles != null)
                    hashCode = hashCode * 59 + this.AvailableRoles.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SpaceName != null)
                    hashCode = hashCode * 59 + this.SpaceName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
