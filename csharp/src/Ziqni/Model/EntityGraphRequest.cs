/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// EntityGraphRequest
    /// </summary>
    [DataContract]
    public partial class EntityGraphRequest :  IEquatable<EntityGraphRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Traversal
        /// </summary>
        [DataMember(Name="traversal", EmitDefaultValue=false)]
        public EntityGraphTraversal? Traversal { get; set; }
        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name="entityType", EmitDefaultValue=true)]
        public EntityType EntityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityGraphRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EntityGraphRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityGraphRequest" /> class.
        /// </summary>
        /// <param name="ids">The identifier of the node to create a connected graph for (required).</param>
        /// <param name="constraints">Specify the constraints that need to be applied to the filter..</param>
        /// <param name="traversal">traversal.</param>
        /// <param name="languageKey">The language codes can be found in the settings/transalations section of the back office.</param>
        /// <param name="includes">What objects to include from the entity in this response. For achievement the following can be included; description, memberTagsFilter, scheduling, and termsAndConditions.</param>
        /// <param name="entityType">entityType (required).</param>
        public EntityGraphRequest(List<string> ids = default(List<string>), List<string> constraints = default(List<string>), EntityGraphTraversal? traversal = default(EntityGraphTraversal?), string languageKey = default(string), List<string> includes = default(List<string>), EntityType entityType = default(EntityType))
        {
            // to ensure "ids" is required (not null)
            if (ids == null)
            {
                throw new InvalidDataException("ids is a required property for EntityGraphRequest and cannot be null");
            }
            else
            {
                this.Ids = ids;
            }

            // to ensure "entityType" is required (not null)
            if (entityType == null)
            {
                throw new InvalidDataException("entityType is a required property for EntityGraphRequest and cannot be null");
            }
            else
            {
                this.EntityType = entityType;
            }

            this.Constraints = constraints;
            this.Traversal = traversal;
            this.LanguageKey = languageKey;
            this.Includes = includes;
        }

        /// <summary>
        /// The identifier of the node to create a connected graph for
        /// </summary>
        /// <value>The identifier of the node to create a connected graph for</value>
        [DataMember(Name="ids", EmitDefaultValue=true)]
        public List<string> Ids { get; set; }

        /// <summary>
        /// Specify the constraints that need to be applied to the filter.
        /// </summary>
        /// <value>Specify the constraints that need to be applied to the filter.</value>
        [DataMember(Name="constraints", EmitDefaultValue=false)]
        public List<string> Constraints { get; set; }


        /// <summary>
        /// The language codes can be found in the settings/transalations section of the back office
        /// </summary>
        /// <value>The language codes can be found in the settings/transalations section of the back office</value>
        [DataMember(Name="languageKey", EmitDefaultValue=false)]
        public string LanguageKey { get; set; }

        /// <summary>
        /// What objects to include from the entity in this response. For achievement the following can be included; description, memberTagsFilter, scheduling, and termsAndConditions
        /// </summary>
        /// <value>What objects to include from the entity in this response. For achievement the following can be included; description, memberTagsFilter, scheduling, and termsAndConditions</value>
        [DataMember(Name="includes", EmitDefaultValue=false)]
        public List<string> Includes { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntityGraphRequest {\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  Traversal: ").Append(Traversal).Append("\n");
            sb.Append("  LanguageKey: ").Append(LanguageKey).Append("\n");
            sb.Append("  Includes: ").Append(Includes).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntityGraphRequest);
        }

        /// <summary>
        /// Returns true if EntityGraphRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EntityGraphRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityGraphRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    input.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && 
                (
                    this.Traversal == input.Traversal ||
                    (this.Traversal != null &&
                    this.Traversal.Equals(input.Traversal))
                ) && 
                (
                    this.LanguageKey == input.LanguageKey ||
                    (this.LanguageKey != null &&
                    this.LanguageKey.Equals(input.LanguageKey))
                ) && 
                (
                    this.Includes == input.Includes ||
                    this.Includes != null &&
                    input.Includes != null &&
                    this.Includes.SequenceEqual(input.Includes)
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ids != null)
                    hashCode = hashCode * 59 + this.Ids.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                if (this.Traversal != null)
                    hashCode = hashCode * 59 + this.Traversal.GetHashCode();
                if (this.LanguageKey != null)
                    hashCode = hashCode * 59 + this.LanguageKey.GetHashCode();
                if (this.Includes != null)
                    hashCode = hashCode * 59 + this.Includes.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
