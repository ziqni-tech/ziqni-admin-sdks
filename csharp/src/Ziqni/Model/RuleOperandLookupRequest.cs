/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// RuleOperandLookupRequest
    /// </summary>
    [DataContract(Name = "RuleOperandLookupRequest")]
    public partial class RuleOperandLookupRequest : IEquatable<RuleOperandLookupRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleOperandLookupRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RuleOperandLookupRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleOperandLookupRequest" /> class.
        /// </summary>
        /// <param name="context">The object context to search within (required).</param>
        /// <param name="searchText">The text to search, at least 3 characters are required..</param>
        /// <param name="id">The identifier to retrieve, if this is set search text will be ignored.</param>
        /// <param name="skip">How many response objects will be skipped for preview. Deafault is zero [0].</param>
        /// <param name="limit">How many response objects will be returned. Deafult is zero [0] and the maximum is fifty [50].</param>
        /// <param name="constraints">Additional constraints.</param>
        /// <param name="operand">The operand like \&quot;product.tags\&quot; or \&quot;member.tags\&quot; or \&quot;event.product\&quot; (required).</param>
        public RuleOperandLookupRequest(string context = default(string), string searchText = default(string), List<string> id = default(List<string>), int skip = default(int), int limit = default(int), List<string> constraints = default(List<string>), string operand = default(string))
        {
            // to ensure "context" is required (not null)
            this.Context = context ?? throw new ArgumentNullException("context is a required property for RuleOperandLookupRequest and cannot be null");
            // to ensure "operand" is required (not null)
            this.Operand = operand ?? throw new ArgumentNullException("operand is a required property for RuleOperandLookupRequest and cannot be null");
            this.SearchText = searchText;
            this.Id = id;
            this.Skip = skip;
            this.Limit = limit;
            this.Constraints = constraints;
        }

        /// <summary>
        /// The object context to search within
        /// </summary>
        /// <value>The object context to search within</value>
        [DataMember(Name = "context", IsRequired = true, EmitDefaultValue = false)]
        public string Context { get; set; }

        /// <summary>
        /// The text to search, at least 3 characters are required.
        /// </summary>
        /// <value>The text to search, at least 3 characters are required.</value>
        [DataMember(Name = "searchText", EmitDefaultValue = false)]
        public string SearchText { get; set; }

        /// <summary>
        /// The identifier to retrieve, if this is set search text will be ignored
        /// </summary>
        /// <value>The identifier to retrieve, if this is set search text will be ignored</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public List<string> Id { get; set; }

        /// <summary>
        /// How many response objects will be skipped for preview. Deafault is zero [0]
        /// </summary>
        /// <value>How many response objects will be skipped for preview. Deafault is zero [0]</value>
        [DataMember(Name = "skip", EmitDefaultValue = false)]
        public int Skip { get; set; }

        /// <summary>
        /// How many response objects will be returned. Deafult is zero [0] and the maximum is fifty [50]
        /// </summary>
        /// <value>How many response objects will be returned. Deafult is zero [0] and the maximum is fifty [50]</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Additional constraints
        /// </summary>
        /// <value>Additional constraints</value>
        [DataMember(Name = "constraints", EmitDefaultValue = false)]
        public List<string> Constraints { get; set; }

        /// <summary>
        /// The operand like \&quot;product.tags\&quot; or \&quot;member.tags\&quot; or \&quot;event.product\&quot;
        /// </summary>
        /// <value>The operand like \&quot;product.tags\&quot; or \&quot;member.tags\&quot; or \&quot;event.product\&quot;</value>
        [DataMember(Name = "operand", IsRequired = true, EmitDefaultValue = false)]
        public string Operand { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuleOperandLookupRequest {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  SearchText: ").Append(SearchText).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  Operand: ").Append(Operand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuleOperandLookupRequest);
        }

        /// <summary>
        /// Returns true if RuleOperandLookupRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RuleOperandLookupRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuleOperandLookupRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.SearchText == input.SearchText ||
                    (this.SearchText != null &&
                    this.SearchText.Equals(input.SearchText))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id != null &&
                    input.Id != null &&
                    this.Id.SequenceEqual(input.Id)
                ) && 
                (
                    this.Skip == input.Skip ||
                    this.Skip.Equals(input.Skip)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && 
                (
                    this.Operand == input.Operand ||
                    (this.Operand != null &&
                    this.Operand.Equals(input.Operand))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                if (this.SearchText != null)
                    hashCode = hashCode * 59 + this.SearchText.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.Skip.GetHashCode();
                hashCode = hashCode * 59 + this.Limit.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                if (this.Operand != null)
                    hashCode = hashCode * 59 + this.Operand.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
