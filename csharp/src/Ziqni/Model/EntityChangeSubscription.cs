/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// Subscribes a client to receive out-of-band data
    /// </summary>
    [DataContract(Name = "EntityChangeSubscription")]
    public partial class EntityChangeSubscription : IEquatable<EntityChangeSubscription>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityChangeSubscription" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EntityChangeSubscription() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EntityChangeSubscription" /> class.
        /// </summary>
        /// <param name="entityType">entityType (required).</param>
        /// <param name="subscriptionId">subscriptionId (required).</param>
        /// <param name="constraints">Constraints of this subscription like gauranteedDelivery.</param>
        /// <param name="topic">/user/queue/callbacks.</param>
        public EntityChangeSubscription(string entityType = default(string), string subscriptionId = default(string), List<string> constraints = default(List<string>), string topic = default(string))
        {
            // to ensure "entityType" is required (not null)
            this.EntityType = entityType ?? throw new ArgumentNullException("entityType is a required property for EntityChangeSubscription and cannot be null");
            // to ensure "subscriptionId" is required (not null)
            this.SubscriptionId = subscriptionId ?? throw new ArgumentNullException("subscriptionId is a required property for EntityChangeSubscription and cannot be null");
            this.Constraints = constraints;
            this.Topic = topic;
        }

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name = "entityType", IsRequired = true, EmitDefaultValue = false)]
        public string EntityType { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionId
        /// </summary>
        [DataMember(Name = "subscriptionId", IsRequired = true, EmitDefaultValue = false)]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// Constraints of this subscription like gauranteedDelivery
        /// </summary>
        /// <value>Constraints of this subscription like gauranteedDelivery</value>
        [DataMember(Name = "constraints", EmitDefaultValue = false)]
        public List<string> Constraints { get; set; }

        /// <summary>
        /// /user/queue/callbacks
        /// </summary>
        /// <value>/user/queue/callbacks</value>
        [DataMember(Name = "topic", EmitDefaultValue = false)]
        public string Topic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntityChangeSubscription {\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EntityChangeSubscription);
        }

        /// <summary>
        /// Returns true if EntityChangeSubscription instances are equal
        /// </summary>
        /// <param name="input">Instance of EntityChangeSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntityChangeSubscription input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.SubscriptionId == input.SubscriptionId ||
                    (this.SubscriptionId != null &&
                    this.SubscriptionId.Equals(input.SubscriptionId))
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && 
                (
                    this.Topic == input.Topic ||
                    (this.Topic != null &&
                    this.Topic.Equals(input.Topic))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.SubscriptionId != null)
                    hashCode = hashCode * 59 + this.SubscriptionId.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                if (this.Topic != null)
                    hashCode = hashCode * 59 + this.Topic.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
