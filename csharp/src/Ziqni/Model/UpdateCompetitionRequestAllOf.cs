/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// UpdateCompetitionRequestAllOf
    /// </summary>
    [DataContract]
    public partial class UpdateCompetitionRequestAllOf :  IEquatable<UpdateCompetitionRequestAllOf>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets CompetitionType
        /// </summary>
        [DataMember(Name="competitionType", EmitDefaultValue=false)]
        public CompetitionType? CompetitionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCompetitionRequestAllOf" /> class.
        /// </summary>
        /// <param name="competitionType">competitionType.</param>
        /// <param name="numberOfRounds">Number of rounds to be played in a competition.</param>
        /// <param name="numberOfGroupStages">Number of group stages.</param>
        /// <param name="name">A name or a name of a competition. Can be translated.</param>
        /// <param name="description">Description of the competition. Can be translated.</param>
        /// <param name="termsAndConditions">Terms and conditions of a competition. Can be translated.</param>
        /// <param name="entrantMemberType">entrantMemberType.</param>
        /// <param name="maxNumberOfEntrants">Maximum number of partiipants allowed in a competition.</param>
        /// <param name="minNumberOfEntrants">Maximum number of partiipants allowed in a competition.</param>
        /// <param name="scheduledStartDate">ISO8601 timestamp for when a Competition should start. All records are stored in UTC time zone.</param>
        /// <param name="scheduledEndDate">ISO8601 timestamp for when a Competition should end. All records are stored in UTC time zone.</param>
        /// <param name="constraints">Additional constraints.</param>
        /// <param name="addConstraints">Additional constraints.</param>
        /// <param name="removeConstraints">Additional constraints.</param>
        /// <param name="productIds">productIds.</param>
        /// <param name="createContests">createContests.</param>
        /// <param name="updateContests">updateContests.</param>
        /// <param name="entrantMemberTagsFilter">entrantMemberTagsFilter.</param>
        /// <param name="productTagsFilter">productTagsFilter.</param>
        /// <param name="icon">Link to the icon.</param>
        /// <param name="banner">Link to the banner.</param>
        /// <param name="bannerLowResolution">Link to the bannerLowResolution.</param>
        /// <param name="bannerHighResolution">Link to the bannerHighResolution.</param>
        public UpdateCompetitionRequestAllOf(CompetitionType? competitionType = default(CompetitionType?), int numberOfRounds = default(int), int numberOfGroupStages = default(int), string name = default(string), string description = default(string), string termsAndConditions = default(string), string entrantMemberType = default(string), int maxNumberOfEntrants = default(int), int minNumberOfEntrants = default(int), DateTime scheduledStartDate = default(DateTime), DateTime scheduledEndDate = default(DateTime), List<string> constraints = default(List<string>), List<string> addConstraints = default(List<string>), List<string> removeConstraints = default(List<string>), List<string> productIds = default(List<string>), CreateContestForCompetitionRequest createContests = default(CreateContestForCompetitionRequest), UpdateContestRequest updateContests = default(UpdateContestRequest), DependantOn entrantMemberTagsFilter = default(DependantOn), DependantOn productTagsFilter = default(DependantOn), string icon = default(string), string banner = default(string), string bannerLowResolution = default(string), string bannerHighResolution = default(string))
        {
            this.CompetitionType = competitionType;
            this.NumberOfRounds = numberOfRounds;
            this.NumberOfGroupStages = numberOfGroupStages;
            this.Name = name;
            this.Description = description;
            this.TermsAndConditions = termsAndConditions;
            this.EntrantMemberType = entrantMemberType;
            this.MaxNumberOfEntrants = maxNumberOfEntrants;
            this.MinNumberOfEntrants = minNumberOfEntrants;
            this.ScheduledStartDate = scheduledStartDate;
            this.ScheduledEndDate = scheduledEndDate;
            this.Constraints = constraints;
            this.AddConstraints = addConstraints;
            this.RemoveConstraints = removeConstraints;
            this.ProductIds = productIds;
            this.CreateContests = createContests;
            this.UpdateContests = updateContests;
            this.EntrantMemberTagsFilter = entrantMemberTagsFilter;
            this.ProductTagsFilter = productTagsFilter;
            this.Icon = icon;
            this.Banner = banner;
            this.BannerLowResolution = bannerLowResolution;
            this.BannerHighResolution = bannerHighResolution;
        }


        /// <summary>
        /// Number of rounds to be played in a competition
        /// </summary>
        /// <value>Number of rounds to be played in a competition</value>
        [DataMember(Name="numberOfRounds", EmitDefaultValue=false)]
        public int NumberOfRounds { get; set; }

        /// <summary>
        /// Number of group stages
        /// </summary>
        /// <value>Number of group stages</value>
        [DataMember(Name="numberOfGroupStages", EmitDefaultValue=false)]
        public int NumberOfGroupStages { get; set; }

        /// <summary>
        /// A name or a name of a competition. Can be translated
        /// </summary>
        /// <value>A name or a name of a competition. Can be translated</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the competition. Can be translated
        /// </summary>
        /// <value>Description of the competition. Can be translated</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Terms and conditions of a competition. Can be translated
        /// </summary>
        /// <value>Terms and conditions of a competition. Can be translated</value>
        [DataMember(Name="termsAndConditions", EmitDefaultValue=false)]
        public string TermsAndConditions { get; set; }

        /// <summary>
        /// Gets or Sets EntrantMemberType
        /// </summary>
        [DataMember(Name="entrantMemberType", EmitDefaultValue=false)]
        public string EntrantMemberType { get; set; }

        /// <summary>
        /// Maximum number of partiipants allowed in a competition
        /// </summary>
        /// <value>Maximum number of partiipants allowed in a competition</value>
        [DataMember(Name="maxNumberOfEntrants", EmitDefaultValue=false)]
        public int MaxNumberOfEntrants { get; set; }

        /// <summary>
        /// Maximum number of partiipants allowed in a competition
        /// </summary>
        /// <value>Maximum number of partiipants allowed in a competition</value>
        [DataMember(Name="minNumberOfEntrants", EmitDefaultValue=false)]
        public int MinNumberOfEntrants { get; set; }

        /// <summary>
        /// ISO8601 timestamp for when a Competition should start. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Competition should start. All records are stored in UTC time zone</value>
        [DataMember(Name="scheduledStartDate", EmitDefaultValue=false)]
        public DateTime ScheduledStartDate { get; set; }

        /// <summary>
        /// ISO8601 timestamp for when a Competition should end. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Competition should end. All records are stored in UTC time zone</value>
        [DataMember(Name="scheduledEndDate", EmitDefaultValue=false)]
        public DateTime ScheduledEndDate { get; set; }

        /// <summary>
        /// Additional constraints
        /// </summary>
        /// <value>Additional constraints</value>
        [DataMember(Name="constraints", EmitDefaultValue=false)]
        [Obsolete]
        public List<string> Constraints { get; set; }

        /// <summary>
        /// Additional constraints
        /// </summary>
        /// <value>Additional constraints</value>
        [DataMember(Name="addConstraints", EmitDefaultValue=false)]
        public List<string> AddConstraints { get; set; }

        /// <summary>
        /// Additional constraints
        /// </summary>
        /// <value>Additional constraints</value>
        [DataMember(Name="removeConstraints", EmitDefaultValue=false)]
        public List<string> RemoveConstraints { get; set; }

        /// <summary>
        /// Gets or Sets ProductIds
        /// </summary>
        [DataMember(Name="productIds", EmitDefaultValue=false)]
        public List<string> ProductIds { get; set; }

        /// <summary>
        /// Gets or Sets CreateContests
        /// </summary>
        [DataMember(Name="createContests", EmitDefaultValue=false)]
        public CreateContestForCompetitionRequest CreateContests { get; set; }

        /// <summary>
        /// Gets or Sets UpdateContests
        /// </summary>
        [DataMember(Name="updateContests", EmitDefaultValue=false)]
        public UpdateContestRequest UpdateContests { get; set; }

        /// <summary>
        /// Gets or Sets EntrantMemberTagsFilter
        /// </summary>
        [DataMember(Name="entrantMemberTagsFilter", EmitDefaultValue=false)]
        public DependantOn EntrantMemberTagsFilter { get; set; }

        /// <summary>
        /// Gets or Sets ProductTagsFilter
        /// </summary>
        [DataMember(Name="productTagsFilter", EmitDefaultValue=false)]
        public DependantOn ProductTagsFilter { get; set; }

        /// <summary>
        /// Link to the icon
        /// </summary>
        /// <value>Link to the icon</value>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public string Icon { get; set; }

        /// <summary>
        /// Link to the banner
        /// </summary>
        /// <value>Link to the banner</value>
        [DataMember(Name="banner", EmitDefaultValue=false)]
        public string Banner { get; set; }

        /// <summary>
        /// Link to the bannerLowResolution
        /// </summary>
        /// <value>Link to the bannerLowResolution</value>
        [DataMember(Name="bannerLowResolution", EmitDefaultValue=false)]
        public string BannerLowResolution { get; set; }

        /// <summary>
        /// Link to the bannerHighResolution
        /// </summary>
        /// <value>Link to the bannerHighResolution</value>
        [DataMember(Name="bannerHighResolution", EmitDefaultValue=false)]
        public string BannerHighResolution { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateCompetitionRequestAllOf {\n");
            sb.Append("  CompetitionType: ").Append(CompetitionType).Append("\n");
            sb.Append("  NumberOfRounds: ").Append(NumberOfRounds).Append("\n");
            sb.Append("  NumberOfGroupStages: ").Append(NumberOfGroupStages).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TermsAndConditions: ").Append(TermsAndConditions).Append("\n");
            sb.Append("  EntrantMemberType: ").Append(EntrantMemberType).Append("\n");
            sb.Append("  MaxNumberOfEntrants: ").Append(MaxNumberOfEntrants).Append("\n");
            sb.Append("  MinNumberOfEntrants: ").Append(MinNumberOfEntrants).Append("\n");
            sb.Append("  ScheduledStartDate: ").Append(ScheduledStartDate).Append("\n");
            sb.Append("  ScheduledEndDate: ").Append(ScheduledEndDate).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  AddConstraints: ").Append(AddConstraints).Append("\n");
            sb.Append("  RemoveConstraints: ").Append(RemoveConstraints).Append("\n");
            sb.Append("  ProductIds: ").Append(ProductIds).Append("\n");
            sb.Append("  CreateContests: ").Append(CreateContests).Append("\n");
            sb.Append("  UpdateContests: ").Append(UpdateContests).Append("\n");
            sb.Append("  EntrantMemberTagsFilter: ").Append(EntrantMemberTagsFilter).Append("\n");
            sb.Append("  ProductTagsFilter: ").Append(ProductTagsFilter).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Banner: ").Append(Banner).Append("\n");
            sb.Append("  BannerLowResolution: ").Append(BannerLowResolution).Append("\n");
            sb.Append("  BannerHighResolution: ").Append(BannerHighResolution).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateCompetitionRequestAllOf);
        }

        /// <summary>
        /// Returns true if UpdateCompetitionRequestAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateCompetitionRequestAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateCompetitionRequestAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CompetitionType == input.CompetitionType ||
                    (this.CompetitionType != null &&
                    this.CompetitionType.Equals(input.CompetitionType))
                ) && 
                (
                    this.NumberOfRounds == input.NumberOfRounds ||
                    (this.NumberOfRounds != null &&
                    this.NumberOfRounds.Equals(input.NumberOfRounds))
                ) && 
                (
                    this.NumberOfGroupStages == input.NumberOfGroupStages ||
                    (this.NumberOfGroupStages != null &&
                    this.NumberOfGroupStages.Equals(input.NumberOfGroupStages))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TermsAndConditions == input.TermsAndConditions ||
                    (this.TermsAndConditions != null &&
                    this.TermsAndConditions.Equals(input.TermsAndConditions))
                ) && 
                (
                    this.EntrantMemberType == input.EntrantMemberType ||
                    (this.EntrantMemberType != null &&
                    this.EntrantMemberType.Equals(input.EntrantMemberType))
                ) && 
                (
                    this.MaxNumberOfEntrants == input.MaxNumberOfEntrants ||
                    (this.MaxNumberOfEntrants != null &&
                    this.MaxNumberOfEntrants.Equals(input.MaxNumberOfEntrants))
                ) && 
                (
                    this.MinNumberOfEntrants == input.MinNumberOfEntrants ||
                    (this.MinNumberOfEntrants != null &&
                    this.MinNumberOfEntrants.Equals(input.MinNumberOfEntrants))
                ) && 
                (
                    this.ScheduledStartDate == input.ScheduledStartDate ||
                    (this.ScheduledStartDate != null &&
                    this.ScheduledStartDate.Equals(input.ScheduledStartDate))
                ) && 
                (
                    this.ScheduledEndDate == input.ScheduledEndDate ||
                    (this.ScheduledEndDate != null &&
                    this.ScheduledEndDate.Equals(input.ScheduledEndDate))
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && 
                (
                    this.AddConstraints == input.AddConstraints ||
                    this.AddConstraints != null &&
                    input.AddConstraints != null &&
                    this.AddConstraints.SequenceEqual(input.AddConstraints)
                ) && 
                (
                    this.RemoveConstraints == input.RemoveConstraints ||
                    this.RemoveConstraints != null &&
                    input.RemoveConstraints != null &&
                    this.RemoveConstraints.SequenceEqual(input.RemoveConstraints)
                ) && 
                (
                    this.ProductIds == input.ProductIds ||
                    this.ProductIds != null &&
                    input.ProductIds != null &&
                    this.ProductIds.SequenceEqual(input.ProductIds)
                ) && 
                (
                    this.CreateContests == input.CreateContests ||
                    (this.CreateContests != null &&
                    this.CreateContests.Equals(input.CreateContests))
                ) && 
                (
                    this.UpdateContests == input.UpdateContests ||
                    (this.UpdateContests != null &&
                    this.UpdateContests.Equals(input.UpdateContests))
                ) && 
                (
                    this.EntrantMemberTagsFilter == input.EntrantMemberTagsFilter ||
                    (this.EntrantMemberTagsFilter != null &&
                    this.EntrantMemberTagsFilter.Equals(input.EntrantMemberTagsFilter))
                ) && 
                (
                    this.ProductTagsFilter == input.ProductTagsFilter ||
                    (this.ProductTagsFilter != null &&
                    this.ProductTagsFilter.Equals(input.ProductTagsFilter))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.Banner == input.Banner ||
                    (this.Banner != null &&
                    this.Banner.Equals(input.Banner))
                ) && 
                (
                    this.BannerLowResolution == input.BannerLowResolution ||
                    (this.BannerLowResolution != null &&
                    this.BannerLowResolution.Equals(input.BannerLowResolution))
                ) && 
                (
                    this.BannerHighResolution == input.BannerHighResolution ||
                    (this.BannerHighResolution != null &&
                    this.BannerHighResolution.Equals(input.BannerHighResolution))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompetitionType != null)
                    hashCode = hashCode * 59 + this.CompetitionType.GetHashCode();
                if (this.NumberOfRounds != null)
                    hashCode = hashCode * 59 + this.NumberOfRounds.GetHashCode();
                if (this.NumberOfGroupStages != null)
                    hashCode = hashCode * 59 + this.NumberOfGroupStages.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TermsAndConditions != null)
                    hashCode = hashCode * 59 + this.TermsAndConditions.GetHashCode();
                if (this.EntrantMemberType != null)
                    hashCode = hashCode * 59 + this.EntrantMemberType.GetHashCode();
                if (this.MaxNumberOfEntrants != null)
                    hashCode = hashCode * 59 + this.MaxNumberOfEntrants.GetHashCode();
                if (this.MinNumberOfEntrants != null)
                    hashCode = hashCode * 59 + this.MinNumberOfEntrants.GetHashCode();
                if (this.ScheduledStartDate != null)
                    hashCode = hashCode * 59 + this.ScheduledStartDate.GetHashCode();
                if (this.ScheduledEndDate != null)
                    hashCode = hashCode * 59 + this.ScheduledEndDate.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                if (this.AddConstraints != null)
                    hashCode = hashCode * 59 + this.AddConstraints.GetHashCode();
                if (this.RemoveConstraints != null)
                    hashCode = hashCode * 59 + this.RemoveConstraints.GetHashCode();
                if (this.ProductIds != null)
                    hashCode = hashCode * 59 + this.ProductIds.GetHashCode();
                if (this.CreateContests != null)
                    hashCode = hashCode * 59 + this.CreateContests.GetHashCode();
                if (this.UpdateContests != null)
                    hashCode = hashCode * 59 + this.UpdateContests.GetHashCode();
                if (this.EntrantMemberTagsFilter != null)
                    hashCode = hashCode * 59 + this.EntrantMemberTagsFilter.GetHashCode();
                if (this.ProductTagsFilter != null)
                    hashCode = hashCode * 59 + this.ProductTagsFilter.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.Banner != null)
                    hashCode = hashCode * 59 + this.Banner.GetHashCode();
                if (this.BannerLowResolution != null)
                    hashCode = hashCode * 59 + this.BannerLowResolution.GetHashCode();
                if (this.BannerHighResolution != null)
                    hashCode = hashCode * 59 + this.BannerHighResolution.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
