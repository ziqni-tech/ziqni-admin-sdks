/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// MemberAchievementCountAllOf
    /// </summary>
    [DataContract]
    public partial class MemberAchievementCountAllOf :  IEquatable<MemberAchievementCountAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberAchievementCountAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MemberAchievementCountAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberAchievementCountAllOf" /> class.
        /// </summary>
        /// <param name="name">A the name of the member (required).</param>
        /// <param name="memberId">A unique identifier of a Member (required).</param>
        /// <param name="memberRefId">The reference to this member in your system (required).</param>
        public MemberAchievementCountAllOf(string name = default(string), string memberId = default(string), string memberRefId = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for MemberAchievementCountAllOf and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "memberId" is required (not null)
            if (memberId == null)
            {
                throw new InvalidDataException("memberId is a required property for MemberAchievementCountAllOf and cannot be null");
            }
            else
            {
                this.MemberId = memberId;
            }

            // to ensure "memberRefId" is required (not null)
            if (memberRefId == null)
            {
                throw new InvalidDataException("memberRefId is a required property for MemberAchievementCountAllOf and cannot be null");
            }
            else
            {
                this.MemberRefId = memberRefId;
            }

        }

        /// <summary>
        /// A the name of the member
        /// </summary>
        /// <value>A the name of the member</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// A unique identifier of a Member
        /// </summary>
        /// <value>A unique identifier of a Member</value>
        [DataMember(Name="memberId", EmitDefaultValue=true)]
        public string MemberId { get; set; }

        /// <summary>
        /// The reference to this member in your system
        /// </summary>
        /// <value>The reference to this member in your system</value>
        [DataMember(Name="memberRefId", EmitDefaultValue=true)]
        public string MemberRefId { get; set; }

        /// <summary>
        /// ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone</value>
        [DataMember(Name="latestIssuedTimestamp", EmitDefaultValue=true)]
        public DateTime LatestIssuedTimestamp { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MemberAchievementCountAllOf {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MemberId: ").Append(MemberId).Append("\n");
            sb.Append("  MemberRefId: ").Append(MemberRefId).Append("\n");
            sb.Append("  LatestIssuedTimestamp: ").Append(LatestIssuedTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MemberAchievementCountAllOf);
        }

        /// <summary>
        /// Returns true if MemberAchievementCountAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of MemberAchievementCountAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MemberAchievementCountAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MemberId == input.MemberId ||
                    (this.MemberId != null &&
                    this.MemberId.Equals(input.MemberId))
                ) && 
                (
                    this.MemberRefId == input.MemberRefId ||
                    (this.MemberRefId != null &&
                    this.MemberRefId.Equals(input.MemberRefId))
                ) && 
                (
                    this.LatestIssuedTimestamp == input.LatestIssuedTimestamp ||
                    (this.LatestIssuedTimestamp != null &&
                    this.LatestIssuedTimestamp.Equals(input.LatestIssuedTimestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.MemberId != null)
                    hashCode = hashCode * 59 + this.MemberId.GetHashCode();
                if (this.MemberRefId != null)
                    hashCode = hashCode * 59 + this.MemberRefId.GetHashCode();
                if (this.LatestIssuedTimestamp != null)
                    hashCode = hashCode * 59 + this.LatestIssuedTimestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
