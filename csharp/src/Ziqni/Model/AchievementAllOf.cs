/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// AchievementAllOf
    /// </summary>
    [DataContract(Name = "Achievement_allOf")]
    public partial class AchievementAllOf : IEquatable<AchievementAllOf>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public AchievementStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AchievementAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AchievementAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AchievementAllOf" /> class.
        /// </summary>
        /// <param name="name">A name for the Achievement. Can be translated (required).</param>
        /// <param name="description">A name for the Achievement. Can be translated.</param>
        /// <param name="termsAndConditions">Terms and conditions of an achievement. Can be translated.</param>
        /// <param name="icon">An Icon id that has been pre uploaded to the system to display for Achievement (required).</param>
        /// <param name="banner">A banner id that has been pre uploaded to the system to display for Achievement.</param>
        /// <param name="bannerLowResolution">A bannerLowResolution id that has been pre uploaded to the system to display for Achievement.</param>
        /// <param name="bannerHighResolution">A bannerHighResolution id that has been pre uploaded to the system to display for Achievement.</param>
        /// <param name="scheduling">scheduling.</param>
        /// <param name="maxNumberOfIssues">Maximum number of issued achievements.</param>
        /// <param name="status">status.</param>
        /// <param name="constraints">Additional constraints, if set means true (required).</param>
        /// <param name="achievementDependencies">achievementDependencies.</param>
        /// <param name="memberTagsFilter">memberTagsFilter.</param>
        /// <param name="products">products.</param>
        /// <param name="productTagsFilter">productTagsFilter.</param>
        /// <param name="strategies">strategies.</param>
        public AchievementAllOf(string name = default(string), string description = default(string), string termsAndConditions = default(string), string icon = default(string), string banner = default(string), string bannerLowResolution = default(string), string bannerHighResolution = default(string), Scheduling scheduling = default(Scheduling), int maxNumberOfIssues = default(int), AchievementStatus? status = default(AchievementStatus?), List<string> constraints = default(List<string>), DependantOn achievementDependencies = default(DependantOn), DependantOn memberTagsFilter = default(DependantOn), List<ProductReduced> products = default(List<ProductReduced>), DependantOn productTagsFilter = default(DependantOn), AchievementStrategies strategies = default(AchievementStrategies))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for AchievementAllOf and cannot be null");
            // to ensure "icon" is required (not null)
            this.Icon = icon ?? throw new ArgumentNullException("icon is a required property for AchievementAllOf and cannot be null");
            // to ensure "constraints" is required (not null)
            this.Constraints = constraints ?? throw new ArgumentNullException("constraints is a required property for AchievementAllOf and cannot be null");
            this.Description = description;
            this.TermsAndConditions = termsAndConditions;
            this.Banner = banner;
            this.BannerLowResolution = bannerLowResolution;
            this.BannerHighResolution = bannerHighResolution;
            this.Scheduling = scheduling;
            this.MaxNumberOfIssues = maxNumberOfIssues;
            this.Status = status;
            this.AchievementDependencies = achievementDependencies;
            this.MemberTagsFilter = memberTagsFilter;
            this.Products = products;
            this.ProductTagsFilter = productTagsFilter;
            this.Strategies = strategies;
        }

        /// <summary>
        /// A name for the Achievement. Can be translated
        /// </summary>
        /// <value>A name for the Achievement. Can be translated</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// A name for the Achievement. Can be translated
        /// </summary>
        /// <value>A name for the Achievement. Can be translated</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Terms and conditions of an achievement. Can be translated
        /// </summary>
        /// <value>Terms and conditions of an achievement. Can be translated</value>
        [DataMember(Name = "termsAndConditions", EmitDefaultValue = false)]
        public string TermsAndConditions { get; set; }

        /// <summary>
        /// An Icon id that has been pre uploaded to the system to display for Achievement
        /// </summary>
        /// <value>An Icon id that has been pre uploaded to the system to display for Achievement</value>
        [DataMember(Name = "icon", IsRequired = true, EmitDefaultValue = false)]
        public string Icon { get; set; }

        /// <summary>
        /// A banner id that has been pre uploaded to the system to display for Achievement
        /// </summary>
        /// <value>A banner id that has been pre uploaded to the system to display for Achievement</value>
        [DataMember(Name = "banner", EmitDefaultValue = false)]
        public string Banner { get; set; }

        /// <summary>
        /// A bannerLowResolution id that has been pre uploaded to the system to display for Achievement
        /// </summary>
        /// <value>A bannerLowResolution id that has been pre uploaded to the system to display for Achievement</value>
        [DataMember(Name = "bannerLowResolution", EmitDefaultValue = false)]
        public string BannerLowResolution { get; set; }

        /// <summary>
        /// A bannerHighResolution id that has been pre uploaded to the system to display for Achievement
        /// </summary>
        /// <value>A bannerHighResolution id that has been pre uploaded to the system to display for Achievement</value>
        [DataMember(Name = "bannerHighResolution", EmitDefaultValue = false)]
        public string BannerHighResolution { get; set; }

        /// <summary>
        /// Gets or Sets Scheduling
        /// </summary>
        [DataMember(Name = "scheduling", EmitDefaultValue = false)]
        public Scheduling Scheduling { get; set; }

        /// <summary>
        /// Maximum number of issued achievements
        /// </summary>
        /// <value>Maximum number of issued achievements</value>
        [DataMember(Name = "maxNumberOfIssues", EmitDefaultValue = false)]
        public int MaxNumberOfIssues { get; set; }

        /// <summary>
        /// The code of the contest
        /// </summary>
        /// <value>The code of the contest</value>
        [DataMember(Name = "statusCode", EmitDefaultValue = false)]
        public int StatusCode { get; private set; }

        /// <summary>
        /// Returns false as StatusCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatusCode()
        {
            return false;
        }
        /// <summary>
        /// Additional constraints, if set means true
        /// </summary>
        /// <value>Additional constraints, if set means true</value>
        [DataMember(Name = "constraints", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Constraints { get; set; }

        /// <summary>
        /// Gets or Sets AchievementDependencies
        /// </summary>
        [DataMember(Name = "achievementDependencies", EmitDefaultValue = false)]
        public DependantOn AchievementDependencies { get; set; }

        /// <summary>
        /// Gets or Sets MemberTagsFilter
        /// </summary>
        [DataMember(Name = "memberTagsFilter", EmitDefaultValue = false)]
        public DependantOn MemberTagsFilter { get; set; }

        /// <summary>
        /// Gets or Sets Products
        /// </summary>
        [DataMember(Name = "products", EmitDefaultValue = false)]
        public List<ProductReduced> Products { get; set; }

        /// <summary>
        /// Gets or Sets ProductTagsFilter
        /// </summary>
        [DataMember(Name = "productTagsFilter", EmitDefaultValue = false)]
        public DependantOn ProductTagsFilter { get; set; }

        /// <summary>
        /// Gets or Sets Strategies
        /// </summary>
        [DataMember(Name = "strategies", EmitDefaultValue = false)]
        public AchievementStrategies Strategies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AchievementAllOf {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TermsAndConditions: ").Append(TermsAndConditions).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Banner: ").Append(Banner).Append("\n");
            sb.Append("  BannerLowResolution: ").Append(BannerLowResolution).Append("\n");
            sb.Append("  BannerHighResolution: ").Append(BannerHighResolution).Append("\n");
            sb.Append("  Scheduling: ").Append(Scheduling).Append("\n");
            sb.Append("  MaxNumberOfIssues: ").Append(MaxNumberOfIssues).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  AchievementDependencies: ").Append(AchievementDependencies).Append("\n");
            sb.Append("  MemberTagsFilter: ").Append(MemberTagsFilter).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  ProductTagsFilter: ").Append(ProductTagsFilter).Append("\n");
            sb.Append("  Strategies: ").Append(Strategies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AchievementAllOf);
        }

        /// <summary>
        /// Returns true if AchievementAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of AchievementAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AchievementAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TermsAndConditions == input.TermsAndConditions ||
                    (this.TermsAndConditions != null &&
                    this.TermsAndConditions.Equals(input.TermsAndConditions))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.Banner == input.Banner ||
                    (this.Banner != null &&
                    this.Banner.Equals(input.Banner))
                ) && 
                (
                    this.BannerLowResolution == input.BannerLowResolution ||
                    (this.BannerLowResolution != null &&
                    this.BannerLowResolution.Equals(input.BannerLowResolution))
                ) && 
                (
                    this.BannerHighResolution == input.BannerHighResolution ||
                    (this.BannerHighResolution != null &&
                    this.BannerHighResolution.Equals(input.BannerHighResolution))
                ) && 
                (
                    this.Scheduling == input.Scheduling ||
                    (this.Scheduling != null &&
                    this.Scheduling.Equals(input.Scheduling))
                ) && 
                (
                    this.MaxNumberOfIssues == input.MaxNumberOfIssues ||
                    this.MaxNumberOfIssues.Equals(input.MaxNumberOfIssues)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    this.StatusCode.Equals(input.StatusCode)
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && 
                (
                    this.AchievementDependencies == input.AchievementDependencies ||
                    (this.AchievementDependencies != null &&
                    this.AchievementDependencies.Equals(input.AchievementDependencies))
                ) && 
                (
                    this.MemberTagsFilter == input.MemberTagsFilter ||
                    (this.MemberTagsFilter != null &&
                    this.MemberTagsFilter.Equals(input.MemberTagsFilter))
                ) && 
                (
                    this.Products == input.Products ||
                    this.Products != null &&
                    input.Products != null &&
                    this.Products.SequenceEqual(input.Products)
                ) && 
                (
                    this.ProductTagsFilter == input.ProductTagsFilter ||
                    (this.ProductTagsFilter != null &&
                    this.ProductTagsFilter.Equals(input.ProductTagsFilter))
                ) && 
                (
                    this.Strategies == input.Strategies ||
                    (this.Strategies != null &&
                    this.Strategies.Equals(input.Strategies))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TermsAndConditions != null)
                    hashCode = hashCode * 59 + this.TermsAndConditions.GetHashCode();
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.Banner != null)
                    hashCode = hashCode * 59 + this.Banner.GetHashCode();
                if (this.BannerLowResolution != null)
                    hashCode = hashCode * 59 + this.BannerLowResolution.GetHashCode();
                if (this.BannerHighResolution != null)
                    hashCode = hashCode * 59 + this.BannerHighResolution.GetHashCode();
                if (this.Scheduling != null)
                    hashCode = hashCode * 59 + this.Scheduling.GetHashCode();
                hashCode = hashCode * 59 + this.MaxNumberOfIssues.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                if (this.AchievementDependencies != null)
                    hashCode = hashCode * 59 + this.AchievementDependencies.GetHashCode();
                if (this.MemberTagsFilter != null)
                    hashCode = hashCode * 59 + this.MemberTagsFilter.GetHashCode();
                if (this.Products != null)
                    hashCode = hashCode * 59 + this.Products.GetHashCode();
                if (this.ProductTagsFilter != null)
                    hashCode = hashCode * 59 + this.ProductTagsFilter.GetHashCode();
                if (this.Strategies != null)
                    hashCode = hashCode * 59 + this.Strategies.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
