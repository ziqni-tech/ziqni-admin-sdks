/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// AchievementStrategies
    /// </summary>
    [DataContract(Name = "AchievementStrategies")]
    public partial class AchievementStrategies : IEquatable<AchievementStrategies>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AchievementStrategies" /> class.
        /// </summary>
        /// <param name="pointsStrategy">pointsStrategy.</param>
        public AchievementStrategies(PointsStrategy pointsStrategy = default(PointsStrategy))
        {
            this.PointsStrategy = pointsStrategy;
        }

        /// <summary>
        /// Gets or Sets PointsStrategy
        /// </summary>
        [DataMember(Name = "pointsStrategy", EmitDefaultValue = false)]
        public PointsStrategy PointsStrategy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AchievementStrategies {\n");
            sb.Append("  PointsStrategy: ").Append(PointsStrategy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AchievementStrategies);
        }

        /// <summary>
        /// Returns true if AchievementStrategies instances are equal
        /// </summary>
        /// <param name="input">Instance of AchievementStrategies to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AchievementStrategies input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PointsStrategy == input.PointsStrategy ||
                    (this.PointsStrategy != null &&
                    this.PointsStrategy.Equals(input.PointsStrategy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PointsStrategy != null)
                    hashCode = hashCode * 59 + this.PointsStrategy.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
