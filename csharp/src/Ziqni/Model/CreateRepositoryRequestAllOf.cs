/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// CreateRepositoryRequestAllOf
    /// </summary>
    [DataContract(Name = "CreateRepositoryRequest_allOf")]
    public partial class CreateRepositoryRequestAllOf : IEquatable<CreateRepositoryRequestAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRepositoryRequestAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateRepositoryRequestAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateRepositoryRequestAllOf" /> class.
        /// </summary>
        /// <param name="name">The name of the repository. No special charaters or spaces permitted (required).</param>
        /// <param name="description">The description of the repository.</param>
        /// <param name="constraints">Additional constraints (required).</param>
        /// <param name="hostingOptions">hostingOptions.</param>
        public CreateRepositoryRequestAllOf(string name = default(string), string description = default(string), List<string> constraints = default(List<string>), HostingOptions hostingOptions = default(HostingOptions))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for CreateRepositoryRequestAllOf and cannot be null");
            // to ensure "constraints" is required (not null)
            this.Constraints = constraints ?? throw new ArgumentNullException("constraints is a required property for CreateRepositoryRequestAllOf and cannot be null");
            this.Description = description;
            this.HostingOptions = hostingOptions;
        }

        /// <summary>
        /// The name of the repository. No special charaters or spaces permitted
        /// </summary>
        /// <value>The name of the repository. No special charaters or spaces permitted</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the repository
        /// </summary>
        /// <value>The description of the repository</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Additional constraints
        /// </summary>
        /// <value>Additional constraints</value>
        [DataMember(Name = "constraints", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Constraints { get; set; }

        /// <summary>
        /// Gets or Sets HostingOptions
        /// </summary>
        [DataMember(Name = "hostingOptions", EmitDefaultValue = false)]
        public HostingOptions HostingOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateRepositoryRequestAllOf {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  HostingOptions: ").Append(HostingOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateRepositoryRequestAllOf);
        }

        /// <summary>
        /// Returns true if CreateRepositoryRequestAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateRepositoryRequestAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateRepositoryRequestAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && 
                (
                    this.HostingOptions == input.HostingOptions ||
                    (this.HostingOptions != null &&
                    this.HostingOptions.Equals(input.HostingOptions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                if (this.HostingOptions != null)
                    hashCode = hashCode * 59 + this.HostingOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
