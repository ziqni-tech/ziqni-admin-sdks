/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// ContestReduced
    /// </summary>
    [DataContract(Name = "ContestReduced")]
    public partial class ContestReduced : IEquatable<ContestReduced>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = false)]
        public ContestStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContestReduced" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContestReduced() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContestReduced" /> class.
        /// </summary>
        /// <param name="id">A unique system generated identifier (required).</param>
        /// <param name="spaceName">This is the space name which is linked to the account (required).</param>
        /// <param name="created">ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone (required).</param>
        /// <param name="competitionId">A unique identifier of a Competition (required).</param>
        /// <param name="row">The row number for displaying the Contest in a table (required).</param>
        /// <param name="name">A name for the Contest. Can be translated (required).</param>
        /// <param name="round">To what round does the contest belong (required).</param>
        /// <param name="groupStage">Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2 (required).</param>
        /// <param name="entrantsFromContest">A list of Ziqni contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional. (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="scheduledStartDate">ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone (required).</param>
        /// <param name="scheduledEndDate">ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone (required).</param>
        /// <param name="tags">A list of id&#39;s used to tag.</param>
        /// <param name="rewards">rewards.</param>
        public ContestReduced(string id = default(string), string spaceName = default(string), DateTime created = default(DateTime), string competitionId = default(string), int row = default(int), string name = default(string), int round = default(int), int groupStage = default(int), List<string> entrantsFromContest = default(List<string>), ContestStatus status = default(ContestStatus), DateTime scheduledStartDate = default(DateTime), DateTime scheduledEndDate = default(DateTime), List<string> tags = default(List<string>), List<RewardReduced> rewards = default(List<RewardReduced>))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for ContestReduced and cannot be null");
            // to ensure "spaceName" is required (not null)
            this.SpaceName = spaceName ?? throw new ArgumentNullException("spaceName is a required property for ContestReduced and cannot be null");
            this.Created = created;
            // to ensure "competitionId" is required (not null)
            this.CompetitionId = competitionId ?? throw new ArgumentNullException("competitionId is a required property for ContestReduced and cannot be null");
            this.Row = row;
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for ContestReduced and cannot be null");
            this.Round = round;
            this.GroupStage = groupStage;
            // to ensure "entrantsFromContest" is required (not null)
            this.EntrantsFromContest = entrantsFromContest ?? throw new ArgumentNullException("entrantsFromContest is a required property for ContestReduced and cannot be null");
            this.Status = status;
            this.ScheduledStartDate = scheduledStartDate;
            this.ScheduledEndDate = scheduledEndDate;
            this.Tags = tags;
            this.Rewards = rewards;
        }

        /// <summary>
        /// A unique system generated identifier
        /// </summary>
        /// <value>A unique system generated identifier</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// This is the space name which is linked to the account
        /// </summary>
        /// <value>This is the space name which is linked to the account</value>
        [DataMember(Name = "spaceName", IsRequired = true, EmitDefaultValue = false)]
        public string SpaceName { get; set; }

        /// <summary>
        /// ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone</value>
        [DataMember(Name = "created", IsRequired = true, EmitDefaultValue = false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// A unique identifier of a Competition
        /// </summary>
        /// <value>A unique identifier of a Competition</value>
        [DataMember(Name = "competitionId", IsRequired = true, EmitDefaultValue = false)]
        public string CompetitionId { get; set; }

        /// <summary>
        /// The row number for displaying the Contest in a table
        /// </summary>
        /// <value>The row number for displaying the Contest in a table</value>
        [DataMember(Name = "row", IsRequired = true, EmitDefaultValue = false)]
        public int Row { get; set; }

        /// <summary>
        /// A name for the Contest. Can be translated
        /// </summary>
        /// <value>A name for the Contest. Can be translated</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// To what round does the contest belong
        /// </summary>
        /// <value>To what round does the contest belong</value>
        [DataMember(Name = "round", IsRequired = true, EmitDefaultValue = false)]
        public int Round { get; set; }

        /// <summary>
        /// Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
        /// </summary>
        /// <value>Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2</value>
        [DataMember(Name = "groupStage", IsRequired = true, EmitDefaultValue = false)]
        public int GroupStage { get; set; }

        /// <summary>
        /// A list of Ziqni contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.
        /// </summary>
        /// <value>A list of Ziqni contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.</value>
        [DataMember(Name = "entrantsFromContest", IsRequired = true, EmitDefaultValue = false)]
        public List<string> EntrantsFromContest { get; set; }

        /// <summary>
        /// The code of the contest
        /// </summary>
        /// <value>The code of the contest</value>
        [DataMember(Name = "statusCode", IsRequired = true, EmitDefaultValue = false)]
        public int StatusCode { get; private set; }

        /// <summary>
        /// Returns false as StatusCode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatusCode()
        {
            return false;
        }
        /// <summary>
        /// ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone</value>
        [DataMember(Name = "scheduledStartDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ScheduledStartDate { get; set; }

        /// <summary>
        /// ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone</value>
        [DataMember(Name = "scheduledEndDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ScheduledEndDate { get; set; }

        /// <summary>
        /// ISO8601 timestamp for when a Contest started. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Contest started. All records are stored in UTC time zone</value>
        [DataMember(Name = "actualStartDate", EmitDefaultValue = false)]
        public DateTime ActualStartDate { get; private set; }

        /// <summary>
        /// Returns false as ActualStartDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActualStartDate()
        {
            return false;
        }
        /// <summary>
        /// ISO8601 timestamp for when a Contest ended. All records are stored in UTC time zone
        /// </summary>
        /// <value>ISO8601 timestamp for when a Contest ended. All records are stored in UTC time zone</value>
        [DataMember(Name = "actualEndDate", EmitDefaultValue = false)]
        public DateTime ActualEndDate { get; private set; }

        /// <summary>
        /// Returns false as ActualEndDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActualEndDate()
        {
            return false;
        }
        /// <summary>
        /// A list of id&#39;s used to tag
        /// </summary>
        /// <value>A list of id&#39;s used to tag</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Rewards
        /// </summary>
        [DataMember(Name = "rewards", EmitDefaultValue = false)]
        public List<RewardReduced> Rewards { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContestReduced {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SpaceName: ").Append(SpaceName).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CompetitionId: ").Append(CompetitionId).Append("\n");
            sb.Append("  Row: ").Append(Row).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Round: ").Append(Round).Append("\n");
            sb.Append("  GroupStage: ").Append(GroupStage).Append("\n");
            sb.Append("  EntrantsFromContest: ").Append(EntrantsFromContest).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  ScheduledStartDate: ").Append(ScheduledStartDate).Append("\n");
            sb.Append("  ScheduledEndDate: ").Append(ScheduledEndDate).Append("\n");
            sb.Append("  ActualStartDate: ").Append(ActualStartDate).Append("\n");
            sb.Append("  ActualEndDate: ").Append(ActualEndDate).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Rewards: ").Append(Rewards).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContestReduced);
        }

        /// <summary>
        /// Returns true if ContestReduced instances are equal
        /// </summary>
        /// <param name="input">Instance of ContestReduced to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContestReduced input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SpaceName == input.SpaceName ||
                    (this.SpaceName != null &&
                    this.SpaceName.Equals(input.SpaceName))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.CompetitionId == input.CompetitionId ||
                    (this.CompetitionId != null &&
                    this.CompetitionId.Equals(input.CompetitionId))
                ) && 
                (
                    this.Row == input.Row ||
                    this.Row.Equals(input.Row)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Round == input.Round ||
                    this.Round.Equals(input.Round)
                ) && 
                (
                    this.GroupStage == input.GroupStage ||
                    this.GroupStage.Equals(input.GroupStage)
                ) && 
                (
                    this.EntrantsFromContest == input.EntrantsFromContest ||
                    this.EntrantsFromContest != null &&
                    input.EntrantsFromContest != null &&
                    this.EntrantsFromContest.SequenceEqual(input.EntrantsFromContest)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    this.StatusCode.Equals(input.StatusCode)
                ) && 
                (
                    this.ScheduledStartDate == input.ScheduledStartDate ||
                    (this.ScheduledStartDate != null &&
                    this.ScheduledStartDate.Equals(input.ScheduledStartDate))
                ) && 
                (
                    this.ScheduledEndDate == input.ScheduledEndDate ||
                    (this.ScheduledEndDate != null &&
                    this.ScheduledEndDate.Equals(input.ScheduledEndDate))
                ) && 
                (
                    this.ActualStartDate == input.ActualStartDate ||
                    (this.ActualStartDate != null &&
                    this.ActualStartDate.Equals(input.ActualStartDate))
                ) && 
                (
                    this.ActualEndDate == input.ActualEndDate ||
                    (this.ActualEndDate != null &&
                    this.ActualEndDate.Equals(input.ActualEndDate))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Rewards == input.Rewards ||
                    this.Rewards != null &&
                    input.Rewards != null &&
                    this.Rewards.SequenceEqual(input.Rewards)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SpaceName != null)
                    hashCode = hashCode * 59 + this.SpaceName.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.CompetitionId != null)
                    hashCode = hashCode * 59 + this.CompetitionId.GetHashCode();
                hashCode = hashCode * 59 + this.Row.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Round.GetHashCode();
                hashCode = hashCode * 59 + this.GroupStage.GetHashCode();
                if (this.EntrantsFromContest != null)
                    hashCode = hashCode * 59 + this.EntrantsFromContest.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                if (this.ScheduledStartDate != null)
                    hashCode = hashCode * 59 + this.ScheduledStartDate.GetHashCode();
                if (this.ScheduledEndDate != null)
                    hashCode = hashCode * 59 + this.ScheduledEndDate.GetHashCode();
                if (this.ActualStartDate != null)
                    hashCode = hashCode * 59 + this.ActualStartDate.GetHashCode();
                if (this.ActualEndDate != null)
                    hashCode = hashCode * 59 + this.ActualEndDate.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Rewards != null)
                    hashCode = hashCode * 59 + this.Rewards.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
