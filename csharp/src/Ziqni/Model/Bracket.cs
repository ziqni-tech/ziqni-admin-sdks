/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Ziqni
{
    /// <summary>
    /// Bracket
    /// </summary>
    [DataContract]
    public partial class Bracket :  IEquatable<Bracket>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Bracket" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Bracket() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Bracket" /> class.
        /// </summary>
        /// <param name="rounds">Number of rounds to be played in a competition (required).</param>
        /// <param name="contests">contests (required).</param>
        public Bracket(int rounds = default(int), List<ContestReduced> contests = default(List<ContestReduced>))
        {
            // to ensure "rounds" is required (not null)
            if (rounds == null)
            {
                throw new InvalidDataException("rounds is a required property for Bracket and cannot be null");
            }
            else
            {
                this.Rounds = rounds;
            }

            // to ensure "contests" is required (not null)
            if (contests == null)
            {
                throw new InvalidDataException("contests is a required property for Bracket and cannot be null");
            }
            else
            {
                this.Contests = contests;
            }

        }

        /// <summary>
        /// Number of rounds to be played in a competition
        /// </summary>
        /// <value>Number of rounds to be played in a competition</value>
        [DataMember(Name="rounds", EmitDefaultValue=true)]
        public int Rounds { get; set; }

        /// <summary>
        /// Gets or Sets Contests
        /// </summary>
        [DataMember(Name="contests", EmitDefaultValue=true)]
        public List<ContestReduced> Contests { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Bracket {\n");
            sb.Append("  Rounds: ").Append(Rounds).Append("\n");
            sb.Append("  Contests: ").Append(Contests).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Bracket);
        }

        /// <summary>
        /// Returns true if Bracket instances are equal
        /// </summary>
        /// <param name="input">Instance of Bracket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Bracket input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Rounds == input.Rounds ||
                    (this.Rounds != null &&
                    this.Rounds.Equals(input.Rounds))
                ) && 
                (
                    this.Contests == input.Contests ||
                    this.Contests != null &&
                    input.Contests != null &&
                    this.Contests.SequenceEqual(input.Contests)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Rounds != null)
                    hashCode = hashCode * 59 + this.Rounds.GetHashCode();
                if (this.Contests != null)
                    hashCode = hashCode * 59 + this.Contests.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
