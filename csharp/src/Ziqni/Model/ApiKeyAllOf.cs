/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// ApiKeyAllOf
    /// </summary>
    [DataContract]
    public partial class ApiKeyAllOf :  IEquatable<ApiKeyAllOf>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=true)]
        public Role Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiKeyAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApiKeyAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiKeyAllOf" /> class.
        /// </summary>
        /// <param name="description">The description of an Api key.</param>
        /// <param name="whiteListIPs">the IP&#39;s that need to be whitelisted with the Api key.</param>
        /// <param name="key">An Api key hash (required).</param>
        /// <param name="role">role (required).</param>
        /// <param name="constraints">Additional constraints (required).</param>
        public ApiKeyAllOf(string description = default(string), List<string> whiteListIPs = default(List<string>), string key = default(string), Role role = default(Role), List<string> constraints = default(List<string>))
        {
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new InvalidDataException("key is a required property for ApiKeyAllOf and cannot be null");
            }
            else
            {
                this.Key = key;
            }

            // to ensure "role" is required (not null)
            if (role == null)
            {
                throw new InvalidDataException("role is a required property for ApiKeyAllOf and cannot be null");
            }
            else
            {
                this.Role = role;
            }

            // to ensure "constraints" is required (not null)
            if (constraints == null)
            {
                throw new InvalidDataException("constraints is a required property for ApiKeyAllOf and cannot be null");
            }
            else
            {
                this.Constraints = constraints;
            }

            this.Description = description;
            this.WhiteListIPs = whiteListIPs;
        }

        /// <summary>
        /// The description of an Api key
        /// </summary>
        /// <value>The description of an Api key</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// the IP&#39;s that need to be whitelisted with the Api key
        /// </summary>
        /// <value>the IP&#39;s that need to be whitelisted with the Api key</value>
        [DataMember(Name="whiteListIPs", EmitDefaultValue=false)]
        public List<string> WhiteListIPs { get; set; }

        /// <summary>
        /// An Api key hash
        /// </summary>
        /// <value>An Api key hash</value>
        [DataMember(Name="key", EmitDefaultValue=true)]
        public string Key { get; set; }


        /// <summary>
        /// Additional constraints
        /// </summary>
        /// <value>Additional constraints</value>
        [DataMember(Name="constraints", EmitDefaultValue=true)]
        public List<string> Constraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiKeyAllOf {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  WhiteListIPs: ").Append(WhiteListIPs).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiKeyAllOf);
        }

        /// <summary>
        /// Returns true if ApiKeyAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiKeyAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiKeyAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.WhiteListIPs == input.WhiteListIPs ||
                    this.WhiteListIPs != null &&
                    input.WhiteListIPs != null &&
                    this.WhiteListIPs.SequenceEqual(input.WhiteListIPs)
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.WhiteListIPs != null)
                    hashCode = hashCode * 59 + this.WhiteListIPs.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
