/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// ComputeEngineAllOf
    /// </summary>
    [DataContract(Name = "ComputeEngine_allOf")]
    public partial class ComputeEngineAllOf : IEquatable<ComputeEngineAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComputeEngineAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ComputeEngineAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ComputeEngineAllOf" /> class.
        /// </summary>
        /// <param name="description">description (required).</param>
        /// <param name="version">version.</param>
        /// <param name="name">name (required).</param>
        /// <param name="uptime">Long.</param>
        /// <param name="constraints">constraints.</param>
        /// <param name="statistics">statistics.</param>
        /// <param name="lastKnownStatusCode">lastKnownStatusCode.</param>
        public ComputeEngineAllOf(string description = default(string), long version = default(long), string name = default(string), long uptime = default(long), List<string> constraints = default(List<string>), Dictionary<string, string> statistics = default(Dictionary<string, string>), int lastKnownStatusCode = default(int))
        {
            // to ensure "description" is required (not null)
            this.Description = description ?? throw new ArgumentNullException("description is a required property for ComputeEngineAllOf and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for ComputeEngineAllOf and cannot be null");
            this._Version = version;
            this.Uptime = uptime;
            this.Constraints = constraints;
            this.Statistics = statistics;
            this.LastKnownStatusCode = lastKnownStatusCode;
        }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public long _Version { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Long
        /// </summary>
        /// <value>Long</value>
        [DataMember(Name = "uptime", EmitDefaultValue = false)]
        public long Uptime { get; set; }

        /// <summary>
        /// Gets or Sets Constraints
        /// </summary>
        [DataMember(Name = "constraints", EmitDefaultValue = false)]
        public List<string> Constraints { get; set; }

        /// <summary>
        /// Gets or Sets Statistics
        /// </summary>
        [DataMember(Name = "statistics", EmitDefaultValue = false)]
        public Dictionary<string, string> Statistics { get; set; }

        /// <summary>
        /// Gets or Sets LastKnownStatusCode
        /// </summary>
        [DataMember(Name = "lastKnownStatusCode", EmitDefaultValue = false)]
        public int LastKnownStatusCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComputeEngineAllOf {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Uptime: ").Append(Uptime).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  Statistics: ").Append(Statistics).Append("\n");
            sb.Append("  LastKnownStatusCode: ").Append(LastKnownStatusCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ComputeEngineAllOf);
        }

        /// <summary>
        /// Returns true if ComputeEngineAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ComputeEngineAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComputeEngineAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this._Version == input._Version ||
                    this._Version.Equals(input._Version)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Uptime == input.Uptime ||
                    this.Uptime.Equals(input.Uptime)
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && 
                (
                    this.Statistics == input.Statistics ||
                    this.Statistics != null &&
                    input.Statistics != null &&
                    this.Statistics.SequenceEqual(input.Statistics)
                ) && 
                (
                    this.LastKnownStatusCode == input.LastKnownStatusCode ||
                    this.LastKnownStatusCode.Equals(input.LastKnownStatusCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this._Version.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Uptime.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                if (this.Statistics != null)
                    hashCode = hashCode * 59 + this.Statistics.GetHashCode();
                hashCode = hashCode * 59 + this.LastKnownStatusCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
