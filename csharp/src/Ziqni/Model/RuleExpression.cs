/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Ziqni
{
    /// <summary>
    /// A conditional expressions is an element that declares either a rule expression, condition or routine to be evaluated or executed
    /// </summary>
    [DataContract]
    public partial class RuleExpression :  IEquatable<RuleExpression>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleExpression" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RuleExpression() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleExpression" /> class.
        /// </summary>
        /// <param name="type">condition or expression or routine (required).</param>
        /// <param name="mustMatchAll">All expressions in the condition must either evaluate to TRUE or FALSE if set to TRUE.</param>
        /// <param name="mustEvaluateTo">All the expressions of this condition must either evaluate to TRUE or FALSE.</param>
        /// <param name="scope">The scope of the operand used in the expression.</param>
        /// <param name="operand">The operand for the rule..</param>
        /// <param name="_operator">[ *.* ] or [ .* ] or [ &#x3D;&#x3D; ] or [ &gt; ] or [ &gt;&#x3D; ] or [ &lt;&#x3D;]  or [ &lt; ] or [ &lt;&gt; ].</param>
        /// <param name="value">The value associated with the expression.</param>
        /// <param name="rules">rules.</param>
        /// <param name="then">The routine to run when all the conditions have evaluted to the required level.</param>
        /// <param name="lineNumber">The order the rules have to be executed in..</param>
        public RuleExpression(string type = default(string), bool mustMatchAll = default(bool), bool mustEvaluateTo = default(bool), string scope = default(string), string operand = default(string), string _operator = default(string), string value = default(string), List<RuleExpression> rules = default(List<RuleExpression>), List<RuleRoutine> then = default(List<RuleRoutine>), int lineNumber = default(int))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for RuleExpression and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            this.MustMatchAll = mustMatchAll;
            this.MustEvaluateTo = mustEvaluateTo;
            this.Scope = scope;
            this.Operand = operand;
            this.Operator = _operator;
            this.Value = value;
            this.Rules = rules;
            this.Then = then;
            this.LineNumber = lineNumber;
        }

        /// <summary>
        /// condition or expression or routine
        /// </summary>
        /// <value>condition or expression or routine</value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public string Type { get; set; }

        /// <summary>
        /// All expressions in the condition must either evaluate to TRUE or FALSE if set to TRUE
        /// </summary>
        /// <value>All expressions in the condition must either evaluate to TRUE or FALSE if set to TRUE</value>
        [DataMember(Name="mustMatchAll", EmitDefaultValue=false)]
        public bool MustMatchAll { get; set; }

        /// <summary>
        /// All the expressions of this condition must either evaluate to TRUE or FALSE
        /// </summary>
        /// <value>All the expressions of this condition must either evaluate to TRUE or FALSE</value>
        [DataMember(Name="mustEvaluateTo", EmitDefaultValue=false)]
        public bool MustEvaluateTo { get; set; }

        /// <summary>
        /// The scope of the operand used in the expression
        /// </summary>
        /// <value>The scope of the operand used in the expression</value>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// The operand for the rule.
        /// </summary>
        /// <value>The operand for the rule.</value>
        [DataMember(Name="operand", EmitDefaultValue=false)]
        public string Operand { get; set; }

        /// <summary>
        /// [ *.* ] or [ .* ] or [ &#x3D;&#x3D; ] or [ &gt; ] or [ &gt;&#x3D; ] or [ &lt;&#x3D;]  or [ &lt; ] or [ &lt;&gt; ]
        /// </summary>
        /// <value>[ *.* ] or [ .* ] or [ &#x3D;&#x3D; ] or [ &gt; ] or [ &gt;&#x3D; ] or [ &lt;&#x3D;]  or [ &lt; ] or [ &lt;&gt; ]</value>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public string Operator { get; set; }

        /// <summary>
        /// The value associated with the expression
        /// </summary>
        /// <value>The value associated with the expression</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets Rules
        /// </summary>
        [DataMember(Name="rules", EmitDefaultValue=false)]
        public List<RuleExpression> Rules { get; set; }

        /// <summary>
        /// The routine to run when all the conditions have evaluted to the required level
        /// </summary>
        /// <value>The routine to run when all the conditions have evaluted to the required level</value>
        [DataMember(Name="then", EmitDefaultValue=false)]
        public List<RuleRoutine> Then { get; set; }

        /// <summary>
        /// The order the rules have to be executed in.
        /// </summary>
        /// <value>The order the rules have to be executed in.</value>
        [DataMember(Name="lineNumber", EmitDefaultValue=false)]
        public int LineNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuleExpression {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  MustMatchAll: ").Append(MustMatchAll).Append("\n");
            sb.Append("  MustEvaluateTo: ").Append(MustEvaluateTo).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Operand: ").Append(Operand).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("  Then: ").Append(Then).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuleExpression);
        }

        /// <summary>
        /// Returns true if RuleExpression instances are equal
        /// </summary>
        /// <param name="input">Instance of RuleExpression to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuleExpression input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.MustMatchAll == input.MustMatchAll ||
                    (this.MustMatchAll != null &&
                    this.MustMatchAll.Equals(input.MustMatchAll))
                ) && 
                (
                    this.MustEvaluateTo == input.MustEvaluateTo ||
                    (this.MustEvaluateTo != null &&
                    this.MustEvaluateTo.Equals(input.MustEvaluateTo))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Operand == input.Operand ||
                    (this.Operand != null &&
                    this.Operand.Equals(input.Operand))
                ) && 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Rules == input.Rules ||
                    this.Rules != null &&
                    input.Rules != null &&
                    this.Rules.SequenceEqual(input.Rules)
                ) && 
                (
                    this.Then == input.Then ||
                    this.Then != null &&
                    input.Then != null &&
                    this.Then.SequenceEqual(input.Then)
                ) && 
                (
                    this.LineNumber == input.LineNumber ||
                    (this.LineNumber != null &&
                    this.LineNumber.Equals(input.LineNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.MustMatchAll != null)
                    hashCode = hashCode * 59 + this.MustMatchAll.GetHashCode();
                if (this.MustEvaluateTo != null)
                    hashCode = hashCode * 59 + this.MustEvaluateTo.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.Operand != null)
                    hashCode = hashCode * 59 + this.Operand.GetHashCode();
                if (this.Operator != null)
                    hashCode = hashCode * 59 + this.Operator.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Rules != null)
                    hashCode = hashCode * 59 + this.Rules.GetHashCode();
                if (this.Then != null)
                    hashCode = hashCode * 59 + this.Then.GetHashCode();
                if (this.LineNumber != null)
                    hashCode = hashCode * 59 + this.LineNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
