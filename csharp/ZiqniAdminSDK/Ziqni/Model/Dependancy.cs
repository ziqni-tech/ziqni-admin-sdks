/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// Dependancy
    /// </summary>
    [DataContract(Name = "Dependancy")]
    public partial class Dependancy : IEquatable<Dependancy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Dependancy" /> class.
        /// </summary>
        /// <param name="entityType">A model that will have dependancies implemented.</param>
        /// <param name="dependantOn">dependantOn.</param>
        public Dependancy(string entityType = default(string), DependantOn dependantOn = default(DependantOn))
        {
            this.EntityType = entityType;
            this.DependantOn = dependantOn;
        }

        /// <summary>
        /// A model that will have dependancies implemented
        /// </summary>
        /// <value>A model that will have dependancies implemented</value>
        [DataMember(Name = "entityType", EmitDefaultValue = false)]
        public string EntityType { get; set; }

        /// <summary>
        /// Gets or Sets DependantOn
        /// </summary>
        [DataMember(Name = "dependantOn", EmitDefaultValue = false)]
        public DependantOn DependantOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Dependancy {\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  DependantOn: ").Append(DependantOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Dependancy);
        }

        /// <summary>
        /// Returns true if Dependancy instances are equal
        /// </summary>
        /// <param name="input">Instance of Dependancy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dependancy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.DependantOn == input.DependantOn ||
                    (this.DependantOn != null &&
                    this.DependantOn.Equals(input.DependantOn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.DependantOn != null)
                    hashCode = hashCode * 59 + this.DependantOn.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
