/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// MemberAwardAllOf
    /// </summary>
    [DataContract(Name = "MemberAward_allOf")]
    public partial class MemberAwardAllOf : IEquatable<MemberAwardAllOf>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        [DataMember(Name = "entityType", IsRequired = true, EmitDefaultValue = false)]
        public EntityType EntityType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberAwardAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MemberAwardAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberAwardAllOf" /> class.
        /// </summary>
        /// <param name="rewardId">A unique identifier of a Reward (required).</param>
        /// <param name="rewardType">The type of the Reward (required).</param>
        /// <param name="rewardTypeId">A unique id of the Reward Type (required).</param>
        /// <param name="rewardValue">Numerical value of the reward that will be issued based on the reward type (required).</param>
        /// <param name="delay">Delay of issuing a reward in minutes.</param>
        /// <param name="entityType">entityType (required).</param>
        /// <param name="entityId">The Id of the contest or achievement related to this Award. Dependant on entityType (required).</param>
        /// <param name="pointInTime">ISO8601 timestamp for when an Award is available until a specific point in time. All records are stored in UTC time zone. * There can only be one time definition used for claim period either \&quot;pointInTime\&quot; or \&quot;period\&quot;.</param>
        /// <param name="period">Claimable duration in minutes, this value will set the controls until when the award is claimable. * There can only be one time definition used for claim period either \&quot;pointInTime\&quot; or \&quot;period\&quot;.</param>
        /// <param name="tags">A list of Strings of groups that the reward belongs to..</param>
        /// <param name="metadata">metadata.</param>
        /// <param name="constraints">Additional constraints (required).</param>
        /// <param name="claimedTimestamp">ISO8601 timestamp for when an Award is claimed. All records are stored in UTC time zone. *.</param>
        public MemberAwardAllOf(string rewardId = default(string), string rewardType = default(string), string rewardTypeId = default(string), double rewardValue = default(double), int delay = default(int), EntityType entityType = default(EntityType), string entityId = default(string), DateTime pointInTime = default(DateTime), int period = default(int), List<string> tags = default(List<string>), Dictionary<string, string> metadata = default(Dictionary<string, string>), List<string> constraints = default(List<string>), DateTime claimedTimestamp = default(DateTime))
        {
            // to ensure "rewardId" is required (not null)
            this.RewardId = rewardId ?? throw new ArgumentNullException("rewardId is a required property for MemberAwardAllOf and cannot be null");
            // to ensure "rewardType" is required (not null)
            this.RewardType = rewardType ?? throw new ArgumentNullException("rewardType is a required property for MemberAwardAllOf and cannot be null");
            // to ensure "rewardTypeId" is required (not null)
            this.RewardTypeId = rewardTypeId ?? throw new ArgumentNullException("rewardTypeId is a required property for MemberAwardAllOf and cannot be null");
            this.RewardValue = rewardValue;
            this.EntityType = entityType;
            // to ensure "entityId" is required (not null)
            this.EntityId = entityId ?? throw new ArgumentNullException("entityId is a required property for MemberAwardAllOf and cannot be null");
            // to ensure "constraints" is required (not null)
            this.Constraints = constraints ?? throw new ArgumentNullException("constraints is a required property for MemberAwardAllOf and cannot be null");
            this.Delay = delay;
            this.PointInTime = pointInTime;
            this.Period = period;
            this.Tags = tags;
            this.Metadata = metadata;
            this.ClaimedTimestamp = claimedTimestamp;
        }

        /// <summary>
        /// A unique identifier of a Reward
        /// </summary>
        /// <value>A unique identifier of a Reward</value>
        [DataMember(Name = "rewardId", IsRequired = true, EmitDefaultValue = false)]
        public string RewardId { get; set; }

        /// <summary>
        /// The type of the Reward
        /// </summary>
        /// <value>The type of the Reward</value>
        [DataMember(Name = "rewardType", IsRequired = true, EmitDefaultValue = false)]
        public string RewardType { get; set; }

        /// <summary>
        /// A unique id of the Reward Type
        /// </summary>
        /// <value>A unique id of the Reward Type</value>
        [DataMember(Name = "rewardTypeId", IsRequired = true, EmitDefaultValue = false)]
        public string RewardTypeId { get; set; }

        /// <summary>
        /// Numerical value of the reward that will be issued based on the reward type
        /// </summary>
        /// <value>Numerical value of the reward that will be issued based on the reward type</value>
        [DataMember(Name = "rewardValue", IsRequired = true, EmitDefaultValue = false)]
        public double RewardValue { get; set; }

        /// <summary>
        /// Delay of issuing a reward in minutes
        /// </summary>
        /// <value>Delay of issuing a reward in minutes</value>
        [DataMember(Name = "delay", EmitDefaultValue = false)]
        public int Delay { get; set; }

        /// <summary>
        /// The Id of the contest or achievement related to this Award. Dependant on entityType
        /// </summary>
        /// <value>The Id of the contest or achievement related to this Award. Dependant on entityType</value>
        [DataMember(Name = "entityId", IsRequired = true, EmitDefaultValue = false)]
        public string EntityId { get; set; }

        /// <summary>
        /// ISO8601 timestamp for when an Award is available until a specific point in time. All records are stored in UTC time zone. * There can only be one time definition used for claim period either \&quot;pointInTime\&quot; or \&quot;period\&quot;
        /// </summary>
        /// <value>ISO8601 timestamp for when an Award is available until a specific point in time. All records are stored in UTC time zone. * There can only be one time definition used for claim period either \&quot;pointInTime\&quot; or \&quot;period\&quot;</value>
        [DataMember(Name = "pointInTime", EmitDefaultValue = false)]
        public DateTime PointInTime { get; set; }

        /// <summary>
        /// Claimable duration in minutes, this value will set the controls until when the award is claimable. * There can only be one time definition used for claim period either \&quot;pointInTime\&quot; or \&quot;period\&quot;
        /// </summary>
        /// <value>Claimable duration in minutes, this value will set the controls until when the award is claimable. * There can only be one time definition used for claim period either \&quot;pointInTime\&quot; or \&quot;period\&quot;</value>
        [DataMember(Name = "period", EmitDefaultValue = false)]
        public int Period { get; set; }

        /// <summary>
        /// A list of Strings of groups that the reward belongs to.
        /// </summary>
        /// <value>A list of Strings of groups that the reward belongs to.</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Additional constraints
        /// </summary>
        /// <value>Additional constraints</value>
        [DataMember(Name = "constraints", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Constraints { get; set; }

        /// <summary>
        /// ISO8601 timestamp for when an Award is claimed. All records are stored in UTC time zone. *
        /// </summary>
        /// <value>ISO8601 timestamp for when an Award is claimed. All records are stored in UTC time zone. *</value>
        [DataMember(Name = "claimedTimestamp", EmitDefaultValue = false)]
        public DateTime ClaimedTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MemberAwardAllOf {\n");
            sb.Append("  RewardId: ").Append(RewardId).Append("\n");
            sb.Append("  RewardType: ").Append(RewardType).Append("\n");
            sb.Append("  RewardTypeId: ").Append(RewardTypeId).Append("\n");
            sb.Append("  RewardValue: ").Append(RewardValue).Append("\n");
            sb.Append("  Delay: ").Append(Delay).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  PointInTime: ").Append(PointInTime).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  ClaimedTimestamp: ").Append(ClaimedTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MemberAwardAllOf);
        }

        /// <summary>
        /// Returns true if MemberAwardAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of MemberAwardAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MemberAwardAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RewardId == input.RewardId ||
                    (this.RewardId != null &&
                    this.RewardId.Equals(input.RewardId))
                ) && 
                (
                    this.RewardType == input.RewardType ||
                    (this.RewardType != null &&
                    this.RewardType.Equals(input.RewardType))
                ) && 
                (
                    this.RewardTypeId == input.RewardTypeId ||
                    (this.RewardTypeId != null &&
                    this.RewardTypeId.Equals(input.RewardTypeId))
                ) && 
                (
                    this.RewardValue == input.RewardValue ||
                    this.RewardValue.Equals(input.RewardValue)
                ) && 
                (
                    this.Delay == input.Delay ||
                    this.Delay.Equals(input.Delay)
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    this.EntityType.Equals(input.EntityType)
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.PointInTime == input.PointInTime ||
                    (this.PointInTime != null &&
                    this.PointInTime.Equals(input.PointInTime))
                ) && 
                (
                    this.Period == input.Period ||
                    this.Period.Equals(input.Period)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && 
                (
                    this.ClaimedTimestamp == input.ClaimedTimestamp ||
                    (this.ClaimedTimestamp != null &&
                    this.ClaimedTimestamp.Equals(input.ClaimedTimestamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RewardId != null)
                    hashCode = hashCode * 59 + this.RewardId.GetHashCode();
                if (this.RewardType != null)
                    hashCode = hashCode * 59 + this.RewardType.GetHashCode();
                if (this.RewardTypeId != null)
                    hashCode = hashCode * 59 + this.RewardTypeId.GetHashCode();
                hashCode = hashCode * 59 + this.RewardValue.GetHashCode();
                hashCode = hashCode * 59 + this.Delay.GetHashCode();
                hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.PointInTime != null)
                    hashCode = hashCode * 59 + this.PointInTime.GetHashCode();
                hashCode = hashCode * 59 + this.Period.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                if (this.ClaimedTimestamp != null)
                    hashCode = hashCode * 59 + this.ClaimedTimestamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
