/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// Request to update custom fields
    /// </summary>
    [DataContract(Name = "UpdateCustomFieldRequest")]
    public partial class UpdateCustomFieldRequest : IEquatable<UpdateCustomFieldRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets FieldType
        /// </summary>
        [DataMember(Name = "fieldType", EmitDefaultValue = false)]
        public FieldType? FieldType { get; set; }

        /// <summary>
        /// Gets or Sets AppliesTo
        /// </summary>
        [DataMember(Name = "appliesTo", EmitDefaultValue = false)]
        public AppliesTo? AppliesTo { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCustomFieldRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateCustomFieldRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateCustomFieldRequest" /> class.
        /// </summary>
        /// <param name="id">A unique system generated identifier (required).</param>
        /// <param name="name">The name of a Custom field.</param>
        /// <param name="description">The description of a Custom field.</param>
        /// <param name="fieldType">fieldType.</param>
        /// <param name="appliesTo">appliesTo.</param>
        /// <param name="addConstraints">For example \&quot;required\&quot; to indicate the field is required..</param>
        /// <param name="removeConstraints">For example \&quot;required\&quot; to indicate the field is required..</param>
        public UpdateCustomFieldRequest(string id = default(string), string name = default(string), string description = default(string), FieldType? fieldType = default(FieldType?), AppliesTo? appliesTo = default(AppliesTo?), List<string> addConstraints = default(List<string>), List<string> removeConstraints = default(List<string>))
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for UpdateCustomFieldRequest and cannot be null");
            this.Name = name;
            this.Description = description;
            this.FieldType = fieldType;
            this.AppliesTo = appliesTo;
            this.AddConstraints = addConstraints;
            this.RemoveConstraints = removeConstraints;
        }

        /// <summary>
        /// A unique system generated identifier
        /// </summary>
        /// <value>A unique system generated identifier</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of a Custom field
        /// </summary>
        /// <value>The name of a Custom field</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The description of a Custom field
        /// </summary>
        /// <value>The description of a Custom field</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// For example \&quot;required\&quot; to indicate the field is required.
        /// </summary>
        /// <value>For example \&quot;required\&quot; to indicate the field is required.</value>
        [DataMember(Name = "addConstraints", EmitDefaultValue = false)]
        public List<string> AddConstraints { get; set; }

        /// <summary>
        /// For example \&quot;required\&quot; to indicate the field is required.
        /// </summary>
        /// <value>For example \&quot;required\&quot; to indicate the field is required.</value>
        [DataMember(Name = "removeConstraints", EmitDefaultValue = false)]
        public List<string> RemoveConstraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateCustomFieldRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  AppliesTo: ").Append(AppliesTo).Append("\n");
            sb.Append("  AddConstraints: ").Append(AddConstraints).Append("\n");
            sb.Append("  RemoveConstraints: ").Append(RemoveConstraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateCustomFieldRequest);
        }

        /// <summary>
        /// Returns true if UpdateCustomFieldRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateCustomFieldRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateCustomFieldRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.FieldType == input.FieldType ||
                    this.FieldType.Equals(input.FieldType)
                ) && 
                (
                    this.AppliesTo == input.AppliesTo ||
                    this.AppliesTo.Equals(input.AppliesTo)
                ) && 
                (
                    this.AddConstraints == input.AddConstraints ||
                    this.AddConstraints != null &&
                    input.AddConstraints != null &&
                    this.AddConstraints.SequenceEqual(input.AddConstraints)
                ) && 
                (
                    this.RemoveConstraints == input.RemoveConstraints ||
                    this.RemoveConstraints != null &&
                    input.RemoveConstraints != null &&
                    this.RemoveConstraints.SequenceEqual(input.RemoveConstraints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.FieldType.GetHashCode();
                hashCode = hashCode * 59 + this.AppliesTo.GetHashCode();
                if (this.AddConstraints != null)
                    hashCode = hashCode * 59 + this.AddConstraints.GetHashCode();
                if (this.RemoveConstraints != null)
                    hashCode = hashCode * 59 + this.RemoveConstraints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
