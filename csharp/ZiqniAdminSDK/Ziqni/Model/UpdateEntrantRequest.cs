/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// UpdateEntrantRequest
    /// </summary>
    [DataContract(Name = "UpdateEntrantRequest")]
    public partial class UpdateEntrantRequest : IEquatable<UpdateEntrantRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EntrantStatus
        /// </summary>
        [DataMember(Name = "entrantStatus", IsRequired = true, EmitDefaultValue = false)]
        public EntrantStatus EntrantStatus { get; set; }

        /// <summary>
        /// Gets or Sets EntrantAction
        /// </summary>
        [DataMember(Name = "entrantAction", IsRequired = true, EmitDefaultValue = false)]
        public EntrantAction EntrantAction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateEntrantRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateEntrantRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateEntrantRequest" /> class.
        /// </summary>
        /// <param name="memberId">Unique member identifier. A member has to exist in the Ziqni database.</param>
        /// <param name="entityId">Unique competition identifier (required).</param>
        /// <param name="entrantStatus">entrantStatus (required).</param>
        /// <param name="entrantAction">entrantAction (required).</param>
        public UpdateEntrantRequest(string memberId = default(string), string entityId = default(string), EntrantStatus entrantStatus = default(EntrantStatus), EntrantAction entrantAction = default(EntrantAction))
        {
            // to ensure "entityId" is required (not null)
            this.EntityId = entityId ?? throw new ArgumentNullException("entityId is a required property for UpdateEntrantRequest and cannot be null");
            this.EntrantStatus = entrantStatus;
            this.EntrantAction = entrantAction;
            this.MemberId = memberId;
        }

        /// <summary>
        /// Unique member identifier. A member has to exist in the Ziqni database
        /// </summary>
        /// <value>Unique member identifier. A member has to exist in the Ziqni database</value>
        [DataMember(Name = "memberId", EmitDefaultValue = false)]
        public string MemberId { get; set; }

        /// <summary>
        /// Unique competition identifier
        /// </summary>
        /// <value>Unique competition identifier</value>
        [DataMember(Name = "entityId", IsRequired = true, EmitDefaultValue = false)]
        public string EntityId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateEntrantRequest {\n");
            sb.Append("  MemberId: ").Append(MemberId).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntrantStatus: ").Append(EntrantStatus).Append("\n");
            sb.Append("  EntrantAction: ").Append(EntrantAction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateEntrantRequest);
        }

        /// <summary>
        /// Returns true if UpdateEntrantRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateEntrantRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateEntrantRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MemberId == input.MemberId ||
                    (this.MemberId != null &&
                    this.MemberId.Equals(input.MemberId))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.EntrantStatus == input.EntrantStatus ||
                    this.EntrantStatus.Equals(input.EntrantStatus)
                ) && 
                (
                    this.EntrantAction == input.EntrantAction ||
                    this.EntrantAction.Equals(input.EntrantAction)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MemberId != null)
                    hashCode = hashCode * 59 + this.MemberId.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                hashCode = hashCode * 59 + this.EntrantStatus.GetHashCode();
                hashCode = hashCode * 59 + this.EntrantAction.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
