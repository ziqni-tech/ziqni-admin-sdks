/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// UpdateInstantWinRequestAllOf
    /// </summary>
    [DataContract(Name = "UpdateInstantWinRequest_allOf")]
    public partial class UpdateInstantWinRequestAllOf : IEquatable<UpdateInstantWinRequestAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateInstantWinRequestAllOf" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="description">description.</param>
        /// <param name="termsAndConditions">termsAndConditions.</param>
        /// <param name="constraints">constraints.</param>
        /// <param name="statusCode">integer.</param>
        /// <param name="instantWinType">integer.</param>
        /// <param name="tiles">tiles.</param>
        public UpdateInstantWinRequestAllOf(string name = default(string), string description = default(string), string termsAndConditions = default(string), List<string> constraints = default(List<string>), int statusCode = default(int), int instantWinType = default(int), List<UpdateInstantWinTile> tiles = default(List<UpdateInstantWinTile>))
        {
            this.Name = name;
            this.Description = description;
            this.TermsAndConditions = termsAndConditions;
            this.Constraints = constraints;
            this.StatusCode = statusCode;
            this.InstantWinType = instantWinType;
            this.Tiles = tiles;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets TermsAndConditions
        /// </summary>
        [DataMember(Name = "termsAndConditions", EmitDefaultValue = false)]
        public string TermsAndConditions { get; set; }

        /// <summary>
        /// Gets or Sets Constraints
        /// </summary>
        [DataMember(Name = "constraints", EmitDefaultValue = false)]
        public List<string> Constraints { get; set; }

        /// <summary>
        /// integer
        /// </summary>
        /// <value>integer</value>
        [DataMember(Name = "statusCode", EmitDefaultValue = false)]
        public int StatusCode { get; set; }

        /// <summary>
        /// integer
        /// </summary>
        /// <value>integer</value>
        [DataMember(Name = "instantWinType", EmitDefaultValue = false)]
        public int InstantWinType { get; set; }

        /// <summary>
        /// Gets or Sets Tiles
        /// </summary>
        [DataMember(Name = "tiles", EmitDefaultValue = false)]
        public List<UpdateInstantWinTile> Tiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateInstantWinRequestAllOf {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TermsAndConditions: ").Append(TermsAndConditions).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  InstantWinType: ").Append(InstantWinType).Append("\n");
            sb.Append("  Tiles: ").Append(Tiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateInstantWinRequestAllOf);
        }

        /// <summary>
        /// Returns true if UpdateInstantWinRequestAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateInstantWinRequestAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateInstantWinRequestAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TermsAndConditions == input.TermsAndConditions ||
                    (this.TermsAndConditions != null &&
                    this.TermsAndConditions.Equals(input.TermsAndConditions))
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    this.StatusCode.Equals(input.StatusCode)
                ) && 
                (
                    this.InstantWinType == input.InstantWinType ||
                    this.InstantWinType.Equals(input.InstantWinType)
                ) && 
                (
                    this.Tiles == input.Tiles ||
                    this.Tiles != null &&
                    input.Tiles != null &&
                    this.Tiles.SequenceEqual(input.Tiles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TermsAndConditions != null)
                    hashCode = hashCode * 59 + this.TermsAndConditions.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                hashCode = hashCode * 59 + this.StatusCode.GetHashCode();
                hashCode = hashCode * 59 + this.InstantWinType.GetHashCode();
                if (this.Tiles != null)
                    hashCode = hashCode * 59 + this.Tiles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
