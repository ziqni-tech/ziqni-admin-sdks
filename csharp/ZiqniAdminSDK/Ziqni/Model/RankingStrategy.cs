/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// RankingStrategy
    /// </summary>
    [DataContract(Name = "RankingStrategy")]
    public partial class RankingStrategy : IEquatable<RankingStrategy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RankingStrategy" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RankingStrategy() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RankingStrategy" /> class.
        /// </summary>
        /// <param name="constraints">scoreDesc - The Ranking that can be Ascending or Descending based on timeDesc.  timeDesc - The Ranking that can be Ascending or Descending based on scoreDesc.  scoreFirst - The Ranking that can be score first or time first  ignoreTime - The Ranking when time is ignored  ignoreScore - The Ranking when score is ignored excludeIfGoalNotReached - The scores are not included in the leaderboard until the goal is achieved (required).</param>
        public RankingStrategy(List<string> constraints = default(List<string>))
        {
            // to ensure "constraints" is required (not null)
            this.Constraints = constraints ?? throw new ArgumentNullException("constraints is a required property for RankingStrategy and cannot be null");
        }

        /// <summary>
        /// scoreDesc - The Ranking that can be Ascending or Descending based on timeDesc.  timeDesc - The Ranking that can be Ascending or Descending based on scoreDesc.  scoreFirst - The Ranking that can be score first or time first  ignoreTime - The Ranking when time is ignored  ignoreScore - The Ranking when score is ignored excludeIfGoalNotReached - The scores are not included in the leaderboard until the goal is achieved
        /// </summary>
        /// <value>scoreDesc - The Ranking that can be Ascending or Descending based on timeDesc.  timeDesc - The Ranking that can be Ascending or Descending based on scoreDesc.  scoreFirst - The Ranking that can be score first or time first  ignoreTime - The Ranking when time is ignored  ignoreScore - The Ranking when score is ignored excludeIfGoalNotReached - The scores are not included in the leaderboard until the goal is achieved</value>
        [DataMember(Name = "constraints", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Constraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RankingStrategy {\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RankingStrategy);
        }

        /// <summary>
        /// Returns true if RankingStrategy instances are equal
        /// </summary>
        /// <param name="input">Instance of RankingStrategy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RankingStrategy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
