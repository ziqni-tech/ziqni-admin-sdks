/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// Host a static website or any other web assets on Ziqni
    /// </summary>
    [DataContract(Name = "HostingOptions")]
    public partial class HostingOptions : IEquatable<HostingOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HostingOptions" /> class.
        /// </summary>
        /// <param name="indexFileName">indexFileName.</param>
        /// <param name="errorFileName">errorFileName.</param>
        public HostingOptions(string indexFileName = default(string), string errorFileName = default(string))
        {
            this.IndexFileName = indexFileName;
            this.ErrorFileName = errorFileName;
        }

        /// <summary>
        /// Gets or Sets IndexFileName
        /// </summary>
        [DataMember(Name = "indexFileName", EmitDefaultValue = false)]
        public string IndexFileName { get; set; }

        /// <summary>
        /// Gets or Sets ErrorFileName
        /// </summary>
        [DataMember(Name = "errorFileName", EmitDefaultValue = false)]
        public string ErrorFileName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HostingOptions {\n");
            sb.Append("  IndexFileName: ").Append(IndexFileName).Append("\n");
            sb.Append("  ErrorFileName: ").Append(ErrorFileName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HostingOptions);
        }

        /// <summary>
        /// Returns true if HostingOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of HostingOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HostingOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IndexFileName == input.IndexFileName ||
                    (this.IndexFileName != null &&
                    this.IndexFileName.Equals(input.IndexFileName))
                ) && 
                (
                    this.ErrorFileName == input.ErrorFileName ||
                    (this.ErrorFileName != null &&
                    this.ErrorFileName.Equals(input.ErrorFileName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IndexFileName != null)
                    hashCode = hashCode * 59 + this.IndexFileName.GetHashCode();
                if (this.ErrorFileName != null)
                    hashCode = hashCode * 59 + this.ErrorFileName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
