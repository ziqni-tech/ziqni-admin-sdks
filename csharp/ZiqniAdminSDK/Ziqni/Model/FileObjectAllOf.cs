/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// FileObjectAllOf
    /// </summary>
    [DataContract(Name = "FileObject_allOf")]
    public partial class FileObjectAllOf : IEquatable<FileObjectAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileObjectAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileObjectAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileObjectAllOf" /> class.
        /// </summary>
        /// <param name="repositoryId">The repository identifier this file belongs too (required).</param>
        /// <param name="name">Name of the original file uploaded (required).</param>
        /// <param name="mimeType">Mime type of the file. Valid mime types - text/csv or application/vmd.ms-excelor or application/x-directory for directories (required).</param>
        /// <param name="path">The name of the attachment within the bucket (required).</param>
        /// <param name="parentFolderPath">The folder name containing the attachment within the bucket (required).</param>
        /// <param name="uri">The uniform resource identifier where the file can be viewed/downloaded.</param>
        /// <param name="size">The size of the file.</param>
        /// <param name="constraints">Additional constraints, if the value is present it means the.</param>
        public FileObjectAllOf(string repositoryId = default(string), string name = default(string), string mimeType = default(string), string path = default(string), string parentFolderPath = default(string), string uri = default(string), long size = default(long), List<string> constraints = default(List<string>))
        {
            // to ensure "repositoryId" is required (not null)
            this.RepositoryId = repositoryId ?? throw new ArgumentNullException("repositoryId is a required property for FileObjectAllOf and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for FileObjectAllOf and cannot be null");
            // to ensure "mimeType" is required (not null)
            this.MimeType = mimeType ?? throw new ArgumentNullException("mimeType is a required property for FileObjectAllOf and cannot be null");
            // to ensure "path" is required (not null)
            this.Path = path ?? throw new ArgumentNullException("path is a required property for FileObjectAllOf and cannot be null");
            // to ensure "parentFolderPath" is required (not null)
            this.ParentFolderPath = parentFolderPath ?? throw new ArgumentNullException("parentFolderPath is a required property for FileObjectAllOf and cannot be null");
            this.Uri = uri;
            this.Size = size;
            this.Constraints = constraints;
        }

        /// <summary>
        /// The repository identifier this file belongs too
        /// </summary>
        /// <value>The repository identifier this file belongs too</value>
        [DataMember(Name = "repositoryId", IsRequired = true, EmitDefaultValue = false)]
        public string RepositoryId { get; set; }

        /// <summary>
        /// Name of the original file uploaded
        /// </summary>
        /// <value>Name of the original file uploaded</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Mime type of the file. Valid mime types - text/csv or application/vmd.ms-excelor or application/x-directory for directories
        /// </summary>
        /// <value>Mime type of the file. Valid mime types - text/csv or application/vmd.ms-excelor or application/x-directory for directories</value>
        [DataMember(Name = "mimeType", IsRequired = true, EmitDefaultValue = false)]
        public string MimeType { get; set; }

        /// <summary>
        /// The name of the attachment within the bucket
        /// </summary>
        /// <value>The name of the attachment within the bucket</value>
        [DataMember(Name = "path", IsRequired = true, EmitDefaultValue = false)]
        public string Path { get; set; }

        /// <summary>
        /// The folder name containing the attachment within the bucket
        /// </summary>
        /// <value>The folder name containing the attachment within the bucket</value>
        [DataMember(Name = "parentFolderPath", IsRequired = true, EmitDefaultValue = false)]
        public string ParentFolderPath { get; set; }

        /// <summary>
        /// The uniform resource identifier where the file can be viewed/downloaded
        /// </summary>
        /// <value>The uniform resource identifier where the file can be viewed/downloaded</value>
        [DataMember(Name = "uri", EmitDefaultValue = false)]
        public string Uri { get; set; }

        /// <summary>
        /// The size of the file
        /// </summary>
        /// <value>The size of the file</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public long Size { get; set; }

        /// <summary>
        /// Additional constraints, if the value is present it means the
        /// </summary>
        /// <value>Additional constraints, if the value is present it means the</value>
        [DataMember(Name = "constraints", EmitDefaultValue = false)]
        public List<string> Constraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FileObjectAllOf {\n");
            sb.Append("  RepositoryId: ").Append(RepositoryId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ParentFolderPath: ").Append(ParentFolderPath).Append("\n");
            sb.Append("  Uri: ").Append(Uri).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileObjectAllOf);
        }

        /// <summary>
        /// Returns true if FileObjectAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of FileObjectAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileObjectAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RepositoryId == input.RepositoryId ||
                    (this.RepositoryId != null &&
                    this.RepositoryId.Equals(input.RepositoryId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.ParentFolderPath == input.ParentFolderPath ||
                    (this.ParentFolderPath != null &&
                    this.ParentFolderPath.Equals(input.ParentFolderPath))
                ) && 
                (
                    this.Uri == input.Uri ||
                    (this.Uri != null &&
                    this.Uri.Equals(input.Uri))
                ) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RepositoryId != null)
                    hashCode = hashCode * 59 + this.RepositoryId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.MimeType != null)
                    hashCode = hashCode * 59 + this.MimeType.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.ParentFolderPath != null)
                    hashCode = hashCode * 59 + this.ParentFolderPath.GetHashCode();
                if (this.Uri != null)
                    hashCode = hashCode * 59 + this.Uri.GetHashCode();
                hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
