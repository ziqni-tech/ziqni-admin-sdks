/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// UpdateInstantWinTile
    /// </summary>
    [DataContract(Name = "UpdateInstantWinTile")]
    public partial class UpdateInstantWinTile : IEquatable<UpdateInstantWinTile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateInstantWinTile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateInstantWinTile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateInstantWinTile" /> class.
        /// </summary>
        /// <param name="icon">The id to the image file (required).</param>
        /// <param name="text">text.</param>
        /// <param name="contraints">hasPrizes, glow.</param>
        /// <param name="reward">reward.</param>
        /// <param name="location">location.</param>
        /// <param name="probability">probability (required).</param>
        public UpdateInstantWinTile(string icon = default(string), string text = default(string), List<string> contraints = default(List<string>), UpdateRewardRequest reward = default(UpdateRewardRequest), GridLocation location = default(GridLocation), double probability = default(double))
        {
            // to ensure "icon" is required (not null)
            this.Icon = icon ?? throw new ArgumentNullException("icon is a required property for UpdateInstantWinTile and cannot be null");
            this.Probability = probability;
            this.Text = text;
            this.Contraints = contraints;
            this.Reward = reward;
            this.Location = location;
        }

        /// <summary>
        /// The id to the image file
        /// </summary>
        /// <value>The id to the image file</value>
        [DataMember(Name = "icon", IsRequired = true, EmitDefaultValue = false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// hasPrizes, glow
        /// </summary>
        /// <value>hasPrizes, glow</value>
        [DataMember(Name = "contraints", EmitDefaultValue = false)]
        public List<string> Contraints { get; set; }

        /// <summary>
        /// Gets or Sets Reward
        /// </summary>
        [DataMember(Name = "reward", EmitDefaultValue = false)]
        public UpdateRewardRequest Reward { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public GridLocation Location { get; set; }

        /// <summary>
        /// Gets or Sets Probability
        /// </summary>
        [DataMember(Name = "probability", IsRequired = true, EmitDefaultValue = false)]
        public double Probability { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateInstantWinTile {\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Contraints: ").Append(Contraints).Append("\n");
            sb.Append("  Reward: ").Append(Reward).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateInstantWinTile);
        }

        /// <summary>
        /// Returns true if UpdateInstantWinTile instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateInstantWinTile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateInstantWinTile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Contraints == input.Contraints ||
                    this.Contraints != null &&
                    input.Contraints != null &&
                    this.Contraints.SequenceEqual(input.Contraints)
                ) && 
                (
                    this.Reward == input.Reward ||
                    (this.Reward != null &&
                    this.Reward.Equals(input.Reward))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Probability == input.Probability ||
                    this.Probability.Equals(input.Probability)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Icon != null)
                    hashCode = hashCode * 59 + this.Icon.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Contraints != null)
                    hashCode = hashCode * 59 + this.Contraints.GetHashCode();
                if (this.Reward != null)
                    hashCode = hashCode * 59 + this.Reward.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                hashCode = hashCode * 59 + this.Probability.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
