/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// RangeQuery
    /// </summary>
    [DataContract(Name = "RangeQuery")]
    public partial class RangeQuery : IEquatable<RangeQuery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RangeQuery" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RangeQuery() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RangeQuery" /> class.
        /// </summary>
        /// <param name="queryField">The key of the parameter that is being searched    (required).</param>
        /// <param name="gt">Greater than value.</param>
        /// <param name="lt">Less than value.</param>
        /// <param name="constraints">Additional constraints.</param>
        public RangeQuery(string queryField = default(string), string gt = default(string), string lt = default(string), List<string> constraints = default(List<string>))
        {
            // to ensure "queryField" is required (not null)
            this.QueryField = queryField ?? throw new ArgumentNullException("queryField is a required property for RangeQuery and cannot be null");
            this.Gt = gt;
            this.Lt = lt;
            this.Constraints = constraints;
        }

        /// <summary>
        /// The key of the parameter that is being searched   
        /// </summary>
        /// <value>The key of the parameter that is being searched   </value>
        [DataMember(Name = "queryField", IsRequired = true, EmitDefaultValue = false)]
        public string QueryField { get; set; }

        /// <summary>
        /// Greater than value
        /// </summary>
        /// <value>Greater than value</value>
        [DataMember(Name = "gt", EmitDefaultValue = false)]
        public string Gt { get; set; }

        /// <summary>
        /// Less than value
        /// </summary>
        /// <value>Less than value</value>
        [DataMember(Name = "lt", EmitDefaultValue = false)]
        public string Lt { get; set; }

        /// <summary>
        /// Additional constraints
        /// </summary>
        /// <value>Additional constraints</value>
        [DataMember(Name = "constraints", EmitDefaultValue = false)]
        public List<string> Constraints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RangeQuery {\n");
            sb.Append("  QueryField: ").Append(QueryField).Append("\n");
            sb.Append("  Gt: ").Append(Gt).Append("\n");
            sb.Append("  Lt: ").Append(Lt).Append("\n");
            sb.Append("  Constraints: ").Append(Constraints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RangeQuery);
        }

        /// <summary>
        /// Returns true if RangeQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of RangeQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RangeQuery input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.QueryField == input.QueryField ||
                    (this.QueryField != null &&
                    this.QueryField.Equals(input.QueryField))
                ) && 
                (
                    this.Gt == input.Gt ||
                    (this.Gt != null &&
                    this.Gt.Equals(input.Gt))
                ) && 
                (
                    this.Lt == input.Lt ||
                    (this.Lt != null &&
                    this.Lt.Equals(input.Lt))
                ) && 
                (
                    this.Constraints == input.Constraints ||
                    this.Constraints != null &&
                    input.Constraints != null &&
                    this.Constraints.SequenceEqual(input.Constraints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueryField != null)
                    hashCode = hashCode * 59 + this.QueryField.GetHashCode();
                if (this.Gt != null)
                    hashCode = hashCode * 59 + this.Gt.GetHashCode();
                if (this.Lt != null)
                    hashCode = hashCode * 59 + this.Lt.GetHashCode();
                if (this.Constraints != null)
                    hashCode = hashCode * 59 + this.Constraints.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
