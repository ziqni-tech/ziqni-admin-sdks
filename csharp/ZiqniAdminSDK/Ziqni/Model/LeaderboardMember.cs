/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Ziqni.Client.OpenAPIDateConverter;

namespace Ziqni.Model
{
    /// <summary>
    /// LeaderboardMember
    /// </summary>
    [DataContract(Name = "LeaderboardMember")]
    public partial class LeaderboardMember : IEquatable<LeaderboardMember>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardMember" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LeaderboardMember() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardMember" /> class.
        /// </summary>
        /// <param name="name">The name of the player (required).</param>
        /// <param name="memberId">Unique system identifier of a Member (required).</param>
        /// <param name="memberRefId">The reference to this member in your system (required).</param>
        /// <param name="rankChangeFrom">Previous rank held, null if no changes are recorded.</param>
        /// <param name="rankChangeType">[-1] for rank-down, like 5 to 8. [0] for no change, [1] for rank-up like 9 to 3.</param>
        /// <param name="_params">The user defined values used in the rules builder.</param>
        public LeaderboardMember(string name = default(string), string memberId = default(string), string memberRefId = default(string), int rankChangeFrom = default(int), int rankChangeType = default(int), Dictionary<string, decimal> _params = default(Dictionary<string, decimal>))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for LeaderboardMember and cannot be null");
            // to ensure "memberId" is required (not null)
            this.MemberId = memberId ?? throw new ArgumentNullException("memberId is a required property for LeaderboardMember and cannot be null");
            // to ensure "memberRefId" is required (not null)
            this.MemberRefId = memberRefId ?? throw new ArgumentNullException("memberRefId is a required property for LeaderboardMember and cannot be null");
            this.RankChangeFrom = rankChangeFrom;
            this.RankChangeType = rankChangeType;
            this.Params = _params;
        }

        /// <summary>
        /// The name of the player
        /// </summary>
        /// <value>The name of the player</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Unique system identifier of a Member
        /// </summary>
        /// <value>Unique system identifier of a Member</value>
        [DataMember(Name = "memberId", IsRequired = true, EmitDefaultValue = false)]
        public string MemberId { get; set; }

        /// <summary>
        /// The reference to this member in your system
        /// </summary>
        /// <value>The reference to this member in your system</value>
        [DataMember(Name = "memberRefId", IsRequired = true, EmitDefaultValue = false)]
        public string MemberRefId { get; set; }

        /// <summary>
        /// Previous rank held, null if no changes are recorded
        /// </summary>
        /// <value>Previous rank held, null if no changes are recorded</value>
        [DataMember(Name = "rankChangeFrom", EmitDefaultValue = false)]
        public int RankChangeFrom { get; set; }

        /// <summary>
        /// [-1] for rank-down, like 5 to 8. [0] for no change, [1] for rank-up like 9 to 3
        /// </summary>
        /// <value>[-1] for rank-down, like 5 to 8. [0] for no change, [1] for rank-up like 9 to 3</value>
        [DataMember(Name = "rankChangeType", EmitDefaultValue = false)]
        public int RankChangeType { get; set; }

        /// <summary>
        /// The user defined values used in the rules builder
        /// </summary>
        /// <value>The user defined values used in the rules builder</value>
        [DataMember(Name = "params", EmitDefaultValue = false)]
        public Dictionary<string, decimal> Params { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LeaderboardMember {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  MemberId: ").Append(MemberId).Append("\n");
            sb.Append("  MemberRefId: ").Append(MemberRefId).Append("\n");
            sb.Append("  RankChangeFrom: ").Append(RankChangeFrom).Append("\n");
            sb.Append("  RankChangeType: ").Append(RankChangeType).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LeaderboardMember);
        }

        /// <summary>
        /// Returns true if LeaderboardMember instances are equal
        /// </summary>
        /// <param name="input">Instance of LeaderboardMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LeaderboardMember input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.MemberId == input.MemberId ||
                    (this.MemberId != null &&
                    this.MemberId.Equals(input.MemberId))
                ) && 
                (
                    this.MemberRefId == input.MemberRefId ||
                    (this.MemberRefId != null &&
                    this.MemberRefId.Equals(input.MemberRefId))
                ) && 
                (
                    this.RankChangeFrom == input.RankChangeFrom ||
                    this.RankChangeFrom.Equals(input.RankChangeFrom)
                ) && 
                (
                    this.RankChangeType == input.RankChangeType ||
                    this.RankChangeType.Equals(input.RankChangeType)
                ) && 
                (
                    this.Params == input.Params ||
                    this.Params != null &&
                    input.Params != null &&
                    this.Params.SequenceEqual(input.Params)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.MemberId != null)
                    hashCode = hashCode * 59 + this.MemberId.GetHashCode();
                if (this.MemberRefId != null)
                    hashCode = hashCode * 59 + this.MemberRefId.GetHashCode();
                hashCode = hashCode * 59 + this.RankChangeFrom.GetHashCode();
                hashCode = hashCode * 59 + this.RankChangeType.GetHashCode();
                if (this.Params != null)
                    hashCode = hashCode * 59 + this.Params.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
