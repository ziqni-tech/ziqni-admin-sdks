/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;

using Ziqni.Client;
using Ziqni.Model;

namespace Ziqni.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFileObjectsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a new file object repository in your Ziqni space</param>
        /// <returns>ApiResponse</returns>
        ApiResponse CreateFileObjects(CreateFileObjectRequest body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a new file object repository in your Ziqni space</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> CreateFileObjectsWithHttpInfo(CreateFileObjectRequest body);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="permanent">Permanently delete the file object. Default is false (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse DeleteFileObjects(List<string> id = default(List<string>), bool? permanent = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="permanent">Permanently delete the file object. Default is false (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> DeleteFileObjectsWithHttpInfo(List<string> id = default(List<string>), bool? permanent = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete file objects by query
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="body">Delete file objects inside a repository from Ziqni by unique file by unique object ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse DeleteFileObjectsByQuery(List<string> id = default(List<string>), QueryRequest body = default(QueryRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete file objects by query
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="body">Delete file objects inside a repository from Ziqni by unique file by unique object ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> DeleteFileObjectsByQueryWithHttpInfo(List<string> id = default(List<string>), QueryRequest body = default(QueryRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download file objects from your Ziqni space
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The canonical path of the file to download (optional)</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream DownloadFileObjects(string path = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download file objects from your Ziqni space
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The canonical path of the file to download (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> DownloadFileObjectsWithHttpInfo(string path = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of file objects
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="download"> (optional)</param>
        /// <returns>FileObjectsResponse</returns>
        FileObjectsResponse GetFileObjects(int? limit = default(int?), int? skip = default(int?), List<string> id = default(List<string>), string download = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of file objects
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="download"> (optional)</param>
        /// <returns>ApiResponse of FileObjectsResponse</returns>
        ApiResponse<FileObjectsResponse> GetFileObjectsWithHttpInfo(int? limit = default(int?), int? skip = default(int?), List<string> id = default(List<string>), string download = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve file objects by query
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="body">Retrieve file objects inside a repository from Ziqni by unique file object ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>FileObjectsResponse</returns>
        FileObjectsResponse GetFileObjectsByQuery(List<string> id = default(List<string>), QueryRequest body = default(QueryRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve file objects by query
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="body">Retrieve file objects inside a repository from Ziqni by unique file object ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>ApiResponse of FileObjectsResponse</returns>
        ApiResponse<FileObjectsResponse> GetFileObjectsByQueryWithHttpInfo(List<string> id = default(List<string>), QueryRequest body = default(QueryRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create or update file objects and binaries in your Ziqni space
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderPath">The folder to save these file in. (optional)</param>
        /// <param name="repositoryId"> (optional)</param>
        /// <param name="templateToSave"> (optional)</param>
        /// <param name="templateName"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse SaveTemplates(string parentFolderPath = default(string), string repositoryId = default(string), string templateToSave = default(string), string templateName = default(string), string tags = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create or update file objects and binaries in your Ziqni space
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderPath">The folder to save these file in. (optional)</param>
        /// <param name="repositoryId"> (optional)</param>
        /// <param name="templateToSave"> (optional)</param>
        /// <param name="templateName"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> SaveTemplatesWithHttpInfo(string parentFolderPath = default(string), string repositoryId = default(string), string templateToSave = default(string), string templateName = default(string), string tags = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update a file object in your Ziqni space.</param>
        /// <returns>ApiResponse</returns>
        ApiResponse UpdateFileObjects(List<UpdateFileObjectRequest> body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update a file object in your Ziqni space.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> UpdateFileObjectsWithHttpInfo(List<UpdateFileObjectRequest> body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create or update file objects and binaries in your Ziqni space
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderPath">The folder to save these file in. (optional)</param>
        /// <param name="files">The files to upload (optional)</param>
        /// <param name="repositoryId"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse UploadFileObjects(string parentFolderPath = default(string), List<System.IO.Stream> files = default(List<System.IO.Stream>), string repositoryId = default(string), string tags = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create or update file objects and binaries in your Ziqni space
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderPath">The folder to save these file in. (optional)</param>
        /// <param name="files">The files to upload (optional)</param>
        /// <param name="repositoryId"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> UploadFileObjectsWithHttpInfo(string parentFolderPath = default(string), List<System.IO.Stream> files = default(List<System.IO.Stream>), string repositoryId = default(string), string tags = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFileObjectsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a new file object repository in your Ziqni space</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> CreateFileObjectsAsync(CreateFileObjectRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a new file object repository in your Ziqni space</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> CreateFileObjectsWithHttpInfoAsync(CreateFileObjectRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="permanent">Permanently delete the file object. Default is false (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> DeleteFileObjectsAsync(List<string> id = default(List<string>), bool? permanent = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="permanent">Permanently delete the file object. Default is false (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> DeleteFileObjectsWithHttpInfoAsync(List<string> id = default(List<string>), bool? permanent = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete file objects by query
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="body">Delete file objects inside a repository from Ziqni by unique file by unique object ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> DeleteFileObjectsByQueryAsync(List<string> id = default(List<string>), QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete file objects by query
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="body">Delete file objects inside a repository from Ziqni by unique file by unique object ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> DeleteFileObjectsByQueryWithHttpInfoAsync(List<string> id = default(List<string>), QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download file objects from your Ziqni space
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The canonical path of the file to download (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> DownloadFileObjectsAsync(string path = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download file objects from your Ziqni space
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The canonical path of the file to download (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> DownloadFileObjectsWithHttpInfoAsync(string path = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of file objects
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="download"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileObjectsResponse</returns>
        System.Threading.Tasks.Task<FileObjectsResponse> GetFileObjectsAsync(int? limit = default(int?), int? skip = default(int?), List<string> id = default(List<string>), string download = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of file objects
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="download"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileObjectsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileObjectsResponse>> GetFileObjectsWithHttpInfoAsync(int? limit = default(int?), int? skip = default(int?), List<string> id = default(List<string>), string download = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve file objects by query
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="body">Retrieve file objects inside a repository from Ziqni by unique file object ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileObjectsResponse</returns>
        System.Threading.Tasks.Task<FileObjectsResponse> GetFileObjectsByQueryAsync(List<string> id = default(List<string>), QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve file objects by query
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="body">Retrieve file objects inside a repository from Ziqni by unique file object ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileObjectsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileObjectsResponse>> GetFileObjectsByQueryWithHttpInfoAsync(List<string> id = default(List<string>), QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create or update file objects and binaries in your Ziqni space
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderPath">The folder to save these file in. (optional)</param>
        /// <param name="repositoryId"> (optional)</param>
        /// <param name="templateToSave"> (optional)</param>
        /// <param name="templateName"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> SaveTemplatesAsync(string parentFolderPath = default(string), string repositoryId = default(string), string templateToSave = default(string), string templateName = default(string), string tags = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create or update file objects and binaries in your Ziqni space
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderPath">The folder to save these file in. (optional)</param>
        /// <param name="repositoryId"> (optional)</param>
        /// <param name="templateToSave"> (optional)</param>
        /// <param name="templateName"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> SaveTemplatesWithHttpInfoAsync(string parentFolderPath = default(string), string repositoryId = default(string), string templateToSave = default(string), string templateName = default(string), string tags = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update a file object in your Ziqni space.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> UpdateFileObjectsAsync(List<UpdateFileObjectRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update a file object in your Ziqni space.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> UpdateFileObjectsWithHttpInfoAsync(List<UpdateFileObjectRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create or update file objects and binaries in your Ziqni space
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderPath">The folder to save these file in. (optional)</param>
        /// <param name="files">The files to upload (optional)</param>
        /// <param name="repositoryId"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> UploadFileObjectsAsync(string parentFolderPath = default(string), List<System.IO.Stream> files = default(List<System.IO.Stream>), string repositoryId = default(string), string tags = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create or update file objects and binaries in your Ziqni space
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderPath">The folder to save these file in. (optional)</param>
        /// <param name="files">The files to upload (optional)</param>
        /// <param name="repositoryId"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> UploadFileObjectsWithHttpInfoAsync(string parentFolderPath = default(string), List<System.IO.Stream> files = default(List<System.IO.Stream>), string repositoryId = default(string), string tags = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFileObjectsApi : IFileObjectsApiSync, IFileObjectsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FileObjectsApi : IFileObjectsApi
    {
        private Ziqni.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FileObjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FileObjectsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileObjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FileObjectsApi(string basePath)
        {
            this.Configuration = Ziqni.Client.Configuration.MergeConfigurations(
                Ziqni.Client.GlobalConfiguration.Instance,
                new Ziqni.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ziqni.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ziqni.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ziqni.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileObjectsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FileObjectsApi(Ziqni.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ziqni.Client.Configuration.MergeConfigurations(
                Ziqni.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ziqni.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ziqni.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ziqni.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileObjectsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FileObjectsApi(Ziqni.Client.ISynchronousClient client, Ziqni.Client.IAsynchronousClient asyncClient, Ziqni.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ziqni.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ziqni.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ziqni.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ziqni.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ziqni.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a new file object repository in your Ziqni space</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse CreateFileObjects(CreateFileObjectRequest body)
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = CreateFileObjectsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a new file object repository in your Ziqni space</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Ziqni.Client.ApiResponse<ApiResponse> CreateFileObjectsWithHttpInfo(CreateFileObjectRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Ziqni.Client.ApiException(400, "Missing required parameter 'body' when calling FileObjectsApi->CreateFileObjects");

            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/file-objects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFileObjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a new file object repository in your Ziqni space</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> CreateFileObjectsAsync(CreateFileObjectRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = await CreateFileObjectsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create a new file object repository in your Ziqni space</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Ziqni.Client.ApiResponse<ApiResponse>> CreateFileObjectsWithHttpInfoAsync(CreateFileObjectRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Ziqni.Client.ApiException(400, "Missing required parameter 'body' when calling FileObjectsApi->CreateFileObjects");


            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/file-objects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFileObjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="permanent">Permanently delete the file object. Default is false (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse DeleteFileObjects(List<string> id = default(List<string>), bool? permanent = default(bool?))
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = DeleteFileObjectsWithHttpInfo(id, permanent);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="permanent">Permanently delete the file object. Default is false (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Ziqni.Client.ApiResponse<ApiResponse> DeleteFileObjectsWithHttpInfo(List<string> id = default(List<string>), bool? permanent = default(bool?))
        {
            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            if (permanent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("", "permanent", permanent));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/file-objects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFileObjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="permanent">Permanently delete the file object. Default is false (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> DeleteFileObjectsAsync(List<string> id = default(List<string>), bool? permanent = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = await DeleteFileObjectsWithHttpInfoAsync(id, permanent, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="permanent">Permanently delete the file object. Default is false (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Ziqni.Client.ApiResponse<ApiResponse>> DeleteFileObjectsWithHttpInfoAsync(List<string> id = default(List<string>), bool? permanent = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            if (permanent != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("", "permanent", permanent));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/file-objects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFileObjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete file objects by query
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="body">Delete file objects inside a repository from Ziqni by unique file by unique object ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse DeleteFileObjectsByQuery(List<string> id = default(List<string>), QueryRequest body = default(QueryRequest))
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = DeleteFileObjectsByQueryWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete file objects by query
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="body">Delete file objects inside a repository from Ziqni by unique file by unique object ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Ziqni.Client.ApiResponse<ApiResponse> DeleteFileObjectsByQueryWithHttpInfo(List<string> id = default(List<string>), QueryRequest body = default(QueryRequest))
        {
            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/file-objects/delete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFileObjectsByQuery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete file objects by query
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="body">Delete file objects inside a repository from Ziqni by unique file by unique object ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> DeleteFileObjectsByQueryAsync(List<string> id = default(List<string>), QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = await DeleteFileObjectsByQueryWithHttpInfoAsync(id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Delete file objects by query
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="body">Delete file objects inside a repository from Ziqni by unique file by unique object ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Ziqni.Client.ApiResponse<ApiResponse>> DeleteFileObjectsByQueryWithHttpInfoAsync(List<string> id = default(List<string>), QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/file-objects/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFileObjectsByQuery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Download file objects from your Ziqni space
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The canonical path of the file to download (optional)</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream DownloadFileObjects(string path = default(string))
        {
            Ziqni.Client.ApiResponse<System.IO.Stream> localVarResponse = DownloadFileObjectsWithHttpInfo(path);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Download file objects from your Ziqni space
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The canonical path of the file to download (optional)</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public Ziqni.Client.ApiResponse<System.IO.Stream> DownloadFileObjectsWithHttpInfo(string path = default(string))
        {
            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/xml",
                "application/json"
            };

            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/file-objects/download", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadFileObjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Download file objects from your Ziqni space
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The canonical path of the file to download (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> DownloadFileObjectsAsync(string path = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ziqni.Client.ApiResponse<System.IO.Stream> localVarResponse = await DownloadFileObjectsWithHttpInfoAsync(path, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Download file objects from your Ziqni space
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="path">The canonical path of the file to download (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<Ziqni.Client.ApiResponse<System.IO.Stream>> DownloadFileObjectsWithHttpInfoAsync(string path = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/xml",
                "application/json"
            };


            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (path != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("", "path", path));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/file-objects/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadFileObjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of file objects
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="download"> (optional)</param>
        /// <returns>FileObjectsResponse</returns>
        public FileObjectsResponse GetFileObjects(int? limit = default(int?), int? skip = default(int?), List<string> id = default(List<string>), string download = default(string))
        {
            Ziqni.Client.ApiResponse<FileObjectsResponse> localVarResponse = GetFileObjectsWithHttpInfo(limit, skip, id, download);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of file objects
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="download"> (optional)</param>
        /// <returns>ApiResponse of FileObjectsResponse</returns>
        public Ziqni.Client.ApiResponse<FileObjectsResponse> GetFileObjectsWithHttpInfo(int? limit = default(int?), int? skip = default(int?), List<string> id = default(List<string>), string download = default(string))
        {
            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("", "_limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("", "_skip", skip));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            if (download != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("", "download", download));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileObjectsResponse>("/file-objects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileObjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of file objects
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="download"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileObjectsResponse</returns>
        public async System.Threading.Tasks.Task<FileObjectsResponse> GetFileObjectsAsync(int? limit = default(int?), int? skip = default(int?), List<string> id = default(List<string>), string download = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ziqni.Client.ApiResponse<FileObjectsResponse> localVarResponse = await GetFileObjectsWithHttpInfoAsync(limit, skip, id, download, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of file objects
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="download"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileObjectsResponse)</returns>
        public async System.Threading.Tasks.Task<Ziqni.Client.ApiResponse<FileObjectsResponse>> GetFileObjectsWithHttpInfoAsync(int? limit = default(int?), int? skip = default(int?), List<string> id = default(List<string>), string download = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("", "_limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("", "_skip", skip));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            if (download != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("", "download", download));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileObjectsResponse>("/file-objects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileObjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve file objects by query
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="body">Retrieve file objects inside a repository from Ziqni by unique file object ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>FileObjectsResponse</returns>
        public FileObjectsResponse GetFileObjectsByQuery(List<string> id = default(List<string>), QueryRequest body = default(QueryRequest))
        {
            Ziqni.Client.ApiResponse<FileObjectsResponse> localVarResponse = GetFileObjectsByQueryWithHttpInfo(id, body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve file objects by query
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="body">Retrieve file objects inside a repository from Ziqni by unique file object ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>ApiResponse of FileObjectsResponse</returns>
        public Ziqni.Client.ApiResponse<FileObjectsResponse> GetFileObjectsByQueryWithHttpInfo(List<string> id = default(List<string>), QueryRequest body = default(QueryRequest))
        {
            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FileObjectsResponse>("/file-objects/query", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileObjectsByQuery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Retrieve file objects by query
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="body">Retrieve file objects inside a repository from Ziqni by unique file object ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileObjectsResponse</returns>
        public async System.Threading.Tasks.Task<FileObjectsResponse> GetFileObjectsByQueryAsync(List<string> id = default(List<string>), QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ziqni.Client.ApiResponse<FileObjectsResponse> localVarResponse = await GetFileObjectsByQueryWithHttpInfoAsync(id, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve file objects by query
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="body">Retrieve file objects inside a repository from Ziqni by unique file object ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileObjectsResponse)</returns>
        public async System.Threading.Tasks.Task<Ziqni.Client.ApiResponse<FileObjectsResponse>> GetFileObjectsByQueryWithHttpInfoAsync(List<string> id = default(List<string>), QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FileObjectsResponse>("/file-objects/query", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileObjectsByQuery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create or update file objects and binaries in your Ziqni space
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderPath">The folder to save these file in. (optional)</param>
        /// <param name="repositoryId"> (optional)</param>
        /// <param name="templateToSave"> (optional)</param>
        /// <param name="templateName"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse SaveTemplates(string parentFolderPath = default(string), string repositoryId = default(string), string templateToSave = default(string), string templateName = default(string), string tags = default(string))
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = SaveTemplatesWithHttpInfo(parentFolderPath, repositoryId, templateToSave, templateName, tags);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create or update file objects and binaries in your Ziqni space
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderPath">The folder to save these file in. (optional)</param>
        /// <param name="repositoryId"> (optional)</param>
        /// <param name="templateToSave"> (optional)</param>
        /// <param name="templateName"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Ziqni.Client.ApiResponse<ApiResponse> SaveTemplatesWithHttpInfo(string parentFolderPath = default(string), string repositoryId = default(string), string templateToSave = default(string), string templateName = default(string), string tags = default(string))
        {
            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (parentFolderPath != null)
            {
                localVarRequestOptions.FormParameters.Add("parentFolderPath", Ziqni.Client.ClientUtils.ParameterToString(parentFolderPath)); // form parameter
            }
            if (repositoryId != null)
            {
                localVarRequestOptions.FormParameters.Add("repositoryId", Ziqni.Client.ClientUtils.ParameterToString(repositoryId)); // form parameter
            }
            if (templateToSave != null)
            {
                localVarRequestOptions.FormParameters.Add("templateToSave", Ziqni.Client.ClientUtils.ParameterToString(templateToSave)); // form parameter
            }
            if (templateName != null)
            {
                localVarRequestOptions.FormParameters.Add("templateName", Ziqni.Client.ClientUtils.ParameterToString(templateName)); // form parameter
            }
            if (tags != null)
            {
                localVarRequestOptions.FormParameters.Add("tags", Ziqni.Client.ClientUtils.ParameterToString(tags)); // form parameter
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/file-objects/save-template", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveTemplates", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create or update file objects and binaries in your Ziqni space
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderPath">The folder to save these file in. (optional)</param>
        /// <param name="repositoryId"> (optional)</param>
        /// <param name="templateToSave"> (optional)</param>
        /// <param name="templateName"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> SaveTemplatesAsync(string parentFolderPath = default(string), string repositoryId = default(string), string templateToSave = default(string), string templateName = default(string), string tags = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = await SaveTemplatesWithHttpInfoAsync(parentFolderPath, repositoryId, templateToSave, templateName, tags, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create or update file objects and binaries in your Ziqni space
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderPath">The folder to save these file in. (optional)</param>
        /// <param name="repositoryId"> (optional)</param>
        /// <param name="templateToSave"> (optional)</param>
        /// <param name="templateName"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Ziqni.Client.ApiResponse<ApiResponse>> SaveTemplatesWithHttpInfoAsync(string parentFolderPath = default(string), string repositoryId = default(string), string templateToSave = default(string), string templateName = default(string), string tags = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (parentFolderPath != null)
            {
                localVarRequestOptions.FormParameters.Add("parentFolderPath", Ziqni.Client.ClientUtils.ParameterToString(parentFolderPath)); // form parameter
            }
            if (repositoryId != null)
            {
                localVarRequestOptions.FormParameters.Add("repositoryId", Ziqni.Client.ClientUtils.ParameterToString(repositoryId)); // form parameter
            }
            if (templateToSave != null)
            {
                localVarRequestOptions.FormParameters.Add("templateToSave", Ziqni.Client.ClientUtils.ParameterToString(templateToSave)); // form parameter
            }
            if (templateName != null)
            {
                localVarRequestOptions.FormParameters.Add("templateName", Ziqni.Client.ClientUtils.ParameterToString(templateName)); // form parameter
            }
            if (tags != null)
            {
                localVarRequestOptions.FormParameters.Add("tags", Ziqni.Client.ClientUtils.ParameterToString(tags)); // form parameter
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/file-objects/save-template", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SaveTemplates", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update a file object in your Ziqni space.</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse UpdateFileObjects(List<UpdateFileObjectRequest> body)
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = UpdateFileObjectsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update a file object in your Ziqni space.</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Ziqni.Client.ApiResponse<ApiResponse> UpdateFileObjectsWithHttpInfo(List<UpdateFileObjectRequest> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Ziqni.Client.ApiException(400, "Missing required parameter 'body' when calling FileObjectsApi->UpdateFileObjects");

            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiResponse>("/file-objects", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFileObjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update a file object in your Ziqni space.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> UpdateFileObjectsAsync(List<UpdateFileObjectRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = await UpdateFileObjectsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update a file object in your Ziqni space.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Ziqni.Client.ApiResponse<ApiResponse>> UpdateFileObjectsWithHttpInfoAsync(List<UpdateFileObjectRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Ziqni.Client.ApiException(400, "Missing required parameter 'body' when calling FileObjectsApi->UpdateFileObjects");


            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiResponse>("/file-objects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFileObjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create or update file objects and binaries in your Ziqni space
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderPath">The folder to save these file in. (optional)</param>
        /// <param name="files">The files to upload (optional)</param>
        /// <param name="repositoryId"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse UploadFileObjects(string parentFolderPath = default(string), List<System.IO.Stream> files = default(List<System.IO.Stream>), string repositoryId = default(string), string tags = default(string))
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = UploadFileObjectsWithHttpInfo(parentFolderPath, files, repositoryId, tags);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create or update file objects and binaries in your Ziqni space
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderPath">The folder to save these file in. (optional)</param>
        /// <param name="files">The files to upload (optional)</param>
        /// <param name="repositoryId"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Ziqni.Client.ApiResponse<ApiResponse> UploadFileObjectsWithHttpInfo(string parentFolderPath = default(string), List<System.IO.Stream> files = default(List<System.IO.Stream>), string repositoryId = default(string), string tags = default(string))
        {
            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (parentFolderPath != null)
            {
                localVarRequestOptions.FormParameters.Add("parentFolderPath", Ziqni.Client.ClientUtils.ParameterToString(parentFolderPath)); // form parameter
            }
            if (files != null)
            {
                localVarRequestOptions.FileParameters.Add("files", files);
            }
            if (repositoryId != null)
            {
                localVarRequestOptions.FormParameters.Add("repositoryId", Ziqni.Client.ClientUtils.ParameterToString(repositoryId)); // form parameter
            }
            if (tags != null)
            {
                localVarRequestOptions.FormParameters.Add("tags", Ziqni.Client.ClientUtils.ParameterToString(tags)); // form parameter
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/file-objects/upload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadFileObjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create or update file objects and binaries in your Ziqni space
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderPath">The folder to save these file in. (optional)</param>
        /// <param name="files">The files to upload (optional)</param>
        /// <param name="repositoryId"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> UploadFileObjectsAsync(string parentFolderPath = default(string), List<System.IO.Stream> files = default(List<System.IO.Stream>), string repositoryId = default(string), string tags = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = await UploadFileObjectsWithHttpInfoAsync(parentFolderPath, files, repositoryId, tags, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create or update file objects and binaries in your Ziqni space
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="parentFolderPath">The folder to save these file in. (optional)</param>
        /// <param name="files">The files to upload (optional)</param>
        /// <param name="repositoryId"> (optional)</param>
        /// <param name="tags"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Ziqni.Client.ApiResponse<ApiResponse>> UploadFileObjectsWithHttpInfoAsync(string parentFolderPath = default(string), List<System.IO.Stream> files = default(List<System.IO.Stream>), string repositoryId = default(string), string tags = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (parentFolderPath != null)
            {
                localVarRequestOptions.FormParameters.Add("parentFolderPath", Ziqni.Client.ClientUtils.ParameterToString(parentFolderPath)); // form parameter
            }
            if (files != null)
            {
                localVarRequestOptions.FileParameters.Add("files", files);
            }
            if (repositoryId != null)
            {
                localVarRequestOptions.FormParameters.Add("repositoryId", Ziqni.Client.ClientUtils.ParameterToString(repositoryId)); // form parameter
            }
            if (tags != null)
            {
                localVarRequestOptions.FormParameters.Add("tags", Ziqni.Client.ClientUtils.ParameterToString(tags)); // form parameter
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/file-objects/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UploadFileObjects", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
