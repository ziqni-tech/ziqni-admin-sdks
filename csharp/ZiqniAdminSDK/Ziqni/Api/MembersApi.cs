/*
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.9
 * Contact: support@ziqni.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;

using Ziqni.Client;
using Ziqni.Model;

namespace Ziqni.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMembersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create members
        /// </summary>
        /// <remarks>
        /// Create new Members in the Ziqni database
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create Members in the Ziqni database. An array can contain a maximum of 10,000 members in one request</param>
        /// <returns>ApiResponse</returns>
        ApiResponse CreateMembers(List<CreateMemberRequest> body);

        /// <summary>
        /// Create members
        /// </summary>
        /// <remarks>
        /// Create new Members in the Ziqni database
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create Members in the Ziqni database. An array can contain a maximum of 10,000 members in one request</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> CreateMembersWithHttpInfo(List<CreateMemberRequest> body);
        /// <summary>
        /// Delete members
        /// </summary>
        /// <remarks>
        /// Delete Members for a given identifier specified
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse DeleteMembers(List<string> id = default(List<string>));

        /// <summary>
        /// Delete members
        /// </summary>
        /// <remarks>
        /// Delete Members for a given identifier specified
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> DeleteMembersWithHttpInfo(List<string> id = default(List<string>));
        /// <summary>
        /// Delete members by query
        /// </summary>
        /// <remarks>
        /// Delete Members from Ziqni database by unique Members ID&#39;s or any other POST body parameters using the POST method
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Delete Members from Ziqni database by unique Members ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse DeleteMembersByQuery(QueryRequest body = default(QueryRequest));

        /// <summary>
        /// Delete members by query
        /// </summary>
        /// <remarks>
        /// Delete Members from Ziqni database by unique Members ID&#39;s or any other POST body parameters using the POST method
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Delete Members from Ziqni database by unique Members ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> DeleteMembersByQueryWithHttpInfo(QueryRequest body = default(QueryRequest));
        /// <summary>
        /// Get members
        /// </summary>
        /// <remarks>
        /// Returns a list of Members. This assumes that members have first been uploaded via a POST request or web console
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <returns>MemberResponse</returns>
        MemberResponse GetMembers(List<string> id = default(List<string>), int? limit = default(int?), int? skip = default(int?));

        /// <summary>
        /// Get members
        /// </summary>
        /// <remarks>
        /// Returns a list of Members. This assumes that members have first been uploaded via a POST request or web console
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <returns>ApiResponse of MemberResponse</returns>
        ApiResponse<MemberResponse> GetMembersWithHttpInfo(List<string> id = default(List<string>), int? limit = default(int?), int? skip = default(int?));
        /// <summary>
        /// Get members by query
        /// </summary>
        /// <remarks>
        /// Retrieve Members from Ziqni database by unique Member ID&#39;s or any other POST body parameters using the POST method
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Retrieve Products from Ziqni database by unique Product ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>MemberResponse</returns>
        MemberResponse GetMembersByQuery(QueryRequest body = default(QueryRequest));

        /// <summary>
        /// Get members by query
        /// </summary>
        /// <remarks>
        /// Retrieve Members from Ziqni database by unique Member ID&#39;s or any other POST body parameters using the POST method
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Retrieve Products from Ziqni database by unique Product ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>ApiResponse of MemberResponse</returns>
        ApiResponse<MemberResponse> GetMembersByQueryWithHttpInfo(QueryRequest body = default(QueryRequest));
        /// <summary>
        /// Get members by reference ids
        /// </summary>
        /// <remarks>
        /// Returns a list of Members. This assumes that members have first been uploaded via a POST request or web console
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refIds">The reference ids  of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <returns>MemberResponse</returns>
        MemberResponse GetMembersByRefId(List<string> refIds = default(List<string>), int? limit = default(int?), int? skip = default(int?));

        /// <summary>
        /// Get members by reference ids
        /// </summary>
        /// <remarks>
        /// Returns a list of Members. This assumes that members have first been uploaded via a POST request or web console
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refIds">The reference ids  of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <returns>ApiResponse of MemberResponse</returns>
        ApiResponse<MemberResponse> GetMembersByRefIdWithHttpInfo(List<string> refIds = default(List<string>), int? limit = default(int?), int? skip = default(int?));
        /// <summary>
        /// Update members
        /// </summary>
        /// <remarks>
        /// Update existing Members in the Ziqni database
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update member details in the Ziqni database for a given Member identifier. * Member Ref Id can not be changed after creation * A member Id must exist in the Ziqni database to update the member</param>
        /// <returns>ApiResponse</returns>
        ApiResponse UpdateMembers(List<UpdateMemberRequest> body);

        /// <summary>
        /// Update members
        /// </summary>
        /// <remarks>
        /// Update existing Members in the Ziqni database
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update member details in the Ziqni database for a given Member identifier. * Member Ref Id can not be changed after creation * A member Id must exist in the Ziqni database to update the member</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> UpdateMembersWithHttpInfo(List<UpdateMemberRequest> body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMembersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create members
        /// </summary>
        /// <remarks>
        /// Create new Members in the Ziqni database
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create Members in the Ziqni database. An array can contain a maximum of 10,000 members in one request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> CreateMembersAsync(List<CreateMemberRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create members
        /// </summary>
        /// <remarks>
        /// Create new Members in the Ziqni database
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create Members in the Ziqni database. An array can contain a maximum of 10,000 members in one request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> CreateMembersWithHttpInfoAsync(List<CreateMemberRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete members
        /// </summary>
        /// <remarks>
        /// Delete Members for a given identifier specified
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> DeleteMembersAsync(List<string> id = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete members
        /// </summary>
        /// <remarks>
        /// Delete Members for a given identifier specified
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> DeleteMembersWithHttpInfoAsync(List<string> id = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete members by query
        /// </summary>
        /// <remarks>
        /// Delete Members from Ziqni database by unique Members ID&#39;s or any other POST body parameters using the POST method
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Delete Members from Ziqni database by unique Members ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> DeleteMembersByQueryAsync(QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete members by query
        /// </summary>
        /// <remarks>
        /// Delete Members from Ziqni database by unique Members ID&#39;s or any other POST body parameters using the POST method
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Delete Members from Ziqni database by unique Members ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> DeleteMembersByQueryWithHttpInfoAsync(QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get members
        /// </summary>
        /// <remarks>
        /// Returns a list of Members. This assumes that members have first been uploaded via a POST request or web console
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponse</returns>
        System.Threading.Tasks.Task<MemberResponse> GetMembersAsync(List<string> id = default(List<string>), int? limit = default(int?), int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get members
        /// </summary>
        /// <remarks>
        /// Returns a list of Members. This assumes that members have first been uploaded via a POST request or web console
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponse>> GetMembersWithHttpInfoAsync(List<string> id = default(List<string>), int? limit = default(int?), int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get members by query
        /// </summary>
        /// <remarks>
        /// Retrieve Members from Ziqni database by unique Member ID&#39;s or any other POST body parameters using the POST method
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Retrieve Products from Ziqni database by unique Product ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponse</returns>
        System.Threading.Tasks.Task<MemberResponse> GetMembersByQueryAsync(QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get members by query
        /// </summary>
        /// <remarks>
        /// Retrieve Members from Ziqni database by unique Member ID&#39;s or any other POST body parameters using the POST method
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Retrieve Products from Ziqni database by unique Product ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponse>> GetMembersByQueryWithHttpInfoAsync(QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get members by reference ids
        /// </summary>
        /// <remarks>
        /// Returns a list of Members. This assumes that members have first been uploaded via a POST request or web console
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refIds">The reference ids  of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponse</returns>
        System.Threading.Tasks.Task<MemberResponse> GetMembersByRefIdAsync(List<string> refIds = default(List<string>), int? limit = default(int?), int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get members by reference ids
        /// </summary>
        /// <remarks>
        /// Returns a list of Members. This assumes that members have first been uploaded via a POST request or web console
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refIds">The reference ids  of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemberResponse>> GetMembersByRefIdWithHttpInfoAsync(List<string> refIds = default(List<string>), int? limit = default(int?), int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update members
        /// </summary>
        /// <remarks>
        /// Update existing Members in the Ziqni database
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update member details in the Ziqni database for a given Member identifier. * Member Ref Id can not be changed after creation * A member Id must exist in the Ziqni database to update the member</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> UpdateMembersAsync(List<UpdateMemberRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update members
        /// </summary>
        /// <remarks>
        /// Update existing Members in the Ziqni database
        /// </remarks>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update member details in the Ziqni database for a given Member identifier. * Member Ref Id can not be changed after creation * A member Id must exist in the Ziqni database to update the member</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> UpdateMembersWithHttpInfoAsync(List<UpdateMemberRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMembersApi : IMembersApiSync, IMembersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MembersApi : IMembersApi
    {
        private Ziqni.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MembersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MembersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MembersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MembersApi(string basePath)
        {
            this.Configuration = Ziqni.Client.Configuration.MergeConfigurations(
                Ziqni.Client.GlobalConfiguration.Instance,
                new Ziqni.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Ziqni.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ziqni.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Ziqni.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MembersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MembersApi(Ziqni.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Ziqni.Client.Configuration.MergeConfigurations(
                Ziqni.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Ziqni.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Ziqni.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Ziqni.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MembersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MembersApi(Ziqni.Client.ISynchronousClient client, Ziqni.Client.IAsynchronousClient asyncClient, Ziqni.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Ziqni.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Ziqni.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Ziqni.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Ziqni.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Ziqni.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create members Create new Members in the Ziqni database
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create Members in the Ziqni database. An array can contain a maximum of 10,000 members in one request</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse CreateMembers(List<CreateMemberRequest> body)
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = CreateMembersWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create members Create new Members in the Ziqni database
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create Members in the Ziqni database. An array can contain a maximum of 10,000 members in one request</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Ziqni.Client.ApiResponse<ApiResponse> CreateMembersWithHttpInfo(List<CreateMemberRequest> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Ziqni.Client.ApiException(400, "Missing required parameter 'body' when calling MembersApi->CreateMembers");

            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "file/csv"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create members Create new Members in the Ziqni database
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create Members in the Ziqni database. An array can contain a maximum of 10,000 members in one request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> CreateMembersAsync(List<CreateMemberRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = await CreateMembersWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create members Create new Members in the Ziqni database
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Create Members in the Ziqni database. An array can contain a maximum of 10,000 members in one request</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Ziqni.Client.ApiResponse<ApiResponse>> CreateMembersWithHttpInfoAsync(List<CreateMemberRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Ziqni.Client.ApiException(400, "Missing required parameter 'body' when calling MembersApi->CreateMembers");


            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "file/csv"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete members Delete Members for a given identifier specified
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse DeleteMembers(List<string> id = default(List<string>))
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = DeleteMembersWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete members Delete Members for a given identifier specified
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Ziqni.Client.ApiResponse<ApiResponse> DeleteMembersWithHttpInfo(List<string> id = default(List<string>))
        {
            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiResponse>("/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete members Delete Members for a given identifier specified
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> DeleteMembersAsync(List<string> id = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = await DeleteMembersWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete members Delete Members for a given identifier specified
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Ziqni.Client.ApiResponse<ApiResponse>> DeleteMembersWithHttpInfoAsync(List<string> id = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiResponse>("/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete members by query Delete Members from Ziqni database by unique Members ID&#39;s or any other POST body parameters using the POST method
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Delete Members from Ziqni database by unique Members ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse DeleteMembersByQuery(QueryRequest body = default(QueryRequest))
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = DeleteMembersByQueryWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete members by query Delete Members from Ziqni database by unique Members ID&#39;s or any other POST body parameters using the POST method
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Delete Members from Ziqni database by unique Members ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Ziqni.Client.ApiResponse<ApiResponse> DeleteMembersByQueryWithHttpInfo(QueryRequest body = default(QueryRequest))
        {
            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiResponse>("/members/delete", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMembersByQuery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete members by query Delete Members from Ziqni database by unique Members ID&#39;s or any other POST body parameters using the POST method
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Delete Members from Ziqni database by unique Members ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> DeleteMembersByQueryAsync(QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = await DeleteMembersByQueryWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete members by query Delete Members from Ziqni database by unique Members ID&#39;s or any other POST body parameters using the POST method
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Delete Members from Ziqni database by unique Members ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Ziqni.Client.ApiResponse<ApiResponse>> DeleteMembersByQueryWithHttpInfoAsync(QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/members/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteMembersByQuery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get members Returns a list of Members. This assumes that members have first been uploaded via a POST request or web console
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <returns>MemberResponse</returns>
        public MemberResponse GetMembers(List<string> id = default(List<string>), int? limit = default(int?), int? skip = default(int?))
        {
            Ziqni.Client.ApiResponse<MemberResponse> localVarResponse = GetMembersWithHttpInfo(id, limit, skip);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get members Returns a list of Members. This assumes that members have first been uploaded via a POST request or web console
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <returns>ApiResponse of MemberResponse</returns>
        public Ziqni.Client.ApiResponse<MemberResponse> GetMembersWithHttpInfo(List<string> id = default(List<string>), int? limit = default(int?), int? skip = default(int?))
        {
            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("", "_limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("", "_skip", skip));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MemberResponse>("/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get members Returns a list of Members. This assumes that members have first been uploaded via a POST request or web console
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponse</returns>
        public async System.Threading.Tasks.Task<MemberResponse> GetMembersAsync(List<string> id = default(List<string>), int? limit = default(int?), int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ziqni.Client.ApiResponse<MemberResponse> localVarResponse = await GetMembersWithHttpInfoAsync(id, limit, skip, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get members Returns a list of Members. This assumes that members have first been uploaded via a POST request or web console
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The unique identifiers of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponse)</returns>
        public async System.Threading.Tasks.Task<Ziqni.Client.ApiResponse<MemberResponse>> GetMembersWithHttpInfoAsync(List<string> id = default(List<string>), int? limit = default(int?), int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("multi", "id", id));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("", "_limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("", "_skip", skip));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MemberResponse>("/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get members by query Retrieve Members from Ziqni database by unique Member ID&#39;s or any other POST body parameters using the POST method
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Retrieve Products from Ziqni database by unique Product ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>MemberResponse</returns>
        public MemberResponse GetMembersByQuery(QueryRequest body = default(QueryRequest))
        {
            Ziqni.Client.ApiResponse<MemberResponse> localVarResponse = GetMembersByQueryWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get members by query Retrieve Members from Ziqni database by unique Member ID&#39;s or any other POST body parameters using the POST method
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Retrieve Products from Ziqni database by unique Product ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <returns>ApiResponse of MemberResponse</returns>
        public Ziqni.Client.ApiResponse<MemberResponse> GetMembersByQueryWithHttpInfo(QueryRequest body = default(QueryRequest))
        {
            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<MemberResponse>("/members/query", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMembersByQuery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get members by query Retrieve Members from Ziqni database by unique Member ID&#39;s or any other POST body parameters using the POST method
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Retrieve Products from Ziqni database by unique Product ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponse</returns>
        public async System.Threading.Tasks.Task<MemberResponse> GetMembersByQueryAsync(QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ziqni.Client.ApiResponse<MemberResponse> localVarResponse = await GetMembersByQueryWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get members by query Retrieve Members from Ziqni database by unique Member ID&#39;s or any other POST body parameters using the POST method
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Retrieve Products from Ziqni database by unique Product ID&#39;s or any other POST body parameters using the POST method (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponse)</returns>
        public async System.Threading.Tasks.Task<Ziqni.Client.ApiResponse<MemberResponse>> GetMembersByQueryWithHttpInfoAsync(QueryRequest body = default(QueryRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<MemberResponse>("/members/query", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMembersByQuery", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get members by reference ids Returns a list of Members. This assumes that members have first been uploaded via a POST request or web console
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refIds">The reference ids  of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <returns>MemberResponse</returns>
        public MemberResponse GetMembersByRefId(List<string> refIds = default(List<string>), int? limit = default(int?), int? skip = default(int?))
        {
            Ziqni.Client.ApiResponse<MemberResponse> localVarResponse = GetMembersByRefIdWithHttpInfo(refIds, limit, skip);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get members by reference ids Returns a list of Members. This assumes that members have first been uploaded via a POST request or web console
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refIds">The reference ids  of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <returns>ApiResponse of MemberResponse</returns>
        public Ziqni.Client.ApiResponse<MemberResponse> GetMembersByRefIdWithHttpInfo(List<string> refIds = default(List<string>), int? limit = default(int?), int? skip = default(int?))
        {
            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (refIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("multi", "refIds", refIds));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("", "_limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("", "_skip", skip));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MemberResponse>("/members/find-by-ref-identifiers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMembersByRefId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get members by reference ids Returns a list of Members. This assumes that members have first been uploaded via a POST request or web console
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refIds">The reference ids  of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemberResponse</returns>
        public async System.Threading.Tasks.Task<MemberResponse> GetMembersByRefIdAsync(List<string> refIds = default(List<string>), int? limit = default(int?), int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ziqni.Client.ApiResponse<MemberResponse> localVarResponse = await GetMembersByRefIdWithHttpInfoAsync(refIds, limit, skip, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get members by reference ids Returns a list of Members. This assumes that members have first been uploaded via a POST request or web console
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refIds">The reference ids  of the resources (optional)</param>
        /// <param name="limit">Limit the returned total records found (optional)</param>
        /// <param name="skip">Skip the returned records found and return the next batch of records (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemberResponse)</returns>
        public async System.Threading.Tasks.Task<Ziqni.Client.ApiResponse<MemberResponse>> GetMembersByRefIdWithHttpInfoAsync(List<string> refIds = default(List<string>), int? limit = default(int?), int? skip = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (refIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("multi", "refIds", refIds));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("", "_limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Ziqni.Client.ClientUtils.ParameterToMultiMap("", "_skip", skip));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MemberResponse>("/members/find-by-ref-identifiers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMembersByRefId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update members Update existing Members in the Ziqni database
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update member details in the Ziqni database for a given Member identifier. * Member Ref Id can not be changed after creation * A member Id must exist in the Ziqni database to update the member</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse UpdateMembers(List<UpdateMemberRequest> body)
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = UpdateMembersWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update members Update existing Members in the Ziqni database
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update member details in the Ziqni database for a given Member identifier. * Member Ref Id can not be changed after creation * A member Id must exist in the Ziqni database to update the member</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Ziqni.Client.ApiResponse<ApiResponse> UpdateMembersWithHttpInfo(List<UpdateMemberRequest> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Ziqni.Client.ApiException(400, "Missing required parameter 'body' when calling MembersApi->UpdateMembers");

            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "file/csv"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ApiResponse>("/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update members Update existing Members in the Ziqni database
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update member details in the Ziqni database for a given Member identifier. * Member Ref Id can not be changed after creation * A member Id must exist in the Ziqni database to update the member</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> UpdateMembersAsync(List<UpdateMemberRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Ziqni.Client.ApiResponse<ApiResponse> localVarResponse = await UpdateMembersWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update members Update existing Members in the Ziqni database
        /// </summary>
        /// <exception cref="Ziqni.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update member details in the Ziqni database for a given Member identifier. * Member Ref Id can not be changed after creation * A member Id must exist in the Ziqni database to update the member</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Ziqni.Client.ApiResponse<ApiResponse>> UpdateMembersWithHttpInfoAsync(List<UpdateMemberRequest> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Ziqni.Client.ApiException(400, "Missing required parameter 'body' when calling MembersApi->UpdateMembers");


            Ziqni.Client.RequestOptions localVarRequestOptions = new Ziqni.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "file/csv"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Ziqni.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Ziqni.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ApiResponse>("/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
