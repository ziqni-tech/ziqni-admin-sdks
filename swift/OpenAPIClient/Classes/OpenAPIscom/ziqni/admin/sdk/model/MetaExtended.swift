//
// MetaExtended.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MetaExtended: Codable, Hashable {

    public var objectType: String
    /** The count of all results */
    public var totalRecords: Int?
    /** The count of successful results */
    public var resultCount: Int
    /** The count of errors */
    public var errorCount: Int
    /** Number of records to skip */
    public var skip: Int
    /** Number of records to return */
    public var limit: Int

    public init(objectType: String, totalRecords: Int? = nil, resultCount: Int, errorCount: Int, skip: Int, limit: Int) {
        self.objectType = objectType
        self.totalRecords = totalRecords
        self.resultCount = resultCount
        self.errorCount = errorCount
        self.skip = skip
        self.limit = limit
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case objectType
        case totalRecords
        case resultCount
        case errorCount
        case skip
        case limit
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(objectType, forKey: .objectType)
        try container.encodeIfPresent(totalRecords, forKey: .totalRecords)
        try container.encode(resultCount, forKey: .resultCount)
        try container.encode(errorCount, forKey: .errorCount)
        try container.encode(skip, forKey: .skip)
        try container.encode(limit, forKey: .limit)
    }
}

