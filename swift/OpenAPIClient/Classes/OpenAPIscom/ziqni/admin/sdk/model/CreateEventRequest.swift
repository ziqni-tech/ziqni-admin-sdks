//
// CreateEventRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateEventRequest: Codable, Hashable {

    /** The reference to this member in external system */
    public var memberRefId: String
    /** The identifier that describes the meaning of this event */
    public var action: String
    /** The batch identifier is used to group related event stream data together. This could be as simple as a UUID or your internal reference to that distinct player session event */
    public var batchId: String?
    /** It is a reference to a game/product ID from external system */
    public var entityRefId: String
    /** The actual numerical value related to the event */
    public var sourceValue: Double
    /** ISO8601 timestamp for when this event happened. All records are stored in UTC time zone */
    public var transactionTimestamp: Date
    /** A list of Strings of groups that the tag belongs to */
    public var tags: [String]?
    public var eventRefId: String
    public var memberId: String?
    /** A list of custom field entries */
    public var customFields: [String: AnyCodable]?

    public init(memberRefId: String, action: String, batchId: String? = nil, entityRefId: String, sourceValue: Double, transactionTimestamp: Date, tags: [String]? = nil, eventRefId: String, memberId: String? = nil, customFields: [String: AnyCodable]? = nil) {
        self.memberRefId = memberRefId
        self.action = action
        self.batchId = batchId
        self.entityRefId = entityRefId
        self.sourceValue = sourceValue
        self.transactionTimestamp = transactionTimestamp
        self.tags = tags
        self.eventRefId = eventRefId
        self.memberId = memberId
        self.customFields = customFields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case memberRefId
        case action
        case batchId
        case entityRefId
        case sourceValue
        case transactionTimestamp
        case tags
        case eventRefId
        case memberId
        case customFields
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(memberRefId, forKey: .memberRefId)
        try container.encode(action, forKey: .action)
        try container.encodeIfPresent(batchId, forKey: .batchId)
        try container.encode(entityRefId, forKey: .entityRefId)
        try container.encode(sourceValue, forKey: .sourceValue)
        try container.encode(transactionTimestamp, forKey: .transactionTimestamp)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encode(eventRefId, forKey: .eventRefId)
        try container.encodeIfPresent(memberId, forKey: .memberId)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}

