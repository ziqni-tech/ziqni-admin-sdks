//
// Scheduling.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Scheduling: Codable, Hashable {

    public var scheduleType: ScheduleType
    /** A value indicating how many times it will be issued */
    public var scheduleOccurrencesLimit: Int
    public var every: [Int]
    /** The start date and time of a schedule. ISO8601 timestamp */
    public var startDate: Date
    /** The end date and time of a schedule. ISO8601 timestamp */
    public var endDate: Date?
    /** Additional constraints */
    public var constraints: [String]

    public init(scheduleType: ScheduleType, scheduleOccurrencesLimit: Int, every: [Int], startDate: Date, endDate: Date? = nil, constraints: [String]) {
        self.scheduleType = scheduleType
        self.scheduleOccurrencesLimit = scheduleOccurrencesLimit
        self.every = every
        self.startDate = startDate
        self.endDate = endDate
        self.constraints = constraints
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case scheduleType
        case scheduleOccurrencesLimit
        case every
        case startDate
        case endDate
        case constraints
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(scheduleType, forKey: .scheduleType)
        try container.encode(scheduleOccurrencesLimit, forKey: .scheduleOccurrencesLimit)
        try container.encode(every, forKey: .every)
        try container.encode(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encode(constraints, forKey: .constraints)
    }
}

