//
// RuleOperandLookupRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RuleOperandLookupRequest: Codable, Hashable {

    /** The object context to search within */
    public var context: String
    /** The text to search, at least 3 characters are required. */
    public var searchText: String?
    /** The identifier to retrieve, if this is set search text will be ignored */
    public var id: [String]?
    /** How many response objects will be skipped for preview. Deafault is zero [0] */
    public var skip: Int?
    /** How many response objects will be returned. Deafult is zero [0] and the maximum is fifty [50] */
    public var limit: Int?
    /** Additional constraints */
    public var constraints: [String]?
    /** The operand like \"product.tags\" or \"member.tags\" or \"event.product\" */
    public var operand: String

    public init(context: String, searchText: String? = nil, id: [String]? = nil, skip: Int? = nil, limit: Int? = nil, constraints: [String]? = nil, operand: String) {
        self.context = context
        self.searchText = searchText
        self.id = id
        self.skip = skip
        self.limit = limit
        self.constraints = constraints
        self.operand = operand
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case context
        case searchText
        case id
        case skip
        case limit
        case constraints
        case operand
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(context, forKey: .context)
        try container.encodeIfPresent(searchText, forKey: .searchText)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(skip, forKey: .skip)
        try container.encodeIfPresent(limit, forKey: .limit)
        try container.encodeIfPresent(constraints, forKey: .constraints)
        try container.encode(operand, forKey: .operand)
    }
}

