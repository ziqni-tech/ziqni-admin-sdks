//
// CustomField.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Custom field model */
public struct CustomField: Codable, Hashable {

    /** A unique system generated identifier */
    public var id: String
    /** This is the space name which is linked to the account */
    public var spaceName: String
    /** ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone */
    public var created: Date
    /** The name of a Custom field */
    public var name: String
    /** The key of a Custom field */
    public var key: String
    /** The description of a Custom field */
    public var description: String?
    public var fieldType: FieldType
    public var appliesTo: AppliesTo
    /** For example \"required\" to indicate the field is required. */
    public var constraints: [String]?

    public init(id: String, spaceName: String, created: Date, name: String, key: String, description: String? = nil, fieldType: FieldType, appliesTo: AppliesTo, constraints: [String]? = nil) {
        self.id = id
        self.spaceName = spaceName
        self.created = created
        self.name = name
        self.key = key
        self.description = description
        self.fieldType = fieldType
        self.appliesTo = appliesTo
        self.constraints = constraints
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case spaceName
        case created
        case name
        case key
        case description
        case fieldType
        case appliesTo
        case constraints
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(spaceName, forKey: .spaceName)
        try container.encode(created, forKey: .created)
        try container.encode(name, forKey: .name)
        try container.encode(key, forKey: .key)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(fieldType, forKey: .fieldType)
        try container.encode(appliesTo, forKey: .appliesTo)
        try container.encodeIfPresent(constraints, forKey: .constraints)
    }
}

