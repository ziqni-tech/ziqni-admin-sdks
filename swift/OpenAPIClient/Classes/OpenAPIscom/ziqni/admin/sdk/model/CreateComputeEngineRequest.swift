//
// CreateComputeEngineRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateComputeEngineRequest: Codable, Hashable {

    /** A list of custom field entries */
    public var customFields: [String: AnyCodable]?
    /** A list of id's used to tag models */
    public var tags: [String]?
    public var metadata: [String: String]?
    public var description: String?
    public var version: Int64?
    public var name: String?
    /** Long */
    public var uptime: Int64?
    public var constraints: [String]
    public var statistics: [String: String]?
    public var lastKnownStatusCode: Int?

    public init(customFields: [String: AnyCodable]? = nil, tags: [String]? = nil, metadata: [String: String]? = nil, description: String? = nil, version: Int64? = nil, name: String? = nil, uptime: Int64? = nil, constraints: [String], statistics: [String: String]? = nil, lastKnownStatusCode: Int? = nil) {
        self.customFields = customFields
        self.tags = tags
        self.metadata = metadata
        self.description = description
        self.version = version
        self.name = name
        self.uptime = uptime
        self.constraints = constraints
        self.statistics = statistics
        self.lastKnownStatusCode = lastKnownStatusCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case customFields
        case tags
        case metadata
        case description
        case version
        case name
        case uptime
        case constraints
        case statistics
        case lastKnownStatusCode
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(customFields, forKey: .customFields)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(uptime, forKey: .uptime)
        try container.encode(constraints, forKey: .constraints)
        try container.encodeIfPresent(statistics, forKey: .statistics)
        try container.encodeIfPresent(lastKnownStatusCode, forKey: .lastKnownStatusCode)
    }
}

