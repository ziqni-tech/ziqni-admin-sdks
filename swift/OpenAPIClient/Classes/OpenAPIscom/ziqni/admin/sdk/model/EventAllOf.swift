//
// EventAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EventAllOf: Codable, Hashable {

    /** Unique system identifier of a Member */
    public var memberId: String?
    /** The reference to this member in external system */
    public var memberRefId: String?
    /** The identifier that describes the meaning of this event */
    public var action: String
    /** The batch identifier is used to group related event stream data together. This could be as simple as a UUID or your internal reference to that distinct player session event */
    public var batchId: String?
    /** It is a reference to a models ID for any of the following objects - Product, Achievement, Reward, Award */
    public var entityId: String?
    /** It is a reference to a models ID for any of the following objects - Product, Achievement, Reward, Award */
    public var entityRefId: String?
    /** The actual numerical value related to the event */
    public var sourceValue: Double
    /** A value derived from the source value field. In the context of Product additionally an adjustment factor will be applied */
    public var points: Double
    /** ISO8601 timestamp for when this event happened. All records are stored in UTC time zone */
    public var transactionTimestamp: Date
    /** Event metadata map. */
    public var metadata: [String: AnyCodable]?
    public var customFields: [String: AnyCodable]?
    /** A list of Strings of groups that the tag belongs to */
    public var tags: [String]?
    public var relatesTo: [String]?
    public var relatesToExternal: [String]?

    public init(memberId: String? = nil, memberRefId: String? = nil, action: String, batchId: String? = nil, entityId: String? = nil, entityRefId: String? = nil, sourceValue: Double, points: Double, transactionTimestamp: Date, metadata: [String: AnyCodable]? = nil, customFields: [String: AnyCodable]? = nil, tags: [String]? = nil, relatesTo: [String]? = nil, relatesToExternal: [String]? = nil) {
        self.memberId = memberId
        self.memberRefId = memberRefId
        self.action = action
        self.batchId = batchId
        self.entityId = entityId
        self.entityRefId = entityRefId
        self.sourceValue = sourceValue
        self.points = points
        self.transactionTimestamp = transactionTimestamp
        self.metadata = metadata
        self.customFields = customFields
        self.tags = tags
        self.relatesTo = relatesTo
        self.relatesToExternal = relatesToExternal
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case memberId
        case memberRefId
        case action
        case batchId
        case entityId
        case entityRefId
        case sourceValue
        case points
        case transactionTimestamp
        case metadata
        case customFields
        case tags
        case relatesTo
        case relatesToExternal
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(memberId, forKey: .memberId)
        try container.encodeIfPresent(memberRefId, forKey: .memberRefId)
        try container.encode(action, forKey: .action)
        try container.encodeIfPresent(batchId, forKey: .batchId)
        try container.encodeIfPresent(entityId, forKey: .entityId)
        try container.encodeIfPresent(entityRefId, forKey: .entityRefId)
        try container.encode(sourceValue, forKey: .sourceValue)
        try container.encode(points, forKey: .points)
        try container.encode(transactionTimestamp, forKey: .transactionTimestamp)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encodeIfPresent(customFields, forKey: .customFields)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(relatesTo, forKey: .relatesTo)
        try container.encodeIfPresent(relatesToExternal, forKey: .relatesToExternal)
    }
}

