//
// RewardReduced.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RewardReduced: Codable, Hashable {

    /** A unique system generated identifier */
    public var id: String
    /** This is the space name which is linked to the account */
    public var spaceName: String
    /** ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone */
    public var created: Date
    /** If used in the context of contest this will associate with the rank of the leaderboard */
    public var rewardRank: String
    /** The name of a reward */
    public var name: String
    /** Numerical value of the reward that will be issued based on the reward type */
    public var rewardValue: Double
    /** Reward Type key */
    public var rewardType: String
    /** A unique id of the Reward Type */
    public var rewardTypeId: String

    public init(id: String, spaceName: String, created: Date, rewardRank: String, name: String, rewardValue: Double, rewardType: String, rewardTypeId: String) {
        self.id = id
        self.spaceName = spaceName
        self.created = created
        self.rewardRank = rewardRank
        self.name = name
        self.rewardValue = rewardValue
        self.rewardType = rewardType
        self.rewardTypeId = rewardTypeId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case spaceName
        case created
        case rewardRank
        case name
        case rewardValue
        case rewardType
        case rewardTypeId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(spaceName, forKey: .spaceName)
        try container.encode(created, forKey: .created)
        try container.encode(rewardRank, forKey: .rewardRank)
        try container.encode(name, forKey: .name)
        try container.encode(rewardValue, forKey: .rewardValue)
        try container.encode(rewardType, forKey: .rewardType)
        try container.encode(rewardTypeId, forKey: .rewardTypeId)
    }
}

