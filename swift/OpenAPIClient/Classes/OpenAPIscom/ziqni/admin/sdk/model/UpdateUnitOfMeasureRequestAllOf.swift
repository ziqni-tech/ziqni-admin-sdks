//
// UpdateUnitOfMeasureRequestAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateUnitOfMeasureRequestAllOf: Codable, Hashable {

    /** The name of a unit of measure */
    public var name: String?
    /** The description of a unit of measure */
    public var description: String?
    /** An alphabetical or numerical code to identify a unit of measure */
    public var isoCode: String?
    /** The symbol of a unit of measure */
    public var symbol: String?
    /** Is used to multiply the value from the standardised one that is being used */
    public var multiplier: Double?
    public var unitOfMeasureType: UnitOfMeasureType?

    public init(name: String? = nil, description: String? = nil, isoCode: String? = nil, symbol: String? = nil, multiplier: Double? = nil, unitOfMeasureType: UnitOfMeasureType? = nil) {
        self.name = name
        self.description = description
        self.isoCode = isoCode
        self.symbol = symbol
        self.multiplier = multiplier
        self.unitOfMeasureType = unitOfMeasureType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case description
        case isoCode
        case symbol
        case multiplier
        case unitOfMeasureType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(isoCode, forKey: .isoCode)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(multiplier, forKey: .multiplier)
        try container.encodeIfPresent(unitOfMeasureType, forKey: .unitOfMeasureType)
    }
}

