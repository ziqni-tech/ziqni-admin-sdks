//
// DependantOn.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DependantOn: Codable, Hashable {

    /** A rule indicating that it has to be included. Players that are in the EU group with a MUST rule - that means only players that have that group can participate */
    public var must: [String]?
    /** A rule indicating that it will not be included. Players that are in the EU group with a MUST-NOT rule - that means that players that have that group can NOT participate */
    public var mustNot: [String]?
    /** A rule indicating that some of them have to be included. Dependancy on shouldMatchAtLeast parameter. Players that are in the EU and DE groups with a SHOULD rule and a shouldMatchAtLeast with a value of 1 - that means that players that have 1 of the groups can participate */
    public var should: [String]?
    /** Dependant on should. Triggered when 2 or more should parameters selected */
    public var shouldMatchAtLeast: Int?

    public init(must: [String]? = nil, mustNot: [String]? = nil, should: [String]? = nil, shouldMatchAtLeast: Int? = nil) {
        self.must = must
        self.mustNot = mustNot
        self.should = should
        self.shouldMatchAtLeast = shouldMatchAtLeast
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case must
        case mustNot
        case should
        case shouldMatchAtLeast
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(must, forKey: .must)
        try container.encodeIfPresent(mustNot, forKey: .mustNot)
        try container.encodeIfPresent(should, forKey: .should)
        try container.encodeIfPresent(shouldMatchAtLeast, forKey: .shouldMatchAtLeast)
    }
}

