//
// CreateRewardTypeRequestAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateRewardTypeRequestAllOf: Codable, Hashable {

    /** The name of the Reward type */
    public var name: String
    /** The description of a reward type */
    public var description: String?
    /** A unique key that represents the reward type */
    public var key: String
    public var translations: [Translation]?
    /** Additional constraints */
    public var addConstraints: [String]?
    public var unitOfMeasure: String

    public init(name: String, description: String? = nil, key: String, translations: [Translation]? = nil, addConstraints: [String]? = nil, unitOfMeasure: String) {
        self.name = name
        self.description = description
        self.key = key
        self.translations = translations
        self.addConstraints = addConstraints
        self.unitOfMeasure = unitOfMeasure
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case description
        case key
        case translations
        case addConstraints
        case unitOfMeasure
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(key, forKey: .key)
        try container.encodeIfPresent(translations, forKey: .translations)
        try container.encodeIfPresent(addConstraints, forKey: .addConstraints)
        try container.encode(unitOfMeasure, forKey: .unitOfMeasure)
    }
}

