//
// UpdateAchievementRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateAchievementRequest: Codable, Hashable {

    /** A unique system generated identifier */
    public var id: String
    /** A list of id's used to add cutom fields */
    public var customFields: [String: AnyCodable]?
    /** A list of id's used to tag models */
    public var tags: [String]?
    public var metadata: [String: String]?
    /** A name for the Achievement. Can be translated */
    public var name: String?
    /** A name for the Achievement. Can be translated */
    public var description: String?
    /** Terms and conditions of an achievement. Can be translated */
    public var termsAndConditions: String?
    /** An Icon id that has been pre uploaded to the system to display for Achievement */
    public var icon: String?
    public var scheduling: Scheduling?
    public var achievementLiveStatus: AchievementLiveStatus?
    /** Maximum number of issued achievements */
    public var maxNumberOfIssues: Int?
    /** Additional constraints */
    @available(*, deprecated, message: "This property is deprecated.")
    public var constraints: [String]?
    public var achievementDependencies: DependantOn?
    public var memberTagsFilter: DependantOn?
    public var productTagsFilter: DependantOn?
    public var addConstraints: [String]?
    public var removeConstraints: [String]?

    public init(id: String, customFields: [String: AnyCodable]? = nil, tags: [String]? = nil, metadata: [String: String]? = nil, name: String? = nil, description: String? = nil, termsAndConditions: String? = nil, icon: String? = nil, scheduling: Scheduling? = nil, achievementLiveStatus: AchievementLiveStatus? = nil, maxNumberOfIssues: Int? = nil, constraints: [String]? = nil, achievementDependencies: DependantOn? = nil, memberTagsFilter: DependantOn? = nil, productTagsFilter: DependantOn? = nil, addConstraints: [String]? = nil, removeConstraints: [String]? = nil) {
        self.id = id
        self.customFields = customFields
        self.tags = tags
        self.metadata = metadata
        self.name = name
        self.description = description
        self.termsAndConditions = termsAndConditions
        self.icon = icon
        self.scheduling = scheduling
        self.achievementLiveStatus = achievementLiveStatus
        self.maxNumberOfIssues = maxNumberOfIssues
        self.constraints = constraints
        self.achievementDependencies = achievementDependencies
        self.memberTagsFilter = memberTagsFilter
        self.productTagsFilter = productTagsFilter
        self.addConstraints = addConstraints
        self.removeConstraints = removeConstraints
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case customFields
        case tags
        case metadata
        case name
        case description
        case termsAndConditions
        case icon
        case scheduling
        case achievementLiveStatus
        case maxNumberOfIssues
        case constraints
        case achievementDependencies
        case memberTagsFilter
        case productTagsFilter
        case addConstraints
        case removeConstraints
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(customFields, forKey: .customFields)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(termsAndConditions, forKey: .termsAndConditions)
        try container.encodeIfPresent(icon, forKey: .icon)
        try container.encodeIfPresent(scheduling, forKey: .scheduling)
        try container.encodeIfPresent(achievementLiveStatus, forKey: .achievementLiveStatus)
        try container.encodeIfPresent(maxNumberOfIssues, forKey: .maxNumberOfIssues)
        try container.encodeIfPresent(constraints, forKey: .constraints)
        try container.encodeIfPresent(achievementDependencies, forKey: .achievementDependencies)
        try container.encodeIfPresent(memberTagsFilter, forKey: .memberTagsFilter)
        try container.encodeIfPresent(productTagsFilter, forKey: .productTagsFilter)
        try container.encodeIfPresent(addConstraints, forKey: .addConstraints)
        try container.encodeIfPresent(removeConstraints, forKey: .removeConstraints)
    }
}

