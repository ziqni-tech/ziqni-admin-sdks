//
// CreateNotificationRequestAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateNotificationRequestAllOf: Codable, Hashable {

    public var messageType: MessageType
    /** The title of the message */
    public var subject: String
    /** The context of the message */
    public var body: String
    public var status: MessageStatus
    public var translations: [Translation]?
    public var scheduling: Scheduling
    /** Additional constraints */
    public var constraints: [String]
    public var memberTags: [String]?
    public var memberIds: [String]?
    /** Specify the expiry as a date after creation of the record. If expireAfterDays is specified then expireAfterDate should not be specified. */
    public var expireAfterDate: Date?
    /** Specify the expiry in number of days after creation of the record. If expireAfterDate is specified then expireAfterDays should not be specified. */
    public var expireAfterDays: Int?

    public init(messageType: MessageType, subject: String, body: String, status: MessageStatus, translations: [Translation]? = nil, scheduling: Scheduling, constraints: [String], memberTags: [String]? = nil, memberIds: [String]? = nil, expireAfterDate: Date? = nil, expireAfterDays: Int? = nil) {
        self.messageType = messageType
        self.subject = subject
        self.body = body
        self.status = status
        self.translations = translations
        self.scheduling = scheduling
        self.constraints = constraints
        self.memberTags = memberTags
        self.memberIds = memberIds
        self.expireAfterDate = expireAfterDate
        self.expireAfterDays = expireAfterDays
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case messageType
        case subject
        case body
        case status
        case translations
        case scheduling
        case constraints
        case memberTags
        case memberIds
        case expireAfterDate
        case expireAfterDays
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(messageType, forKey: .messageType)
        try container.encode(subject, forKey: .subject)
        try container.encode(body, forKey: .body)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(translations, forKey: .translations)
        try container.encode(scheduling, forKey: .scheduling)
        try container.encode(constraints, forKey: .constraints)
        try container.encodeIfPresent(memberTags, forKey: .memberTags)
        try container.encodeIfPresent(memberIds, forKey: .memberIds)
        try container.encodeIfPresent(expireAfterDate, forKey: .expireAfterDate)
        try container.encodeIfPresent(expireAfterDays, forKey: .expireAfterDays)
    }
}

