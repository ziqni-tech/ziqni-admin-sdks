//
// EntityChangeSubscriptionRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EntityChangeSubscriptionRequest: Codable, Hashable {

    public enum Action: String, Codable, CaseIterable {
        case subscribe = "Subscribe"
        case unsubscribe = "Unsubscribe"
    }
    /** What you are subscribing to, like Competition, Contest, Member, Award etc. */
    public var entityType: String
    /** Constraints of this subscription. */
    public var constraints: [String]?
    /** The callback operation you are subscribing too. Like entityChanged or entityStateChanged */
    public var callback: String
    /** Either subscribe or unsubscribe from the data feed */
    public var action: Action

    public init(entityType: String, constraints: [String]? = nil, callback: String, action: Action) {
        self.entityType = entityType
        self.constraints = constraints
        self.callback = callback
        self.action = action
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case entityType
        case constraints
        case callback
        case action
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(entityType, forKey: .entityType)
        try container.encodeIfPresent(constraints, forKey: .constraints)
        try container.encode(callback, forKey: .callback)
        try container.encode(action, forKey: .action)
    }
}

