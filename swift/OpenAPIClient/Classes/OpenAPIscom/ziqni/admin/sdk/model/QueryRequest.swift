//
// QueryRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct QueryRequest: Codable, Hashable {

    public var must: [QueryMultiple]?
    public var mustNot: [QueryMultiple]?
    public var should: [QueryMultiple]?
    public var gte: [QuerySingle]?
    public var gt: [QuerySingle]?
    public var lte: [QuerySingle]?
    public var lt: [QuerySingle]?
    public var range: [RangeQuery]?
    public var sortBy: [QuerySortBy]?
    public var multiFields: [QueryMultipleFields]?
    public var includeFields: [String]?
    public var hasValue: [String]?
    public var hasNoValue: [String]?
    public var shouldMatch: Int?
    public var skip: Int?
    public var limit: Int?
    public var constraints: [String]?

    public init(must: [QueryMultiple]? = nil, mustNot: [QueryMultiple]? = nil, should: [QueryMultiple]? = nil, gte: [QuerySingle]? = nil, gt: [QuerySingle]? = nil, lte: [QuerySingle]? = nil, lt: [QuerySingle]? = nil, range: [RangeQuery]? = nil, sortBy: [QuerySortBy]? = nil, multiFields: [QueryMultipleFields]? = nil, includeFields: [String]? = nil, hasValue: [String]? = nil, hasNoValue: [String]? = nil, shouldMatch: Int? = nil, skip: Int? = nil, limit: Int? = nil, constraints: [String]? = nil) {
        self.must = must
        self.mustNot = mustNot
        self.should = should
        self.gte = gte
        self.gt = gt
        self.lte = lte
        self.lt = lt
        self.range = range
        self.sortBy = sortBy
        self.multiFields = multiFields
        self.includeFields = includeFields
        self.hasValue = hasValue
        self.hasNoValue = hasNoValue
        self.shouldMatch = shouldMatch
        self.skip = skip
        self.limit = limit
        self.constraints = constraints
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case must
        case mustNot
        case should
        case gte
        case gt
        case lte
        case lt
        case range
        case sortBy
        case multiFields
        case includeFields
        case hasValue
        case hasNoValue
        case shouldMatch
        case skip
        case limit
        case constraints
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(must, forKey: .must)
        try container.encodeIfPresent(mustNot, forKey: .mustNot)
        try container.encodeIfPresent(should, forKey: .should)
        try container.encodeIfPresent(gte, forKey: .gte)
        try container.encodeIfPresent(gt, forKey: .gt)
        try container.encodeIfPresent(lte, forKey: .lte)
        try container.encodeIfPresent(lt, forKey: .lt)
        try container.encodeIfPresent(range, forKey: .range)
        try container.encodeIfPresent(sortBy, forKey: .sortBy)
        try container.encodeIfPresent(multiFields, forKey: .multiFields)
        try container.encodeIfPresent(includeFields, forKey: .includeFields)
        try container.encodeIfPresent(hasValue, forKey: .hasValue)
        try container.encodeIfPresent(hasNoValue, forKey: .hasNoValue)
        try container.encodeIfPresent(shouldMatch, forKey: .shouldMatch)
        try container.encodeIfPresent(skip, forKey: .skip)
        try container.encodeIfPresent(limit, forKey: .limit)
        try container.encodeIfPresent(constraints, forKey: .constraints)
    }
}

