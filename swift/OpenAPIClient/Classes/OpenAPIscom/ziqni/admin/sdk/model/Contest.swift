//
// Contest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Contest: Codable, Hashable {

    /** A unique system generated identifier */
    public var id: String
    /** This is the space name which is linked to the account */
    public var spaceName: String
    /** ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone */
    public var created: Date
    public var customFields: [String: AnyCodable]?
    /** A list of id's used to tag models */
    public var tags: [String]?
    public var metadata: [String: String]?
    /** A unique identifier of a Competition */
    public var competitionId: String
    /** The row number for displaying the Contest in a table */
    public var row: Int
    /** A name for the Contest. Can be translated */
    public var name: String
    /** Description of the contest */
    public var description: String?
    /** Terms and conditions for participating in the Contest. Can be translated */
    public var termsAndConditions: String?
    /** To what round does the contest belong */
    public var round: Int
    public var roundType: RoundType
    /** Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2 */
    public var groupStage: Int?
    /** The name of the group stages */
    public var groupStageLabel: String?
    /** A list of Ziqni contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional. */
    public var entrantsFromContest: [String]
    /** Maximum number of entrants for the contest */
    public var maxNumberOfEntrants: Int?
    /** Minimum number of entrants for the contest */
    public var minNumberOfEntrants: Int
    /** ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone */
    public var scheduledStartDate: Date
    /** ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone */
    public var scheduledEndDate: Date
    /** ISO8601 timestamp for when a Competition started. All records are stored in UTC time zone */
    public var actualStartDate: Date?
    /** ISO8601 timestamp for when a Competition ended. All records are stored in UTC time zone */
    public var actualEndDate: Date?
    public var strategies: Strategy?
    public var status: ContestStatus
    /** The code of the contest */
    public var statusCode: Int
    /** Additional constraints */
    public var constraints: [String]

    public init(id: String, spaceName: String, created: Date, customFields: [String: AnyCodable]? = nil, tags: [String]? = nil, metadata: [String: String]? = nil, competitionId: String, row: Int, name: String, description: String? = nil, termsAndConditions: String? = nil, round: Int, roundType: RoundType, groupStage: Int? = nil, groupStageLabel: String? = nil, entrantsFromContest: [String], maxNumberOfEntrants: Int? = nil, minNumberOfEntrants: Int, scheduledStartDate: Date, scheduledEndDate: Date, actualStartDate: Date? = nil, actualEndDate: Date? = nil, strategies: Strategy? = nil, status: ContestStatus, statusCode: Int, constraints: [String]) {
        self.id = id
        self.spaceName = spaceName
        self.created = created
        self.customFields = customFields
        self.tags = tags
        self.metadata = metadata
        self.competitionId = competitionId
        self.row = row
        self.name = name
        self.description = description
        self.termsAndConditions = termsAndConditions
        self.round = round
        self.roundType = roundType
        self.groupStage = groupStage
        self.groupStageLabel = groupStageLabel
        self.entrantsFromContest = entrantsFromContest
        self.maxNumberOfEntrants = maxNumberOfEntrants
        self.minNumberOfEntrants = minNumberOfEntrants
        self.scheduledStartDate = scheduledStartDate
        self.scheduledEndDate = scheduledEndDate
        self.actualStartDate = actualStartDate
        self.actualEndDate = actualEndDate
        self.strategies = strategies
        self.status = status
        self.statusCode = statusCode
        self.constraints = constraints
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case spaceName
        case created
        case customFields
        case tags
        case metadata
        case competitionId
        case row
        case name
        case description
        case termsAndConditions
        case round
        case roundType
        case groupStage
        case groupStageLabel
        case entrantsFromContest
        case maxNumberOfEntrants
        case minNumberOfEntrants
        case scheduledStartDate
        case scheduledEndDate
        case actualStartDate
        case actualEndDate
        case strategies
        case status
        case statusCode
        case constraints
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(spaceName, forKey: .spaceName)
        try container.encode(created, forKey: .created)
        try container.encodeIfPresent(customFields, forKey: .customFields)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encode(competitionId, forKey: .competitionId)
        try container.encode(row, forKey: .row)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(termsAndConditions, forKey: .termsAndConditions)
        try container.encode(round, forKey: .round)
        try container.encode(roundType, forKey: .roundType)
        try container.encodeIfPresent(groupStage, forKey: .groupStage)
        try container.encodeIfPresent(groupStageLabel, forKey: .groupStageLabel)
        try container.encode(entrantsFromContest, forKey: .entrantsFromContest)
        try container.encodeIfPresent(maxNumberOfEntrants, forKey: .maxNumberOfEntrants)
        try container.encode(minNumberOfEntrants, forKey: .minNumberOfEntrants)
        try container.encode(scheduledStartDate, forKey: .scheduledStartDate)
        try container.encode(scheduledEndDate, forKey: .scheduledEndDate)
        try container.encodeIfPresent(actualStartDate, forKey: .actualStartDate)
        try container.encodeIfPresent(actualEndDate, forKey: .actualEndDate)
        try container.encodeIfPresent(strategies, forKey: .strategies)
        try container.encode(status, forKey: .status)
        try container.encode(statusCode, forKey: .statusCode)
        try container.encode(constraints, forKey: .constraints)
    }
}

