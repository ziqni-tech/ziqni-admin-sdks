//
// AccountMessageAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AccountMessageAllOf: Codable, Hashable {

    /** The time that the message will disappear after. ISO8601 timestamp */
    public var expiry: Date?
    public var eventRefType: EventRefType
    /** The reference ID of the event object */
    public var eventRefId: String
    public var messageType: MessageType
    /** The title of the message */
    public var subject: String
    /** The context of the message */
    public var body: String
    public var status: MessageStatus
    public var userId: String
    public var links: [MessageLink]

    public init(expiry: Date? = nil, eventRefType: EventRefType, eventRefId: String, messageType: MessageType, subject: String, body: String, status: MessageStatus, userId: String, links: [MessageLink]) {
        self.expiry = expiry
        self.eventRefType = eventRefType
        self.eventRefId = eventRefId
        self.messageType = messageType
        self.subject = subject
        self.body = body
        self.status = status
        self.userId = userId
        self.links = links
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case expiry
        case eventRefType
        case eventRefId
        case messageType
        case subject
        case body
        case status
        case userId
        case links
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(expiry, forKey: .expiry)
        try container.encode(eventRefType, forKey: .eventRefType)
        try container.encode(eventRefId, forKey: .eventRefId)
        try container.encode(messageType, forKey: .messageType)
        try container.encode(subject, forKey: .subject)
        try container.encode(body, forKey: .body)
        try container.encode(status, forKey: .status)
        try container.encode(userId, forKey: .userId)
        try container.encode(links, forKey: .links)
    }
}

