//
// CreateAchievementRequestAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateAchievementRequestAllOf: Codable, Hashable {

    /** A name for the Achievement. Can be translated */
    public var name: String
    /** A name for the Achievement. Can be translated */
    public var description: String?
    /** Terms and conditions of an achievement. Can be translated */
    public var termsAndConditions: String?
    /** An Icon id that has been pre uploaded to the system to display for Achievement */
    public var icon: String?
    public var rules: [Rule]?
    public var scheduling: Scheduling
    /** Maximum number of issued achievements */
    public var maxNumberOfIssues: Int?
    public var translations: [Translation]?
    public var rewards: [CreateRewardRequest]?
    /** Additional constraints */
    @available(*, deprecated, message: "This property is deprecated.")
    public var constraints: [String]
    public var achievementDependencies: DependantOn?
    public var memberTagsFilter: DependantOn?
    public var productTagsFilter: DependantOn?
    public var addConstraints: [String]?

    public init(name: String, description: String? = nil, termsAndConditions: String? = nil, icon: String? = nil, rules: [Rule]? = nil, scheduling: Scheduling, maxNumberOfIssues: Int? = nil, translations: [Translation]? = nil, rewards: [CreateRewardRequest]? = nil, constraints: [String], achievementDependencies: DependantOn? = nil, memberTagsFilter: DependantOn? = nil, productTagsFilter: DependantOn? = nil, addConstraints: [String]? = nil) {
        self.name = name
        self.description = description
        self.termsAndConditions = termsAndConditions
        self.icon = icon
        self.rules = rules
        self.scheduling = scheduling
        self.maxNumberOfIssues = maxNumberOfIssues
        self.translations = translations
        self.rewards = rewards
        self.constraints = constraints
        self.achievementDependencies = achievementDependencies
        self.memberTagsFilter = memberTagsFilter
        self.productTagsFilter = productTagsFilter
        self.addConstraints = addConstraints
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case description
        case termsAndConditions
        case icon
        case rules
        case scheduling
        case maxNumberOfIssues
        case translations
        case rewards
        case constraints
        case achievementDependencies
        case memberTagsFilter
        case productTagsFilter
        case addConstraints
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(termsAndConditions, forKey: .termsAndConditions)
        try container.encodeIfPresent(icon, forKey: .icon)
        try container.encodeIfPresent(rules, forKey: .rules)
        try container.encode(scheduling, forKey: .scheduling)
        try container.encodeIfPresent(maxNumberOfIssues, forKey: .maxNumberOfIssues)
        try container.encodeIfPresent(translations, forKey: .translations)
        try container.encodeIfPresent(rewards, forKey: .rewards)
        try container.encode(constraints, forKey: .constraints)
        try container.encodeIfPresent(achievementDependencies, forKey: .achievementDependencies)
        try container.encodeIfPresent(memberTagsFilter, forKey: .memberTagsFilter)
        try container.encodeIfPresent(productTagsFilter, forKey: .productTagsFilter)
        try container.encodeIfPresent(addConstraints, forKey: .addConstraints)
    }
}

