//
// Collaborator.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Collaborator: Codable, Hashable {

    /** The email of the user to log in */
    public var email: String
    /** The access role of an individual */
    public var roles: [String]?
    /** The Surname of an individual */
    public var lastName: String?
    /** The Name of an individual */
    public var firstName: String?
    public var availableRoles: CollaboratorRolesAvailable?
    /** A unique system generated identifier */
    public var id: String?
    /** This is the space name which is linked to the account */
    public var spaceName: String?

    public init(email: String, roles: [String]? = nil, lastName: String? = nil, firstName: String? = nil, availableRoles: CollaboratorRolesAvailable? = nil, id: String? = nil, spaceName: String? = nil) {
        self.email = email
        self.roles = roles
        self.lastName = lastName
        self.firstName = firstName
        self.availableRoles = availableRoles
        self.id = id
        self.spaceName = spaceName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case email
        case roles
        case lastName
        case firstName
        case availableRoles
        case id
        case spaceName
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(roles, forKey: .roles)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(availableRoles, forKey: .availableRoles)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(spaceName, forKey: .spaceName)
    }
}

