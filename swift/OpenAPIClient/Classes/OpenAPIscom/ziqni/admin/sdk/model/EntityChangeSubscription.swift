//
// EntityChangeSubscription.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Subscribes a client to receive out-of-band data */
public struct EntityChangeSubscription: Codable, Hashable {

    public var entityType: String
    public var subscriptionId: String
    /** Constraints of this subscription like gauranteedDelivery */
    public var constraints: [String]?
    /** /user/queue/callbacks */
    public var topic: String?

    public init(entityType: String, subscriptionId: String, constraints: [String]? = nil, topic: String? = nil) {
        self.entityType = entityType
        self.subscriptionId = subscriptionId
        self.constraints = constraints
        self.topic = topic
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case entityType
        case subscriptionId
        case constraints
        case topic
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(entityType, forKey: .entityType)
        try container.encode(subscriptionId, forKey: .subscriptionId)
        try container.encodeIfPresent(constraints, forKey: .constraints)
        try container.encodeIfPresent(topic, forKey: .topic)
    }
}

