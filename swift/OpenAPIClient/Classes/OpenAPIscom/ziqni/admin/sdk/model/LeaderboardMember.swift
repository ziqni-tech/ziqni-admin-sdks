//
// LeaderboardMember.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct LeaderboardMember: Codable, Hashable {

    /** The name of the player */
    public var name: String
    /** Unique system identifier of a Member */
    public var memberId: String
    /** The reference to this member in your system */
    public var memberRefId: String
    /** Previous rank held, null if no changes are recorded */
    public var rankChangeFrom: Int?
    /** [-1] for rank-down, like 5 to 8. [0] for no change, [1] for rank-up like 9 to 3 */
    public var rankChangeType: Int?
    /** The user defined values used in the rules builder */
    public var params: [String: Double]?

    public init(name: String, memberId: String, memberRefId: String, rankChangeFrom: Int? = nil, rankChangeType: Int? = nil, params: [String: Double]? = nil) {
        self.name = name
        self.memberId = memberId
        self.memberRefId = memberRefId
        self.rankChangeFrom = rankChangeFrom
        self.rankChangeType = rankChangeType
        self.params = params
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case memberId
        case memberRefId
        case rankChangeFrom
        case rankChangeType
        case params
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(memberId, forKey: .memberId)
        try container.encode(memberRefId, forKey: .memberRefId)
        try container.encodeIfPresent(rankChangeFrom, forKey: .rankChangeFrom)
        try container.encodeIfPresent(rankChangeType, forKey: .rankChangeType)
        try container.encodeIfPresent(params, forKey: .params)
    }
}

