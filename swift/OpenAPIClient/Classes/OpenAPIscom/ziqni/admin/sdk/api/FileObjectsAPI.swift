//
// FileObjectsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class FileObjectsAPI {

    /**

     - parameter body: (body) Create a new file object repository in your Ziqni space 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createFileObjects(body: CreateFileObjectRequest, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ApiResponse?, _ error: Error?) -> Void)) {
        createFileObjectsWithRequestBuilder(body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /file-objects
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter body: (body) Create a new file object repository in your Ziqni space 
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func createFileObjectsWithRequestBuilder(body: CreateFileObjectRequest) -> RequestBuilder<ApiResponse> {
        let localVariablePath = "/file-objects"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (query) The unique identifiers of the resources (optional)
     - parameter permanent: (query) Permanently delete the file object. Default is false (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteFileObjects(id: [String]? = nil, permanent: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ApiResponse?, _ error: Error?) -> Void)) {
        deleteFileObjectsWithRequestBuilder(id: id, permanent: permanent).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - DELETE /file-objects
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (query) The unique identifiers of the resources (optional)
     - parameter permanent: (query) Permanently delete the file object. Default is false (optional)
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func deleteFileObjectsWithRequestBuilder(id: [String]? = nil, permanent: Bool? = nil) -> RequestBuilder<ApiResponse> {
        let localVariablePath = "/file-objects"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id?.encodeToJSON(),
            "permanent": permanent?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (query) The unique identifiers of the resources (optional)
     - parameter body: (body) Delete file objects inside a repository from Ziqni by unique file by unique object ID&#39;s or any other POST body parameters using the POST method (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteFileObjectsByQuery(id: [String]? = nil, body: QueryRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ApiResponse?, _ error: Error?) -> Void)) {
        deleteFileObjectsByQueryWithRequestBuilder(id: id, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /file-objects/delete
     - Delete file objects by query
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (query) The unique identifiers of the resources (optional)
     - parameter body: (body) Delete file objects inside a repository from Ziqni by unique file by unique object ID&#39;s or any other POST body parameters using the POST method (optional)
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func deleteFileObjectsByQueryWithRequestBuilder(id: [String]? = nil, body: QueryRequest? = nil) -> RequestBuilder<ApiResponse> {
        let localVariablePath = "/file-objects/delete"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter path: (query) The canonical path of the file to download (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func downloadFileObjects(path: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        downloadFileObjectsWithRequestBuilder(path: path).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /file-objects/download
     - Download file objects from your Ziqni space
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter path: (query) The canonical path of the file to download (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func downloadFileObjectsWithRequestBuilder(path: String? = nil) -> RequestBuilder<URL> {
        let localVariablePath = "/file-objects/download"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "path": path?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter limit: (query) Limit the returned total records found (optional)
     - parameter skip: (query) Skip the returned records found and return the next batch of records (optional)
     - parameter id: (query) The unique identifiers of the resources (optional)
     - parameter download: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFileObjects(limit: Int? = nil, skip: Int? = nil, id: [String]? = nil, download: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: FileObjectsResponse?, _ error: Error?) -> Void)) {
        getFileObjectsWithRequestBuilder(limit: limit, skip: skip, id: id, download: download).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /file-objects
     - Returns a list of file objects
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter limit: (query) Limit the returned total records found (optional)
     - parameter skip: (query) Skip the returned records found and return the next batch of records (optional)
     - parameter id: (query) The unique identifiers of the resources (optional)
     - parameter download: (query)  (optional)
     - returns: RequestBuilder<FileObjectsResponse> 
     */
    open class func getFileObjectsWithRequestBuilder(limit: Int? = nil, skip: Int? = nil, id: [String]? = nil, download: String? = nil) -> RequestBuilder<FileObjectsResponse> {
        let localVariablePath = "/file-objects"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "_limit": limit?.encodeToJSON(),
            "_skip": skip?.encodeToJSON(),
            "id": id?.encodeToJSON(),
            "download": download?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FileObjectsResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter id: (query) The unique identifiers of the resources (optional)
     - parameter body: (body) Retrieve file objects inside a repository from Ziqni by unique file object ID&#39;s or any other POST body parameters using the POST method (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getFileObjectsByQuery(id: [String]? = nil, body: QueryRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: FileObjectsResponse?, _ error: Error?) -> Void)) {
        getFileObjectsByQueryWithRequestBuilder(id: id, body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /file-objects/query
     - Retrieve file objects by query
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter id: (query) The unique identifiers of the resources (optional)
     - parameter body: (body) Retrieve file objects inside a repository from Ziqni by unique file object ID&#39;s or any other POST body parameters using the POST method (optional)
     - returns: RequestBuilder<FileObjectsResponse> 
     */
    open class func getFileObjectsByQueryWithRequestBuilder(id: [String]? = nil, body: QueryRequest? = nil) -> RequestBuilder<FileObjectsResponse> {
        let localVariablePath = "/file-objects/query"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FileObjectsResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter parentFolderPath: (form) The folder to save these file in. (optional)
     - parameter repositoryId: (form)  (optional)
     - parameter templateToSave: (form)  (optional)
     - parameter templateName: (form)  (optional)
     - parameter tags: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func saveTemplates(parentFolderPath: String? = nil, repositoryId: String? = nil, templateToSave: String? = nil, templateName: String? = nil, tags: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ApiResponse?, _ error: Error?) -> Void)) {
        saveTemplatesWithRequestBuilder(parentFolderPath: parentFolderPath, repositoryId: repositoryId, templateToSave: templateToSave, templateName: templateName, tags: tags).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /file-objects/save-template
     - Create or update file objects and binaries in your Ziqni space
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter parentFolderPath: (form) The folder to save these file in. (optional)
     - parameter repositoryId: (form)  (optional)
     - parameter templateToSave: (form)  (optional)
     - parameter templateName: (form)  (optional)
     - parameter tags: (form)  (optional)
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func saveTemplatesWithRequestBuilder(parentFolderPath: String? = nil, repositoryId: String? = nil, templateToSave: String? = nil, templateName: String? = nil, tags: String? = nil) -> RequestBuilder<ApiResponse> {
        let localVariablePath = "/file-objects/save-template"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "parentFolderPath": parentFolderPath?.encodeToJSON(),
            "repositoryId": repositoryId?.encodeToJSON(),
            "templateToSave": templateToSave?.encodeToJSON(),
            "templateName": templateName?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter body: (body) Update a file object in your Ziqni space. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateFileObjects(body: [UpdateFileObjectRequest], apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ApiResponse?, _ error: Error?) -> Void)) {
        updateFileObjectsWithRequestBuilder(body: body).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PUT /file-objects
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter body: (body) Update a file object in your Ziqni space. 
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func updateFileObjectsWithRequestBuilder(body: [UpdateFileObjectRequest]) -> RequestBuilder<ApiResponse> {
        let localVariablePath = "/file-objects"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**

     - parameter parentFolderPath: (form) The folder to save these file in. (optional)
     - parameter files: (form) The files to upload (optional)
     - parameter repositoryId: (form)  (optional)
     - parameter tags: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func uploadFileObjects(parentFolderPath: String? = nil, files: [URL]? = nil, repositoryId: String? = nil, tags: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClient.apiResponseQueue, completion: @escaping ((_ data: ApiResponse?, _ error: Error?) -> Void)) {
        uploadFileObjectsWithRequestBuilder(parentFolderPath: parentFolderPath, files: files, repositoryId: repositoryId, tags: tags).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /file-objects/upload
     - Create or update file objects and binaries in your Ziqni space
     - OAuth:
       - type: oauth2
       - name: OAuth2
     - parameter parentFolderPath: (form) The folder to save these file in. (optional)
     - parameter files: (form) The files to upload (optional)
     - parameter repositoryId: (form)  (optional)
     - parameter tags: (form)  (optional)
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func uploadFileObjectsWithRequestBuilder(parentFolderPath: String? = nil, files: [URL]? = nil, repositoryId: String? = nil, tags: String? = nil) -> RequestBuilder<ApiResponse> {
        let localVariablePath = "/file-objects/upload"
        let localVariableURLString = OpenAPIClient.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "parentFolderPath": parentFolderPath?.encodeToJSON(),
            "files": files?.encodeToJSON(),
            "repositoryId": repositoryId?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiResponse>.Type = OpenAPIClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
