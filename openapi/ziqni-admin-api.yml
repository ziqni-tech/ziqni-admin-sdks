openapi: 3.0.2
info:
  title: ZIQNI Admin API
  version: 3.0.14
  description: |-
    Ziqni Application Services are used to manage and configure spaces.
    
    Change log:
    
    2024-02-27 Added rewards reduced to the LeaderboardEntry response
  contact:
    name: Support Team
    url: 'https://www.ziqni.com/'
    email: support@ziqni.com
  license:
    name: Ziqni General Licence
    url: 'https://www.ziqni.com/terms-of-service/'
  x-logo:
    url: 'https://documentation.ziqni.com/ziqni-logo-white.png'
    backgroundColor: '#FFFFFF'
    altText: Ziqni
servers:
  -
    url: 'https://api.ziqni.com'
    description: Production environment
paths:
  /products/query:
    summary: Get products by query
    description: This operation allows you to get products in your project using a query.
    post:
      requestBody:
        description: >-
          Retrieve Products from Ziqni database by unique Product ID's or any other POST body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
            examples:
              Example:
                value:
                  must:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  mustNot:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  should:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  gte:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  gt:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  lte:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  lt:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  range:
                    -
                      queryField: some text
                      gt: some text
                      lt: some text
                      constraints:
                        - some text
                        - some text
                    -
                      queryField: some text
                      gt: some text
                      lt: some text
                      constraints:
                        - some text
                        - some text
                  sortBy:
                    -
                      queryField: some text
                      order: Asc
                    -
                      queryField: some text
                      order: Desc
                  multiFields:
                    -
                      queryFields:
                        - some text
                        - some text
                      queryValue: some text
                    -
                      queryFields:
                        - some text
                        - some text
                      queryValue: some text
                  includeFields:
                    - some text
                    - some text
                  hasValue:
                    - some text
                    - some text
                  hasNoValue:
                    - some text
                    - some text
                  shouldMatch: 76
                  skip: 85
                  limit: 86
                  constraints:
                    - some text
                    - some text
      tags:
        - products
      responses:
        '200':
          $ref: '#/components/responses/ProductResponseBody'
        '400':
          $ref: '#/components/responses/ProductResponseBody'
        '401':
          $ref: '#/components/responses/ProductResponseBody'
        '403':
          $ref: '#/components/responses/ProductResponseBody'
        '404':
          $ref: '#/components/responses/ProductResponseBody'
        '500':
          $ref: '#/components/responses/ProductResponseBody'
        '501':
          $ref: '#/components/responses/ProductResponseBody'
      security:
        -
          OAuth2:
            - ViewProducts
      operationId: getProductsByQuery
      summary: Get products by query
      description: >-
        Retrieve Products from Ziqni database by unique Product ID's or any other POST body parameters
        using the POST method
      x-codegen-request-body-name: body
  /products/delete:
    summary: Delete products by query
    description: This operation allows you to delete products in your project using a query.
    post:
      requestBody:
        description: >-
          Delete Products from Ziqni database by unique Product ID's or any other POST body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
            examples:
              Example:
                value:
                  must:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  mustNot:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  should:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  gte:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  gt:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  lte:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  lt:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  range:
                    -
                      queryField: some text
                      gt: some text
                      lt: some text
                      constraints:
                        - some text
                        - some text
                    -
                      queryField: some text
                      gt: some text
                      lt: some text
                      constraints:
                        - some text
                        - some text
                  sortBy:
                    -
                      queryField: some text
                      order: Desc
                    -
                      queryField: some text
                      order: Desc
                  multiFields:
                    -
                      queryFields:
                        - some text
                        - some text
                      queryValue: some text
                    -
                      queryFields:
                        - some text
                        - some text
                      queryValue: some text
                  includeFields:
                    - some text
                    - some text
                  hasValue:
                    - some text
                    - some text
                  hasNoValue:
                    - some text
                    - some text
                  shouldMatch: 87
                  skip: 97
                  limit: 5
                  constraints:
                    - some text
                    - some text
      tags:
        - products
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminProducts
      operationId: deleteProductsByQuery
      summary: Delete products by query
      description: >-
        Delete Products from Ziqni database by unique Product ID's or any other POST body parameters
        using the POST method
      x-codegen-request-body-name: body
  /members/query:
    summary: Get members by query
    description: This operation allows you to get members in your project using a query.
    post:
      requestBody:
        description: >-
          Retrieve Products from Ziqni database by unique Product ID's or any other POST body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
            examples:
              Example:
                value:
                  must:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  mustNot:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  should:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  gte:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  gt:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  lte:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  lt:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  range:
                    -
                      queryField: some text
                      gt: some text
                      lt: some text
                      constraints:
                        - some text
                        - some text
                    -
                      queryField: some text
                      gt: some text
                      lt: some text
                      constraints:
                        - some text
                        - some text
                  sortBy:
                    -
                      queryField: some text
                      order: Desc
                    -
                      queryField: some text
                      order: Asc
                  multiFields:
                    -
                      queryFields:
                        - some text
                        - some text
                      queryValue: some text
                    -
                      queryFields:
                        - some text
                        - some text
                      queryValue: some text
                  includeFields:
                    - some text
                    - some text
                  hasValue:
                    - some text
                    - some text
                  hasNoValue:
                    - some text
                    - some text
                  shouldMatch: 46
                  skip: 12
                  limit: 13
                  constraints:
                    - some text
                    - some text
      tags:
        - members
      responses:
        '200':
          $ref: '#/components/responses/MemberResponseBody'
        '400':
          $ref: '#/components/responses/MemberResponseBody'
        '401':
          $ref: '#/components/responses/MemberResponseBody'
        '403':
          $ref: '#/components/responses/MemberResponseBody'
        '404':
          $ref: '#/components/responses/MemberResponseBody'
        '500':
          $ref: '#/components/responses/MemberResponseBody'
        '501':
          $ref: '#/components/responses/MemberResponseBody'
      security:
        -
          OAuth2:
            - ViewMembers
      operationId: getMembersByQuery
      summary: Get members by query
      description: >-
        Retrieve Members from Ziqni database by unique Member ID's or any other POST body parameters
        using the POST method
      x-codegen-request-body-name: body
  /members/delete:
    summary: Delete members by query
    description: This operation allows you to delete members in your project using a query.
    post:
      requestBody:
        description: >-
          Delete Members from Ziqni database by unique Members ID's or any other POST body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
            examples:
              Example:
                value:
                  must:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  mustNot:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  should:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  gte:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  gt:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  lte:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  lt:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  range:
                    -
                      queryField: some text
                      gt: some text
                      lt: some text
                      constraints:
                        - some text
                        - some text
                    -
                      queryField: some text
                      gt: some text
                      lt: some text
                      constraints:
                        - some text
                        - some text
                  sortBy:
                    -
                      queryField: some text
                      order: Desc
                    -
                      queryField: some text
                      order: Desc
                  multiFields:
                    -
                      queryFields:
                        - some text
                        - some text
                      queryValue: some text
                    -
                      queryFields:
                        - some text
                        - some text
                      queryValue: some text
                  includeFields:
                    - some text
                    - some text
                  hasValue:
                    - some text
                    - some text
                  hasNoValue:
                    - some text
                    - some text
                  shouldMatch: 91
                  skip: 34
                  limit: 62
                  constraints:
                    - some text
                    - some text
      tags:
        - members
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminMembers
      operationId: deleteMembersByQuery
      summary: Delete members by query
      description: >-
        Delete Members from Ziqni database by unique Members ID's or any other POST body parameters
        using the POST method
      x-codegen-request-body-name: body
  /competitions/query:
    post:
      requestBody:
        description: >-
          Retrieve Competitions from Ziqni database by unique Competition ID's or any other POST
          body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - competitions
      responses:
        '200':
          $ref: '#/components/responses/CompetitionResponseBody'
        '400':
          $ref: '#/components/responses/CompetitionResponseBody'
        '401':
          $ref: '#/components/responses/CompetitionResponseBody'
        '403':
          $ref: '#/components/responses/CompetitionResponseBody'
        '404':
          $ref: '#/components/responses/CompetitionResponseBody'
        '413':
          $ref: '#/components/responses/CompetitionResponseBody'
        '500':
          $ref: '#/components/responses/CompetitionResponseBody'
        '501':
          $ref: '#/components/responses/CompetitionResponseBody'
        '503':
          $ref: '#/components/responses/CompetitionResponseBody'
      security:
        -
          OAuth2:
            - ViewCompetitions
      operationId: getCompetitionsByQuery
      description: >-
        Retrieve Competitions from Ziqni database by unique Competition ID's or any other POST body
        parameters using the POST method
      x-codegen-request-body-name: body
  /competitions/state:
    put:
      requestBody:
        description: Updates the state of the Competition
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateCompetitionStatusRequest'
      tags:
        - competitions
      responses:
        '201':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageCompetition
      operationId: updateCompetitionsState
      description: Manages the Competitions state
      x-codegen-request-body-name: body
  /contests/query:
    post:
      requestBody:
        description: >-
          Retrieve Contests from Ziqni database by unique Contest ID's or any other Post body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - contests
      responses:
        '200':
          $ref: '#/components/responses/ContestResponseBody'
        '400':
          $ref: '#/components/responses/ContestResponseBody'
        '401':
          $ref: '#/components/responses/ContestResponseBody'
        '403':
          $ref: '#/components/responses/ContestResponseBody'
        '404':
          $ref: '#/components/responses/ContestResponseBody'
        '413':
          $ref: '#/components/responses/ContestResponseBody'
        '500':
          $ref: '#/components/responses/ContestResponseBody'
        '501':
          $ref: '#/components/responses/ContestResponseBody'
        '503':
          $ref: '#/components/responses/ContestResponseBody'
      security:
        -
          OAuth2:
            - ViewContest
      operationId: getContestsByQuery
      description: >-
        Retrieve Contests from Ziqni database by unique Contests ID's or any other POST body
        parameters using the POST method
      x-codegen-request-body-name: body
  '/contests/{id}/clone':
    get:
      tags:
        - contests
      parameters:
        -
          $ref: '#/components/parameters/idPath'
      responses:
        '200':
          $ref: '#/components/responses/CloneContestResponseBody'
        '400':
          $ref: '#/components/responses/CloneContestResponseBody'
        '401':
          $ref: '#/components/responses/CloneContestResponseBody'
        '403':
          $ref: '#/components/responses/CloneContestResponseBody'
        '404':
          $ref: '#/components/responses/CloneContestResponseBody'
        '413':
          $ref: '#/components/responses/CloneContestResponseBody'
        '500':
          $ref: '#/components/responses/CloneContestResponseBody'
        '501':
          $ref: '#/components/responses/CloneContestResponseBody'
        '503':
          $ref: '#/components/responses/CloneContestResponseBody'
      security:
        -
          OAuth2:
            - ViewContest
      operationId: getContestsToClone
      description: Clones a Contest for the identifier provided
      x-codegen-request-body-name: body
  /contests/state:
    put:
      requestBody:
        description: Updates the state of the Contest
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateContestStateRequest'
      tags:
        - contests
      responses:
        '201':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageContest
      operationId: updateContestsState
      description: Manages the Contests state
      x-codegen-request-body-name: body
  /achievements/query:
    post:
      requestBody:
        description: >-
          Retrieve Achievements from Ziqni database by unique Achievements ID's or any other Post
          body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - achievements
      responses:
        '200':
          $ref: '#/components/responses/AchievementResponseBody'
        '400':
          $ref: '#/components/responses/AchievementResponseBody'
        '401':
          $ref: '#/components/responses/AchievementResponseBody'
        '403':
          $ref: '#/components/responses/AchievementResponseBody'
        '404':
          $ref: '#/components/responses/AchievementResponseBody'
        '413':
          $ref: '#/components/responses/AchievementResponseBody'
        '500':
          $ref: '#/components/responses/AchievementResponseBody'
        '501':
          $ref: '#/components/responses/AchievementResponseBody'
        '503':
          $ref: '#/components/responses/AchievementResponseBody'
      security:
        -
          OAuth2:
            - ViewAchievement
      operationId: getAchievementsByQuery
      description: >-
        Retrieve Achievements from Ziqni database by unique Achievements ID's or any other POST body
        parameters using the POST method
      x-codegen-request-body-name: body
  /achievements/delete:
    post:
      requestBody:
        description: >-
          Delete Achievements from Ziqni database by unique Achievements ID's or any other Post body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - achievements
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      deprecated: true
      security:
        -
          OAuth2:
            - AdminAchievements
      operationId: deleteAchievementsByQuery
      description: >-
        Delete Achievements from Ziqni database by unique Achievements ID's or any other POST body
        parameters using the POST method
      x-codegen-request-body-name: body
  '/achievements/{id}/issued':
    get:
      tags:
        - achievements
      parameters:
        -
          $ref: '#/components/parameters/idPath'
      responses:
        '200':
          $ref: '#/components/responses/AchievementIssuedResponseBody'
        '400':
          $ref: '#/components/responses/AchievementIssuedResponseBody'
        '401':
          $ref: '#/components/responses/AchievementIssuedResponseBody'
        '403':
          $ref: '#/components/responses/AchievementIssuedResponseBody'
        '404':
          $ref: '#/components/responses/AchievementIssuedResponseBody'
        '413':
          $ref: '#/components/responses/AchievementIssuedResponseBody'
        '500':
          $ref: '#/components/responses/AchievementIssuedResponseBody'
        '501':
          $ref: '#/components/responses/AchievementIssuedResponseBody'
        '503':
          $ref: '#/components/responses/AchievementIssuedResponseBody'
      security:
        -
          OAuth2:
            - ViewAchievement
      operationId: getIssuedAchievementsCountById
      description: Receive a count of Issued Achievements by identifier provided
      x-codegen-request-body-name: body
  '/achievements/{id}/members':
    get:
      tags:
        - achievements
      parameters:
        -
          $ref: '#/components/parameters/idPath'
        -
          style: form
          explode: false
          name: memberId
          description: Id of a member
          schema:
            type: string
          in: query
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/MemberAchievementIssuedResponseBody'
        '400':
          $ref: '#/components/responses/MemberAchievementIssuedResponseBody'
        '401':
          $ref: '#/components/responses/MemberAchievementIssuedResponseBody'
        '403':
          $ref: '#/components/responses/MemberAchievementIssuedResponseBody'
        '404':
          $ref: '#/components/responses/MemberAchievementIssuedResponseBody'
        '413':
          $ref: '#/components/responses/MemberAchievementIssuedResponseBody'
        '500':
          $ref: '#/components/responses/MemberAchievementIssuedResponseBody'
        '501':
          $ref: '#/components/responses/MemberAchievementIssuedResponseBody'
        '503':
          $ref: '#/components/responses/MemberAchievementIssuedResponseBody'
      security:
        -
          OAuth2:
            - ViewAchievement
      operationId: getMembersAchievementsDetails
      description: >-
        Receive a list of members that had an Achievement issued for the Achievement identified
        provided
      x-codegen-request-body-name: body
  '/achievements/{id}/antecedents':
    get:
      tags:
        - achievements
      parameters:
        -
          $ref: '#/components/parameters/idPath'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/AchievementResponseBody'
        '400':
          $ref: '#/components/responses/AchievementResponseBody'
        '401':
          $ref: '#/components/responses/AchievementResponseBody'
        '403':
          $ref: '#/components/responses/AchievementResponseBody'
        '404':
          $ref: '#/components/responses/AchievementResponseBody'
        '413':
          $ref: '#/components/responses/AchievementResponseBody'
        '500':
          $ref: '#/components/responses/AchievementResponseBody'
        '501':
          $ref: '#/components/responses/AchievementResponseBody'
        '503':
          $ref: '#/components/responses/AchievementResponseBody'
      security:
        -
          OAuth2:
            - ViewAchievement
      operationId: getAntecendentsForAchievement
      summary: NOT AVAILABLE IN CURRENT RELEASE
      description: Receive a list of Antecedent Achievements for the Achievement identified provided
      x-codegen-request-body-name: body
  '/achievements/{id}/clone':
    get:
      tags:
        - achievements
      parameters:
        -
          $ref: '#/components/parameters/idPath'
      responses:
        '200':
          $ref: '#/components/responses/CloneAchievementResponseBody'
        '400':
          $ref: '#/components/responses/CloneAchievementResponseBody'
        '401':
          $ref: '#/components/responses/CloneAchievementResponseBody'
        '403':
          $ref: '#/components/responses/CloneAchievementResponseBody'
        '404':
          $ref: '#/components/responses/CloneAchievementResponseBody'
        '413':
          $ref: '#/components/responses/CloneAchievementResponseBody'
        '500':
          $ref: '#/components/responses/CloneAchievementResponseBody'
        '501':
          $ref: '#/components/responses/CloneAchievementResponseBody'
        '503':
          $ref: '#/components/responses/CloneAchievementResponseBody'
      security:
        -
          OAuth2:
            - ViewAchievement
      operationId: getAchievementToClone
      description: Clones an Achievement for the identifier provided
      x-codegen-request-body-name: body
  /achievements/state:
    put:
      requestBody:
        description: Updates the state of the Achievement
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AchievementLiveStatusRequest'
      tags:
        - achievements
      responses:
        '201':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageAchievements
      operationId: updateAchievementsLiveStatus
      description: 'Manage the state of achievement - Draft, Live, Archived'
      x-codegen-request-body-name: body
  /rewards/query:
    post:
      requestBody:
        description: >-
          Retrieve Rewards from Ziqni database by unique Rewards ID's or any other Post body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - rewards
      responses:
        '200':
          $ref: '#/components/responses/RewardResponseBody'
        '400':
          $ref: '#/components/responses/RewardResponseBody'
        '401':
          $ref: '#/components/responses/RewardResponseBody'
        '403':
          $ref: '#/components/responses/RewardResponseBody'
        '404':
          $ref: '#/components/responses/RewardResponseBody'
        '413':
          $ref: '#/components/responses/RewardResponseBody'
        '500':
          $ref: '#/components/responses/RewardResponseBody'
        '501':
          $ref: '#/components/responses/RewardResponseBody'
        '503':
          $ref: '#/components/responses/RewardResponseBody'
      security:
        -
          OAuth2:
            - ViewRewards
      operationId: getRewardsByQuery
      description: >-
        Retrieve Rewards from Ziqni database by unique Rewards ID's or any other POST body parameters
        using the POST method
      x-codegen-request-body-name: body
  /rewards/delete:
    post:
      requestBody:
        description: >-
          Delete Rewards from Ziqni database by unique Rewards ID's or any other POST body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - rewards
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminRewards
      operationId: deleteRewardsByQuery
      description: >-
        Delete Rewards from Ziqni database by unique Rewards ID's or any other POST body parameters
        using the POST method
      x-codegen-request-body-name: body
  /awards/claim:
    put:
      requestBody:
        description: Claim Awards
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ClaimAwardRequest'
        required: true
      tags:
        - awards
      responses:
        '201':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminClaim
      operationId: claimAwards
      description: Claim Awards that need to be actioned at
      x-codegen-request-body-name: body
  /reward-types/query:
    summary: Get reward types by query
    description: This operation allows you to get reward types in your project using a query.
    post:
      requestBody:
        description: >-
          Retrieve Reward types from Ziqni database by unique Reward type ID's or any other POST
          body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
            examples:
              Example:
                value:
                  must:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  mustNot:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  should:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  gte:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  gt:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  lte:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  lt:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  range:
                    -
                      queryField: some text
                      gt: some text
                      lt: some text
                      constraints:
                        - some text
                        - some text
                    -
                      queryField: some text
                      gt: some text
                      lt: some text
                      constraints:
                        - some text
                        - some text
                  sortBy:
                    -
                      queryField: some text
                      order: Asc
                    -
                      queryField: some text
                      order: Desc
                  multiFields:
                    -
                      queryFields:
                        - some text
                        - some text
                      queryValue: some text
                    -
                      queryFields:
                        - some text
                        - some text
                      queryValue: some text
                  includeFields:
                    - some text
                    - some text
                  hasValue:
                    - some text
                    - some text
                  hasNoValue:
                    - some text
                    - some text
                  shouldMatch: 76
                  skip: 85
                  limit: 86
                  constraints:
                    - some text
                    - some text
      tags:
        - reward-types
      responses:
        '200':
          $ref: '#/components/responses/RewardTypeResponseBody'
        '400':
          $ref: '#/components/responses/RewardTypeResponseBody'
        '401':
          $ref: '#/components/responses/RewardTypeResponseBody'
        '403':
          $ref: '#/components/responses/RewardTypeResponseBody'
        '404':
          $ref: '#/components/responses/RewardTypeResponseBody'
        '500':
          $ref: '#/components/responses/RewardTypeResponseBody'
        '501':
          $ref: '#/components/responses/RewardTypeResponseBody'
      security:
        -
          OAuth2:
            - ViewRewardType
      operationId: getRewardTypesByQuery
      summary: Get reward types by query
      description: >-
        Retrieve Reward types from Ziqni database by unique Reward type ID's or any other POST body
        parameters using the POST method
      x-codegen-request-body-name: body
  /reward-types/delete:
    summary: Delete reward types by query
    description: This operation allows you to delete reward types in your project using a query.
    post:
      requestBody:
        description: >-
          Delete Reward types from Ziqni database by unique Reward types ID's or any other POST body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
            examples:
              Example:
                value:
                  must:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  mustNot:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  should:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  gte:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  gt:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  lte:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  lt:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  range:
                    -
                      queryField: some text
                      gt: some text
                      lt: some text
                      constraints:
                        - some text
                        - some text
                    -
                      queryField: some text
                      gt: some text
                      lt: some text
                      constraints:
                        - some text
                        - some text
                  sortBy:
                    -
                      queryField: some text
                      order: Desc
                    -
                      queryField: some text
                      order: Desc
                  multiFields:
                    -
                      queryFields:
                        - some text
                        - some text
                      queryValue: some text
                    -
                      queryFields:
                        - some text
                        - some text
                      queryValue: some text
                  includeFields:
                    - some text
                    - some text
                  hasValue:
                    - some text
                    - some text
                  hasNoValue:
                    - some text
                    - some text
                  shouldMatch: 87
                  skip: 97
                  limit: 5
                  constraints:
                    - some text
                    - some text
      tags:
        - reward-types
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminRewardType
      operationId: deleteRewardTypesByQuery
      summary: Delete reward types by query
      description: >-
        Delete Reward types from Ziqni database by unique Reward types ID's or any other POST body
        parameters using the POST method
      x-codegen-request-body-name: body
  /action-types/query:
    summary: Get action types by query
    description: This operation allows you to get action types in your project using a query.
    post:
      requestBody:
        description: >-
          Retrieve Action types from Ziqni database by unique Action type ID's or any other POST
          body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - action-types
      responses:
        '200':
          $ref: '#/components/responses/ActionTypeResponseBody'
        '400':
          $ref: '#/components/responses/ActionTypeResponseBody'
        '401':
          $ref: '#/components/responses/ActionTypeResponseBody'
        '403':
          $ref: '#/components/responses/ActionTypeResponseBody'
        '404':
          $ref: '#/components/responses/ActionTypeResponseBody'
        '500':
          $ref: '#/components/responses/ActionTypeResponseBody'
        '501':
          $ref: '#/components/responses/ActionTypeResponseBody'
      security:
        -
          OAuth2:
            - ViewActions
      operationId: getActionTypesByQuery
      summary: Get action types by query
      description: >-
        Retrieve Action types from Ziqni database by unique Action type ID's or any other POST body
        parameters using the POST method
      x-codegen-request-body-name: body
  /action-types/delete:
    summary: Delete action types by query
    description: This operation allows you to delete action types in your project using a query.
    post:
      requestBody:
        description: >-
          Delete Action types from Ziqni database by unique Action types ID's or any other POST body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - action-types
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminActions
      operationId: deleteActionTypesByQuery
      summary: Delete action types by query
      description: >-
        Delete Action types from Ziqni database by unique Action types ID's or any other POST body
        parameters using the POST method
      x-codegen-request-body-name: body
  /languages/query:
    post:
      requestBody:
        description: >-
          Retrieve Languages from Ziqni database by unique Language ID's or any other Post body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - languages
      responses:
        '200':
          $ref: '#/components/responses/LanguageResponseBody'
        '400':
          $ref: '#/components/responses/LanguageResponseBody'
        '401':
          $ref: '#/components/responses/LanguageResponseBody'
        '403':
          $ref: '#/components/responses/LanguageResponseBody'
        '404':
          $ref: '#/components/responses/LanguageResponseBody'
        '413':
          $ref: '#/components/responses/LanguageResponseBody'
        '500':
          $ref: '#/components/responses/LanguageResponseBody'
        '501':
          $ref: '#/components/responses/LanguageResponseBody'
        '503':
          $ref: '#/components/responses/LanguageResponseBody'
      security:
        -
          OAuth2:
            - ViewLanguage
      operationId: getLanguagesByQuery
      description: >-
        Retrieve Languages from Ziqni database by unique Language ID's or any other POST body
        parameters using the POST method
      x-codegen-request-body-name: body
  /languages/delete:
    post:
      requestBody:
        description: >-
          Delete Languages from Ziqni database by unique Language ID's or any other POST body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - languages
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminLanguage
      operationId: deleteLanguagesByQuery
      description: >-
        Delete Languages from Ziqni database by unique Language ID's or any other POST body parameters
        using the POST method
      x-codegen-request-body-name: body
  /custom-fields/query:
    summary: Get custom fields by query
    description: This operation allows you to get custom fields in your project using a query.
    post:
      requestBody:
        description: >-
          Retrieve Custom fields from Ziqni database by unique Custom field ID's or any other Post
          body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - custom-fields
      responses:
        '200':
          $ref: '#/components/responses/CustomFieldResponseBody'
        '400':
          $ref: '#/components/responses/CustomFieldResponseBody'
        '401':
          $ref: '#/components/responses/CustomFieldResponseBody'
        '403':
          $ref: '#/components/responses/CustomFieldResponseBody'
        '404':
          $ref: '#/components/responses/CustomFieldResponseBody'
        '500':
          $ref: '#/components/responses/CustomFieldResponseBody'
        '501':
          $ref: '#/components/responses/CustomFieldResponseBody'
      security:
        -
          OAuth2:
            - ViewCustomFields
      operationId: getCustomFieldsByQuery
      summary: Get custom fields by query
      description: >-
        Retrieve Custom fields from Ziqni database by unique Custom field ID's or any other POST body
        parameters using the POST method
      x-codegen-request-body-name: body
  /custom-fields/delete:
    summary: Delete custom fields by query
    description: This operation allows you to delete custom fields in your project using a query.
    post:
      requestBody:
        description: >-
          Delete Custom fields from Ziqni database by unique Custom field ID's or any other POST
          body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - custom-fields
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminCustomFields
      operationId: deleteCustomFieldsByQuery
      summary: Delete custom fields by query
      description: >-
        Delete Custom fields from Ziqni database by unique Custom field ID's or any other POST body
        parameters using the POST method
      x-codegen-request-body-name: body
  /units-of-measure/query:
    post:
      requestBody:
        description: >-
          Retrieve Units of measure from Ziqni database by unique Unit of measure ID's or any other
          POST body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - units-of-measure
      responses:
        '200':
          $ref: '#/components/responses/UnitOfMeasureResponseBody'
        '400':
          $ref: '#/components/responses/UnitOfMeasureResponseBody'
        '401':
          $ref: '#/components/responses/UnitOfMeasureResponseBody'
        '403':
          $ref: '#/components/responses/UnitOfMeasureResponseBody'
        '404':
          $ref: '#/components/responses/UnitOfMeasureResponseBody'
        '413':
          $ref: '#/components/responses/UnitOfMeasureResponseBody'
        '500':
          $ref: '#/components/responses/UnitOfMeasureResponseBody'
        '501':
          $ref: '#/components/responses/UnitOfMeasureResponseBody'
        '503':
          $ref: '#/components/responses/UnitOfMeasureResponseBody'
      security:
        -
          OAuth2:
            - ViewUOM
      operationId: getUnitsOfMeasureByQuery
      description: >-
        Retrieve Units of measure from Ziqni database by unique Unit of measure ID's or any other POST
        body parameters using the POST method
      x-codegen-request-body-name: body
  /units-of-measure/delete:
    post:
      requestBody:
        description: >-
          Delete Units of measure from Ziqni database by unique Unit of measure ID's or any other
          POST body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - units-of-measure
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminUOM
      operationId: deleteUnitsOfMeasureByQuery
      summary: Delete units of measure by query
      description: >-
        Delete Units of measure from Ziqni database by unique Unit of measure ID's or any other POST
        body parameters using the POST method
      x-codegen-request-body-name: body
  /transformers/query:
    post:
      requestBody:
        description: >-
          Retrieve a Transformer or a list of Transformers from Ziqni by unique Transformer ID's or
          any other Post body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - transformers
      responses:
        '200':
          $ref: '#/components/responses/TransformerResponseBody'
        '400':
          $ref: '#/components/responses/TransformerResponseBody'
        '401':
          $ref: '#/components/responses/TransformerResponseBody'
        '403':
          $ref: '#/components/responses/TransformerResponseBody'
        '404':
          $ref: '#/components/responses/TransformerResponseBody'
        '413':
          $ref: '#/components/responses/TransformerResponseBody'
        '500':
          $ref: '#/components/responses/TransformerResponseBody'
        '501':
          $ref: '#/components/responses/TransformerResponseBody'
        '503':
          $ref: '#/components/responses/TransformerResponseBody'
      security:
        -
          OAuth2:
            - AdminTransformers
      operationId: getTransformersByQuery
      description: >-
        Retrieve a Transformer or a list of Transformers from Ziqni by unique Transformer ID's or any
        other POST body parameters using the POST method
      x-codegen-request-body-name: body
  /webhooks/query:
    post:
      requestBody:
        description: >-
          Retrieve a Webhook or a list of Webhooks from Ziqni by unique Webhook ID's or any other
          Post body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - webhooks
      responses:
        '200':
          $ref: '#/components/responses/WebhookResponseBody'
        '400':
          $ref: '#/components/responses/WebhookResponseBody'
        '401':
          $ref: '#/components/responses/WebhookResponseBody'
        '403':
          $ref: '#/components/responses/WebhookResponseBody'
        '404':
          $ref: '#/components/responses/WebhookResponseBody'
        '413':
          $ref: '#/components/responses/WebhookResponseBody'
        '500':
          $ref: '#/components/responses/WebhookResponseBody'
        '501':
          $ref: '#/components/responses/WebhookResponseBody'
        '503':
          $ref: '#/components/responses/WebhookResponseBody'
      security:
        -
          OAuth2:
            - AdminWebhooks
      operationId: getWebhooksByQuery
      description: >-
        Retrieve a Webhook or a list of Webhooks from Ziqni by unique Webhook ID's or any other POST
        body parameters using the POST method
      x-codegen-request-body-name: body
  /webhooks/delete:
    post:
      requestBody:
        description: >-
          Delete a Webhook or a list of Webhooks from Ziqni by unique Webhook ID's or any other POST
          body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - webhooks
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminWebhooks
      operationId: deleteWebhooksByQuery
      summary: Delete webhooks by query
      description: >-
        Delete a Webhook or a list of Webhooks from Ziqni by unique Webhook ID's or any other POST
        body parameters using the POST method
      x-codegen-request-body-name: body
  /events/query:
    post:
      requestBody:
        description: >-
          Retrieve an Event or a list of Events from Ziqni by unique Event ID's or any other POST
          body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - events
      responses:
        '200':
          $ref: '#/components/responses/EventResponseBody'
        '400':
          $ref: '#/components/responses/EventResponseBody'
        '401':
          $ref: '#/components/responses/EventResponseBody'
        '403':
          $ref: '#/components/responses/EventResponseBody'
        '404':
          $ref: '#/components/responses/EventResponseBody'
        '413':
          $ref: '#/components/responses/EventResponseBody'
        '500':
          $ref: '#/components/responses/EventResponseBody'
        '501':
          $ref: '#/components/responses/EventResponseBody'
        '503':
          $ref: '#/components/responses/EventResponseBody'
      security:
        -
          OAuth2:
            - ViewEvents
      operationId: getEventsByQuery
      description: >-
        Retrieve an Event or a list of Events from Ziqni by unique Event ID's or any other POST body
        parameters using the POST method
      x-codegen-request-body-name: body
  /api-keys/query:
    summary: Get api keys by query
    description: This operation allows you to get api keys in your project using a query.
    post:
      requestBody:
        description: >-
          Retrieve an Api key or a list of Api keys from Ziqni by unique Api key ID's or any other
          POST body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - api-keys
      responses:
        '200':
          $ref: '#/components/responses/ApiKeyResponseBody'
        '400':
          $ref: '#/components/responses/ApiKeyResponseBody'
        '401':
          $ref: '#/components/responses/ApiKeyResponseBody'
        '403':
          $ref: '#/components/responses/ApiKeyResponseBody'
        '404':
          $ref: '#/components/responses/ApiKeyResponseBody'
        '500':
          $ref: '#/components/responses/ApiKeyResponseBody'
        '501':
          $ref: '#/components/responses/ApiKeyResponseBody'
      security:
        -
          OAuth2:
            - AdminApi
      operationId: getApiKeysByQuery
      summary: Get api keys by query
      description: Retrieve an Api key or a list of Api keys by query
      x-codegen-request-body-name: body
  /api-keys/delete:
    summary: Delete api keys by query
    description: This operation allows you to delete api keys in your project using a query.
    post:
      requestBody:
        description: >-
          Delete an Api key or a list of Api keys from Ziqni by unique Api key ID's or any other
          POST body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - api-keys
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminApi
      operationId: deleteApiKeysByQuery
      summary: Delete api keys by query
      description: Delete an Api key or a list of Api keys from Ziqni by query
      x-codegen-request-body-name: body
  '/api-keys/{id}':
    summary: Get and delete api keys by id
    description: These operations allow you to get or delete api keys in your project by id.
    get:
      tags:
        - api-keys
      parameters:
        -
          $ref: '#/components/parameters/idPath'
      responses:
        '200':
          $ref: '#/components/responses/ApiKeyResponseBody'
        '400':
          $ref: '#/components/responses/ApiKeyResponseBody'
        '401':
          $ref: '#/components/responses/ApiKeyResponseBody'
        '403':
          $ref: '#/components/responses/ApiKeyResponseBody'
        '404':
          $ref: '#/components/responses/ApiKeyResponseBody'
        '500':
          $ref: '#/components/responses/ApiKeyResponseBody'
        '501':
          $ref: '#/components/responses/ApiKeyResponseBody'
      security:
        -
          OAuth2:
            - AdminApi
      operationId: getApiKeysById
      summary: Get api keys by id
      description: >-
        Returns an Api key by identifier provided. This assumes that api keys have first been created
        via a POST request or web console
      x-codegen-request-body-name: body
    delete:
      tags:
        - api-keys
      parameters:
        -
          $ref: '#/components/parameters/idPath'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminApi
      operationId: deleteApiKeysById
      summary: Delete api keys by id
      description: Delete the Api key for a given identifier specified
      x-codegen-request-body-name: body
  /tags/delete:
    summary: Delete tags by query
    description: This operation allows you to delete tags by query
    post:
      requestBody:
        description: >-
          Delete Tags from Ziqni database by unique Tags ID's or any other POST body parameters
          using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - tags
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminTags
      operationId: deleteTagsByQuery
      summary: Delete tags by query
      description: >-
        Delete Tags from Ziqni database by unique Tags ID's or any other POST body parameters using
        the POST method
      x-codegen-request-body-name: body
  /connections/state:
    summary: Manage connection states
    description: >-
      The endpoint provides a means to manage connection state, for example: Start a conneciton or Stop
      a connection.
    post:
      requestBody:
        description: Update the state of a Consumer using the POST method
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateConnectionStateRequest'
      tags:
        - connections
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      deprecated: false
      security:
        -
          OAuth2:
            - AdminConsumer
      operationId: updateConnectionsState
      summary: Update connection status
      description: Update the state of a Consumer using the POST method
      x-codegen-request-body-name: body
  /languages/available:
    get:
      tags:
        - languages
      parameters:
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/AvailableLanguageResponseBody'
        '400':
          $ref: '#/components/responses/AvailableLanguageResponseBody'
        '401':
          $ref: '#/components/responses/AvailableLanguageResponseBody'
        '403':
          $ref: '#/components/responses/AvailableLanguageResponseBody'
        '404':
          $ref: '#/components/responses/AvailableLanguageResponseBody'
        '413':
          $ref: '#/components/responses/AvailableLanguageResponseBody'
        '500':
          $ref: '#/components/responses/AvailableLanguageResponseBody'
        '501':
          $ref: '#/components/responses/AvailableLanguageResponseBody'
        '503':
          $ref: '#/components/responses/AvailableLanguageResponseBody'
      security:
        -
          OAuth2:
            - ViewLanguage
      operationId: getListOfAllLanguages
      description: Returns a list of all avaialable Languages
      x-codegen-request-body-name: body
  '/spaces/{spaceName}':
    get:
      tags:
        - spaces
      parameters:
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
        -
          $ref: '#/components/parameters/spaceName'
      responses:
        '200':
          $ref: '#/components/responses/SpaceResponseBody'
        '400':
          $ref: '#/components/responses/SpaceResponseBody'
        '401':
          $ref: '#/components/responses/SpaceResponseBody'
        '403':
          $ref: '#/components/responses/SpaceResponseBody'
        '404':
          $ref: '#/components/responses/SpaceResponseBody'
        '413':
          $ref: '#/components/responses/SpaceResponseBody'
        '500':
          $ref: '#/components/responses/SpaceResponseBody'
        '501':
          $ref: '#/components/responses/SpaceResponseBody'
        '503':
          $ref: '#/components/responses/SpaceResponseBody'
      security:
        -
          OAuth2:
            - ViewSpaces
      operationId: getSpacesByName
      description: Return a list of sub-spaces for the given Space Name provided
      x-codegen-request-body-name: body
    delete:
      tags:
        - spaces
      parameters:
        -
          name: spaceName
          description: This is the space name which will be deleted
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminSpaces
      operationId: deleteSpaces
      summary: NOT AVAILABLE IN CURRENT RELEASE
      description: Delete the Space for the given Space Name provided
      x-codegen-request-body-name: body
  /collaborators/available-roles:
    get:
      tags:
        - collaborators
      responses:
        '200':
          $ref: '#/components/responses/CollaboratorRolesResponseBody'
        '400':
          $ref: '#/components/responses/CollaboratorRolesResponseBody'
        '401':
          $ref: '#/components/responses/CollaboratorRolesResponseBody'
        '403':
          $ref: '#/components/responses/CollaboratorRolesResponseBody'
        '404':
          $ref: '#/components/responses/CollaboratorRolesResponseBody'
        '413':
          $ref: '#/components/responses/CollaboratorRolesResponseBody'
        '500':
          $ref: '#/components/responses/CollaboratorRolesResponseBody'
        '501':
          $ref: '#/components/responses/CollaboratorRolesResponseBody'
        '503':
          $ref: '#/components/responses/CollaboratorRolesResponseBody'
      security:
        -
          OAuth2:
            - ViewCollaborator
      operationId: getAvailableRolesForCollaborators
      description: >-
        Returns a list of Collaborators. This assumes that Users have first been uploaded via a POST
        request or web console
      x-codegen-request-body-name: body
  /webhooks/triggers:
    get:
      tags:
        - webhooks
      responses:
        '200':
          $ref: '#/components/responses/WebhookTriggersResponseBody'
        '400':
          $ref: '#/components/responses/WebhookTriggersResponseBody'
        '401':
          $ref: '#/components/responses/WebhookTriggersResponseBody'
        '403':
          $ref: '#/components/responses/WebhookTriggersResponseBody'
        '404':
          $ref: '#/components/responses/WebhookTriggersResponseBody'
        '413':
          $ref: '#/components/responses/WebhookTriggersResponseBody'
        '500':
          $ref: '#/components/responses/WebhookTriggersResponseBody'
        '501':
          $ref: '#/components/responses/WebhookTriggersResponseBody'
        '503':
          $ref: '#/components/responses/WebhookTriggersResponseBody'
      security:
        -
          OAuth2:
            - AdminWebhooks
      operationId: getWebhooksTriggers
      description: Returns a list of all avilable Webhooks triggers
      x-codegen-request-body-name: body
  /members/find-by-ref-identifiers:
    summary: Get products by reference identifiers
    description: This operation allows you to get members in your project using reference identifiers.
    get:
      tags:
        - members
      parameters:
        -
          $ref: '#/components/parameters/refId'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/MemberResponseBody'
        '400':
          $ref: '#/components/responses/MemberResponseBody'
        '401':
          $ref: '#/components/responses/MemberResponseBody'
        '403':
          $ref: '#/components/responses/MemberResponseBody'
        '404':
          $ref: '#/components/responses/MemberResponseBody'
        '500':
          $ref: '#/components/responses/MemberResponseBody'
        '501':
          $ref: '#/components/responses/MemberResponseBody'
      security:
        -
          OAuth2:
            - ViewMembers
      operationId: getMembersByRefId
      summary: Get members by reference ids
      description: >-
        Returns a list of Members. This assumes that members have first been uploaded via a POST
        request or web console
      x-codegen-request-body-name: body
  /rules/schema:
    get:
      tags:
        - rules
      parameters:
        -
          name: context
          description: 'The context to retrieve, either achievement, competition or contest'
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          $ref: '#/components/responses/ResponseBody'
        '400':
          $ref: '#/components/responses/ResponseBody'
        '401':
          $ref: '#/components/responses/ResponseBody'
        '403':
          $ref: '#/components/responses/ResponseBody'
        '404':
          $ref: '#/components/responses/ResponseBody'
        '413':
          $ref: '#/components/responses/ResponseBody'
        '500':
          $ref: '#/components/responses/ResponseBody'
        '501':
          $ref: '#/components/responses/ResponseBody'
        '503':
          $ref: '#/components/responses/ResponseBody'
      security:
        -
          OAuth2:
            - ViewRules
      operationId: getRuleSchemas
      description: >-
        Returns a list of rules. This assumes that rules have first been created during achievement,
        competition or contest setup
      x-codegen-request-body-name: body
  /rules/validate:
    post:
      requestBody:
        description: Validate rules
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateRuleRequest'
        required: true
      tags:
        - rules
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageRules
      operationId: validateRules
      description: Validate rules
      x-codegen-request-body-name: body
  /rules/operand-lookup:
    post:
      requestBody:
        description: Search for operand values and human readable text options
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RuleOperandLookupRequest'
        required: true
      tags:
        - rules
      responses:
        '200':
          $ref: '#/components/responses/RuleOperandLookupResponseBody'
        '400':
          $ref: '#/components/responses/RuleOperandLookupResponseBody'
        '401':
          $ref: '#/components/responses/RuleOperandLookupResponseBody'
        '403':
          $ref: '#/components/responses/RuleOperandLookupResponseBody'
        '404':
          $ref: '#/components/responses/RuleOperandLookupResponseBody'
        '413':
          $ref: '#/components/responses/RuleOperandLookupResponseBody'
        '500':
          $ref: '#/components/responses/RuleOperandLookupResponseBody'
        '501':
          $ref: '#/components/responses/RuleOperandLookupResponseBody'
        '503':
          $ref: '#/components/responses/RuleOperandLookupResponseBody'
      security:
        -
          OAuth2:
            - ManageRules
      operationId: lookupOperandsRules
      description: Search or get rule operand values
      x-codegen-request-body-name: body
  /rules/delete:
    post:
      requestBody:
        description: >-
          Delete Rules from Ziqni database by unique Rules ID's or any other POST body parameters
          using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - rules
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminRewards
      operationId: deleteRulesByQuery
      description: >-
        Delete Rules from Ziqni database by unique Rules ID's or any other POST body parameters using
        the POST method
      x-codegen-request-body-name: body
  /rules/query:
    post:
      requestBody:
        description: >-
          Retrieve Rules from Ziqni database by unique Rewards ID's or any other Post body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - rules
      responses:
        '200':
          $ref: '#/components/responses/RuleResponseBody'
        '400':
          $ref: '#/components/responses/RuleResponseBody'
        '401':
          $ref: '#/components/responses/RuleResponseBody'
        '403':
          $ref: '#/components/responses/RuleResponseBody'
        '404':
          $ref: '#/components/responses/RuleResponseBody'
        '413':
          $ref: '#/components/responses/RuleResponseBody'
        '500':
          $ref: '#/components/responses/RuleResponseBody'
        '501':
          $ref: '#/components/responses/RuleResponseBody'
        '503':
          $ref: '#/components/responses/RuleResponseBody'
      security:
        -
          OAuth2:
            - ViewRules
      operationId: getRulesByQuery
      description: >-
        Retrieve Rules from Ziqni database by unique Rewards ID's or any other POST body parameters
        using the POST method
      x-codegen-request-body-name: body
  /tags/query:
    summary: Get tags by query
    description: This operation allows you to get tags by query
    post:
      requestBody:
        description: >-
          Retrieve Tags from Ziqni database by unique Tags ID's or any other POST body parameters
          using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - tags
      responses:
        '200':
          $ref: '#/components/responses/TagResponseBody'
        '400':
          $ref: '#/components/responses/TagResponseBody'
        '401':
          $ref: '#/components/responses/TagResponseBody'
        '403':
          $ref: '#/components/responses/TagResponseBody'
        '404':
          $ref: '#/components/responses/TagResponseBody'
        '500':
          $ref: '#/components/responses/TagResponseBody'
        '501':
          $ref: '#/components/responses/TagResponseBody'
      security:
        -
          OAuth2:
            - ViewTags
      operationId: getTagsByQuery
      summary: Get tags by query
      description: >-
        Retrieve Tags from Ziqni database by unique Tags ID's or any other POST body parameters using
        the POST method
      x-codegen-request-body-name: body
  /account-messages/delete:
    post:
      requestBody:
        description: >-
          Delete Account Messages from Ziqni database by unique message ID's or any other POST body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - account-messages
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminMessages
      operationId: deleteAccountMessagesByQuery
      description: Delete Account Messages from the system by query.
      x-codegen-request-body-name: body
  /account-messages/query:
    post:
      requestBody:
        description: >-
          Retrieve Account Messages from Ziqni database by unique message ID's or any other POST
          body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - account-messages
      responses:
        '200':
          $ref: '#/components/responses/AccountMessageResponseBody'
        '400':
          $ref: '#/components/responses/AccountMessageResponseBody'
        '401':
          $ref: '#/components/responses/AccountMessageResponseBody'
        '403':
          $ref: '#/components/responses/AccountMessageResponseBody'
        '404':
          $ref: '#/components/responses/AccountMessageResponseBody'
        '413':
          $ref: '#/components/responses/AccountMessageResponseBody'
        '500':
          $ref: '#/components/responses/AccountMessageResponseBody'
        '501':
          $ref: '#/components/responses/AccountMessageResponseBody'
        '503':
          $ref: '#/components/responses/AccountMessageResponseBody'
      security:
        -
          OAuth2:
            - ViewMessages
      operationId: getAccountMessagesByQuery
      description: Retrieve Account Messages from the system by query.
      x-codegen-request-body-name: body
  /member-messages/delete:
    post:
      requestBody:
        description: >-
          Delete Member Messages from Ziqni database by unique message ID's or any other POST body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - member-messages
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminMessages
      operationId: deleteMemberMessagesByQuery
      description: Delete Member Messages by query.
      x-codegen-request-body-name: body
  /member-messages/query:
    post:
      requestBody:
        description: >-
          Retrieve Member Messages from Ziqni database by unique message ID's or any other POST body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - member-messages
      responses:
        '200':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '400':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '401':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '403':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '404':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '413':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '500':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '501':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '503':
          $ref: '#/components/responses/MemberMessageResponseBody'
      security:
        -
          OAuth2:
            - ViewMessages
      operationId: getMemberMessagesByQuery
      description: >-
        Retrieve Member Messages from Ziqni database by unique message ID's or any other POST body
        parameters using the POST method
      x-codegen-request-body-name: body
  /notifications/delete:
    post:
      requestBody:
        description: >-
          Delete Notification Messages from Ziqni database by unique message ID's or any other POST
          body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - notifications
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminMessages
      operationId: deleteNotificationsByQuery
      description: >-
        Delete Notification Messages from Ziqni database by unique message ID's or any other POST body
        parameters using the POST method
      x-codegen-request-body-name: body
  /notifications/query:
    post:
      requestBody:
        description: >-
          Retrieve Notification Messages from Ziqni database by unique message ID's or any other
          POST body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - notifications
      responses:
        '200':
          $ref: '#/components/responses/NotificationResponseBody'
        '400':
          $ref: '#/components/responses/NotificationResponseBody'
        '401':
          $ref: '#/components/responses/NotificationResponseBody'
        '403':
          $ref: '#/components/responses/NotificationResponseBody'
        '404':
          $ref: '#/components/responses/NotificationResponseBody'
        '413':
          $ref: '#/components/responses/NotificationResponseBody'
        '500':
          $ref: '#/components/responses/NotificationResponseBody'
        '501':
          $ref: '#/components/responses/NotificationResponseBody'
        '503':
          $ref: '#/components/responses/NotificationResponseBody'
      security:
        -
          OAuth2:
            - ViewMessages
      operationId: getNotificationsByQuery
      description: >-
        Retrieve Notification Messages from Ziqni database by unique message ID's or any other POST
        body parameters using the POST method
      x-codegen-request-body-name: body
  /products:
    summary: Manage products
    description: These operations allow you to manage products in your project.
    get:
      tags:
        - products
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/ProductResponseBody'
        '400':
          $ref: '#/components/responses/ProductResponseBody'
        '401':
          $ref: '#/components/responses/ProductResponseBody'
        '403':
          $ref: '#/components/responses/ProductResponseBody'
        '404':
          $ref: '#/components/responses/ProductResponseBody'
        '500':
          $ref: '#/components/responses/ProductResponseBody'
        '501':
          $ref: '#/components/responses/ProductResponseBody'
      security:
        -
          OAuth2:
            - ViewProducts
      operationId: getProducts
      summary: Get products
      description: >-
        Returns a list of Products. This assumes that products have first been uploaded via a POST
        request or web console
      x-codegen-request-body-name: body
      x-vue-item: Product
      x-vue-list: Products
    put:
      requestBody:
        description: >-
          Update a Product or multiple Products in the Ziqni database. * Product Ref Id can not be
          changed after creation * A products Id must exist in the Ziqni database to update the
          product
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateProductRequest'
          file/csv:
            schema:
              format: binary
              type: string
        required: true
      tags:
        - products
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageProducts
      operationId: updateProducts
      summary: Update products
      description: Update existing Products in the Ziqni database
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: >-
          Create Products in the Ziqni database. An array can contain a maximum of 10,000 products
          in one request
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateProductRequest'
          file/csv:
            schema:
              format: binary
              type: string
        required: true
      tags:
        - products
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminProducts
      operationId: createProducts
      summary: Create products
      description: Create new Products in the Ziqni database
      x-codegen-request-body-name: body
    delete:
      tags:
        - products
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminProducts
      operationId: deleteProducts
      summary: Delete products
      description: Delete Products for a given identifier specified
      x-codegen-request-body-name: body
  /account-messages:
    get:
      tags:
        - account-messages
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/AccountMessageResponseBody'
        '400':
          $ref: '#/components/responses/AccountMessageResponseBody'
        '401':
          $ref: '#/components/responses/AccountMessageResponseBody'
        '403':
          $ref: '#/components/responses/AccountMessageResponseBody'
        '404':
          $ref: '#/components/responses/AccountMessageResponseBody'
        '413':
          $ref: '#/components/responses/AccountMessageResponseBody'
        '500':
          $ref: '#/components/responses/AccountMessageResponseBody'
        '501':
          $ref: '#/components/responses/AccountMessageResponseBody'
        '503':
          $ref: '#/components/responses/AccountMessageResponseBody'
      security:
        -
          OAuth2:
            - ViewMessages
      operationId: getAccountMessages
      description: Returns a list of Account Messages.
      x-codegen-request-body-name: body
      x-vue-item: AccountMessage
      x-vue-list: AccountMessages
    delete:
      tags:
        - account-messages
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageMessages
      operationId: deleteAccountMessages
      description: Delete Account Messages for a given identifier specified
      x-codegen-request-body-name: body
  /achievements:
    summary: Achievements in the system.
    get:
      tags:
        - achievements
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/AchievementResponseBody'
        '400':
          $ref: '#/components/responses/AchievementResponseBody'
        '401':
          $ref: '#/components/responses/AchievementResponseBody'
        '403':
          $ref: '#/components/responses/AchievementResponseBody'
        '404':
          $ref: '#/components/responses/AchievementResponseBody'
        '413':
          $ref: '#/components/responses/AchievementResponseBody'
        '500':
          $ref: '#/components/responses/AchievementResponseBody'
        '501':
          $ref: '#/components/responses/AchievementResponseBody'
        '503':
          $ref: '#/components/responses/AchievementResponseBody'
      security:
        -
          OAuth2:
            - ViewAchievement
      operationId: getAchievements
      summary: Get Achievements
      description: >-
        Returns a list of Achievements. This assumes that achievements have first been uploaded via a
        POST request or web console
      x-codegen-request-body-name: body
      x-vue-item: Achievement
      x-vue-list: Achievements
    put:
      requestBody:
        description: >-
          Update Achievements in the Ziqni database. * An Achievement Id must exist in the Ziqni
          database for update
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateAchievementRequest'
        required: true
      tags:
        - achievements
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageAchievements
      operationId: updateAchievements
      summary: Update Achievements
      description: Update existing Achievements in the Ziqni database
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: Create Achievements in the Ziqni database
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateAchievementRequest'
        required: true
      tags:
        - achievements
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageAchievements
      operationId: createAchievements
      summary: Create Achievements
      description: Create Achievements in the Ziqni database
      x-codegen-request-body-name: body
    delete:
      tags:
        - achievements
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      deprecated: true
      security:
        -
          OAuth2:
            - ManageAchievements
      operationId: deleteAchievements
      summary: Delete Achievements
      description: Delete Achievements for a given identifier specified
      x-codegen-request-body-name: body
  /action-types:
    summary: Manage action types
    description: These operations allow you to manage action types in your project.
    get:
      tags:
        - action-types
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/ActionTypeResponseBody'
        '400':
          $ref: '#/components/responses/ActionTypeResponseBody'
        '401':
          $ref: '#/components/responses/ActionTypeResponseBody'
        '403':
          $ref: '#/components/responses/ActionTypeResponseBody'
        '404':
          $ref: '#/components/responses/ActionTypeResponseBody'
        '500':
          $ref: '#/components/responses/ActionTypeResponseBody'
        '501':
          $ref: '#/components/responses/ActionTypeResponseBody'
      security:
        -
          OAuth2:
            - ViewActions
      operationId: getActionTypes
      summary: Get action types
      description: >-
        Returns a list of Action Types. This assumes that action types have first been uploaded via a
        POST request or web console
      x-codegen-request-body-name: body
      x-vue-item: ActionType
      x-vue-list: ActionTypes
    put:
      requestBody:
        description: Update Action types in the Ziqni database.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateActionTypeRequest'
        required: true
      tags:
        - action-types
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminActions
      operationId: updateActionTypes
      summary: Update action types
      description: Update existing Action types in the Ziqni database
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: Create Action Types in the Ziqni database
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateActionTypeRequest'
        required: true
      tags:
        - action-types
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminActions
      operationId: createActionTypes
      summary: Create action types
      description: Create new Action types in the Ziqni database
      x-codegen-request-body-name: body
    delete:
      tags:
        - action-types
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminActions
      operationId: deleteActionTypes
      summary: Delete action types
      description: Delete Action types for a given identifier specified
      x-codegen-request-body-name: body
  /collaborators:
    get:
      tags:
        - collaborators
      parameters:
        -
          $ref: '#/components/parameters/emailQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/CollaboratorResponseBody'
        '400':
          $ref: '#/components/responses/CollaboratorResponseBody'
        '401':
          $ref: '#/components/responses/CollaboratorResponseBody'
        '403':
          $ref: '#/components/responses/CollaboratorResponseBody'
        '404':
          $ref: '#/components/responses/CollaboratorResponseBody'
        '413':
          $ref: '#/components/responses/CollaboratorResponseBody'
        '500':
          $ref: '#/components/responses/CollaboratorResponseBody'
        '501':
          $ref: '#/components/responses/CollaboratorResponseBody'
        '503':
          $ref: '#/components/responses/CollaboratorResponseBody'
      security:
        -
          OAuth2:
            - AdminCollaborator
      operationId: getCollaborators
      description: >-
        Returns a list of Collaborators. This assumes that Users have first been uploaded via a POST
        request or web console
      x-codegen-request-body-name: body
      x-vue-item: Collaborator
      x-vue-list: Collaborators
    put:
      requestBody:
        description: >-
          Update a Collaborator in the Ziqni system. * Any Put body Parameters that are excluded in
          the Request body field will be considered as empty and updated with an empty field
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateCollaboratorRequest'
        required: true
      tags:
        - collaborators
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminCollaborator
      operationId: updateCollaborators
      description: Update an existing Collaborator in the Ziqni system
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: Create a Collaborator in the Ziqni system
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateCollaboratorRequest'
        required: true
      tags:
        - collaborators
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminCollaborator
      operationId: createCollaborators
      description: Create a new Collaborator in the Ziqni
      x-codegen-request-body-name: body
    delete:
      tags:
        - collaborators
      parameters:
        -
          $ref: '#/components/parameters/emailQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminCollaborator
      operationId: deleteCollaborators
      description: >-
        Returns a list of Collaborators. This assumes that Users have first been uploaded via a POST
        request or web console
      x-codegen-request-body-name: body
  /competitions:
    get:
      tags:
        - competitions
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/CompetitionResponseBody'
        '400':
          $ref: '#/components/responses/CompetitionResponseBody'
        '401':
          $ref: '#/components/responses/CompetitionResponseBody'
        '403':
          $ref: '#/components/responses/CompetitionResponseBody'
        '404':
          $ref: '#/components/responses/CompetitionResponseBody'
        '413':
          $ref: '#/components/responses/CompetitionResponseBody'
        '500':
          $ref: '#/components/responses/CompetitionResponseBody'
        '501':
          $ref: '#/components/responses/CompetitionResponseBody'
        '503':
          $ref: '#/components/responses/CompetitionResponseBody'
      security:
        -
          OAuth2:
            - ViewCompetitions
      operationId: getCompetitions
      description: >-
        Returns a list of Competitions. This assumes that competitions have first been uploaded via a
        POST request or web console
      x-codegen-request-body-name: body
      x-vue-item: Competition
      x-vue-list: Competitions
    put:
      requestBody:
        description: >-
          Update a Competition in the Ziqni database. * A Competitions Id must exist in the Ziqni
          database for update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCompetitionRequest'
        required: true
      tags:
        - competitions
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageCompetition
      operationId: updateCompetitions
      description: Update an existing Competition in the Ziqni database
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: Create a Competition in the Ziqni database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompetitionRequest'
        required: true
      tags:
        - competitions
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageCompetition
      operationId: createCompetitions
      description: Create a new Competition in the Ziqni database
      x-codegen-request-body-name: body
  /contests:
    get:
      tags:
        - contests
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/ContestResponseBody'
        '400':
          $ref: '#/components/responses/ContestResponseBody'
        '401':
          $ref: '#/components/responses/ContestResponseBody'
        '403':
          $ref: '#/components/responses/ContestResponseBody'
        '404':
          $ref: '#/components/responses/ContestResponseBody'
        '413':
          $ref: '#/components/responses/ContestResponseBody'
        '500':
          $ref: '#/components/responses/ContestResponseBody'
        '501':
          $ref: '#/components/responses/ContestResponseBody'
        '503':
          $ref: '#/components/responses/ContestResponseBody'
      security:
        -
          OAuth2:
            - ViewContest
      operationId: getContests
      description: >-
        Returns a list of Contests. This assumes that contests have first been uploaded via a POST
        request or web console
      x-codegen-request-body-name: body
      x-vue-item: Contest
      x-vue-list: Contests
    put:
      requestBody:
        description: >-
          Update a Contest in the Ziqni database. * A Contests Id must exist in the Ziqni database
          for update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContestRequest'
        required: true
      tags:
        - contests
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageContest
      operationId: updateContest
      description: Update an existing Contest in the Ziqni database
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: Create a Contests in the Ziqni database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContestForCompetitionRequest'
        required: true
      tags:
        - contests
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageContest
      operationId: createContests
      description: Create a new Contests in the Ziqni database
      x-codegen-request-body-name: body
  /custom-fields:
    summary: Manage custom fields
    description: These operations allow you to manage custom fields in your project.
    get:
      tags:
        - custom-fields
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/CustomFieldResponseBody'
        '400':
          $ref: '#/components/responses/CustomFieldResponseBody'
        '401':
          $ref: '#/components/responses/CustomFieldResponseBody'
        '403':
          $ref: '#/components/responses/CustomFieldResponseBody'
        '404':
          $ref: '#/components/responses/CustomFieldResponseBody'
        '500':
          $ref: '#/components/responses/CustomFieldResponseBody'
        '501':
          $ref: '#/components/responses/CustomFieldResponseBody'
      security:
        -
          OAuth2:
            - ViewCustomFields
      operationId: getCustomFields
      summary: Get custom fields
      description: >-
        Returns a list of Custom fields. This assumes that custom fields have first been uploaded via
        a POST request or web console
      x-codegen-request-body-name: body
      x-vue-item: CustomField
      x-vue-list: CustomFields
    put:
      requestBody:
        description: Update Custom fields details in the Ziqni database
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateCustomFieldRequest'
        required: true
      tags:
        - custom-fields
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminCustomFields
      operationId: updateCustomFields
      summary: Update custom fields
      description: Update existing Custom fields in the Ziqni database
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: Create Custom fields in the Ziqni database
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateCustomFieldRequest'
        required: true
      tags:
        - custom-fields
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminCustomFields
      operationId: createCustomFields
      summary: Create custom fields
      description: Create new Custom fields in the Ziqni database
      x-codegen-request-body-name: body
    delete:
      tags:
        - custom-fields
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminCustomFields
      operationId: deleteCustomFields
      summary: Delete custom fields
      description: Delete the Custom fields for a given identifier specified
      x-codegen-request-body-name: body
  /events:
    get:
      tags:
        - events
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/EventResponseBody'
        '400':
          $ref: '#/components/responses/EventResponseBody'
        '401':
          $ref: '#/components/responses/EventResponseBody'
        '403':
          $ref: '#/components/responses/EventResponseBody'
        '404':
          $ref: '#/components/responses/EventResponseBody'
        '413':
          $ref: '#/components/responses/EventResponseBody'
        '500':
          $ref: '#/components/responses/EventResponseBody'
        '501':
          $ref: '#/components/responses/EventResponseBody'
        '503':
          $ref: '#/components/responses/EventResponseBody'
      security:
        -
          OAuth2:
            - ViewEvents
      operationId: getEvents
      description: >-
        Retrieve an Event or a list of Events from Ziqni by unique Event ID's or any other POST body
        parameters using the POST method
      x-codegen-request-body-name: body
      x-vue-item: Event
      x-vue-list: Events
    post:
      requestBody:
        description: Create an Event
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateEventRequest'
      tags:
        - events
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminEvents
      operationId: createEvents
      description: Create an Event
      x-codegen-request-body-name: body
  /languages:
    get:
      tags:
        - languages
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/LanguageResponseBody'
        '400':
          $ref: '#/components/responses/LanguageResponseBody'
        '401':
          $ref: '#/components/responses/LanguageResponseBody'
        '403':
          $ref: '#/components/responses/LanguageResponseBody'
        '404':
          $ref: '#/components/responses/LanguageResponseBody'
        '413':
          $ref: '#/components/responses/LanguageResponseBody'
        '500':
          $ref: '#/components/responses/LanguageResponseBody'
        '501':
          $ref: '#/components/responses/LanguageResponseBody'
        '503':
          $ref: '#/components/responses/LanguageResponseBody'
      security:
        -
          OAuth2:
            - ViewLanguage
      operationId: getLanguages
      description: >-
        Returns a list of Languages available in the space. This assumes that languages have first
        been uploaded via a POST request or web console
      x-codegen-request-body-name: body
      x-vue-item: Language
      x-vue-list: Languages
    put:
      requestBody:
        description: Update Language details in the Ziqni database
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateLanguageRequest'
        required: true
      tags:
        - languages
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminLanguage
      operationId: updateLanguages
      description: Update an existing Language in the Ziqni database
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: Create a Language in the Ziqni database
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateLanguageRequest'
        required: true
      tags:
        - languages
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminLanguage
      operationId: createLanguages
      description: Create a new Language in the Ziqni database
      x-codegen-request-body-name: body
    delete:
      tags:
        - languages
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminLanguage
      operationId: deleteLanguages
      description: Delete Languages for a given identifier specified
      x-codegen-request-body-name: body
  /member-messages:
    get:
      tags:
        - member-messages
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '400':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '401':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '403':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '404':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '413':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '500':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '501':
          $ref: '#/components/responses/MemberMessageResponseBody'
        '503':
          $ref: '#/components/responses/MemberMessageResponseBody'
      security:
        -
          OAuth2:
            - ViewMessages
      operationId: getMemberMessages
      description: >-
        Returns a list of Member Messages. This assumes that Messages have first been uploaded via a
        POST request or web console
      x-codegen-request-body-name: body
      x-vue-item: MemberMessage
      x-vue-list: MemberMessages
    post:
      requestBody:
        description: Create Messages in the Ziqni database
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateMemberMessageRequest'
        required: true
      tags:
        - member-messages
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageMessages
      operationId: createMemberMessages
      description: Create Member Messages in the Ziqni database
      x-codegen-request-body-name: body
    delete:
      tags:
        - member-messages
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageMessages
      operationId: deleteMemberMessages
      description: Delete Member Messages for a given identifier specified
      x-codegen-request-body-name: body
  /notifications:
    get:
      tags:
        - notifications
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/NotificationResponseBody'
        '400':
          $ref: '#/components/responses/NotificationResponseBody'
        '401':
          $ref: '#/components/responses/NotificationResponseBody'
        '403':
          $ref: '#/components/responses/NotificationResponseBody'
        '404':
          $ref: '#/components/responses/NotificationResponseBody'
        '413':
          $ref: '#/components/responses/NotificationResponseBody'
        '500':
          $ref: '#/components/responses/NotificationResponseBody'
        '501':
          $ref: '#/components/responses/NotificationResponseBody'
        '503':
          $ref: '#/components/responses/NotificationResponseBody'
      security:
        -
          OAuth2:
            - ViewMessages
      operationId: getNotifications
      description: >-
        Returns a list of Notification Messages. This assumes that Messages have first been uploaded
        via a POST request or web console
      x-codegen-request-body-name: body
      x-vue-item: Notification
      x-vue-list: Notifications
    post:
      requestBody:
        description: Create Notification Messages in the Ziqni database
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateNotificationRequest'
        required: true
      tags:
        - notifications
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageMessages
      operationId: createNotifications
      description: Create Notification Messages in the Ziqni database
      x-codegen-request-body-name: body
    delete:
      tags:
        - notifications
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageMessages
      operationId: deleteNotifications
      description: Delete Notification Messages for a given identifier specified
      x-codegen-request-body-name: body
  /rewards:
    get:
      tags:
        - rewards
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/RewardResponseBody'
        '400':
          $ref: '#/components/responses/RewardResponseBody'
        '401':
          $ref: '#/components/responses/RewardResponseBody'
        '403':
          $ref: '#/components/responses/RewardResponseBody'
        '404':
          $ref: '#/components/responses/RewardResponseBody'
        '413':
          $ref: '#/components/responses/RewardResponseBody'
        '500':
          $ref: '#/components/responses/RewardResponseBody'
        '501':
          $ref: '#/components/responses/RewardResponseBody'
        '503':
          $ref: '#/components/responses/RewardResponseBody'
      security:
        -
          OAuth2:
            - ViewRewards
      operationId: getRewards
      description: >-
        Returns a list of Rewards. This assumes that rewards have first been uploaded via a POST
        request or web console
      x-codegen-request-body-name: body
      x-vue-item: Reward
      x-vue-list: Rewards
    put:
      requestBody:
        description: Update Reward details in the Ziqni database.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateEntityRewardRequest'
        required: true
      tags:
        - rewards
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageRewards
      operationId: updateRewards
      description: Update existing Rewards in the Ziqni database
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: Create Rewards in the Ziqni database
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateEntityRewardRequest'
        required: true
      tags:
        - rewards
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageRewards
      operationId: createRewards
      description: Create Rewards in the Ziqni database
      x-codegen-request-body-name: body
    delete:
      tags:
        - rewards
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageRewards
      operationId: deleteRewards
      description: Delete Rewards for a given identifier specified
      x-codegen-request-body-name: body
  /rules:
    get:
      tags:
        - rules
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/RuleResponseBody'
        '400':
          $ref: '#/components/responses/RuleResponseBody'
        '401':
          $ref: '#/components/responses/RuleResponseBody'
        '403':
          $ref: '#/components/responses/RuleResponseBody'
        '404':
          $ref: '#/components/responses/RuleResponseBody'
        '413':
          $ref: '#/components/responses/RuleResponseBody'
        '500':
          $ref: '#/components/responses/RuleResponseBody'
        '501':
          $ref: '#/components/responses/RuleResponseBody'
        '503':
          $ref: '#/components/responses/RuleResponseBody'
      security:
        -
          OAuth2:
            - ViewRules
      operationId: getRules
      description: >-
        Returns a list of rules. This assumes that rules have first been created during achievement,
        competition or contest setup. The id is the ID of the entity the rules describe
      x-codegen-request-body-name: body
      x-vue-item: Rule
      x-vue-list: Rules
    put:
      requestBody:
        description: 'Update rules for a given Achievement, Competition or Contest identifier.'
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateRuleRequest'
        required: true
      tags:
        - rules
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageRules
      operationId: updateRules
      description: Update existing rules
      x-codegen-request-body-name: body
  /spaces:
    get:
      tags:
        - spaces
      parameters:
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/SpaceResponseBody'
        '400':
          $ref: '#/components/responses/SpaceResponseBody'
        '401':
          $ref: '#/components/responses/SpaceResponseBody'
        '403':
          $ref: '#/components/responses/SpaceResponseBody'
        '404':
          $ref: '#/components/responses/SpaceResponseBody'
        '413':
          $ref: '#/components/responses/SpaceResponseBody'
        '500':
          $ref: '#/components/responses/SpaceResponseBody'
        '501':
          $ref: '#/components/responses/SpaceResponseBody'
        '503':
          $ref: '#/components/responses/SpaceResponseBody'
      security:
        -
          OAuth2:
            - ViewSpaces
      operationId: getSpaceInfromation
      description: Returns a list of Spaces for the current session
      x-codegen-request-body-name: body
      x-vue-item: Space
      x-vue-list: Spaces
    put:
      requestBody:
        description: Create a Space for the user in the Ziqni
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSpaceRequest'
        required: true
      tags:
        - spaces
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminSpaces
      operationId: updateSpace
      description: Update a  Space for the user in the Ziqni
      x-codegen-request-body-name: body
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateSpaceRequest'
        required: true
      tags:
        - spaces
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ViewSpaces
      operationId: createSpace
      description: Create a new Space for the user in the Ziqni
      x-codegen-request-body-name: body
    delete:
      parameters:
        -
          name: name
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json: {}
          description: On Success
      operationId: deleteSpace
      summary: NOT AVAILABLE IN CURRENT RELEASE
  /tags:
    summary: Manage tags
    description: These operations allow you to manage tags in your project.
    get:
      tags:
        - tags
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/TagResponseBody'
        '400':
          $ref: '#/components/responses/TagResponseBody'
        '401':
          $ref: '#/components/responses/TagResponseBody'
        '403':
          $ref: '#/components/responses/TagResponseBody'
        '404':
          $ref: '#/components/responses/TagResponseBody'
        '500':
          $ref: '#/components/responses/TagResponseBody'
        '501':
          $ref: '#/components/responses/TagResponseBody'
      security:
        -
          OAuth2:
            - ViewTags
      operationId: getTags
      summary: Get tags
      description: >-
        Returns a list of Tags. This assumes that tags have first been uploaded via a POST request or
        web console
      x-codegen-request-body-name: body
      x-vue-item: Tag
      x-vue-list: Tags
    put:
      requestBody:
        description: Update a Tag in the Ziqni database.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateTagRequest'
        required: true
      tags:
        - tags
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageTags
      operationId: updateTags
      summary: Update tags
      description: Update existing Tags in the Ziqni database
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: Create Tags in the Ziqni database
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateTagRequest'
        required: true
      tags:
        - tags
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageTags
      operationId: createTags
      summary: Create tags
      description: Create new Tags in the Ziqni database
      x-codegen-request-body-name: body
    delete:
      tags:
        - tags
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminTags
      operationId: deleteTags
      summary: Delete tags
      description: Delete Tags for a given identifier specified
      x-codegen-request-body-name: body
  /transformers:
    get:
      tags:
        - transformers
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/TransformerResponseBody'
        '400':
          $ref: '#/components/responses/TransformerResponseBody'
        '401':
          $ref: '#/components/responses/TransformerResponseBody'
        '403':
          $ref: '#/components/responses/TransformerResponseBody'
        '404':
          $ref: '#/components/responses/TransformerResponseBody'
        '413':
          $ref: '#/components/responses/TransformerResponseBody'
        '500':
          $ref: '#/components/responses/TransformerResponseBody'
        '501':
          $ref: '#/components/responses/TransformerResponseBody'
        '503':
          $ref: '#/components/responses/TransformerResponseBody'
      security:
        -
          OAuth2:
            - AdminTransformers
      operationId: getTransformers
      description: >-
        Returns a list of Transformers. This assumes that transformers have first been uploaded via a
        POST request or web console
      x-codegen-request-body-name: body
      x-vue-item: Transformer
      x-vue-list: Transformers
    put:
      requestBody:
        description: Update Transformer details in the Ziqni system
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateTransformerRequest'
        required: true
      tags:
        - transformers
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminTransformers
      operationId: updateTransformers
      description: Update an existing Transformer in the Ziqni system
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: Create a Transformer in the Ziqni system
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateTransformerRequest'
        required: true
      tags:
        - transformers
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminTransformers
      operationId: createTransformers
      description: Create a new Transformer in the Ziqni system
      x-codegen-request-body-name: body
    delete:
      tags:
        - transformers
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminTransformers
      operationId: deleteTransformers
      description: Delete the Transformers for a given identifier specified
      x-codegen-request-body-name: body
  /units-of-measure:
    get:
      tags:
        - units-of-measure
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/UnitOfMeasureResponseBody'
        '400':
          $ref: '#/components/responses/UnitOfMeasureResponseBody'
        '401':
          $ref: '#/components/responses/UnitOfMeasureResponseBody'
        '403':
          $ref: '#/components/responses/UnitOfMeasureResponseBody'
        '404':
          $ref: '#/components/responses/UnitOfMeasureResponseBody'
        '413':
          $ref: '#/components/responses/UnitOfMeasureResponseBody'
        '500':
          $ref: '#/components/responses/UnitOfMeasureResponseBody'
        '501':
          $ref: '#/components/responses/UnitOfMeasureResponseBody'
        '503':
          $ref: '#/components/responses/UnitOfMeasureResponseBody'
      security:
        -
          OAuth2:
            - ViewUOM
      operationId: getUnitsOfMeasure
      description: >-
        Returns a list of Units of measure. This assumes that units of measure have first been
        uploaded via a POST request or web console
      x-codegen-request-body-name: body
      x-vue-item: UnitOfMeasure
      x-vue-list: UnitsOfMeasure
    put:
      requestBody:
        description: Update a Unit of measure in the Ziqni database.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateUnitOfMeasureRequest'
        required: true
      tags:
        - units-of-measure
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageUOM
      operationId: updateUnitsOfMeasure
      description: Update an existing Unit of measure in the Ziqni database
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: Create a Unit of measure in the Ziqni database
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateUnitOfMeasureRequest'
        required: true
      tags:
        - units-of-measure
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminUOM
      operationId: createUnitsOfMeasure
      description: Create a new Unit of measure in the Ziqni database
      x-codegen-request-body-name: body
    delete:
      tags:
        - units-of-measure
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminUOM
      operationId: deleteUnitsOfMeasure
      description: Delete the Unit of measured for a given identifier specified
      x-codegen-request-body-name: body
  /user:
    get:
      tags:
        - user
      parameters:
        -
          style: form
          explode: false
          name: includeSpaces
          description: Include Spaces
          schema:
            type: boolean
          in: query
      responses:
        '200':
          $ref: '#/components/responses/ProfileResponseBody'
        '400':
          $ref: '#/components/responses/ProfileResponseBody'
        '401':
          $ref: '#/components/responses/ProfileResponseBody'
        '403':
          $ref: '#/components/responses/ProfileResponseBody'
        '404':
          $ref: '#/components/responses/ProfileResponseBody'
        '413':
          $ref: '#/components/responses/ProfileResponseBody'
        '500':
          $ref: '#/components/responses/ProfileResponseBody'
        '501':
          $ref: '#/components/responses/ProfileResponseBody'
        '503':
          $ref: '#/components/responses/ProfileResponseBody'
      security:
        -
          OAuth2:
            - ViewUser
      operationId: getUser
      description: >-
        Returns the current users user. This assumes that a user has first been uploaded via a POST
        request or web console
      x-codegen-request-body-name: body
      x-vue-item: User
      x-vue-list: Users
  /webhooks:
    get:
      tags:
        - webhooks
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/WebhookResponseBody'
        '400':
          $ref: '#/components/responses/WebhookResponseBody'
        '401':
          $ref: '#/components/responses/WebhookResponseBody'
        '403':
          $ref: '#/components/responses/WebhookResponseBody'
        '404':
          $ref: '#/components/responses/WebhookResponseBody'
        '413':
          $ref: '#/components/responses/WebhookResponseBody'
        '500':
          $ref: '#/components/responses/WebhookResponseBody'
        '501':
          $ref: '#/components/responses/WebhookResponseBody'
        '503':
          $ref: '#/components/responses/WebhookResponseBody'
      security:
        -
          OAuth2:
            - AdminWebhooks
      operationId: getWebhooks
      description: Returns a list of Webhooks.
      x-codegen-request-body-name: body
      x-vue-item: Webhook
      x-vue-list: Webhooks
    put:
      requestBody:
        description: Update Webhook details in the Ziqni system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWebhookRequest'
        required: true
      tags:
        - webhooks
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminWebhooks
      operationId: updateWebhooks
      description: Update an existing Webhook in the Ziqni system
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: Create a Webhook in the Ziqni system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookRequest'
        required: true
      tags:
        - webhooks
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminWebhooks
      operationId: createWebhooks
      description: Create a new Webhook in the Ziqni system
      x-codegen-request-body-name: body
    delete:
      tags:
        - webhooks
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminWebhooks
      operationId: deleteWebhooks
      description: Delete the Webhooks for a given identifier specified
      x-codegen-request-body-name: body
  /reward-types:
    summary: Manage reward types
    description: These operations allow you to manage reward types in your project.
    get:
      tags:
        - reward-types
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/RewardTypeResponseBody'
        '400':
          $ref: '#/components/responses/RewardTypeResponseBody'
        '401':
          $ref: '#/components/responses/RewardTypeResponseBody'
        '403':
          $ref: '#/components/responses/RewardTypeResponseBody'
        '404':
          $ref: '#/components/responses/RewardTypeResponseBody'
        '500':
          $ref: '#/components/responses/RewardTypeResponseBody'
        '501':
          $ref: '#/components/responses/RewardTypeResponseBody'
      security:
        -
          OAuth2:
            - ViewRewardType
      operationId: getRewardTypes
      summary: Get reward types
      description: >-
        Returns a list of Reward Types. This assumes that reward types have first been uploaded via a
        POST request or web console
      x-codegen-request-body-name: body
      x-vue-item: RewardType
      x-vue-list: RewardTypes
    put:
      requestBody:
        description: Update Reward types in the Ziqni database.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateRewardTypeRequest'
        required: true
      tags:
        - reward-types
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageRewardType
      operationId: updateRewardTypes
      summary: Update Reward Types
      description: Update existing Reward types in the Ziqni database
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: Create Reward Types in the Ziqni database
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateRewardTypeRequest'
        required: true
      tags:
        - reward-types
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageRewardType
      operationId: createRewardTypes
      summary: Create reward types
      description: Create new Reward types in the Ziqni database
      x-codegen-request-body-name: body
    delete:
      tags:
        - reward-types
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminRewardType
      operationId: deleteRewardTypes
      summary: Delete reward types
      description: Delete Reward types for a given identifier specified
      x-codegen-request-body-name: body
  /awards/query:
    post:
      requestBody:
        description: >-
          Retrieve Awards from Ziqni database by unique Awards ID's or any other POST body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - awards
      responses:
        '200':
          $ref: '#/components/responses/AwardResponseBody'
        '400':
          $ref: '#/components/responses/AwardResponseBody'
        '401':
          $ref: '#/components/responses/AwardResponseBody'
        '403':
          $ref: '#/components/responses/AwardResponseBody'
        '404':
          $ref: '#/components/responses/AwardResponseBody'
        '413':
          $ref: '#/components/responses/AwardResponseBody'
        '500':
          $ref: '#/components/responses/AwardResponseBody'
        '501':
          $ref: '#/components/responses/AwardResponseBody'
        '503':
          $ref: '#/components/responses/AwardResponseBody'
      security:
        -
          OAuth2:
            - ViewAwards
      operationId: getAwardsByQuery
      description: >-
        Retrieve Awards from Ziqni database by unique Awards ID's or any other POST body parameters
        using the POST method
      x-codegen-request-body-name: body
  /products/find-by-ref-identifiers/:
    summary: Get products by reference identifiers
    description: This operation allows you to get products in your project using reference identifiers.
    get:
      tags:
        - products
      parameters:
        -
          $ref: '#/components/parameters/refId'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/ProductResponseBody'
        '400':
          $ref: '#/components/responses/ProductResponseBody'
        '401':
          $ref: '#/components/responses/ProductResponseBody'
        '403':
          $ref: '#/components/responses/ProductResponseBody'
        '404':
          $ref: '#/components/responses/ProductResponseBody'
        '500':
          $ref: '#/components/responses/ProductResponseBody'
        '501':
          $ref: '#/components/responses/ProductResponseBody'
      security:
        -
          OAuth2:
            - ViewProducts
      operationId: getProductsByRefId
      summary: Get products by reference ids
      description: >-
        Returns a list of Products. This assumes that products have first been uploaded via a POST
        request or web console
      x-codegen-request-body-name: body
  /compute-engines:
    get:
      tags:
        - compute-engine
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '400':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '401':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '403':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '404':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '413':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '500':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '501':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '503':
          $ref: '#/components/responses/ComputeEngineResponseBody'
      security:
        -
          OAuth2:
            - AdminApi
      operationId: getComputeEngines
      description: >-
        Returns a list of Compute Engines. This assumes that api keys have first been created via a
        POST request or web console
      x-codegen-request-body-name: body
      x-vue-item: ComputeEngine
      x-vue-list: ComputeEngines
    put:
      requestBody:
        description: >-
          Update an Compute Engine in the Ziqni system. * Any Put body Parameters that are excluded
          in the Request body field will be considered as empty and updated with an empty field
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateComputeEngineRequest'
        required: true
      tags:
        - compute-engine
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminApi
      operationId: updateComputeEngines
      description: Update an existing Compute Engine in the Ziqni system
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: Create a Compute Engine in the Ziqni system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComputeEngineRequest'
        required: true
      tags:
        - compute-engine
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminApi
      operationId: createComputeEngines
      description: Create a new Compute Engine in the Ziqni system
      x-codegen-request-body-name: body
  '/compute-engines/{id}':
    get:
      tags:
        - compute-engine
      parameters:
        -
          $ref: '#/components/parameters/idPath'
      responses:
        '200':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '400':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '401':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '403':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '404':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '413':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '500':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '501':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '503':
          $ref: '#/components/responses/ComputeEngineResponseBody'
      security:
        -
          OAuth2:
            - AdminApi
      operationId: getComputeEnginesById
      description: >-
        Returns an Compute Engine by identifier provided. This assumes that compute engines have first
        been created via a POST request or web console
      x-codegen-request-body-name: body
    delete:
      tags:
        - compute-engine
      parameters:
        -
          $ref: '#/components/parameters/idPath'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminApi
      operationId: deleteComputeEnginesById
      description: Delete the Compute Engine for a given identifier specified
      x-codegen-request-body-name: body
  /compute-engines/delete:
    post:
      requestBody:
        description: >-
          Delete an  Compute Engine or a list of Compute Engines from Ziqni by unique Compute Engine
          ID's or any other POST body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - compute-engine
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminApi
      operationId: deleteComputeEnginesByQuery
      description: Delete an Compute Engine or a list of Compute Engines from Ziqni by query
      x-codegen-request-body-name: body
  /compute-engines/query:
    post:
      requestBody:
        description: >-
          Retrieve an  Compute Engine or a list of Compute Engines from Ziqni by unique Copute
          Engine ID's or any other POST body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - compute-engine
      responses:
        '200':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '400':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '401':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '403':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '404':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '413':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '500':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '501':
          $ref: '#/components/responses/ComputeEngineResponseBody'
        '503':
          $ref: '#/components/responses/ComputeEngineResponseBody'
      security:
        -
          OAuth2:
            - AdminApi
      operationId: getComputeEnginesByQuery
      description: Retrieve an Compute Engine or a list of Compute Engines by query
      x-codegen-request-body-name: body
  /translations/find-by-entity-id:
    get:
      tags:
        - translations
      parameters:
        -
          $ref: '#/components/parameters/refId'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/TranslationResponseBody'
        '400':
          $ref: '#/components/responses/TranslationResponseBody'
        '401':
          $ref: '#/components/responses/TranslationResponseBody'
        '403':
          $ref: '#/components/responses/TranslationResponseBody'
        '404':
          $ref: '#/components/responses/TranslationResponseBody'
        '413':
          $ref: '#/components/responses/TranslationResponseBody'
        '500':
          $ref: '#/components/responses/TranslationResponseBody'
        '501':
          $ref: '#/components/responses/TranslationResponseBody'
        '503':
          $ref: '#/components/responses/TranslationResponseBody'
      security:
        -
          OAuth2:
            - ViewTranslations
      operationId: getTranslationsByEntityId
      description: >-
        Returns a list of Translations. This assumes that translations have first been uploaded via a
        POST request or web console
      x-codegen-request-body-name: body
  /transformers/delete:
    post:
      requestBody:
        description: >-
          Delete a Transformer or a list of Transformers from Ziqni by unique Transformer ID's or
          any other POST body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - transformers
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminTransformers
      operationId: deleteTransformersByQuery
      description: >-
        Delete a Transformer or a list of Transformers from Ziqni by unique Transformer ID's or any
        other POST body parameters using the POST method
      x-codegen-request-body-name: body
  /translations/delete:
    post:
      requestBody:
        description: >-
          Delete a Translation or a list of Translations from Ziqni by unique Translation ID's or
          any other POST body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - translations
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminTranslations
      operationId: deleteTranslationsByQuery
      summary: Delete translations by query
      description: >-
        Delete a Translation or a list of Translations from Ziqni by unique Translation ID's or any
        other POST body parameters using the POST method
      x-codegen-request-body-name: body
  /translations/query:
    post:
      requestBody:
        description: >-
          Retrieve a Translation or a list of Translations from Ziqni by unique Translation ID's or
          any other Post body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - translations
      responses:
        '200':
          $ref: '#/components/responses/TranslationResponseBody'
        '400':
          $ref: '#/components/responses/TranslationResponseBody'
        '401':
          $ref: '#/components/responses/TranslationResponseBody'
        '403':
          $ref: '#/components/responses/TranslationResponseBody'
        '404':
          $ref: '#/components/responses/TranslationResponseBody'
        '413':
          $ref: '#/components/responses/TranslationResponseBody'
        '500':
          $ref: '#/components/responses/TranslationResponseBody'
        '501':
          $ref: '#/components/responses/TranslationResponseBody'
        '503':
          $ref: '#/components/responses/TranslationResponseBody'
      security:
        -
          OAuth2:
            - AdminTranslations
      operationId: getTranslationsByQuery
      description: >-
        Retrieve a Translation or a list of Translations from Ziqni by unique Translation ID's or any
        other POST body parameters using the POST method
      x-codegen-request-body-name: body
  /translations:
    get:
      tags:
        - translations
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/TranslationResponseBody'
        '400':
          $ref: '#/components/responses/TranslationResponseBody'
        '401':
          $ref: '#/components/responses/TranslationResponseBody'
        '403':
          $ref: '#/components/responses/TranslationResponseBody'
        '404':
          $ref: '#/components/responses/TranslationResponseBody'
        '413':
          $ref: '#/components/responses/TranslationResponseBody'
        '500':
          $ref: '#/components/responses/TranslationResponseBody'
        '501':
          $ref: '#/components/responses/TranslationResponseBody'
        '503':
          $ref: '#/components/responses/TranslationResponseBody'
      security:
        -
          OAuth2:
            - ViewTranslations
      operationId: getTranslations
      description: >-
        Returns a list of translations. This assumes that rules have first been created during
        achievement, competition or contest setup. The id is the ID of the entity the translations
        describe
      x-codegen-request-body-name: body
      x-vue-item: Translation
      x-vue-list: Translations
    put:
      requestBody:
        description: Update Translations.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateTranslationRequest'
        required: true
      tags:
        - translations
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageTranslations
      operationId: updateTranslations
      description: Update existing translations
      x-codegen-request-body-name: body
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateTranslationRequest'
        required: true
      tags:
        - translations
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      operationId: createTranslations
      summary: creating a translation
      description: Create a new Translation in the Ziqni system
    delete:
      tags:
        - translations
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminTranslations
      operationId: deleteTranslations
      description: Delete the Translations for a given identifier specified
      x-codegen-request-body-name: body
  /file-repositories/delete:
    post:
      requestBody:
        description: >-
          Delete repositories from a Ziqni space by unique repository ID's or any other POST body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - file-repositories
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageFileObjectRep
      operationId: deleteFileRepositoriesByQuery
      description: >-
        Delete repositories nby query. Delete repositories by query and/or unique repository ID's or
        any other body parameters
      x-codegen-request-body-name: body
  /file-repositories/query:
    post:
      requestBody:
        description: >-
          Retrieve file object repositories from Ziqni by unique repository ID's or any other POST
          body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - file-repositories
      responses:
        '200':
          $ref: '#/components/responses/RepositoryResponseBody'
        '400':
          $ref: '#/components/responses/RepositoryResponseBody'
        '401':
          $ref: '#/components/responses/RepositoryResponseBody'
        '403':
          $ref: '#/components/responses/RepositoryResponseBody'
        '404':
          $ref: '#/components/responses/RepositoryResponseBody'
        '413':
          $ref: '#/components/responses/RepositoryResponseBody'
        '500':
          $ref: '#/components/responses/RepositoryResponseBody'
        '501':
          $ref: '#/components/responses/RepositoryResponseBody'
        '503':
          $ref: '#/components/responses/RepositoryResponseBody'
      security:
        -
          OAuth2:
            - ManageFileObjectRep
      operationId: getFileRepositoriesByQuery
      description: Find file object repositories by query
      x-codegen-request-body-name: body
  /file-repositories:
    get:
      tags:
        - file-repositories
      parameters:
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/RepositoryResponseBody'
        '400':
          $ref: '#/components/responses/RepositoryResponseBody'
        '401':
          $ref: '#/components/responses/RepositoryResponseBody'
        '403':
          $ref: '#/components/responses/RepositoryResponseBody'
        '404':
          $ref: '#/components/responses/RepositoryResponseBody'
        '413':
          $ref: '#/components/responses/RepositoryResponseBody'
        '500':
          $ref: '#/components/responses/RepositoryResponseBody'
        '501':
          $ref: '#/components/responses/RepositoryResponseBody'
        '503':
          $ref: '#/components/responses/RepositoryResponseBody'
      security:
        -
          OAuth2:
            - ManageFileObjectRep
      operationId: getFileRepositories
      description: >-
        Returns a list of file object repositories. This assumes that repositories have first been
        uploaded via a POST request or web console
      x-codegen-request-body-name: body
      x-vue-item: FileRepository
      x-vue-list: FileRepositories
    put:
      requestBody:
        description: Update a file object repository in your Ziqni space.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateRepositoryRequest'
        required: true
      tags:
        - file-repositories
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageFileObjectRep
      operationId: updateFileRepositories
      description: Update a file object repository in your Ziqni space.
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: Create a new file object repository in your Ziqni space
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateRepositoryRequest'
        required: true
      tags:
        - file-repositories
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageFileObjectRep
      operationId: createFileRepositories
      description: Create a new file object repository in your Ziqni space
      x-codegen-request-body-name: body
    delete:
      tags:
        - file-repositories
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          name: permanent
          description: Permanently delete the file object. Default is false
          schema:
            type: boolean
          in: query
          required: false
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageFileObjectRep
      operationId: deleteFileRepositories
      description: Delete the file repository for a given identifier specified
      x-codegen-request-body-name: body
  /file-objects:
    get:
      tags:
        - file-objects
      parameters:
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
        -
          $ref: '#/components/parameters/idQuery'
        -
          name: download
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          $ref: '#/components/responses/FileObjectsResponseBody'
        '400':
          $ref: '#/components/responses/FileObjectsResponseBody'
        '401':
          $ref: '#/components/responses/FileObjectsResponseBody'
        '403':
          $ref: '#/components/responses/FileObjectsResponseBody'
        '404':
          $ref: '#/components/responses/FileObjectsResponseBody'
        '413':
          $ref: '#/components/responses/FileObjectsResponseBody'
        '500':
          $ref: '#/components/responses/FileObjectsResponseBody'
        '501':
          $ref: '#/components/responses/FileObjectsResponseBody'
        '503':
          $ref: '#/components/responses/FileObjectsResponseBody'
      security:
        -
          OAuth2:
            - ViewObjects
      operationId: getFileObjects
      description: Returns a list of file objects
      x-codegen-request-body-name: body
      x-ws-ignore: true
      x-vue-item: FileObject
      x-vue-list: FileObjects
    put:
      requestBody:
        description: Update a file object in your Ziqni space.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateFileObjectRequest'
        required: true
      tags:
        - file-objects
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageObjects
      operationId: updateFileObjects
      x-codegen-request-body-name: body
      x-ws-ignore: true
    post:
      requestBody:
        description: Create a new file object repository in your Ziqni space
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFileObjectRequest'
        required: true
      tags:
        - file-objects
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageObjects
      operationId: createFileObjects
      x-codegen-request-body-name: body
      x-ws-ignore: true
    delete:
      tags:
        - file-objects
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          name: permanent
          description: Permanently delete the file object. Default is false
          schema:
            type: boolean
          in: query
          required: false
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageObjects
      operationId: deleteFileObjects
      x-codegen-request-body-name: body
      x-ws-ignore: true
  /file-objects/delete:
    post:
      requestBody:
        description: >-
          Delete file objects inside a repository from Ziqni by unique file by unique object ID's or
          any other POST body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - file-objects
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminObjects
      operationId: deleteFileObjectsByQuery
      description: Delete file objects by query
      x-codegen-request-body-name: body
      x-ws-ignore: true
  /file-objects/download:
    get:
      tags:
        - file-objects
      parameters:
        -
          name: path
          description: The canonical path of the file to download
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            text/xml:
              schema:
                format: binary
                type: string
          description: Success
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageObjects
      operationId: downloadFileObjects
      description: Download file objects from your Ziqni space
      x-codegen-request-body-name: body
  /file-objects/query:
    post:
      requestBody:
        description: >-
          Retrieve file objects inside a repository from Ziqni by unique file object ID's or any
          other POST body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - file-objects
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/FileObjectsResponseBody'
        '400':
          $ref: '#/components/responses/FileObjectsResponseBody'
        '401':
          $ref: '#/components/responses/FileObjectsResponseBody'
        '403':
          $ref: '#/components/responses/FileObjectsResponseBody'
        '404':
          $ref: '#/components/responses/FileObjectsResponseBody'
        '413':
          $ref: '#/components/responses/FileObjectsResponseBody'
        '500':
          $ref: '#/components/responses/FileObjectsResponseBody'
        '501':
          $ref: '#/components/responses/FileObjectsResponseBody'
        '503':
          $ref: '#/components/responses/FileObjectsResponseBody'
      security:
        -
          OAuth2:
            - ViewObjects
      operationId: getFileObjectsByQuery
      description: Retrieve file objects by query
      x-codegen-request-body-name: body
      x-ws-ignore: true
  /file-objects/upload:
    post:
      requestBody:
        description: Create or update file objects and binaries in your Ziqni space
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateFileObjectFormRequest'
        required: true
      tags:
        - file-objects
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageObjects
      operationId: uploadFileObjects
      description: Create or update file objects and binaries in your Ziqni space
      x-codegen-request-body-name: body
      x-ws-ignore: true
  /competitions/simple:
    post:
      requestBody:
        description: Create a Competition in the Ziqni database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSimpleCompetitionRequest'
        required: true
      tags:
        - competitions
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageCompetition
      operationId: createSimpleCompetitions
      description: Create a Simple Competition in the Ziqni database
      x-codegen-request-body-name: body
  /file-objects/save-template:
    post:
      requestBody:
        description: Create or update file objects and binaries in your Ziqni space
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SaveTemplateRequest'
        required: true
      tags:
        - file-objects
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageObjects
      operationId: saveTemplates
      description: Create or update file objects and binaries in your Ziqni space
      x-codegen-request-body-name: body
      x-ws-ignore: true
  /api-keys:
    summary: Manage api keys
    description: These operations allow you to manage api keys in your project.
    get:
      tags:
        - api-keys
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/ApiKeyResponseBody'
        '400':
          $ref: '#/components/responses/ApiKeyResponseBody'
        '401':
          $ref: '#/components/responses/ApiKeyResponseBody'
        '403':
          $ref: '#/components/responses/ApiKeyResponseBody'
        '404':
          $ref: '#/components/responses/ApiKeyResponseBody'
        '500':
          $ref: '#/components/responses/ApiKeyResponseBody'
        '501':
          $ref: '#/components/responses/ApiKeyResponseBody'
      security:
        -
          OAuth2:
            - AdminApi
      operationId: getApiKeys
      summary: Get api keys
      description: >-
        Returns a list of Api keys. This assumes that api keys have first been created via a POST
        request or web console
      x-codegen-request-body-name: body
      x-vue-item: ApiKey
      x-vue-list: ApiKeys
    put:
      requestBody:
        description: >-
          Update an Api key in the Ziqni system. * Any Put body Parameters that are excluded in the
          Request body field will be considered as empty and updated with an empty field
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKeyRequest'
        required: true
      tags:
        - api-keys
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminApi
      operationId: updateApiKeys
      summary: Update api keys
      description: Update an existing Api key in the Ziqni system
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: Create an Api key in the Ziqni system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
        required: true
      tags:
        - api-keys
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminApi
      operationId: createApiKeys
      summary: Delete api keys
      description: Create a new Api key in the Ziqni system
      x-codegen-request-body-name: body
    delete:
      tags:
        - api-keys
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminActions
      operationId: deleteApiKeys
      summary: Delete api keys
      description: Delete Api keys for a given identifier specified
      x-codegen-request-body-name: body
  '/contests/{id}/leaderboard':
    get:
      tags:
        - contests
      parameters:
        -
          $ref: '#/components/parameters/idPath'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/ContestLeaderboardResponseBody'
        '400':
          $ref: '#/components/responses/ContestLeaderboardResponseBody'
        '401':
          $ref: '#/components/responses/ContestLeaderboardResponseBody'
        '403':
          $ref: '#/components/responses/ContestLeaderboardResponseBody'
        '404':
          $ref: '#/components/responses/ContestLeaderboardResponseBody'
        '413':
          $ref: '#/components/responses/ContestLeaderboardResponseBody'
        '500':
          $ref: '#/components/responses/ContestLeaderboardResponseBody'
        '501':
          $ref: '#/components/responses/ContestLeaderboardResponseBody'
        '503':
          $ref: '#/components/responses/ContestLeaderboardResponseBody'
      deprecated: true
      security:
        -
          OAuth2:
            - ViewContest
      operationId: getContestsLeaderboardById
      description: 'Use /leadeboard instead, Returns a leaderborad for the Contests id provided'
      x-codegen-request-body-name: body
  '/competitions/{id}/clone':
    get:
      tags:
        - competitions
      parameters:
        -
          $ref: '#/components/parameters/idPath'
      responses:
        '200':
          $ref: '#/components/responses/CloneCompetitionResponseBody'
        '400':
          $ref: '#/components/responses/CloneCompetitionResponseBody'
        '401':
          $ref: '#/components/responses/CloneCompetitionResponseBody'
        '403':
          $ref: '#/components/responses/CloneCompetitionResponseBody'
        '404':
          $ref: '#/components/responses/CloneCompetitionResponseBody'
        '413':
          $ref: '#/components/responses/CloneCompetitionResponseBody'
        '500':
          $ref: '#/components/responses/CloneCompetitionResponseBody'
        '501':
          $ref: '#/components/responses/CloneCompetitionResponseBody'
        '503':
          $ref: '#/components/responses/CloneCompetitionResponseBody'
      security:
        -
          OAuth2:
            - ViewCompetitions
      operationId: getCompetitionsToClone
      summary: Get Competition To Clone
      description: Clones a Competition for the identifier provided
      x-codegen-request-body-name: body
  /member-token:
    description: >-
      The services returns a JWT token used to authorize requests to the other service end points. Use
      this JWT as an auth header parameter for future requests: 
      
      --header 'Authorization: Bearer <jwt-token-from-api>'
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberTokenRequest'
        required: true
      tags:
        - member-token
      responses:
        '200':
          $ref: '#/components/responses/TokenResponseBody'
        '400':
          $ref: '#/components/responses/TokenResponseBody'
        '500':
          $ref: '#/components/responses/TokenResponseBody'
      security:
        -
          OAuth2: []
      operationId: createMemberToken
      description: Get Jwt Token
  /entity-changes:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityChangeSubscriptionRequest'
        required: true
      callbacks:
        entityChanged:
          '{$request.body#/entityType}':
            post:
              requestBody:
                description: Received when entity change occured
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/EntityChanged'
              responses:
                '200':
                  description: >-
                    This is a placeholder as required by OAS. We only callback over
                    websockets with no confirmation requirement
        entityStateChanged:
          '{$request.body#/entityType}':
            post:
              requestBody:
                description: Received when the state of an entity changed
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/EntityStateChanged'
              responses:
                '200':
                  description: >-
                    This is a placeholder as required by OAS. We only callback over
                    websockets with no confirmation requirement
      tags:
        - entity-changes
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityChangeSubscriptionResponse'
          description: Subscription successfully created
      operationId: manageEntityChangeSubscription
      description: subscribes a client to receive out-of-band data
    delete:
      parameters:
        -
          name: subscriptionId
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json: {}
          description: Onsuccess
      operationId: unsubscribeFromEntityChanges
  /connections/delete:
    post:
      requestBody:
        description: >-
          Delete a RabbitMQ Connection or a list of RabbitMQ Connections from Ziqni by unique
          Connection ID's or any other POST body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - connections
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminConsumer
      operationId: deleteConnectionsByQuery
      description: >-
        Delete a RabbitMQ Connection or a list of RabbitMQ Connections from Ziqni by unique Connection
        ID's or any other POST body parameters using the POST method
      x-codegen-request-body-name: body
  /connections/query:
    post:
      requestBody:
        description: >-
          Retrieve a RabbitMQ Connection or a list of RabbitMQ Connections from Ziqni by unique
          Connection ID's or any other Post body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - connections
      responses:
        '200':
          $ref: '#/components/responses/ConnectionResponseBody'
        '400':
          $ref: '#/components/responses/ConnectionResponseBody'
        '401':
          $ref: '#/components/responses/ConnectionResponseBody'
        '403':
          $ref: '#/components/responses/ConnectionResponseBody'
        '404':
          $ref: '#/components/responses/ConnectionResponseBody'
        '413':
          $ref: '#/components/responses/ConnectionResponseBody'
        '500':
          $ref: '#/components/responses/ConnectionResponseBody'
        '501':
          $ref: '#/components/responses/ConnectionResponseBody'
        '503':
          $ref: '#/components/responses/ConnectionResponseBody'
      security:
        -
          OAuth2:
            - AdminConsumer
      operationId: getConnectionsByQuery
      description: >-
        Retrieve a RabbitMQ Connection or a list of RabbitMQ Connections from Ziqni by unique
        Connection ID's or any other Post body parameters using the POST method
      x-codegen-request-body-name: body
  /members:
    summary: Manage members
    description: These operations allow you to manage members in your project.
    get:
      tags:
        - members
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/MemberResponseBody'
        '400':
          $ref: '#/components/responses/MemberResponseBody'
        '401':
          $ref: '#/components/responses/MemberResponseBody'
        '403':
          $ref: '#/components/responses/MemberResponseBody'
        '404':
          $ref: '#/components/responses/MemberResponseBody'
        '500':
          $ref: '#/components/responses/MemberResponseBody'
        '501':
          $ref: '#/components/responses/MemberResponseBody'
      security:
        -
          OAuth2:
            - ViewMembers
      operationId: getMembers
      summary: Get members
      description: >-
        Returns a list of Members. This assumes that members have first been uploaded via a POST
        request or web console
      x-codegen-request-body-name: body
      x-vue-item: Member
      x-vue-list: Members
    put:
      requestBody:
        description: >-
          Update member details in the Ziqni database for a given Member identifier. * Member Ref Id
          can not be changed after creation * A member Id must exist in the Ziqni database to update
          the member
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateMemberRequest'
          file/csv:
            schema:
              format: binary
              type: string
        required: true
      tags:
        - members
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageMembers
      operationId: updateMembers
      summary: Update members
      description: Update existing Members in the Ziqni database
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: >-
          Create Members in the Ziqni database. An array can contain a maximum of 10,000 members in
          one request
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateMemberRequest'
          file/csv:
            schema:
              format: binary
              type: string
        required: true
      tags:
        - members
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageMembers
      operationId: createMembers
      summary: Create members
      description: Create new Members in the Ziqni database
      x-codegen-request-body-name: body
    delete:
      tags:
        - members
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminMembers
      operationId: deleteMembers
      summary: Delete members
      description: Delete Members for a given identifier specified
      x-codegen-request-body-name: body
  /connections/_describe:
    get:
      tags:
        - connections
      parameters:
        -
          name: connectionType
          description: 'The connection type, RabbitMQ, Kafka, or SQS'
          schema:
            $ref: '#/components/schemas/ConnectionType'
          in: query
          required: true
      responses:
        '200':
          $ref: '#/components/responses/ObjectParametersResponseBody'
        '400':
          $ref: '#/components/responses/ObjectParametersResponseBody'
        '401':
          $ref: '#/components/responses/ObjectParametersResponseBody'
        '403':
          $ref: '#/components/responses/ObjectParametersResponseBody'
        '404':
          $ref: '#/components/responses/ObjectParametersResponseBody'
        '413':
          $ref: '#/components/responses/ObjectParametersResponseBody'
        '500':
          $ref: '#/components/responses/ObjectParametersResponseBody'
        '501':
          $ref: '#/components/responses/ObjectParametersResponseBody'
        '503':
          $ref: '#/components/responses/ObjectParametersResponseBody'
      security:
        -
          OAuth2:
            - AdminConsumer
      operationId: describeConnectionObject
      description: Get all the parameter for the connection based on the connection type
      x-codegen-request-body-name: body
  /connections:
    get:
      tags:
        - connections
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/ConnectionResponseBody'
        '400':
          $ref: '#/components/responses/ConnectionResponseBody'
        '401':
          $ref: '#/components/responses/ConnectionResponseBody'
        '403':
          $ref: '#/components/responses/ConnectionResponseBody'
        '404':
          $ref: '#/components/responses/ConnectionResponseBody'
        '413':
          $ref: '#/components/responses/ConnectionResponseBody'
        '500':
          $ref: '#/components/responses/ConnectionResponseBody'
        '501':
          $ref: '#/components/responses/ConnectionResponseBody'
        '503':
          $ref: '#/components/responses/ConnectionResponseBody'
      security:
        -
          OAuth2:
            - AdminConsumer
      operationId: getConnections
      description: Return a list of Consumer Connections
      x-codegen-request-body-name: body
    put:
      requestBody:
        description: Update the RabbitMq Consumer Connection details in the Ziqni system
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateConnectionRequest'
        required: true
      tags:
        - connections
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminConsumer
      operationId: updateConnections
      description: Update an existing Consumer Connection in the Ziqni system
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: Create a RabbitMq Consumer Connection in the Ziqni system
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateConnectionRequest'
        required: true
      tags:
        - connections
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminConsumer
      operationId: createConnections
      description: Create a new Consumer Connection in the Ziqni system
      x-codegen-request-body-name: body
    delete:
      tags:
        - connections
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminConsumer
      operationId: deleteConnections
      description: Delete the Consumer Connection for a given identifier specified
      x-codegen-request-body-name: body
  '/competitions/{id}/leaderboard':
    get:
      tags:
        - competitions
      parameters:
        -
          $ref: '#/components/parameters/idPath'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/CompetitionLeaderboardResponseBody'
        '400':
          $ref: '#/components/responses/CompetitionLeaderboardResponseBody'
        '401':
          $ref: '#/components/responses/CompetitionLeaderboardResponseBody'
        '403':
          $ref: '#/components/responses/CompetitionLeaderboardResponseBody'
        '404':
          $ref: '#/components/responses/CompetitionLeaderboardResponseBody'
        '413':
          $ref: '#/components/responses/CompetitionLeaderboardResponseBody'
        '500':
          $ref: '#/components/responses/CompetitionLeaderboardResponseBody'
        '501':
          $ref: '#/components/responses/CompetitionLeaderboardResponseBody'
        '503':
          $ref: '#/components/responses/CompetitionLeaderboardResponseBody'
      deprecated: true
      security:
        -
          OAuth2:
            - ViewCompetitions
      operationId: getLeaderboardByCompetitionId
      description: Use /leadeboard instead. Returns a list of Leaderborads for the Competition id provided
      x-codegen-request-body-name: body
  /leaderboard:
    get:
      tags:
        - leaderboard
      parameters:
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          $ref: '#/components/responses/LeaderboardResponseBody'
        '400':
          $ref: '#/components/responses/LeaderboardResponseBody'
        '401':
          $ref: '#/components/responses/LeaderboardResponseBody'
        '403':
          $ref: '#/components/responses/LeaderboardResponseBody'
        '404':
          $ref: '#/components/responses/LeaderboardResponseBody'
        '413':
          $ref: '#/components/responses/LeaderboardResponseBody'
        '500':
          $ref: '#/components/responses/LeaderboardResponseBody'
        '501':
          $ref: '#/components/responses/LeaderboardResponseBody'
        '503':
          $ref: '#/components/responses/LeaderboardResponseBody'
      deprecated: false
      security:
        -
          OAuth2:
            - ViewCompetitions
      operationId: getLeaderboardById
      description: Returns a leaderborads for the competition or contest id provided
      x-codegen-request-body-name: body
  /log-events/query:
    post:
      requestBody:
        description: >-
          Retrieve Log Events from Ziqni database by unique Log Events ID's or any other Post body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - logEvents
      responses:
        '200':
          $ref: '#/components/responses/LogEventResponseBody'
        '400':
          $ref: '#/components/responses/LogEventResponseBody'
        '401':
          $ref: '#/components/responses/LogEventResponseBody'
        '403':
          $ref: '#/components/responses/LogEventResponseBody'
        '404':
          $ref: '#/components/responses/LogEventResponseBody'
        '413':
          $ref: '#/components/responses/LogEventResponseBody'
        '500':
          $ref: '#/components/responses/LogEventResponseBody'
        '501':
          $ref: '#/components/responses/LogEventResponseBody'
        '503':
          $ref: '#/components/responses/LogEventResponseBody'
      security:
        -
          OAuth2:
            - ViewLogEvents
      operationId: getLogEventsByQuery
      description: >-
        Retrieve Log Events from Ziqni database by unique Log Events ID's or any other POST body
        parameters using the POST method
      x-codegen-request-body-name: body
  /entrants:
    post:
      requestBody:
        description: Updates the status of the Entrants
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEntrantRequest'
      tags:
        - entrants
      responses:
        '201':
          $ref: '#/components/responses/ApiResponseBody'
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '413':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
        '503':
          $ref: '#/components/responses/ApiResponseBody'
      deprecated: false
      security:
        -
          OAuth2:
            - ManageCompetition
      operationId: updateEntrants
      description: Updates the status of the Entrants for a Competition id provided
      x-codegen-request-body-name: body
  /entrants/query:
    summary: Get entrants by query
    description: This operation allows you to get entrants in your project using a query.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - entrants
      responses:
        '200':
          $ref: '#/components/responses/EntrantResponseBody'
        '400':
          $ref: '#/components/responses/EntrantResponseBody'
        '401':
          $ref: '#/components/responses/EntrantResponseBody'
        '403':
          $ref: '#/components/responses/EntrantResponseBody'
        '404':
          $ref: '#/components/responses/EntrantResponseBody'
        '413':
          $ref: '#/components/responses/EntrantResponseBody'
        '500':
          $ref: '#/components/responses/EntrantResponseBody'
        '501':
          $ref: '#/components/responses/EntrantResponseBody'
        '503':
          $ref: '#/components/responses/EntrantResponseBody'
      security:
        -
          OAuth2:
            - ViewCompetitions
      operationId: getEntrantsByQuery
      summary: Get entrants by query
      description: >-
        Retrieve ConteEntrants from Ziqni database by unique Contests ID's or any other POST body
        parameters using the POST method
  /graphs:
    summary: Structures the connections data as a graph.
    description: >-
      The ZIQNI graph data structure consists of a finite (and possibly mutable) set of vertices (also
      called nodes or points), together with a set of ordered pairs for a directed graph. These pairs
      are known as edges (also called links or lines), and for a directed graph are also known as edges
      but also sometimes arrows or arcs whicj are joined using the dependant on must or should within
      achievements.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityGraphRequest'
        required: true
      tags:
        - graphs
      responses:
        '200':
          $ref: '#/components/responses/EntityGraphResponseBody'
        '400':
          $ref: '#/components/responses/EntityGraphResponseBody'
        '500':
          $ref: '#/components/responses/EntityGraphResponseBody'
      security:
        -
          OAuth2:
            - ViewMissions
      operationId: getGraph
      summary: Get achievements by member reference id
      description: Returns a list of graphs based on the entity type.
  /entrants/export:
    summary: Get entrants by query
    description: This operation allows you to get entrants in your project using a query.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
      tags:
        - entrants
      responses:
        '200':
          $ref: '#/components/responses/EntrantCountResponseBody'
        '400':
          $ref: '#/components/responses/EntrantCountResponseBody'
        '401':
          $ref: '#/components/responses/EntrantCountResponseBody'
        '403':
          $ref: '#/components/responses/EntrantCountResponseBody'
        '404':
          $ref: '#/components/responses/EntrantCountResponseBody'
        '413':
          $ref: '#/components/responses/EntrantCountResponseBody'
        '500':
          $ref: '#/components/responses/EntrantCountResponseBody'
        '501':
          $ref: '#/components/responses/EntrantCountResponseBody'
        '503':
          $ref: '#/components/responses/EntrantCountResponseBody'
      security:
        -
          OAuth2:
            - ViewCompetitions
      operationId: exportEntrantsByQuery
      summary: Get entrants by query
      description: >-
        Retrieve ConteEntrants from Ziqni database by unique Contests ID's or any other POST body
        parameters using the POST method
  /instant-wins/delete:
    summary: Delete instant wins by query
    description: This operation allows you to delete instant wins in your project using a query.
    post:
      requestBody:
        description: >-
          Delete Instant Wins from Ziqni database by unique Instant win ID's or any other POST body
          parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
            examples:
              Example:
                value:
                  must:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  mustNot:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  should:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  gte:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  gt:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  lte:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  lt:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  range:
                    -
                      queryField: some text
                      gt: some text
                      lt: some text
                      constraints:
                        - some text
                        - some text
                    -
                      queryField: some text
                      gt: some text
                      lt: some text
                      constraints:
                        - some text
                        - some text
                  sortBy:
                    -
                      queryField: some text
                      order: Desc
                    -
                      queryField: some text
                      order: Desc
                  multiFields:
                    -
                      queryFields:
                        - some text
                        - some text
                      queryValue: some text
                    -
                      queryFields:
                        - some text
                        - some text
                      queryValue: some text
                  includeFields:
                    - some text
                    - some text
                  hasValue:
                    - some text
                    - some text
                  hasNoValue:
                    - some text
                    - some text
                  shouldMatch: 87
                  skip: 97
                  limit: 5
                  constraints:
                    - some text
                    - some text
      tags:
        - instant-wins
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminInstantWins
      operationId: deleteInstantWinsByQuery
      summary: Delete instant-wins by query
      description: >-
        Delete Instant wins from Ziqni database by unique Instant win ID's or any other POST body
        parameters using the POST method
      x-codegen-request-body-name: body
  /instant-wins/query:
    summary: Get instant wins by query
    description: This operation allows you to get instant wins in your project using a query.
    post:
      requestBody:
        description: >-
          Retrieve Instant wins from Ziqni database by unique Instant win ID's or any other POST
          body parameters using the POST method
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
            examples:
              Example:
                value:
                  must:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  mustNot:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  should:
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                    -
                      queryField: some text
                      queryValues:
                        - some text
                        - some text
                  gte:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  gt:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  lte:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  lt:
                    -
                      queryField: some text
                      queryValue: some text
                    -
                      queryField: some text
                      queryValue: some text
                  range:
                    -
                      queryField: some text
                      gt: some text
                      lt: some text
                      constraints:
                        - some text
                        - some text
                    -
                      queryField: some text
                      gt: some text
                      lt: some text
                      constraints:
                        - some text
                        - some text
                  sortBy:
                    -
                      queryField: some text
                      order: Asc
                    -
                      queryField: some text
                      order: Desc
                  multiFields:
                    -
                      queryFields:
                        - some text
                        - some text
                      queryValue: some text
                    -
                      queryFields:
                        - some text
                        - some text
                      queryValue: some text
                  includeFields:
                    - some text
                    - some text
                  hasValue:
                    - some text
                    - some text
                  hasNoValue:
                    - some text
                    - some text
                  shouldMatch: 76
                  skip: 85
                  limit: 86
                  constraints:
                    - some text
                    - some text
      tags:
        - instant-wins
      responses:
        '200':
          $ref: '#/components/responses/InstantWinResponseBody'
        '400':
          $ref: '#/components/responses/InstantWinResponseBody'
        '401':
          $ref: '#/components/responses/InstantWinResponseBody'
        '403':
          $ref: '#/components/responses/InstantWinResponseBody'
        '404':
          $ref: '#/components/responses/InstantWinResponseBody'
        '500':
          $ref: '#/components/responses/InstantWinResponseBody'
        '501':
          $ref: '#/components/responses/InstantWinResponseBody'
      security:
        -
          OAuth2:
            - ViewInstantWins
      operationId: getInstantWinsByQuery
      summary: Get instant wins by query
      description: >-
        Retrieve Instant wins from Ziqni database by unique Instant win ID's or any other POST body
        parameters using the POST method
      x-codegen-request-body-name: body
  /instant-wins:
    summary: Manage instant wins
    description: These operations allow you to manage instant wins in your project.
    get:
      tags:
        - instant-wins
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/InstantWinResponseBody'
        '400':
          $ref: '#/components/responses/InstantWinResponseBody'
        '401':
          $ref: '#/components/responses/InstantWinResponseBody'
        '403':
          $ref: '#/components/responses/InstantWinResponseBody'
        '404':
          $ref: '#/components/responses/InstantWinResponseBody'
        '500':
          $ref: '#/components/responses/InstantWinResponseBody'
        '501':
          $ref: '#/components/responses/InstantWinResponseBody'
      security:
        -
          OAuth2:
            - ViewInstantWins
      operationId: getInstantWins
      summary: Get instant wins
      description: >-
        Returns a list of Instant wins. This assumes that instant wins have first been uploaded via a
        POST request or web console
      x-codegen-request-body-name: body
      x-vue-item: InstantWin
      x-vue-list: InstantWins
    put:
      requestBody:
        description: 'Update a Instant win or multiple Instant wins in the Ziqni database. '
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateInstantWinRequest'
          file/csv:
            schema:
              format: binary
              type: string
        required: true
      tags:
        - instant-wins
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - ManageInstantWins
      operationId: updateInstantWins
      summary: Update instant wins
      description: Update existing Instant wins in the Ziqni database
      x-codegen-request-body-name: body
    post:
      requestBody:
        description: >-
          Create Instant wins in the Ziqni database. An array can contain a maximum of 10,000
          instant wins in one request
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateInstantWinRequest'
          file/csv:
            schema:
              format: binary
              type: string
        required: true
      tags:
        - instant-wins
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminInstantWins
      operationId: createInstantWins
      summary: Create instant wins
      description: Create new Instant win in the Ziqni database
      x-codegen-request-body-name: body
    delete:
      tags:
        - instant-wins
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminInstantWins
      operationId: deleteInstantWins
      summary: Delete instant wins
      description: Delete Instant win for a given identifier specified
      x-codegen-request-body-name: body
  /awards:
    get:
      tags:
        - awards
      parameters:
        -
          $ref: '#/components/parameters/idQuery'
        -
          $ref: '#/components/parameters/limitResults'
        -
          $ref: '#/components/parameters/skipResults'
      responses:
        '200':
          $ref: '#/components/responses/AwardResponseBody'
        '400':
          $ref: '#/components/responses/AwardResponseBody'
        '401':
          $ref: '#/components/responses/AwardResponseBody'
        '403':
          $ref: '#/components/responses/AwardResponseBody'
        '404':
          $ref: '#/components/responses/AwardResponseBody'
        '413':
          $ref: '#/components/responses/AwardResponseBody'
        '500':
          $ref: '#/components/responses/AwardResponseBody'
        '501':
          $ref: '#/components/responses/AwardResponseBody'
        '503':
          $ref: '#/components/responses/AwardResponseBody'
      security:
        -
          OAuth2:
            - ViewAwards
      operationId: getAwards
      description: Returns a list of Awards.
      x-codegen-request-body-name: body
      x-vue-item: Award
      x-vue-list: Awards
    put:
      requestBody:
        description: >-
          Update awards in the Ziqni system. * Any Put body Parameters that are excluded in the
          Request body field will be considered as empty and updated with an empty field
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateAwardRequest'
        required: true
      tags:
        - api-keys
      responses:
        '200':
          $ref: '#/components/responses/ApiResponseBody'
        '400':
          $ref: '#/components/responses/ApiResponseBody'
        '401':
          $ref: '#/components/responses/ApiResponseBody'
        '403':
          $ref: '#/components/responses/ApiResponseBody'
        '404':
          $ref: '#/components/responses/ApiResponseBody'
        '500':
          $ref: '#/components/responses/ApiResponseBody'
        '501':
          $ref: '#/components/responses/ApiResponseBody'
      security:
        -
          OAuth2:
            - AdminApi
      operationId: updateAwards
      summary: Update awards
      description: Update an existing award in the Ziqni system
      x-codegen-request-body-name: body
components:
  schemas:
    ProductReduced:
      description: This is a Product model with fewer parameters
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          required:
            - productRefId
          type: object
          properties:
            name:
              description: The name of the product
              type: string
              example: Hockey madness
            productRefId:
              description: >-
                The reference to this product in your system. The reference identifier can not
                be changed after the product has been created
              type: string
              example: hockey-madness
            tags:
              description: A list of Strings used to tag products with taxonomy terms
              type: array
              items:
                type: string
      example:
        id: someText
        spaceName: someText
        created: '2018-02-10T09:30Z'
        productRefId: '10002'
        name: test1
        tags:
          - tagId1
          - tagId2
    ClaimAwardRequest:
      required:
        - id
        - constraints
      type: object
      properties:
        id:
          description: Unique system identifier of an Award
          type: string
          example: Dc4swmQBVd51K6gPQqFx
        constraints:
          description: 'Additional constraints, if the value is present it means the'
          type: array
          items:
            type: string
          example:
            - claimed
    UpdateMessageStatusRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          required: []
          type: object
          properties:
            status:
              $ref: '#/components/schemas/MessageStatus'
    RewardTypeReduced:
      allOf:
        -
          required:
            - key
            - id
            - spaceName
          type: object
          properties:
            key:
              description: A unique key that represents the reward type
              type: string
              example: free-spin-reward
            id:
              description: A unique system generated identifier
              type: string
              example: sc1samQmVr61KgaPQq7x
            spaceName:
              description: This is the space name which is linked to the account
              type: string
              example: Your_space_name
    CustomFieldReduced:
      description: This is a Custom field model with fewer parameters
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          required:
            - key
            - fieldType
          type: object
          properties:
            key:
              description: The key of a Custom field
              type: string
              example: promotional-field
            fieldType:
              $ref: '#/components/schemas/FieldType'
      example:
        id: someText
        spaceName: someText
        created: '2018-02-10T09:30Z'
        fieldType: Text
        value: Sammple Text
    UpdateCompetitionStatusRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          required:
            - status
          type: object
          properties:
            status:
              $ref: '#/components/schemas/CompetitionStateActions'
    Bracket:
      required:
        - rounds
        - contests
      type: object
      properties:
        rounds:
          format: int32
          description: Number of rounds to be played in a competition
          type: integer
          example: 1
        contests:
          type: array
          items:
            $ref: '#/components/schemas/ContestReduced'
    Entrant:
      required:
        - memberId
        - entrantStatus
        - entrantaAtion
      type: object
      properties:
        entrantAction:
          $ref: '#/components/schemas/EntrantAction'
        memberId:
          description: Unique member identifier. A member has to exist in the Ziqni database
          type: string
          example: Dc4swmQBVd51K6gPQqFx
        entrantStatus:
          $ref: '#/components/schemas/EntrantStatus'
        entityId:
          description: Unique identifier of the entity
          type: string
          example: PXXQrm4BuCEBoI5DKW47
        entityType:
          $ref: '#/components/schemas/EntityType'
    UpdateContestStateRequest:
      required: []
      type: object
      properties:
        contestId:
          description: A unique identifier of a Contest
          type: string
          example: Dc4swmQBVd51K6gPQqFx
        status:
          $ref: '#/components/schemas/ContestStateOperations'
    AchievementLiveStatusRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          required:
            - status
          type: object
          properties:
            status:
              $ref: '#/components/schemas/AchievementLiveStatus'
    MemberAchievementCount:
      description: This is the Member Achievement Count model
      allOf:
        -
          required:
            - name
            - memberId
            - memberRefId
            - latestIssuedTimestamp
          type: object
          properties:
            name:
              description: A the name of the member
              type: string
              example: Player 1
            memberId:
              description: A unique identifier of a Member
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            memberRefId:
              description: The reference to this member in your system
              type: string
              example: Player-1
            latestIssuedTimestamp:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Model was created. All records are stored in UTC
                time zone
              type: string
              readOnly: true
              example: '2019-09-25T15:47:00.000+0000'
        -
          $ref: '#/components/schemas/CountResponse'
      example:
        entityId: ziqniEntityId
        countValue: 83
        latestIssuedTimestamp: '2018-02-10T09:30Z'
        memberId: ziqniMemberId
        memberRefId: memberRefId
        name: name
    AchievementIssuedCount:
      allOf:
        -
          $ref: '#/components/schemas/CountResponse'
    UpdateStateRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          required:
            - status
          type: object
          properties:
            status:
              $ref: '#/components/schemas/ConnectionState'
    QuerySingle:
      required:
        - queryField
        - queryValue
      type: object
      properties:
        queryField:
          description: The key of the parameter that is being searched
          type: string
          example: competitionId
        queryValue:
          description: The value of the parameter that is being searched
          type: string
          example: Dc4swmQBVd51K6gPQqFx
    QuerySortBy:
      required:
        - queryField
        - order
      type: object
      properties:
        queryField:
          description: The key of the parameter that is being searched
          type: string
          example: competitionId
        order:
          $ref: '#/components/schemas/SortOrder'
    TranslationValue:
      type: object
      properties:
        key:
          description: This is the field from language key
          type: string
          example: en
        translatedFields:
          type: array
          items:
            $ref: '#/components/schemas/TranslatedField'
    TranslatedField:
      required:
        - fieldName
        - text
      type: object
      properties:
        fieldName:
          description: The name of the translatable field of the model. Reference to translatableFields
          type: string
          example: description
        text:
          description: The text of the selected language
          type: string
          example: English translation for description
    StartEndDate:
      required:
        - start
      type: object
      properties:
        start:
          format: date-time
          description: The date and time of when something should start. ISO8601 timestamp
          type: string
          example: '2019-09-25T15:47:00.000+0000'
        end:
          format: date-time
          description: The date and time of when something should end. ISO8601 timestamp
          type: string
          example: '2019-09-25T15:47:00.000+0000'
    FactDefault:
      required:
        - operators
        - constantType
        - constantExample
      type: object
      properties:
        operators:
          description: The operators supported by the fact
          type: array
          items:
            type: string
          example:
            - <=
            - ==
            - '>='
        constantType:
          description: The data type of the constant
          type: string
          example: date-time
        constantExample:
          description: Example of the constant
          type: string
          example: '2019-09-25T15:47:00.000+0000'
        defaultVale:
          description: The default value of the constant for the fact
          type: string
          example: $contest.active.elapse
        macros:
          type: array
          items:
            $ref: '#/components/schemas/Macro'
    Macro:
      required:
        - name
        - macroValue
      type: object
      properties:
        name:
          description: The name of the macro
          type: string
          example: time elapsed
        macroValue:
          description: The macro value to be used
          type: string
          example: $contest.active.elapse
    ProductResponse:
      description: This is the Response for Product
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          objectType: some text
          totalRecords: 26
          resultCount: 2
          errorCount: 0
          limit: 2
          skip: 0
        results:
          -
            id: ziqniModelId
            spaceName: ziqniSpaceName
            created: '2018-02-10T09:30Z'
            productRefId: '10002'
            name: test1
            adjustmentFactor: '1'
            actionTypeAdjustmentFactors:
              -
                adjustmentFactor: 67.71
                actionTypeId: ziqniModelId
              -
                adjustmentFactor: 96.91
                actionTypeId: ziqniModelId
            customFields:
              customField1: customFieldValue1
              customField2: customFieldValue2
            metadata:
              key1: value1
              key2: value
            tags:
              - tagId1
              - tagId2
            translations:
              -
                languageKey: csb
                translations:
                  -
                    fieldName: name
                    text: test1
              -
                languageKey: den
                translations:
                  -
                    fieldName: name
                    text: test-temp
              -
                languageKey: kmb
                translations:
                  -
                    fieldName: name
                    text: Level-Up
          -
            id: ziqniModelId
            spaceName: ziqniSpaceName
            created: '2018-02-10T09:30Z'
            productRefId: '10002'
            name: test1
            adjustmentFactor: '1'
            actionTypeAdjustmentFactors:
              -
                adjustmentFactor: 67.71
                actionTypeId: ziqniModelId
              -
                adjustmentFactor: 96.91
                actionTypeId: ziqniModelId
            customFields:
              customField1: customFieldValue1
              customField2: customFieldValue2
            metadata:
              key1: value1
              key2: value
            tags:
              - tagId1
              - tagId2
            translations:
              -
                languageKey: csb
                translations:
                  -
                    fieldName: name
                    text: test1
              -
                languageKey: den
                translations:
                  -
                    fieldName: name
                    text: test-temp
              -
                languageKey: kmb
                translations:
                  -
                    fieldName: name
                    text: Level-Up
        errors:
          -
            modelId: some text
            errorCode: 78
            message: some text
            errorAt: 90
            detail:
              -
                modelId: some text
                errorCode: 90
                message: some text
                errorAt: 24
              -
                modelId: some text
                errorCode: 52
                message: some text
                errorAt: 45
          -
            modelId: some text
            errorCode: 55
            message: some text
            errorAt: 64
            detail:
              -
                modelId: some text
                errorCode: 72
                message: some text
                errorAt: 56
              -
                modelId: some text
                errorCode: 56
                message: some text
                errorAt: 90
    CompetitionReducedResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/CompetitionReduced'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    ContestReducedResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/ContestReduced'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    AchievementReducedResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/AchievementReduced'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    MemberResponse:
      description: This is the response for Member
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Member'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          objectType: some text
          totalRecords: 26
          resultCount: 2
          errorCount: 2
          limit: 2
          skip: 0
        results:
          -
            id: ziqniModelId
            spaceName: ziqniModelSpaceName
            created: '2018-02-10T09:30Z'
            name: name
            memberRefId: memberRefId
            memberType: Individual
            teamMembers:
              - ziqniMemberId
              - ziqniMemberId
            constraints:
              - disabled
            timeZoneOffset: UTC
            customFields:
              customField1: customFieldValue1
              customField2: customFieldValue2
            tags:
              - ziqniTagId
              - ziqniTagId
            metadata:
              key1: value1
              key2: value
          -
            id: ziqniModelId
            spaceName: ziqniModelSpaceName
            created: '2018-02-10T09:30Z'
            name: name
            memberRefId: memberRefId
            memberType: Individual
            teamMembers:
              - ziqniMemberId
              - ziqniMemberId
            constraints:
              - disabled
            timeZoneOffset: UTC
            customFields:
              customField1: customFieldValue1
              customField2: customFieldValue2
            tags:
              - ziqniTagId
              - ziqniTagId
            metadata:
              key1: value1
              key2: value
        errors:
          -
            modelId: some text
            errorCode: 41
            message: some text
            errorAt: 41
            detail:
              -
                modelId: some text
                errorCode: 51
                message: some text
                errorAt: 83
              -
                modelId: some text
                errorCode: 99
                message: some text
                errorAt: 55
          -
            modelId: some text
            errorCode: 80
            message: some text
            errorAt: 71
            detail:
              -
                modelId: some text
                errorCode: 83
                message: some text
                errorAt: 89
              -
                modelId: some text
                errorCode: 7
                message: some text
                errorAt: 86
    MemberMessageResponse:
      description: This is the response for Member Message
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/MemberMessage'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta: {}
        results:
          - {}
          - {}
        errors:
          -
            modelId: some text
            errorCode: 34
            message: some text
            errorAt: 16
            detail:
              -
                modelId: some text
                errorCode: 2
                message: some text
                errorAt: 20
              -
                modelId: some text
                errorCode: 70
                message: some text
                errorAt: 3
          -
            modelId: some text
            errorCode: 21
            message: some text
            errorAt: 83
            detail:
              -
                modelId: some text
                errorCode: 18
                message: some text
                errorAt: 59
              -
                modelId: some text
                errorCode: 57
                message: some text
                errorAt: 70
    MemberAwardResponse:
      description: This is the response for Member Award
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/MemberAward'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          objectType: some text
          totalRecords: 26
          resultCount: 2
          errorCount: 2
          limit: 2
          skip: 0
        results:
          -
            id: someText
            spaceName: someText
            created: '2018-02-10T09:30Z'
            rewardId: ziqniRewardModelId
            rewardType: ziqniRewardType
            rewardTypeId: ziqniRewardTypeModelId
            rewardValue: 200
            delay: 20
            entityType: Reward
            entityId: ziqniModelId
            pointInTime: '2019-09-25T15:47:00.000+0000'
            period: 2
            tags:
              - ziqniTagModelId
              - ziqniTagModelId
            constraints:
              - disabled
            metadata:
              key1: value1
              key2: value
            claimedTimestamp: '2018-02-10T09:30Z'
          -
            id: someText
            spaceName: someText
            created: '2018-02-10T09:30Z'
            rewardId: ziqniRewardModelId
            rewardType: ziqniRewardType
            rewardTypeId: ziqniRewardTypeModelId
            rewardValue: 200
            delay: 20
            entityType: Reward
            entityId: ziqniModelId
            pointInTime: '2019-09-25T15:47:00.000+0000'
            period: 2
            tags:
              - ziqniTagModelId
              - ziqniTagModelId
            constraints:
              - disabled
            metadata:
              key1: value1
              key2: value
            claimedTimestamp: '2018-02-10T09:30Z'
        errors:
          -
            modelId: some text
            errorCode: 91
            message: some text
            errorAt: 32
            detail:
              -
                modelId: some text
                errorCode: 82
                message: some text
                errorAt: 12
              -
                modelId: some text
                errorCode: 25
                message: some text
                errorAt: 60
          -
            modelId: some text
            errorCode: 11
            message: some text
            errorAt: 1
            detail:
              -
                modelId: some text
                errorCode: 6
                message: some text
                errorAt: 48
              -
                modelId: some text
                errorCode: 16
                message: some text
                errorAt: 40
    CompetitionResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Competition'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    CompetitionLeaderboardResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/LeaderboardResponseByContest'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    BracketResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Bracket'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    ContestResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Contest'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    CloneContestResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/CreateContestForCompetitionRequest'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    ContestLeaderboardResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Leaderboard'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    EntrantResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Entrant'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    AchievementResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Achievement'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    AchievementIssuedResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/AchievementIssuedCount'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    CloneAchievementResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/CreateAchievementRequest'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    MemberAchievementIssuedResponse:
      description: This is the response for Member Achievement Issued Response
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/MemberAchievementCount'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          objectType: some text
          totalRecords: 26
          resultCount: 2
          errorCount: 2
          limit: 2
          skip: 0
        results:
          -
            entityId: ziqniEntityId
            countValue: 83
            latestIssuedTimestamp: '2018-02-10T09:30Z'
            memberId: ziqniMemberId
            memberRefId: memberRefId
            name: name
          -
            entityId: ziqniEntityId
            countValue: 83
            latestIssuedTimestamp: '2018-02-10T09:30Z'
            memberId: ziqniMemberId
            memberRefId: memberRefId
            name: name
        errors:
          -
            modelId: some text
            errorCode: 37
            message: some text
            errorAt: 50
            detail:
              -
                modelId: some text
                errorCode: 51
                message: some text
                errorAt: 9
              -
                modelId: some text
                errorCode: 61
                message: some text
                errorAt: 86
          -
            modelId: some text
            errorCode: 21
            message: some text
            errorAt: 39
            detail:
              -
                modelId: some text
                errorCode: 68
                message: some text
                errorAt: 55
              -
                modelId: some text
                errorCode: 91
                message: some text
                errorAt: 86
    RewardResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Reward'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    AwardResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Award'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    RewardTypeResponse:
      description: This is the Response for Reward Type
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/RewardType'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          objectType: some text
          totalRecords: 26
          resultCount: 2
          errorCount: 0
          limit: 2
          skip: 0
        results:
          -
            id: someText
            spaceName: someText
            created: '2018-02-10T09:30Z'
            customFields:
              customField1: customFieldValue1
              customField2: customFieldValue2
            metadata:
              key1: value1
              key2: value
            tags:
              - tagId1
              - tagId2
            unitOfMeasure: ziqniModelId
            name: someText
            description: someText
            key: someText
            constraints:
              - system
        errors:
          -
            modelId: some text
            errorCode: 78
            message: some text
            errorAt: 90
            detail:
              -
                modelId: some text
                errorCode: 90
                message: some text
                errorAt: 24
              -
                modelId: some text
                errorCode: 52
                message: some text
                errorAt: 45
          -
            modelId: some text
            errorCode: 55
            message: some text
            errorAt: 64
            detail:
              -
                modelId: some text
                errorCode: 72
                message: some text
                errorAt: 56
              -
                modelId: some text
                errorCode: 56
                message: some text
                errorAt: 90
    ActionTypeResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/ActionType'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          objectType: some text
          totalRecords: 26
          resultCount: 2
          errorCount: 0
          limit: 2
          skip: 0
        results:
          -
            id: ziqniModelId
            spaceName: ziqniSpaceName
            created: '2018-02-10T09:30Z'
            constraints: []
            description: ''
            key: ''
            name: ''
            unitOfMeasure: ''
            customFields: {}
            tags:
              - ziqniTag
              - ziqniTag1
            metadata: {}
          -
            id: ziqniModelId
            spaceName: ziqniSpaceName
            created: '2018-02-10T09:30Z'
            constraints: []
            description: ''
            key: ''
            name: ''
            unitOfMeasure: ''
            customFields: {}
            tags:
              - ziqniTag
              - ziqniTag1
            metadata: {}
        errors:
          -
            modelId: some text
            errorCode: 97
            message: some text
            errorAt: 79
            detail:
              -
                modelId: some text
                errorCode: 68
                message: some text
                errorAt: 46
              -
                modelId: some text
                errorCode: 32
                message: some text
                errorAt: 87
          -
            modelId: some text
            errorCode: 76
            message: some text
            errorAt: 21
            detail:
              -
                modelId: some text
                errorCode: 91
                message: some text
                errorAt: 86
              -
                modelId: some text
                errorCode: 93
                message: some text
                errorAt: 48
    LanguageResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Language'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    CustomFieldResponse:
      description: This is the repsonse for custom fields
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          objectType: some text
          totalRecords: 26
          resultCount: 2
          errorCount: 0
          limit: 2
          skip: 0
        results:
          -
            id: ziqniModelId
            name: some text
            key: some text
            description: some text
            fieldType: TextArray
            appliesTo: Repository
          -
            id: ziqniModelId
            name: some text
            key: some text
            description: some text
            fieldType: TextArray
            appliesTo: Repository
        errors:
          -
            modelId: some text
            errorCode: 48
            message: some text
            errorAt: 42
            detail:
              -
                modelId: some text
                errorCode: 66
                message: some text
                errorAt: 88
              -
                modelId: some text
                errorCode: 63
                message: some text
                errorAt: 60
          -
            modelId: some text
            errorCode: 0
            message: some text
            errorAt: 4
            detail:
              -
                modelId: some text
                errorCode: 15
                message: some text
                errorAt: 69
              -
                modelId: some text
                errorCode: 15
                message: some text
                errorAt: 55
    UnitOfMeasureResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/UnitOfMeasure'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    TransformerResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Transformer'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    ConnectionResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Connection'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    EventResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    WebhookResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    Result:
      required:
        - id
        - result
      type: object
      properties:
        id:
          description: A unique system identifier of an updated record
          type: string
          example: sc1samQmVr61KgaPQq7x
        externalReference:
          description: A reference id from external system
          type: string
          example: fruits
        result:
          description: |
            The response of an action Possible values:
              * created: Will be returned for a POST action to create entity
              * updated: Will be returned for a PUT action to update entity
              * deleted: Will be returned for a DELETE action on an entity
          type: string
          example: created
        relations:
          type: array
          items:
            $ref: '#/components/schemas/Relation'
      example:
        id: modelId
        externalReference: externalRef
        result: Created
        relations:
          -
            id: otherModelId
            relationType: Contest
          -
            id: oneMoreModelId
            relationType: Product
    Relation:
      required:
        - id
        - relationType
      properties:
        id:
          description: A unique system identifier to which this record is related to
          type: string
          example: sc1samQmVr61KgaPQq7x
        relationType:
          description: Entity type of the id
          type: string
          example: contest
      example:
        id: modelId
        relationType: Product
    MetaBasic:
      allOf:
        -
          $ref: '#/components/schemas/MetaInfo'
    UpdateModelDefault:
      required:
        - id
      type: object
      properties:
        id:
          description: A unique system generated identifier
          type: string
          example: sc1samQmVr61KgaPQq7x
      example:
        id: ziqniModelId
    ApiResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaBasic'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Result'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    UnitOfMeasureType:
      description: The type of unit of measure
      enum:
        - Other
        - Currency
        - Mass
        - Time
        - Temperature
        - ElectricCurrent
        - AmountOfSubstance
        - LuminousIntensity
        - Distance
      type: string
    CompetitionType:
      description: The type of a competition
      enum:
        - Leaderboard
      type: string
    MatchCondition:
      description: >-
        Whether the rules must all evaluate as True or False or at least one of the rules must be True
        or False to satisfy the rule
      enum:
        - All
        - Any
      type: string
    SortOrder:
      description: Specify the sort order.
      enum:
        - Asc
        - Desc
      type: string
    StrategyType:
      description: >
        The scoring strategy type. SUMMARY: * "TotalCumulative": The basic strategy where all the
        points sum up and are shown in the Leaderboard. Depending on the Rules, all the points are
        Cumulative. * "SumBest": This strategy requires a value to indicate how many highest points
        will be calculated and shown on the leaderboard * "LimitedTo": This strategy requires a value
        to indicate how many events will be summed up and shown in the leaderboard. * "FirstTo": This
        strategy requires a value to indicate how many points have to be received to complete the
        mission.
      enum:
        - TotalCumulative
        - SumBest
        - LimitedTo
        - FirstTo
      type: string
    RoundType:
      description: The type of rounds in a contest
      enum:
        - TimeBound
        - TargetBased
      type: string
    ScheduleType:
      description: The type of schedule
      enum:
        - Once
        - Repeatedly
        - Daily
        - Weekly
        - Monthly
      type: string
    AchievementLiveStatus:
      description: A status of the Achievement
      enum:
        - Live
        - Draft
      type: string
    EventRefType:
      description: Defines an even type attached to the message
      enum:
        - Competition
        - Contest
        - Achievement
        - User
        - MemberMessage
      type: string
    MessageType:
      description: The type of message of the member
      enum:
        - Achievement
        - Ticket
        - Reward
        - Text
        - Notification
        - InboxItem
        - NotificationInboxItem
      type: string
    MessageStatus:
      description: The status of the message
      enum:
        - New
        - Read
        - Draft
        - Sent
        - CollaborationRequest
        - Actioned
        - Claimed
        - Expired
        - Canceled
        - Deleted
      type: string
    EntrantStatus:
      description: >-
        The status of the entrant * -403, "Unknown" * -100, "Deleted" * -50, "WrongGroups" * -12,
        "Disqualified" * -11, "Substituted" * -10, "Injured" * -1, "OptInRequired" * 0, "Registered" *
        1, "Entered" * 10, "Playing" * 20, "Finished" * 100, "Finalised"
      enum:
        - NotEntered
        - Entering
        - Entrant
        - Preparing
        - Running
        - Completing
        - Completed
        - Excluding
        - Excluded
      type: string
    AppliesTo:
      description: To which model does the custom field applies to
      enum:
        - Member
        - Product
        - Achievement
        - Repository
        - FileObject
        - Language
        - MemberMessage
        - Reward
        - MemberAward
        - Award
        - Message
        - RewardType
        - ActionType
        - UnitOfMeasure
        - Competition
        - Contest
        - SqsConnection
        - KafkaConnection
        - RabbitMqConnection
        - Event
        - Webhook
        - Attachment
        - Rule
        - APIKey
        - Connection
        - InstantWin
      type: string
    EntrantAction:
      description: Entrant action
      enum:
        - DropScore
        - ResetScore
      type: string
      example: '"DropScore"'
    SourceLanguage:
      description: Coding language
      enum:
        - Scala
      type: string
    ConnectionState:
      description: Connection States
      enum:
        - Start
        - Stop
      type: string
      example:
        id: ziqniModelId
        customFields:
          test_cf_term68b743e9-2833-4a61-8595-3fa536c3ab9b: name_update
        tags:
          - Test_key-1f97cdc4-fdb4-4f1e-b93c-e3bc3a7fd69f
        metadata:
          b03f83fa-c4e1-4353-a776-e9d63d614ff1: 24f910de-2e6b-453f-88bc-4be3b89b62b8
        description: User api key
        whiteListIPs:
          - 123.221.22.1
          - 333.224.34.1
        role: Web
        addConstraints:
          - active
          - default
        removeConstraints:
          - active
    HostingOptions:
      description: Host a static website or any other web assets on Ziqni
      type: object
      properties:
        indexFileName:
          description: ''
          type: string
        errorFileName:
          description: ''
          type: string
    Space:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          required:
            - accountType
          type: object
          properties:
            accountType:
              description: Type of account; personal or company or vendor
              type: string
              example: company
            masterSpace:
              description: The master account for this account
              type: string
              example: sc1samQmVr61KgaPQq7x
            baseCurrencyUOM:
              description: The base currency used by this accounts
              type: string
    SpaceTokenRequest:
      required:
        - usersToken
        - spaceName
      type: object
      properties:
        userToken:
          description: The token recevied with key="user" from the login response
          type: string
        spaceName:
          description: Name of the space user is trying to login to
          type: string
    ChangePasswordRequest:
      required:
        - email
        - password
        - newPassword
        - confirmPassword
      type: object
      properties:
        email:
          description: The account username
          type: string
        password:
          description: Current password
          type: string
        newPassword:
          description: New password
          type: string
        confirmPassword:
          description: Confirm password
          type: string
        twoFactorAccessCode:
          description: Two factor access code if 2FA enabled
          type: string
    UserModelDefault:
      required:
        - objectType
      type: object
      properties:
        objectType:
          type: string
    SpaceResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Space'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    CollaboratorResponse:
      required:
        - meta
        - results
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Collaborator'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    UserResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    ProfileResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        result:
          $ref: '#/components/schemas/User'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    ApiKeyResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/ApiKey'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          objectType: some text
          totalRecords: 26
          resultCount: 2
          errorCount: 0
          limit: 2
          skip: 0
        results:
          -
            id: ziqniModelId
            customFields:
              test_cf_term68b743e9-2833-4a61-8595-3fa536c3ab9b: name_update
            tags:
              - Test_key-1f97cdc4-fdb4-4f1e-b93c-e3bc3a7fd69f
            metadata:
              b03f83fa-c4e1-4353-a776-e9d63d614ff1: 24f910de-2e6b-453f-88bc-4be3b89b62b8
            description: User api key
            whiteListIPs:
              - 123.221.22.1
              - 333.224.34.1
            role: Web
            addConstraints:
              - active
              - default
            removeConstraints:
              - active
          -
            id: ziqniModelId
            customFields:
              test_cf_term68b743e9-2833-4a61-8595-3fa536c3ab9b: name_update
            tags:
              - Test_key-1f97cdc4-fdb4-4f1e-b93c-e3bc3a7fd69f
            metadata:
              b03f83fa-c4e1-4353-a776-e9d63d614ff1: 24f910de-2e6b-453f-88bc-4be3b89b62b8
            description: User api key
            whiteListIPs:
              - 123.221.22.1
              - 333.224.34.1
            role: Web
            addConstraints:
              - active
              - default
            removeConstraints:
              - active
        errors:
          -
            modelId: some text
            errorCode: 44
            message: some text
            errorAt: 37
            detail:
              -
                modelId: some text
                errorCode: 59
                message: some text
                errorAt: 89
              -
                modelId: some text
                errorCode: 82
                message: some text
                errorAt: 1
          -
            modelId: some text
            errorCode: 33
            message: some text
            errorAt: 42
            detail:
              -
                modelId: some text
                errorCode: 70
                message: some text
                errorAt: 92
              -
                modelId: some text
                errorCode: 76
                message: some text
                errorAt: 0
    FileObjectsResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/FileObject'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    RepositoryResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Repository'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    UpdateFileObjectFormRequest:
      description: 'Either the file [id] or the [parentFolderPath] + [filename] are mandatory fields.'
      allOf:
        -
          required:
            - file
          type: object
          properties:
            parentFolderPath:
              description: The folder to save these file in.
              type: string
              example: /achievement-icons
            files:
              description: The files to upload
              type: array
              items:
                format: binary
                type: string
            repositoryId:
              description: ''
              type: string
            tags:
              description: ''
              type: string
    EventMetadata:
      description: Event metadata map.
      type: object
      additionalProperties: true
    ActionTypeAdjustmentFactor:
      required:
        - adjustmentFactor
        - actionTypeId
      type: object
      properties:
        adjustmentFactor:
          format: double
          description: The multiplier to apply to source values received for this product events
          type: number
          example: 1
        actionTypeId:
          description: A unique system generated identifier for Action Type
          type: string
          example: er5samHBdr48KgaPQq89asd
      example: '"Deleted"'
    EntityType:
      description: Entity the item is associated to.
      enum:
        - Member
        - Product
        - Achievement
        - Repository
        - FileObject
        - Language
        - MemberMessage
        - Reward
        - MemberAward
        - Award
        - Message
        - RewardType
        - ActionType
        - UnitOfMeasure
        - Competition
        - Contest
        - SqsConnection
        - KafkaConnection
        - RabbitMqConnection
        - Events
        - Webhook
        - Attachment
        - RuleSet
      type: string
    CreateFileObjectRequest:
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - repositoryId
            - name
            - mimeType
            - parentFolderPath
          type: object
          properties:
            repositoryId:
              description: The repository identifier this file belongs too
              type: string
              example: sample
            name:
              description: Name of the original file uploaded
              type: string
              example: First-upload-file-sample.png
            mimeType:
              description: >-
                Mime type of the file. Example mime types - text/csv or
                application/vmd.ms-excel or application/x-directory for directories
              type: string
              example: application/vnd.png
            parentFolderPath:
              description: The folder containing the file within the repository
              type: string
              example: /achievement-icons
            constraints:
              description: 'Additional constraints, if the value is present it means the'
              type: array
              items:
                type: string
    UpdateFileObjectRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
        -
          required: []
          type: object
          properties:
            repositoryId:
              description: The repository identifier this file belongs too
              type: string
              example: sample
            name:
              description: Name of the original file uploaded
              type: string
              example: First-upload-file-sample.png
            mimeType:
              description: Mime type of the file. Valid mime types - text/csv or application/vmd.ms-excel
              type: string
              example: application/vnd.png
            parentFolderPath:
              description: The folder containing the attachment within the repository
              type: string
              example: /achievement-icons
            constraints:
              description: 'Additional constraints, if the value is present it means the'
              type: array
              items:
                type: string
    Dependancy:
      type: object
      properties:
        entityType:
          description: A model that will have dependancies implemented
          type: string
          example: Members
        dependantOn:
          $ref: '#/components/schemas/DependantOn'
      example:
        entityType: some text
        dependantOn:
          must:
            - some text
            - some text
          mustNot:
            - some text
            - some text
          should:
            - some text
            - some text
          shouldMatchAtLeast: 71
    AchievementReduced:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          required:
            - name
            - achievementLiveStatus
          type: object
          properties:
            name:
              description: A name for the Achievement. Can be translated
              type: string
              example: Welcome badge
            achievementLiveStatus:
              $ref: '#/components/schemas/AchievementLiveStatus'
            tagsId:
              description: Categorisation of the achievements
              type: array
              items:
                type: string
              example:
                - Dc4swmQBVd51K6gPQqFx
                - Dc4swmQBVd51K6gPQqF2
            dependantOn:
              type: array
              items:
                $ref: '#/components/schemas/Dependancy'
    Role:
      description: The role of the user in the space.
      enum:
        - Owner
        - Administrator
        - Web
        - User
      type: string
    UpdateConnectionStateRequest:
      allOf:
        -
          required:
            - status
          type: object
          properties:
            status:
              $ref: '#/components/schemas/ConnectionState'
        -
          $ref: '#/components/schemas/UpdateModelDefault'
      example:
        -
          id: ziqniModelId
          status: Start
    AvailableLanguageResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Languages'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    RewardEntityType:
      description: Entity the item is associated to.
      enum:
        - Achievement
        - Competition
        - Contest
      type: string
    CollaboratorRolesAvailable:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          required: []
          type: object
          properties:
            roles:
              description: The access role of an individual
              type: array
              items:
                type: string
              example: 'Administrator, Web, User etc'
    CollaboratorRolesResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/CollaboratorRolesAvailable'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    WebhookTriggersResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Triggers'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    Triggers:
      description: ''
      type: object
      properties:
        id:
          description: ''
          type: string
        name:
          description: ''
          type: string
        key:
          description: ''
          type: string
    AccountMessageResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/AccountMessage'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    CustomFieldEntry:
      description: The base type for custom field entries
      required:
        - fieldType
      type: object
      properties:
        fieldType:
          description: 'The data type stored in this generic object ( string, number, string[], number[])'
          type: string
      example:
        fieldType: some text
    CustomFieldEntryString:
      description: The base type for custom field entries
      type: object
      allOf:
        -
          required:
            - fieldType
          type: object
          properties:
            fieldType:
              description: >-
                The data type stored in this generic object ( string, number, string[],
                number[])
              type: string
            value:
              description: ''
              type: string
        -
          $ref: '#/components/schemas/CustomFieldEntry'
      example:
        fieldType: Text
        value: Sample Text
    CustomFieldEntryStringArray:
      description: The base type for custom field entries
      type: object
      allOf:
        -
          required:
            - fieldType
          type: object
          properties:
            fieldType:
              description: >-
                The data type stored in this generic object ( string, number, string[],
                number[])
              type: string
            value:
              description: ''
              type: array
              items:
                type: string
        -
          $ref: '#/components/schemas/CustomFieldEntry'
      example:
        fieldType: Text
        value:
          - Sample Text
          - Some Text
    CustomFieldEntryNumber:
      description: The base type for custom field entries
      type: object
      allOf:
        -
          required:
            - fieldType
          type: object
          properties:
            fieldType:
              description: >-
                The data type stored in this generic object ( string, number, string[],
                number[])
              type: string
            value:
              format: double
              description: ''
              type: number
        -
          $ref: '#/components/schemas/CustomFieldEntry'
      example:
        fieldType: Number
        value: 200
    CustomFieldEntryNumberArray:
      description: The base type for custom field entries
      type: object
      allOf:
        -
          required:
            - fieldType
          type: object
          properties:
            fieldType:
              description: >-
                The data type stored in this generic object ( string, number, string[],
                number[])
              type: string
            value:
              description: ''
              type: array
              items:
                format: double
                type: number
        -
          $ref: '#/components/schemas/CustomFieldEntry'
      example:
        fieldType: NumberArray
        value:
          - 200
          - 400
    Response:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            type: object
            additionalProperties: true
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    RuleArgument:
      description: ''
      required:
        - argument
      type: object
      properties:
        argument:
          description: ''
          type: string
          x-es-type: Keyword
        value:
          description: ''
          type: string
          x-es-type: Keyword
        type:
          description: ''
          type: string
          x-es-type: Keyword
        order:
          format: int32
          description: ''
          type: integer
    RuleResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    RuleExpression:
      description: >-
        A conditional expressions is an element that declares either a rule expression, condition or
        routine to be evaluated or executed
      required:
        - type
      type: object
      properties:
        type:
          description: condition or expression or routine
          type: string
        mustMatchAll:
          description: All expressions in the condition must either evaluate to TRUE or FALSE if set to TRUE
          type: boolean
        mustEvaluateTo:
          description: All the expressions of this condition must either evaluate to TRUE or FALSE
          type: boolean
        scope:
          description: The scope of the operand used in the expression
          type: string
        operand:
          description: The operand for the rule.
          type: string
        operator:
          description: '[ *.* ] or [ .* ] or [ == ] or [ > ] or [ >= ] or [ <=]  or [ < ] or [ <> ]'
          type: string
        value:
          description: The value associated with the expression
          type: string
        rules:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/RuleExpression'
        then:
          description: The routine to run when all the conditions have evaluted to the required level
          type: array
          items:
            $ref: '#/components/schemas/RuleRoutine'
        lineNumber:
          format: int32
          description: The order the rules have to be executed in.
          type: integer
    RuleRoutine:
      description: ''
      type: object
      properties:
        routine:
          description: >-
            A routine to execute if the conditional expressions in the matching group evaluted to
            true
          type: string
        arguments:
          description: The arguments of the routine.
          type: array
          items:
            $ref: '#/components/schemas/RuleArgument'
        lineNumber:
          format: int32
          description: ''
          type: integer
    UpdateRuleRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          required:
            - rules
          type: object
          properties:
            rules:
              $ref: '#/components/schemas/Rule'
              description: ''
    ValueLookupResult:
      description: The result of a generic lookup query
      type: object
      properties:
        id:
          description: ''
          type: string
        referenceId:
          description: ''
          type: string
        relatesToId:
          description: ''
          type: string
        name:
          description: ''
          type: string
        key:
          description: ''
          type: string
        description:
          description: ''
          type: string
    RuleOperandLookupResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/ValueLookupResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    QueryMultipleFields:
      description: ''
      type: object
      properties:
        queryFields:
          description: Multiple fields to be included in search for the given value.
          type: array
          items:
            type: string
        queryValue:
          description: The value to search for across given fields.
          type: string
      example:
        queryFields:
          - name
          - description
        queryValue: ziqni
    RangeQuery:
      description: ''
      required:
        - queryField
      type: object
      properties:
        queryField:
          description: |+
            The key of the parameter that is being searched
          

          type: string
        gt:
          description: Greater than value
          type: string
        lt:
          description: Less than value
          type: string
        constraints:
          description: Additional constraints
          type: array
          items:
            type: string
      example:
        queryField: sourceValue
        gt: '1.0'
        lt: '3'
        constraints:
          - includeBounds
    QueryRequest:
      description: ''
      type: object
      properties:
        must:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/QueryMultiple'
        mustNot:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/QueryMultiple'
        should:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/QueryMultiple'
        gte:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/QuerySingle'
        gt:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/QuerySingle'
        lte:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/QuerySingle'
        lt:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/QuerySingle'
        range:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/RangeQuery'
        sortBy:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/QuerySortBy'
        multiFields:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/QueryMultipleFields'
        includeFields:
          description: ''
          type: array
          items:
            type: string
        hasValue:
          description: ''
          type: array
          items:
            type: string
        hasNoValue:
          description: ''
          type: array
          items:
            type: string
        shouldMatch:
          format: int32
          description: ''
          type: integer
        skip:
          format: int32
          description: ''
          type: integer
        limit:
          format: int32
          description: ''
          type: integer
        constraints:
          description: ''
          type: array
          items:
            type: string
      example:
        must:
          -
            queryField: some text
            queryValues:
              - some text
              - some text
          -
            queryField: some text
            queryValues:
              - some text
              - some text
        mustNot:
          -
            queryField: some text
            queryValues:
              - some text
              - some text
          -
            queryField: some text
            queryValues:
              - some text
              - some text
        should:
          -
            queryField: some text
            queryValues:
              - some text
              - some text
          -
            queryField: some text
            queryValues:
              - some text
              - some text
        gte:
          -
            queryField: some text
            queryValue: some text
          -
            queryField: some text
            queryValue: some text
        gt:
          -
            queryField: some text
            queryValue: some text
          -
            queryField: some text
            queryValue: some text
        lte:
          -
            queryField: some text
            queryValue: some text
          -
            queryField: some text
            queryValue: some text
        lt:
          -
            queryField: some text
            queryValue: some text
          -
            queryField: some text
            queryValue: some text
        range:
          -
            queryField: some text
            gt: some text
            lt: some text
            constraints:
              - some text
              - some text
          -
            queryField: some text
            gt: some text
            lt: some text
            constraints:
              - some text
              - some text
        sortBy:
          -
            queryField: some text
            order: Desc
          -
            queryField: some text
            order: Asc
        multiFields:
          -
            queryFields:
              - some text
              - some text
            queryValue: some text
          -
            queryFields:
              - some text
              - some text
            queryValue: some text
        includeFields:
          - some text
          - some text
        hasValue:
          - some text
          - some text
        hasNoValue:
          - some text
          - some text
        shouldMatch: 10
        skip: 5
        limit: 23
        constraints:
          - some text
          - some text
    TranslationEntry:
      description: This the translationEntry model
      required:
        - fieldName
        - text
      type: object
      properties:
        fieldName:
          description: Field name to associate the translationEntry to.
          type: string
          x-es-converter: TranslationEntry
          x-es-fieldName: fieldName
        text:
          description: Corresponding translated text
          type: string
          x-es-converter: TranslationEntry
          x-es-fieldName: text
      example:
        fieldName: some text
        text: some text
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.TranslationEntryDoc
    TranslationResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Translation'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    CreateOptParamModels:
      type: object
      properties:
        customFields:
          description: A list of custom field entries
          type: object
          additionalProperties: true
          x-vue-custom-fields: true
          x-vue-form-type: CUSTOM
        tags:
          description: A list of id's used to tag models
          type: array
          items:
            type: string
          example:
            - Dc4swmQBVd51K6gPQqFx
            - Dc4swmQBVd51K6gPQqF2
          x-vue-tags: true
          x-vue-form-type: TAG
        metadata:
          type: object
          additionalProperties:
            type: string
          x-vue-metadata: true
          x-vue-form-type: META
    MemberType:
      description: Determines a member type
      enum:
        - Individual
      type: string
      example: '"Individual"'
      x-vue-hidden: true
    Transformer:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          required:
            - name
            - source
            - sourceLanguage
          type: object
          properties:
            name:
              description: The name of the Transformer
              type: string
              example: Daily Login
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1000
            source:
              description: Source code
              type: string
              example: /** This is your source code **/
              x-vue-hidden: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1002
            sourceLanguage:
              $ref: '#/components/schemas/SourceLanguage'
              x-vue-search-field: true
              x-vue-disaply-order: 1001
      x-vue-getter: transformers
      x-vue-show: transformer
      x-vue-list: true
      x-vue-sort-by: name
      x-vue-sort-order: Asc
      x-vue-route:
        - settings
    TagResponse:
      description: Response for Tag
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          objectType: some text
          totalRecords: 26
          resultCount: 2
          errorCount: 0
          limit: 2
          skip: 0
        results:
          -
            id: ziqniModelId
            spaceName: ziqniSpaceName
            created: '2018-02-10T09:30Z'
            name: Test tag name
            key: test_tag_key
            description: test description
            metadata:
              key1: value1
              key2: value
            entityTypes:
              - Reward
              - Repository
          -
            id: ziqniModelId1
            spaceName: ziqniSpaceName
            created: '2018-02-10T09:30Z'
            name: Test tag name
            key: test_tag_key
            description: test description
            metadata:
              key1: value1
              key2: value
            entityTypes:
              - Reward
              - Repository
        errors:
          -
            modelId: some text
            errorCode: 16
            message: some text
            errorAt: 63
            detail:
              -
                modelId: some text
                errorCode: 36
                message: some text
                errorAt: 38
              -
                modelId: some text
                errorCode: 95
                message: some text
                errorAt: 49
          -
            modelId: some text
            errorCode: 18
            message: some text
            errorAt: 94
            detail:
              -
                modelId: some text
                errorCode: 34
                message: some text
                errorAt: 8
              -
                modelId: some text
                errorCode: 59
                message: some text
                errorAt: 15
    CompetitionReduced:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          required:
            - competitionType
            - numberOfRounds
            - name
            - constraints
            - status
            - statusCode
            - dependantOn
            - scheduledStartDate
            - scheduledEndDate
          type: object
          properties:
            competitionType:
              $ref: '#/components/schemas/CompetitionType'
            numberOfRounds:
              format: int32
              description: Number of rounds to be played in a competition
              type: integer
              example: '1'
            name:
              description: A name or a name of a competition. Can be translated
              type: string
              example: Summer fest
            status:
              $ref: '#/components/schemas/CompetitionStatus'
            statusCode:
              description: The code of the competition
              type: integer
              readOnly: true
              example: '3'
            dependantOn:
              type: array
              items:
                $ref: '#/components/schemas/Dependancy'
            entrantMemberType:
              type: string
            scheduledStartDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Competition should start. All records are stored
                in UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            scheduledEndDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Competition should end. All records are stored in
                UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            actualStartDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Competition started. All records are stored in
                UTC time zone
              type: string
              readOnly: true
              example: '2019-09-25T15:47:00.000+0000'
            actualEndDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Competition ended. All records are stored in UTC
                time zone
              type: string
              readOnly: true
              example: '2019-09-25T15:47:00.000+0000'
            tags:
              description: A list of id's used to tag
              type: array
              items:
                type: string
              example: '- Dc4swmQBVd51K6gPQqFx - Dc4swmQBVd51K6gPQqF2'
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- optinRequiredForEntrants'
    Condition:
      required:
        - matchCondition
        - constraints
        - rules
      type: object
      properties:
        matchCondition:
          $ref: '#/components/schemas/MatchCondition'
        rules:
          type: array
          items:
            $ref: '#/components/schemas/Rule'
        constraints:
          description: Additional constraints
          type: array
          items:
            type: string
          example: '- mustEvaluateTo'
    ContestReduced:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          required:
            - competitionId
            - row
            - name
            - round
            - groupStage
            - entrantsFromContest
            - scheduledDates
            - actualDates
            - status
            - statusCode
            - scheduledStartDate
            - scheduledEndDate
          type: object
          properties:
            competitionId:
              description: A unique identifier of a Competition
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            row:
              format: int32
              description: The row number for displaying the Contest in a table
              type: integer
              example: '2'
            name:
              description: A name for the Contest. Can be translated
              type: string
              example: Fish and Chips
            round:
              format: int32
              description: To what round does the contest belong
              type: integer
              example: '2'
            groupStage:
              format: int32
              description: >-
                Is used for more complex Competitions e.g. multi round competitions where
                round 1 group stage matched round 2
              type: integer
              example: '2'
            entrantsFromContest:
              description: >-
                A list of Ziqni contest identifiers to allow contests chaining. When a
                Progression competition is active and you have a 2 round competition the first
                round has to reference the second round then this parameter becomes mandatory
                instead of Optional.
              type: array
              items:
                type: string
              example: '- Dc4swmQBVd51K6gPQqFx - sc3jsrfLewVdt6KugPqFx'
            status:
              $ref: '#/components/schemas/ContestStatus'
            statusCode:
              description: The code of the contest
              type: integer
              readOnly: true
              example: '3'
            scheduledStartDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Contest should start. All records are stored in
                UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            scheduledEndDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Contest should end. All records are stored in UTC
                time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            actualStartDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Contest started. All records are stored in UTC
                time zone
              type: string
              readOnly: true
              example: '2019-09-25T15:47:00.000+0000'
            actualEndDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Contest ended. All records are stored in UTC time
                zone
              type: string
              readOnly: true
              example: '2019-09-25T15:47:00.000+0000'
            tags:
              description: A list of id's used to tag
              type: array
              items:
                type: string
              example: '- Dc4swmQBVd51K6gPQqFx - Dc4swmQBVd51K6gPQqF2'
            rewards:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/RewardReduced'
    CountResponse:
      required:
        - entityId
        - countValue
      type: object
      properties:
        entityId:
          description: A unique identifier of a Entity
          type: string
          example: Dc4swmQBVd51K6gPQqFx
        countValue:
          format: int32
          description: The value in how many times the achievemnt was issued
          type: integer
          example: '2'
      example:
        entityId: some text
        countValue: 83
    CreateRepositoryRequest:
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - name
            - constraints
          type: object
          properties:
            name:
              description: The name of the repository. No special charaters or spaces permitted
              type: string
              example: Demo Page
            description:
              description: The description of the repository
              type: string
              example: Demo Page description
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: |-
                - system 
                - public-site 
                - disabled
            hostingOptions:
              $ref: '#/components/schemas/HostingOptions'
              description: Hosting options for this repository if set to public
    DependantOn:
      type: object
      properties:
        must:
          description: >-
            A rule indicating that it has to be included. Players that are in the EU group with a
            MUST rule - that means only players that have that group can participate
          type: array
          items:
            type: string
          example: '- EU - DE'
        mustNot:
          description: >-
            A rule indicating that it will not be included. Players that are in the EU group with
            a MUST-NOT rule - that means that players that have that group can NOT participate
          type: array
          items:
            type: string
          example: '- CH'
        should:
          description: >-
            A rule indicating that some of them have to be included. Dependancy on
            shouldMatchAtLeast parameter. Players that are in the EU and DE groups with a SHOULD
            rule and a shouldMatchAtLeast with a value of 1 - that means that players that have 1
            of the groups can participate
          type: array
          items:
            type: string
          example: '- FR - UK'
        shouldMatchAtLeast:
          format: int32
          description: Dependant on should. Triggered when 2 or more should parameters selected
          type: integer
          example: '1'
      example:
        must:
          - some text
          - some text
        mustNot:
          - some text
          - some text
        should:
          - some text
          - some text
        shouldMatchAtLeast: 42
    Error:
      required:
        - errorCode
        - message
      properties:
        modelId:
          description: >-
            The identifier of the record this error relates to (This value only gets set if the
            error could relate to more than one object)
          type: string
          example: 1234abc
        errorCode:
          description: A unique system identifier that describes this specific error
          type: integer
          example: '1007'
        message:
          description: The error description
          type: string
          example: The error was caused by an invalid ID being submitted
        errorAt:
          description: The object number that returned the error
          type: integer
          example: '53'
        detail:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'
    ErrorDetail:
      required:
        - errorCode
        - message
      properties:
        modelId:
          description: >-
            The identifier of the record this error relates to (This value only gets set if the
            error could relate to more than one object)
          type: string
          example: 1234abc
        errorCode:
          description: A unique system identifier that describes this specific error
          type: integer
          example: '1007'
        message:
          description: The error description
          type: string
          example: The error was caused by an invalid ID being submitted
        errorAt:
          description: The object number that returned the error
          type: integer
          example: '53'
    FileObject:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - repositoryId
            - name
            - mimeType
            - path
            - parentFolderPath
          type: object
          properties:
            repositoryId:
              description: The repository identifier this file belongs too
              type: string
              example: sample
            name:
              description: Name of the original file uploaded
              type: string
              example: First-upload-file-sample.png
            mimeType:
              description: >-
                Mime type of the file. Valid mime types - text/csv or
                application/vmd.ms-excelor or application/x-directory for directories
              type: string
              example: application/vnd.png
            path:
              description: The name of the attachment within the bucket
              type: string
              example: /achievement-icons/images.png
            parentFolderPath:
              description: The folder name containing the attachment within the bucket
              type: string
              example: /achievement-icons
            uri:
              description: The uniform resource identifier where the file can be viewed/downloaded
              type: string
              example: 'https://resource/location/file.ext'
            size:
              format: int64
              description: The size of the file
              type: integer
              example: '123456'
            constraints:
              description: 'Additional constraints, if the value is present it means the'
              type: array
              items:
                type: string
    LeaderboardResponseByContest:
      required:
        - contestId
        - name
        - round
      type: object
      properties:
        contestId:
          description: The id of the contest
          type: string
          example: NJgUmXABxTLOtwfEDJPR
        name:
          description: A name for the Contest. Can be translated
          type: string
          example: Fish and Chips
        round:
          format: int32
          description: To what round does the contest belong
          type: integer
          example: '2'
        leaderboard:
          type: array
          items:
            $ref: '#/components/schemas/Leaderboard'
    LeaderboardEntry:
      required:
        - rank
        - points
      type: object
      properties:
        rank:
          description: The rank of the player
          type: integer
          example: '1'
        score:
          format: double
          description: The members current score
          type: number
          example: '100'
        bestScores:
          description: >-
            The multiplier to apply to source values received for this product action helper
            events
          type: array
          items:
            format: double
            type: number
          example: '100'
        members:
          description: Member details
          type: array
          items:
            $ref: '#/components/schemas/LeaderboardMember'
        rewards:
          description: The rewards associated with this rank
          type: array
          items:
            $ref: '#/components/schemas/RewardReduced'
    Leaderboard:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          required:
            - memberId
            - memberRefId
            - name
            - points
            - rank
            - constraints
            - timestamp
          type: object
          properties:
            leaderboardEntries:
              type: array
              items:
                $ref: '#/components/schemas/LeaderboardEntry'
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- goalReached'
            sequence:
              description: how many changes were made to teh leaderboard
              type: integer
              example: '1'
    Location:
      required:
        - lat
        - lon
      type: object
      properties:
        lat:
          format: double
          description: Latitude
          type: number
          example: '51.260145'
        lon:
          format: double
          description: Longitude
          type: number
          example: '0.8442802'
    MaxMin:
      required:
        - minimum
      type: object
      properties:
        maximum:
          format: int32
          description: Indication of a maximum amount
          type: integer
          example: '99999'
        minimum:
          format: int32
          description: Indication of a minimum amount
          type: integer
          example: '0'
    CreateCollaboratorRequest:
      required:
        - email
        - addRoles
      type: object
      properties:
        email:
          description: The email of the user to log in
          type: string
          example: abc@ziqni.com
        addRoles:
          description: ''
          type: array
          items:
            type: string
      example:
        email: some text
        roles:
          - some text
          - some text
      x-vue-create: collaborator
      x-vue-creator: collaborators
    UpdateCollaboratorRequest:
      allOf:
        -
          required:
            - email
          type: object
          properties:
            email:
              description: ''
              type: string
            addRoles:
              description: ''
              type: array
              items:
                type: string
            removeRoles:
              description: ''
              type: array
              items:
                type: string
      example: {}
      x-vue-update: collaborator
      x-vue-updater: collaborators
    MetaExtended:
      allOf:
        -
          $ref: '#/components/schemas/MetaInfo'
        -
          required:
            - skip
            - limit
          type: object
          properties:
            skip:
              description: Number of records to skip
              type: integer
              example: '0'
            limit:
              description: Number of records to return
              type: integer
              example: '100'
      example:
        objectType: some text
        totalRecords: 26
        resultCount: 3
        errorCount: 2
        limit: 20
        skip: 0
    MetaInfo:
      required:
        - objectType
        - resultCount
        - errorCount
      type: object
      properties:
        objectType:
          type: string
        totalRecords:
          description: The count of all results
          type: integer
          example: '10'
        resultCount:
          description: The count of successful results
          type: integer
          example: '10'
        errorCount:
          description: The count of errors
          type: integer
          example: '1'
      example:
        objectType: some text
        totalRecords: 26
        resultCount: 3
        errorCount: 2
    QueryMultiple:
      required:
        - queryField
        - queryValues
      type: object
      properties:
        queryField:
          description: The key of the parameter that is being searched
          type: string
          example: competitionId
        queryValues:
          description: Multiple values for parameter that is being searched
          type: array
          items:
            type: string
          example: '- Dc4swmQBVd51K6gPQqFx - Dc4swmQBVd51K6gPQqFx'
    RankingStrategy:
      required:
        - constraints
      type: object
      properties:
        constraints:
          description: >-
            scoreDesc - The Ranking that can be Ascending or Descending based on timeDesc. 
            
            timeDesc - The Ranking that can be Ascending or Descending based on scoreDesc. 
            
            scoreFirst - The Ranking that can be score first or time first 
            
            ignoreTime - The Ranking when time is ignored 
            
            ignoreScore - The Ranking when score is ignored
            
            excludeIfGoalNotReached - The scores are not included in the leaderboard until the
            goal is achieved
          type: array
          items:
            type: string
          example: |-
            - scoreDesc 
            - timeDesc
            - scoreFirst
            - ignoreTime
            - ignoreScore
    Repository:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - name
            - hostingOptions
            - constraints
          type: object
          properties:
            name:
              description: The name of the repository. This cannot contain spaces or specil characters.
              type: string
              example: Demo-Page
            description:
              description: The description of the promotion page
              type: string
              example: Demo Page description
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: |-
                - system
                - public-site
                - disabled
            hostingOptions:
              $ref: '#/components/schemas/HostingOptions'
              description: Hosting options for this repository if set to public
    Language:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/Languages'
        -
          $ref: '#/components/schemas/OptParamModels'
      x-vue-list: true
      x-vue-show: true
      x-vue-getter: languages
      x-vue-section: settings
      x-vue-sort-by: name
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-ops:
        - Create
        - Update
    RewardReduced:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          required:
            - rewardRank
            - name
            - rewardValue
            - rewardTypeId
            - rewardType
          type: object
          properties:
            rewardRank:
              description: >-
                If used in the context of contest this will associate with the rank of the
                leaderboard
              type: string
              example: '1'
            name:
              description: The name of a reward
              type: string
              example: Welcome badge
            rewardValue:
              format: double
              description: Numerical value of the reward that will be issued based on the reward type
              type: number
              example: '1'
            rewardType:
              description: Reward Type key
              type: string
              example: free-spins
            rewardTypeId:
              description: A unique id of the Reward Type
              type: string
              example: Dc4swmQBVd51K6gPQqFx
    CreateLanguageRequest:
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - key
          type: object
          properties:
            key:
              description: A reference to the pre created language keys
              type: string
              example: uz
              x-vue-form-type: LANGUAGES
      x-vue-create: language
      x-vue-creator: languages
    UpdateLanguageRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
      x-vue-update: language
      x-vue-updater: languages
    Scheduling:
      required:
        - scheduleType
        - scheduleOccurrencesLimit
        - every
        - startDate
        - constraints
      type: object
      properties:
        scheduleType:
          $ref: '#/components/schemas/ScheduleType'
        scheduleOccurrencesLimit:
          format: int32
          description: A value indicating how many times it will be issued
          type: integer
          example: '1'
        every:
          type: array
          items:
            format: int32
            description: >
              A value for the parameter of the scheduleType that indicates the Daily, Weekly,
              Monthly repetition exampleDaily: "Range = 1 to 7" exampleWeekly: "Range = 1 to 52"
              exampleMonthly: "Range = 1 to 12"
            type: integer
        startDate:
          format: date-time
          description: The start date and time of a schedule. ISO8601 timestamp
          type: string
          example: '2019-09-25T15:47:00.000+0000'
        endDate:
          format: date-time
          description: The end date and time of a schedule. ISO8601 timestamp
          type: string
          example: '2019-09-25T15:47:00.000+0000'
        constraints:
          description: Additional constraints
          type: array
          items:
            type: string
          example: '- onlyAggregateOnActiveDays'
    ScoringStrategy:
      required:
        - limitUpdatesTo
        - sumBestXOf
        - lastUpdateTimeStamp
        - recordTimeWhenSumReaches
      type: object
      properties:
        limitUpdatesTo:
          format: int32
          description: The scoring strategies types "SumBest" value
          type: integer
          example: '2'
        sumBestXOf:
          format: int32
          description: The scoring strategies types "LimitedTo" value
          type: integer
          example: '5'
        lastUpdateTimeStamp:
          format: int64
          description: The scoring strategies types "FirstTo" value
          type: integer
          example: '1000'
        recordTimeWhenSumReaches:
          format: double
          description: The time a member gets to the target points value
          type: number
          example: '1'
    UpdateRepositoryRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
        -
          required: []
          type: object
          properties:
            name:
              description: The name of the repository. No special charaters or spaces permitted
              type: string
              example: Demo Page
            description:
              description: The description of the repository
              type: string
              example: Demo Page description
            addConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- system - public-site - disabled'
            removeConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- system - public-site - disabled'
            hostingOptions:
              $ref: '#/components/schemas/HostingOptions'
              description: Hosting options for this repository if set to public
    RewardType:
      description: This is the Reward Type model
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - name
            - key
            - unitOfMeasure
            - constraints
          type: object
          properties:
            name:
              description: The name of the Reward type
              type: string
              example: Points
              x-vue-as-string: true
              x-vue-translatable: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            description:
              description: The description of a reward type
              type: string
              example: Free spins
              x-vue-translatable: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1002
            key:
              description: A unique key that represents the reward type
              type: string
              example: free-spin-reward
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1000
            constraints:
              description: 'Additional constraints, if the value is present it means the'
              type: array
              items:
                type: string
              example: '- system'
              x-vue-search-field: true
              x-vue-disaply-order: 1003
            unitOfMeasure:
              type: string
      example:
        id: someText
        spaceName: someText
        created: '2018-02-10T09:30Z'
        customFields:
          customField1: customFieldValue1
          customField2: customFieldValue2
        metadata:
          key1: value1
          key2: value
        tags:
          - tagId1
          - tagId2
        unitOfMeasure: ziqniModelId
        name: someText
        description: someText
        key: someText
        constraints:
          - system
      x-vue-list: true
      x-vue-show: true
      x-vue-getter: rewardTypes
      x-vue-section: settings
      x-vue-sort-by: name
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-ops:
        - Create
        - Update
    User:
      allOf:
        -
          $ref: '#/components/schemas/UserModelDefault'
        -
          required:
            - constraints
            - email
          type: object
          properties:
            firstName:
              description: The Name of an individual
              type: string
              example: John
            lastName:
              description: The Surname of an individual
              type: string
              example: Dough
            email:
              description: The email of the user to log in
              type: string
              example: john.dough@ziqni.com
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- tfaEnabled - emailVerified'
            spaces:
              description: ''
              type: array
              items:
                type: string
    CreateTagRequest:
      description: Request for tag creation
      required:
        - name
        - key
        - entityType
        - entityTypes
      type: object
      properties:
        name:
          description: The name of the tag
          type: string
          example: Group
        key:
          description: A unique key that represents a tag
          type: string
          example: group1
          x-vue-form-type: 'NAMEKEY, showKey: true'
        description:
          description: The description of the tag for your reference
          type: string
          example: The group that has been called group1
          x-vue-form-type: TEXTAREA
        metadata:
          type: object
          additionalProperties:
            type: string
          x-vue-form-type: META
          x-vue-table-getter: getMetaData(item.metadata)
          x-vue-metadata: true
          x-vue-hidden: true
          x-vue-disaply-order: 10000
        entityTypes:
          description: The model name the tag refers to
          type: array
          items:
            type: string
          example: 'Member, Product'
          x-vue-form-type: SELECT
          x-vue-formTypeOptionsParams: 'multiple: true'
          x-vue-formTypeOptions:
            - Product
            - Member
            - Achievement
            - Repository
            - FileObject
            - Language
            - MemberMessage
            - Reward
            - MemberAward
            - Award
            - Message
            - RewardType
            - ActionType
            - UnitOfMeasure
            - Competition
            - Contest
            - SqsConnection
            - KafkaConnection
            - RabbitMqConnection
            - Events
            - Webhook
            - Attachment
            - RuleSet
      example:
        name: Test tag name
        key: test_tag_key
        description: test description
        metadata:
          key1: value1
          key2: value
        entityTypes:
          - Reward
          - Repository
      x-vue-create: tag
      x-vue-creator: tags
    UpdateTagRequest:
      description: Request for tag update
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          required:
            - entityType
          type: object
          properties:
            name:
              description: The name of the tag
              type: string
              example: Group
            description:
              description: The description of the tag for your reference
              type: string
              example: The group that has been called group1
              x-vue-form-type: TEXTAREA
            entityTypes:
              description: The model name the tag refers to
              type: array
              items:
                type: string
              example: 'Member, Product'
              x-vue-form-type: SELECT
              x-vue-formTypeOptionsParams: 'multiple: true'
              x-vue-formTypeOptions:
                - Product
                - Member
                - Achievement
                - Repository
                - FileObject
                - Language
                - MemberMessage
                - Reward
                - MemberAward
                - Award
                - Message
                - RewardType
                - ActionType
                - UnitOfMeasure
                - Competition
                - Contest
                - SqsConnection
                - KafkaConnection
                - RabbitMqConnection
                - Events
                - Webhook
                - Attachment
                - RuleSet
            metadata:
              type: object
              additionalProperties:
                type: string
              x-vue-form-type: META
              x-vue-table-getter: getMetaData(item.metadata)
              x-vue-metadata: true
              x-vue-hidden: true
              x-vue-disaply-order: 10000
      example:
        id: ziqniModelId
        name: Test tag name
        description: test description
        metadata:
          key1: value1
          key2: value
        entityTypes:
          - Reward
          - Repository
      x-vue-update: tag
      x-vue-updater: tags
    CreateUnitOfMeasureRequest:
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - name
            - key
            - multiplier
            - unitOfMeasureType
          type: object
          properties:
            name:
              description: The name of a unit of measure
              type: string
              example: United States Dollar
            key:
              description: The reference to the unit of measure in your system
              type: string
              example: united-states-dollar
              x-vue-form-type: 'NAMEKEY, showKey: true'
            description:
              description: The description of a unit of measure
              type: string
              example: >-
                The United States dollar, or U.S. dollar, is made up of 100 cents and is
                presented with the symbol $ or US$ to differentiate it from other dollar-based
                currencies
              x-vue-form-type: TEXTAREA
            isoCode:
              description: An alphabetical or numerical code to identify a unit of measure
              type: string
              example: USD
            symbol:
              description: The symbol of a unit of measure
              type: string
              example: $
            multiplier:
              format: double
              description: Is used to multiply the value from the standardised one that is being used
              type: number
              example: '1'
            unitOfMeasureType:
              $ref: '#/components/schemas/UnitOfMeasureType'
      x-vue-create: unitOfMeasure
      x-vue-creator: unitsOfMeasure
    UnitOfMeasure:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - name
            - key
            - multiplier
            - unitOfMeasureType
          type: object
          properties:
            name:
              description: The name of a unit of measure
              type: string
              example: United States Dollar
              x-vue-as-string: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            key:
              description: The reference to the unit of measure in your system
              type: string
              example: united-states-dollar
              x-vue-search-field: true
              x-vue-disaply-order: 1000
              x-vue-form-type: 'NAMEKEY, showKey: true'
            description:
              description: The description of a unit of measure
              type: string
              example: >-
                The United States dollar, or U.S. dollar, is made up of 100 cents and is
                presented with the symbol $ or US$ to differentiate it from other dollar-based
                currencies
              x-vue-form-type: TEXTAREA
              x-vue-as-string: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1005
            isoCode:
              description: An alphabetical or numerical code to identify a unit of measure
              type: string
              example: USD
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1002
            symbol:
              description: The symbol of a unit of measure
              type: string
              example: $
              x-vue-search-field: true
              x-vue-disaply-order: 1003
            multiplier:
              format: double
              description: Is used to multiply the value from the standardised one that is being used
              type: number
              example: '1'
              x-vue-search-field: true
              x-vue-disaply-order: 1005
            unitOfMeasureType:
              $ref: '#/components/schemas/UnitOfMeasureType'
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
      x-vue-list: true
      x-vue-show: true
      x-vue-getter: unitsOfMeasure
      x-vue-section: settings
      x-vue-csv-supported: true
      x-vue-sort-by: name
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-ops:
        - Create
        - Update
    UpdateUnitOfMeasureRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
        -
          required: []
          type: object
          properties:
            name:
              description: The name of a unit of measure
              type: string
              example: United States Dollar
            description:
              description: The description of a unit of measure
              type: string
              example: >-
                The United States dollar, or U.S. dollar, is made up of 100 cents and is
                presented with the symbol $ or US$ to differentiate it from other dollar-based
                currencies
              x-vue-form-type: TEXTAREA
            isoCode:
              description: An alphabetical or numerical code to identify a unit of measure
              type: string
              example: USD
            symbol:
              description: The symbol of a unit of measure
              type: string
              example: $
            multiplier:
              format: double
              description: Is used to multiply the value from the standardised one that is being used
              type: number
              example: '1'
            unitOfMeasureType:
              $ref: '#/components/schemas/UnitOfMeasureType'
      x-vue-update: unitOfMeasure
      x-vue-updater: unitsOfMeasure
    CreateWebhookRequest:
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - postToUrl
            - triggers
            - name
          type: object
          properties:
            postToUrl:
              description: A URL to post the webhook to
              type: string
              example: 'http://www.my-domain.com/abcd'
            triggers:
              description: A list of event triggers
              type: array
              items:
                type: string
              example: >-
                -
                com.ziqni.transformers.domain.CLWebhookTriggers.TriggersByClassName.getOrElse
                - onNewProductTrigger.getClass.getSimpleName.replace
            description:
              description: The description of a Webhook
              type: string
              example: 'http://www.my-domain.com/abcd'
              x-vue-form-type: TEXTAREA
            name:
              description: The name of a Webhook
              type: string
              example: test
            headers:
              description: The headers to add to the request
              type: object
              additionalProperties:
                type: string
            username:
              description: Basic auth username
              type: string
            password:
              description: Basic auth password
              type: string
      x-vue-create: webhook
      x-vue-creator: webhooks
    Webhook:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - postToUrl
            - triggers
            - status
            - name
          type: object
          properties:
            postToUrl:
              description: A URL to post the webhook to
              type: string
              example: 'http://www.my-domain.com/abcd'
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            triggers:
              description: A list of event triggers
              type: array
              items:
                type: string
              example: >-
                -
                com.ziqni.transformers.domain.CLWebhookTriggers.TriggersByClassName.getOrElse
                - onNewProductTrigger.getClass.getSimpleName.replace
              x-vue-search-field: true
              x-vue-disaply-order: 1007
            description:
              description: The description of a Webhook
              type: string
              example: 'http://www.my-domain.com/abcd'
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1004
              x-vue-form-type: TEXTAREA
            name:
              description: The name of a Webhook
              type: string
              example: test
              x-vue-as-string: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1000
            headers:
              type: object
              additionalProperties:
                type: string
              x-vue-hidden: true
              x-vue-disaply-order: 1005
            status:
              $ref: '#/components/schemas/ConnectionState'
              x-vue-hidden: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1006
      x-vue-list: true
      x-vue-show: true
      x-vue-getter: webhooks
      x-vue-section: settings
      x-vue-sort-by: name
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-ops:
        - Create
        - Update
    UpdateWebhookRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
        -
          required: []
          type: object
          properties:
            postToUrl:
              description: A URL to post the webhook to
              type: string
              example: 'http://www.my-domain.com/abcd'
            triggers:
              description: A list of event triggers
              type: array
              items:
                type: string
              example: >-
                -
                com.ziqni.transformers.domain.CLWebhookTriggers.TriggersByClassName.getOrElse
                - onNewProductTrigger.getClass.getSimpleName.replace
            description:
              description: The description of a Webhook
              type: string
              example: 'http://www.my-domain.com/abcd'
              x-vue-form-type: TEXTAREA
            name:
              description: The name of a Webhook
              type: string
              example: test
            headers:
              type: object
              additionalProperties:
                type: string
      x-vue-update: webhook
      x-vue-updater: webhooks
    CreateTransformerRequest:
      required:
        - name
        - sourceLanguage
      type: object
      properties:
        name:
          description: The name of the Transformer
          type: string
          example: Daily Login
        source:
          description: Source code
          type: string
          example: /** This is your source code **/
        sourceLanguage:
          $ref: '#/components/schemas/SourceLanguage'
      x-vue-create: transformer
      x-vue-creator: transformers
    UpdateTransformerRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          type: object
          properties:
            name:
              description: The name of the Transformer
              type: string
              example: Daily Login
            source:
              description: Source code
              type: string
              example: /** This is your source code **/
            sourceLanguage:
              $ref: '#/components/schemas/SourceLanguage'
      x-vue-update: transformer
      x-vue-updater: transformers
    UpdateActionTypeRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
        -
          required: []
          type: object
          properties:
            name:
              description: The name of the Action Helper
              type: string
              example: Big Win
            description:
              description: The description of the rule action helper for your reference
              type: string
              example: The action called Big Win
              x-vue-form-type: TEXTAREA
            addConstraints:
              description: 'Additional constraints, if the value is present it means the'
              type: array
              items:
                type: string
              example: '- system'
              x-vue-form-type: SELECT
              x-vue-formTypeOptionsParams: 'multiple: false'
              x-vue-formTypeOptions:
                - Normal
                - Notify
                - Severe
            removeConstraints:
              description: 'Additional constraints, if the value is present it means the'
              type: array
              items:
                type: string
              example: '- system    '
              x-vue-form-type: SELECT
              x-vue-formTypeOptionsParams: 'multiple: false'
              x-vue-formTypeOptions:
                - Normal
                - Notify
                - Severe
            unitOfMeasure:
              description: unit of measure id
              type: string
      example: {}
      x-vue-update: actionType
      x-vue-updater: actionTypes
    CustomField:
      description: Custom field model
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          required:
            - name
            - key
            - fieldType
            - appliesTo
          type: object
          properties:
            name:
              description: The name of a Custom field
              type: string
              example: Promotional field
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            key:
              description: The key of a Custom field
              type: string
              example: promotional-field
              x-vue-as-string: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1000
            description:
              description: The description of a Custom field
              type: string
              example: Promotional discount field (AD20) applied to Events
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1002
            fieldType:
              $ref: '#/components/schemas/FieldType'
            appliesTo:
              $ref: '#/components/schemas/AppliesTo'
            constraints:
              description: For example "required" to indicate the field is required.
              type: array
              items:
                type: string
      example:
        id: ziqniModelId
        name: some text
        key: some text
        description: some text
        fieldType: TextArray
        appliesTo: Repository
      x-vue-list: true
      x-vue-show: true
      x-vue-getter: customFields
      x-vue-section: settings
      x-vue-sort-by: name
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-ops:
        - Create
        - Update
    NotificationStatus:
      description: The status of the message
      enum:
        - New
        - Read
        - CollaborationRequest
        - Actioned
        - Claimed
        - Expired
        - Canceled
        - Deprecated
      type: string
    UpdateNotificationStatusRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          required: []
          type: object
          properties:
            status:
              $ref: '#/components/schemas/NotificationStatus'
    Award:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          required:
            - memberId
            - rewardId
            - rewardType
            - rewardRank
            - rewardValue
            - entityType
            - entityId
            - constraints
          type: object
          properties:
            memberId:
              description: A unique identifier of a Member
              type: string
              example: Dc4swmQBVd51K6gPQqFx
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
              x-vue-links-to: Member
            rewardId:
              description: A unique identifier of a Reward
              type: string
              example: Dc4swmQBVd51K6gPQqFx
              x-vue-search-field: true
              x-vue-disaply-order: 1001
              x-vue-links-to: Reward
            rewardType:
              $ref: '#/components/schemas/RewardTypeReduced'
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            rewardRank:
              description: >-
                If used in the context of contest this will associate with the rank of the
                leaderboard
              type: string
              example: '1'
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            rewardValue:
              format: double
              description: Numerical value of the reward that will be issued based on the reward type
              type: number
              example: '1'
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            delay:
              format: int32
              description: Delay of issuing a reward in minutes
              type: integer
              example: '2'
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            entityType:
              $ref: '#/components/schemas/EntityType'
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            entityId:
              description: >-
                The Id of the contest or achievement related to this Award. Dependant on
                entityType
              type: string
              example: Dc4swmQBVd51K6gPQqFx
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            pointInTime:
              format: date-time
              description: >-
                ISO8601 timestamp for when an Award is available until a specific point in
                time. All records are stored in UTC time zone. * There can only be one time
                definition used for claim period either "pointInTime" or "period"
              type: string
              example: '2019-09-25T15:47:00.000+0000'
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            period:
              format: int32
              description: >-
                Claimable duration in minutes, this value will set the controls until when the
                award is claimable. * There can only be one time definition used for claim
                period either "pointInTime" or "period"
              type: integer
              example: '2'
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            tags:
              description: A list of Strings of groups that the reward belongs to.
              type: array
              items:
                type: string
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
              x-vue-tags: true
            metadata:
              type: object
              additionalProperties:
                type: string
              x-vue-search-field: true
              x-vue-disaply-order: 1001
              x-vue-metadata: true
            constraints:
              description: 'Additional constraints, if the value is present it means the'
              type: array
              items:
                type: string
              example: |-
                - notifyMember 
                - acknowledgementRequired
                - claimed
              x-vue-search-field: true
              x-vue-disaply-order: 1001
              x-vue-constraint: true
            claimedTimestamp:
              format: date-time
              description: >-
                ISO8601 timestamp for when an Award is claimed. All records are stored in UTC
                time zone. *
              type: string
              example: '2019-09-25T15:47:00.000+0000'
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            memberRefId:
              description: ''
              type: string
      x-vue-list: true
      x-vue-show: true
      x-vue-getter: awards
      x-vue-sort-by: name
      x-vue-sort-order: Asc
      x-vue-limit: 10
    Translation:
      description: Translations to attach to the models.
      required:
        - translations
        - id
        - accountId
        - entityId
        - entityType
        - version
        - created
        - languageKey
      type: object
      properties:
        id:
          description: ''
          type: string
          x-vue-search-field: true
          x-vue-disaply-order: 1000
        accountId:
          description: ''
          type: string
          x-vue-hidden: true
          x-vue-disaply-order: 1100
        entityId:
          description: ''
          type: string
          x-vue-search-all: true
          x-vue-search-field: true
          x-vue-disaply-order: 1003
        entityType:
          description: ''
          type: string
          x-vue-as-string: true
          x-vue-search-all: true
          x-vue-search-field: true
          x-vue-disaply-order: 1004
        version:
          format: int64
          description: ''
          type: integer
          x-vue-disaply-order: 1099
        created:
          format: date-time
          description: date-time
          type: string
          x-vue-hidden: true
          x-vue-search-all: true
          x-vue-search-field: true
          x-vue-disaply-order: 1098
        translations:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/TranslationEntry'
          x-vue-hidden: true
          x-vue-search-all: true
          x-vue-search-field: true
          x-vue-disaply-order: 1005
        languageKey:
          description: ''
          type: string
          x-vue-as-string: true
          x-vue-search-all: true
          x-vue-search-field: true
          x-vue-disaply-order: 1001
      x-vue-list: true
      x-vue-show: true
      x-vue-getter: translations
      x-vue-sort-by: languageKey
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-ops:
        - Update
    Rule:
      required:
        - entityId
        - action
        - context
        - id
        - rules
        - entityType
      type: object
      properties:
        entityId:
          description: The id of the context object this rule refers to
          type: string
        action:
          description: 'The action this rule describes, like start.contest, or points.awarded'
          type: string
        context:
          description: 'The context of this rule like achievement, competition, or contest '
          type: string
        rules:
          $ref: '#/components/schemas/RuleExpression'
          description: The conditional expressions that make up this rule
        id:
          description: Unique system identifier of a Main Rule
          type: string
          readOnly: true
          example: Dc4swmQBVd51K6gPQqFx
        entityType:
          description: 'Achievement, Competition, or Contest '
          type: string
      x-vue-list: true
      x-vue-show: true
      x-vue-getter: tags
      x-vue-section: hidden
      x-vue-sort-by: id
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-ops:
        - Update
    ComputeEngineResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/ComputeEngine'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    ComputeEngine:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - name
            - description
          type: object
          properties:
            description:
              type: string
            version:
              format: int64
              type: integer
            name:
              type: string
            uptime:
              format: int64
              description: Long
              type: integer
            constraints:
              type: array
              items:
                type: string
            statistics:
              type: object
              additionalProperties:
                type: string
            lastKnownStatusCode:
              format: int32
              description: ''
              type: integer
    CreateComputeEngineRequest:
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - constraints
            - role
          type: object
          properties:
            description:
              type: string
            version:
              format: int64
              type: integer
            name:
              type: string
            uptime:
              format: int64
              description: Long
              type: integer
            constraints:
              type: array
              items:
                type: string
            statistics:
              description: ''
              type: object
              additionalProperties:
                type: string
            lastKnownStatusCode:
              format: int32
              description: ''
              type: integer
            metadata:
              description: ''
              type: object
              additionalProperties:
                type: string
    UpdateComputeEngineRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
        -
          required: []
          type: object
          properties:
            description:
              type: string
            version:
              format: int64
              type: integer
            name:
              type: string
            uptime:
              format: int64
              description: Long
              type: integer
            statistics:
              description: ''
              type: object
              additionalProperties:
                type: string
            lastKnownStatusCode:
              format: int32
              description: ''
              type: integer
            metadata:
              description: ''
              type: object
              additionalProperties:
                type: string
            addConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- active - default'
            removeConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- active - default'
    UpdateApiKeyRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
        -
          required: []
          type: object
          properties:
            description:
              description: The description of an Api key
              type: string
              example: User api key
            whiteListIPs:
              description: the IP's that need to be whitelisted with the Api key
              type: array
              items:
                type: string
              example:
                - 123.221.22.1
                - 333.224.34.1
              x-vue-form-type: TEXTAREA
            key:
              description: An Api key hash
              type: string
              readOnly: true
              example: UUID.randomUUID.toString.replace
            role:
              $ref: '#/components/schemas/Role'
            addConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- active - default'
              x-vue-formTypeOptionsParams: 'multiple: true'
            removeConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- active - default'
              x-vue-form-type: SELECT
              x-vue-formTypeOptionsParams: 'multiple: true'
      x-vue-update: apiKey
      x-vue-updater: apiKeys
    Languages:
      required:
        - key
        - name
      type: object
      properties:
        key:
          description: The key of a language
          type: string
          example: ar-JO
          x-vue-disaply-order: 1002
          x-vue-search-all: true
          x-vue-search-field: true
        name:
          description: >-
            The key of a language * "aa" -> "Afar", * "ab" -> "Abkhazian", * "ace" -> "Achinese",
            * "ach" -> "Acoli", * "ada" -> "Adangme", * "ady" -> "Adyghe", * "ae" -> "Avestan", *
            "aeb" -> "Tunisian Arabic", * "af" -> "Afrikaans", * "afh" -> "Afrihili", * "agq" ->
            "Aghem", * "ain" -> "Ainu", * "ak" -> "Akan", * "akk" -> "Akkadian", * "akz" ->
            "Alabama", * "ale" -> "Aleut", * "aln" -> "Gheg Albanian", * "alt" -> "Southern
            Altai", * "am" -> "Amharic", * "an" -> "Aragonese", * "ang" -> "Old English", * "anp"
            -> "Angika", * "ar" -> "Arabic", * "ar-DZ" -> "Arabic (Algeria)", * "ar-BH" -> "Arabic
            (Bahrain)", * "ar-EG" -> "Arabic (Egypt)", * "ar-IQ" -> "Arabic (Iraq)", * "ar-JO" ->
            "Arabic (Jordan)", * "ar-KW" -> "Arabic (Kuwait)", * "ar-LB" -> "Arabic (Lebanon)", *
            "ar-LY" -> "Arabic (Libya)", * "ar-MA" -> "Arabic (Morocco)", * "ar-OM" -> "Arabic
            (Oman)", * "ar-QA" -> "Arabic (Qatar)", * "ar-SA" -> "Arabic (Saudi Arabia)", *
            "ar-SY" -> "Arabic (Syria)", * "ar-TN" -> "Arabic (Tunisia)", * "ar-AE" -> "Arabic
            (U.A.E.)", * "ar-YE" -> "Arabic (Yemen)", * "ar-001" -> "Modern Standard Arabic", *
            "arc" -> "Aramaic", * "arn" -> "Mapuche", * "aro" -> "Araona", * "arp" -> "Arapaho", *
            "arq" -> "Algerian Arabic", * "ars" -> "Najdi Arabic", * "arw" -> "Arawak", * "ary" ->
            "Moroccan Arabic", * "arz" -> "Egyptian Arabic", * "as" -> "Assamese", * "asa" ->
            "Asu", * "ase" -> "American Sign Language", * "ast" -> "Asturian", * "av" -> "Avaric",
            * "avk" -> "Kotava", * "awa" -> "Awadhi", * "ay" -> "Aymara", * "az" -> "Azerbaijani",
            * "ba" -> "Bashkir", * "bal" -> "Baluchi", * "ban" -> "Balinese", * "bar" ->
            "Bavarian", * "bas" -> "Basaa", * "bax" -> "Bamun", * "bbc" -> "Batak Toba", * "bbj"
            -> "Ghomala", * "be" -> "Belarusian", * "bej" -> "Beja", * "bem" -> "Bemba", * "bew"
            -> "Betawi", * "bez" -> "Bena", * "bfd" -> "Bafut", * "bfq" -> "Badaga", * "bg" ->
            "Bulgarian", * "bgn" -> "Western Balochi", * "bho" -> "Bhojpuri", * "bi" -> "Bislama",
            * "bik" -> "Bikol", * "bin" -> "Bini", * "bjn" -> "Banjar", * "bkm" -> "Kom", * "bla"
            -> "Siksika", * "bm" -> "Bambara", * "bn" -> "Bangla", * "bo" -> "Tibetan", * "bpy" ->
            "Bishnupriya", * "bqi" -> "Bakhtiari", * "br" -> "Breton", * "bra" -> "Braj", * "brh"
            -> "Brahui", * "brx" -> "Bodo", * "bs" -> "Bosnian", * "bss" -> "Akoose", * "bua" ->
            "Buriat", * "bug" -> "Buginese", * "bum" -> "Bulu", * "byn" -> "Blin", * "byv" ->
            "Medumba", * "ca" -> "Catalan", * "cad" -> "Caddo", * "car" -> "Carib", * "cay" ->
            "Cayuga", * "cch" -> "Atsam", * "ccp" -> "Chakma", * "ce" -> "Chechen", * "ceb" ->
            "Cebuano", * "cgg" -> "Chiga", * "ch" -> "Chamorro", * "chb" -> "Chibcha", * "chg" ->
            "Chagatai", * "chk" -> "Chuukese", * "chm" -> "Mari", * "chn" -> "Chinook Jargon", *
            "cho" -> "Choctaw", * "chp" -> "Chipewyan", * "chr" -> "Cherokee", * "chy" ->
            "Cheyenne", * "ckb" -> "Central Kurdish", * "co" -> "Corsican", * "cop" -> "Coptic", *
            "cps" -> "Capiznon", * "cr" -> "Cree", * "crh" -> "Crimean Turkish", * "crs" ->
            "Seselwa Creole French", * "cs" -> "Czech", * "csb" -> "Kashubian", * "cu" -> "Church
            Slavic", * "cv" -> "Chuvash", * "cy" -> "Welsh", * "da" -> "Danish", * "dak" ->
            "Dakota", * "dar" -> "Dargwa", * "dav" -> "Taita", * "de" -> "German", * "de-at" ->
            "German (Austria)", * "de-de" -> "German (Germany)", * "de-li" -> "German
            (Liechtenstein)", * "de-lu" -> "German (Luxembourg)", * "de-ch" -> "German
            (Switzerland)", * "del" -> "Delaware", * "den" -> "Slave", * "dgr" -> "Dogrib", *
            "din" -> "Dinka", * "dje" -> "Zarma", * "doi" -> "Dogri", * "dsb" -> "Lower Sorbian",
            * "dtp" -> "Central Dusun", * "dua" -> "Duala", * "dum" -> "Middle Dutch", * "dv" ->
            "Divehi", * "dyo" -> "Jola-Fonyi", * "dyu" -> "Dyula", * "dz" -> "Dzongkha", * "dzg"
            -> "Dazaga", * "ebu" -> "Embu", * "ee" -> "Ewe", * "efi" -> "Efik", * "egl" ->
            "Emilian", * "egy" -> "Ancient Egyptian", * "eka" -> "Ekajuk", * "el" -> "Greek", *
            "elx" -> "Elamite", * "en" -> "English", * "en-AU" -> "English (Australia)", * "en-BZ"
            -> "English (Belize)", * "en-CA" -> "English (Canada)", * "en-IE" -> "English
            (Ireland)", * "en-JM" -> "English (Jamaica)", * "en-NZ" -> "English (New Zealand)", *
            "en-PH" -> "English (Philippines)", * "en-ZA" -> "English (South Africa)", * "en-TT"
            -> "English (Trinidad & Tobago)", * "en-GB" -> "English (United Kingdom)", * "en-US"
            -> "English (United States)", * "en-ZW" -> "English (Zimbabwe)", * "enm" -> "Middle
            English", * "eo" -> "Esperanto", * "es" -> "Spanish", * "es-419" -> "Latin American
            Spanish", * "es-ES" -> "European Spanish", * "es-MX" -> "Mexican Spanish", * "es-PE"
            -> "Spanish Peru", * "es-NI" -> "Spanish Nicaragua", * "es-PA" -> "Spanish Panama", *
            "es-PR" -> "Spanish Puerto Rico", * "es-PY" -> "Spanish Paraguay", * "es-SV" ->
            "Spanish El Salvador", * "es-UY" -> "Spanish Uruguay", * "es-VE" -> "Spanish
            Venezuela", * "esu" -> "Central Yupik", * "et" -> "Estonian", * "eu" -> "Basque", *
            "ewo" -> "Ewondo", * "ext" -> "Extremaduran", * "fa" -> "Persian", * "fa-AF" ->
            "Dari", * "fan" -> "Fang", * "fat" -> "Fanti", * "ff" -> "Fulah", * "fi" -> "Finnish",
            * "fil" -> "Filipino", * "fit" -> "Tornedalen Finnish", * "fj" -> "Fijian", * "fo" ->
            "Faroese", * "fon" -> "Fon", * "fr" -> "French", * "fr-BE" -> "French (Belgium)", *
            "fr-CA" -> "French (Canada)", * "fr-FR" -> "French (France)", * "fr-LU" -> "French
            (Luxembourg)", * "fr-MC" -> "French (Monaco)", * "fr-CH" -> "French (Switzerland)", *
            "frc" -> "Cajun French", * "frm" -> "Middle French", * "fro" -> "Old French", * "frp"
            -> "Arpitan", * "frr" -> "Northern Frisian", * "frs" -> "Eastern Frisian", * "fur" ->
            "Friulian", * "fy" -> "Western Frisian", * "ga" -> "Irish", * "gaa" -> "Ga", * "gag"
            -> "Gagauz", * "gan" -> "Gan Chinese", * "gay" -> "Gayo", * "gba" -> "Gbaya", * "gbz"
            -> "Zoroastrian Dari", * "gd" -> "Gaelic (Scottish)", * "gd-IE" -> "Gaelic (Irish)", *
            "gez" -> "Geez", * "gil" -> "Gilbertese", * "gl" -> "Galician", * "glk" -> "Gilaki", *
            "gmh" -> "Middle High German", * "gn" -> "Guarani", * "goh" -> "Old High German", *
            "gom" -> "Goan Konkani", * "gon" -> "Gondi", * "gor" -> "Gorontalo", * "got" ->
            "Gothic", * "grb" -> "Grebo", * "grc" -> "Ancient Greek", * "gsw" -> "Swiss German", *
            "gu" -> "Gujarati", * "guc" -> "Wayuu", * "gur" -> "Frafra", * "guz" -> "Gusii", *
            "gv" -> "Manx", * "gwi" -> "Gwichʼin", * "ha" -> "Hausa", * "hai" -> "Haida", * "hak"
            -> "Hakka Chinese", * "haw" -> "Hawaiian", * "he" -> "Hebrew", * "hi" -> "Hindi", *
            "hif" -> "Fiji Hindi", * "hil" -> "Hiligaynon", * "hit" -> "Hittite", * "hmn" ->
            "Hmong", * "ho" -> "Hiri Motu", * "hr" -> "Croatian", * "hsb" -> "Upper Sorbian", *
            "hsn" -> "Xiang Chinese", * "ht" -> "Haitian Creole", * "hu" -> "Hungarian", * "hup"
            -> "Hupa", * "hy" -> "Armenian", * "hz" -> "Herero", * "ia" -> "Interlingua", * "iba"
            -> "Iban", * "ibb" -> "Ibibio", * "id" -> "Indonesian", * "ie" -> "Interlingue", *
            "ig" -> "Igbo", * "ii" -> "Sichuan Yi", * "ik" -> "Inupiaq", * "ilo" -> "Iloko", *
            "inh" -> "Ingush", * "io" -> "Ido", * "is" -> "Icelandic", * "it" -> "Italian", * "iu"
            -> "Inuktitut", * "izh" -> "Ingrian", * "ja" -> "Japanese", * "jam" -> "Jamaican
            Creole English", * "jbo" -> "Lojban", * "jgo" -> "Ngomba", * "jmc" -> "Machame", *
            "jpr" -> "Judeo-Persian", * "jrb" -> "Judeo-Arabic", * "jut" -> "Jutish", * "jv" ->
            "Javanese", * "ka" -> "Georgian", * "kaa" -> "Kara-Kalpak", * "kab" -> "Kabyle", *
            "kac" -> "Kachin", * "kaj" -> "Jju", * "kam" -> "Kamba", * "kaw" -> "Kawi", * "kbd" ->
            "Kabardian", * "kbl" -> "Kanembu", * "kcg" -> "Tyap", * "kde" -> "Makonde", * "kea" ->
            "Kabuverdianu", * "ken" -> "Kenyang", * "kfo" -> "Koro", * "kg" -> "Kongo", * "kgp" ->
            "Kaingang", * "kha" -> "Khasi", * "kho" -> "Khotanese", * "khq" -> "Koyra Chiini", *
            "khw" -> "Khowar", * "ki" -> "Kikuyu", * "kiu" -> "Kirmanjki", * "kj" -> "Kuanyama", *
            "kk" -> "Kazakh", * "kkj" -> "Kako", * "kl" -> "Kalaallisut", * "kln" -> "Kalenjin", *
            "km" -> "Khmer", * "kmb" -> "Kimbundu", * "kn" -> "Kannada", * "ko" -> "Korean", *
            "koi" -> "Komi-Permyak", * "kok" -> "Konkani", * "kos" -> "Kosraean", * "kpe" ->
            "Kpelle", * "kr" -> "Kanuri", * "krc" -> "Karachay-Balkar", * "kri" -> "Krio", * "krj"
            -> "Kinaray-a", * "krl" -> "Karelian", * "kru" -> "Kurukh", * "ks" -> "Kashmiri", *
            "ksb" -> "Shambala", * "ksf" -> "Bafia", * "ksh" -> "Colognian", * "ku" -> "Kurdish",
            * "kum" -> "Kumyk", * "kut" -> "Kutenai", * "kv" -> "Komi", * "kw" -> "Cornish", *
            "ky" -> "Kyrgyz", * "la" -> "Latin", * "lad" -> "Ladino", * "lag" -> "Langi", * "lah"
            -> "Lahnda", * "lam" -> "Lamba", * "lb" -> "Luxembourgish", * "lez" -> "Lezghian", *
            "lfn" -> "Lingua Franca Nova", * "lg" -> "Ganda", * "li" -> "Limburgish", * "lij" ->
            "Ligurian", * "liv" -> "Livonian", * "lkt" -> "Lakota", * "lmo" -> "Lombard", * "ln"
            -> "Lingala", * "lo" -> "Lao", * "lol" -> "Mongo", * "lou" -> "Louisiana Creole", *
            "loz" -> "Lozi", * "lrc" -> "Northern Luri", * "lt" -> "Lithuanian", * "ltg" ->
            "Latgalian", * "lu" -> "Luba-Katanga", * "lua" -> "Luba-Lulua", * "lui" -> "Luiseno",
            * "lun" -> "Lunda", * "luo" -> "Luo", * "lus" -> "Mizo", * "luy" -> "Luyia", * "lv" ->
            "Latvian", * "lzh" -> "Literary Chinese", * "lzz" -> "Laz", * "mad" -> "Madurese", *
            "maf" -> "Mafa", * "mag" -> "Magahi", * "mai" -> "Maithili", * "mak" -> "Makasar", *
            "man" -> "Mandingo", * "mas" -> "Masai", * "mde" -> "Maba", * "mdf" -> "Moksha", *
            "mdr" -> "Mandar", * "men" -> "Mende", * "mer" -> "Meru", * "mfe" -> "Morisyen", *
            "mg" -> "Malagasy", * "mga" -> "Middle Irish", * "mgh" -> "Makhuwa-Meetto", * "mgo" ->
            "Metaʼ", * "mh" -> "Marshallese", * "mi" -> "Maori", * "mic" -> "Mi'kmaq", * "min" ->
            "Minangkabau", * "mk" -> "Macedonian", * "ml" -> "Malayalam", * "mn" -> "Mongolian", *
            "mnc" -> "Manchu", * "mni" -> "Manipuri", * "moh" -> "Mohawk", * "mos" -> "Mossi", *
            "mr" -> "Marathi", * "mrj" -> "Western Mari", * "ms" -> "Malay", * "mt" -> "Maltese",
            * "mua" -> "Mundang", * "mul" -> "Multiple languages", * "mus" -> "Creek", * "mwl" ->
            "Mirandese", * "mwr" -> "Marwari", * "mwv" -> "Mentawai", * "my" -> "Burmese", * "mye"
            -> "Myene", * "myv" -> "Erzya", * "mzn" -> "Mazanderani", * "na" -> "Nauru", * "nan"
            -> "Min Nan Chinese", * "nap" -> "Neapolitan", * "naq" -> "Nama", * "nb" -> "Norwegian
            Bokmål", * "nd" -> "North Ndebele", * "nds" -> "Low German", * "nds-NL" -> "Low
            Saxon", * "ne" -> "Nepali", * "new" -> "Newari", * "ng" -> "Ndonga", * "nia" ->
            "Nias", * "niu" -> "Niuean", * "njo" -> "Ao Naga", * "nl" -> "Dutch", * "nl-BE" ->
            "Dutch (Belgian)", * "nmg" -> "Kwasio", * "nn" -> "Norwegian Nynorsk", * "nnh" ->
            "Ngiemboon", * "no" -> "Norwegian", * "nog" -> "Nogai", * "non" -> "Old Norse", *
            "nov" -> "Novial", * "nqo" -> "N’Ko", * "nr" -> "South Ndebele", * "nso" -> "Northern
            Sotho", * "nus" -> "Nuer", * "nv" -> "Navajo", * "nwc" -> "Classical Newari", * "ny"
            -> "Nyanja", * "nym" -> "Nyamwezi", * "nyn" -> "Nyankole", * "nyo" -> "Nyoro", * "nzi"
            -> "Nzima", * "oc" -> "Occitan", * "oj" -> "Ojibwa", * "om" -> "Oromo", * "or" ->
            "Odia", * "os" -> "Ossetic", * "osa" -> "Osage", * "ota" -> "Ottoman Turkish", * "pa"
            -> "Punjabi", * "pag" -> "Pangasinan", * "pal" -> "Pahlavi", * "pam" -> "Pampanga", *
            "pap" -> "Papiamento", * "pau" -> "Palauan", * "pcd" -> "Picard", * "pcm" -> "Nigerian
            Pidgin", * "pdc" -> "Pennsylvania German", * "pdt" -> "Plautdietsch", * "peo" -> "Old
            Persian", * "pfl" -> "Palatine German", * "phn" -> "Phoenician", * "pi" -> "Pali", *
            "pl" -> "Polish", * "pms" -> "Piedmontese", * "pnt" -> "Pontic", * "pon" ->
            "Pohnpeian", * "prg" -> "Prussian", * "pro" -> "Old Provençal", * "ps" -> "Pashto", *
            "pt" -> "Portuguese", * "pt-BR" -> "Portuguese (Brazilian)", * "pt-PT" -> "Portuguese
            (European)", * "qu" -> "Quechua", * "quc" -> "Kʼicheʼ", * "qug" -> "Chimborazo
            Highland Quichua", * "raj" -> "Rajasthani", * "rap" -> "Rapanui", * "rar" ->
            "Rarotongan", * "rgn" -> "Romagnol", * "rif" -> "Riffian", * "rm" -> "Romansh", * "rn"
            -> "Rundi", * "ro" -> "Romanian", * "ro-MD" -> "Moldavian", * "rof" -> "Rombo", *
            "rom" -> "Romany", * "root" -> "Root", * "rtm" -> "Rotuman", * "ru" -> "Russian", *
            "rue" -> "Rusyn", * "rug" -> "Roviana", * "rup" -> "Aromanian", * "rw" ->
            "Kinyarwanda", * "rwk" -> "Rwa", * "sa" -> "Sanskrit", * "sad" -> "Sandawe", * "sah"
            -> "Sakha", * "sam" -> "Samaritan Aramaic", * "saq" -> "Samburu", * "sas" -> "Sasak",
            * "sat" -> "Santali", * "saz" -> "Saurashtra", * "sba" -> "Ngambay", * "sbp" ->
            "Sangu", * "sc" -> "Sardinian", * "scn" -> "Sicilian", * "sco" -> "Scots", * "sd" ->
            "Sindhi", * "sdc" -> "Sassarese Sardinian", * "sdh" -> "Southern Kurdish", * "se" ->
            "Northern Sami", * "see" -> "Seneca", * "seh" -> "Sena", * "sei" -> "Seri", * "sel" ->
            "Selkup", * "ses" -> "Koyraboro Senni", * "sg" -> "Sango", * "sga" -> "Old Irish", *
            "sgs" -> "Samogitian", * "sh" -> "Serbo-Croatian", * "shi" -> "Tachelhit", * "shn" ->
            "Shan", * "shu" -> "Chadian Arabic", * "si" -> "Sinhala", * "sid" -> "Sidamo", * "sk"
            -> "Slovak", * "sl" -> "Slovenian", * "sli" -> "Lower Silesian", * "sly" -> "Selayar",
            * "sm" -> "Samoan", * "sma" -> "Southern Sami", * "smj" -> "Lule Sami", * "smn" ->
            "Inari Sami", * "sms" -> "Skolt Sami", * "sn" -> "Shona", * "snk" -> "Soninke", * "so"
            -> "Somali", * "sog" -> "Sogdien", * "sq" -> "Albanian", * "sr" -> "Serbian", *
            "sr-ME" -> "Montenegrin", * "srn" -> "Sranan Tongo", * "srr" -> "Serer", * "ss" ->
            "Swati", * "ssy" -> "Saho", * "st" -> "Southern Sotho", * "stq" -> "Saterland
            Frisian", * "su" -> "Sundanese", * "suk" -> "Sukuma", * "sus" -> "Susu", * "sux" ->
            "Sumerian", * "sv" -> "Swedish", * "sw" -> "Swahili", * "sw-CD" -> "Congo Swahili", *
            "swb" -> "Comorian", * "syc" -> "Classical Syriac", * "syr" -> "Syriac", * "szl" ->
            "Silesian", * "ta" -> "Tamil", * "tcy" -> "Tulu", * "te" -> "Telugu", * "tem" ->
            "Timne", * "teo" -> "Teso", * "ter" -> "Tereno", * "tet" -> "Tetum", * "tg" ->
            "Tajik", * "th" -> "Thai", * "ti" -> "Tigrinya", * "tig" -> "Tigre", * "tiv" -> "Tiv",
            * "tk" -> "Turkmen", * "tkl" -> "Tokelau", * "tkr" -> "Tsakhur", * "tl" -> "Tagalog",
            * "tlh" -> "Klingon", * "tli" -> "Tlingit", * "tly" -> "Talysh", * "tmh" ->
            "Tamashek", * "tn" -> "Tswana", * "to" -> "Tongan", * "tog" -> "Nyasa Tonga", * "tpi"
            -> "Tok Pisin", * "tr" -> "Turkish", * "tru" -> "Turoyo", * "trv" -> "Taroko", * "ts"
            -> "Tsonga", * "tsd" -> "Tsakonian", * "tsi" -> "Tsimshian", * "tt" -> "Tatar", *
            "ttt" -> "Muslim Tat", * "tum" -> "Tumbuka", * "tvl" -> "Tuvalu", * "tw" -> "Twi", *
            "twq" -> "Tasawaq", * "ty" -> "Tahitian", * "tyv" -> "Tuvinian", * "tzm" -> "Central
            Atlas Tamazight", * "udm" -> "Udmurt", * "ug" -> "Uyghur", * "uga" -> "Ugaritic", *
            "uk" -> "Ukrainian", * "umb" -> "Umbundu", * "und" -> "Unknown language", * "ur" ->
            "Urdu", * "uz" -> "Uzbek", * "vai" -> "Vai", * "ve" -> "Venda", * "vec" -> "Venetian",
            * "vep" -> "Veps", * "vi" -> "Vietnamese", * "vls" -> "West Flemish", * "vmf" ->
            "Main-Franconian", * "vo" -> "Volapük", * "vot" -> "Votic", * "vro" -> "Võro", * "vun"
            -> "Vunjo", * "wa" -> "Walloon", * "wae" -> "Walser", * "wal" -> "Wolaytta", * "war"
            -> "Waray", * "was" -> "Washo", * "wbp" -> "Warlpiri", * "wo" -> "Wolof", * "wuu" ->
            "Wu Chinese", * "xal" -> "Kalmyk", * "xh" -> "Xhosa", * "xmf" -> "Mingrelian", * "xog"
            -> "Soga", * "yao" -> "Yao", * "yap" -> "Yapese", * "yav" -> "Yangben", * "ybb" ->
            "Yemba", * "yi" -> "Yiddish", * "yo" -> "Yoruba", * "yrl" -> "Nheengatu", * "yue" ->
            "Cantonese", * "za" -> "Zhuang", * "zap" -> "Zapotec", * "zbl" -> "Blissymbols", *
            "zea" -> "Zeelandic", * "zen" -> "Zenaga", * "zgh" -> "Standard Moroccan Tamazight", *
            "zh" -> "Chinese", * "zh-HK" -> "Chinese (Hong Kong)", * "zh-CN" -> "Chinese (PRC)", *
            "zh-SG" -> "Chinese (Singapore)", * "zh-TW" -> "Chinese (Taiwan)", * "zh-Hans" ->
            "Simplified Chinese", * "zh-Hant" -> "Traditional Chinese", * "zu" -> "Zulu", * "zun"
            -> "Zuni", * "zxx" -> "No linguistic content", * "zza" -> "Zaza"
          type: string
          example: Arabic (Jordan)
          x-vue-as-string: true
          x-vue-translatable: true
          x-vue-search-all: true
          x-vue-search-field: true
          x-vue-disaply-order: 1001
    AccountMessage:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - userId
            - messageType
            - subject
            - body
            - status
            - eventRefType
            - eventRefId
            - links
          type: object
          properties:
            expiry:
              format: date-time
              description: The time that the message will disappear after. ISO8601 timestamp
              type: string
              example: '2019-09-25T15:47:00.000+0000'
              x-vue-search-field: true
              x-vue-disaply-order: 1004
            eventRefType:
              $ref: '#/components/schemas/EventRefType'
              x-vue-disaply-order: 1003
            eventRefId:
              description: The reference ID of the event object
              type: string
              example: Dc4swmQBVd51K6gPQqFx
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            messageType:
              $ref: '#/components/schemas/MessageType'
              x-vue-disaply-order: 1003
            subject:
              description: The title of the message
              type: string
              example: Congratulations!
              x-vue-disaply-order: 1002
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-form-type: TEXTAREA
            body:
              description: The context of the message
              type: string
              example: You have won
              x-vue-disaply-order: 1003
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-form-type: TEXTAREA
            status:
              $ref: '#/components/schemas/MessageStatus'
              x-vue-disaply-order: 1003
            userId:
              type: string
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1000
            links:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/MessageLink'
      example:
        customFields: {}
        tags:
          - some text
          - some text
        metadata: {}
        id: someText
        spaceName: someText
        created: '2018-02-10T09:30Z'
        body: body
        eventRefId: eventRefId
      x-vue-list: true
      x-vue-show: true
      x-vue-getter: accountMessages
      x-vue-sort-by: name
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-ops:
        - Create
        - Update
    ActionType:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - name
            - key
            - unitOfMeasure
            - constraints
          type: object
          properties:
            name:
              description: The name of the Action Helper
              type: string
              example: Big Win
              x-vue-disaply-order: 1001
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-as-string: true
            key:
              description: A unique key that represents an action helper
              type: string
              example: big-win
              x-vue-disaply-order: 1002
              x-vue-search-all: true
              x-vue-search-field: true
            description:
              description: The description of the rule action helper for your reference
              type: string
              example: The action called Big Win
              x-vue-disaply-order: 1004
              x-vue-search-all: true
              x-vue-search-field: true
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: system
            unitOfMeasure:
              description: unit of measure id
              type: string
              x-vue-disaply-order: 1003
      example:
        id: ziqniModelId
        spaceName: ziqniSpaceName
        created: '2018-02-10T09:30Z'
        constraints: []
        description: Test Description
        key: test_ziqni_key
        name: Test name
        unitOfMeasure: ziqniModelId
        customFields: {}
        tags:
          - ziqniTag
          - ziqniTag1
        metadata: {}
      x-vue-getter: actionTypes
      x-vue-list: true
      x-vue-show: true
      x-vue-sort-by: name
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-ops:
        - Create
        - Update
      x-vue-section: settings
    CreateActionTypeRequest:
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - name
            - key
          type: object
          properties:
            name:
              description: The name of the Action Helper
              type: string
              example: Big Win
            key:
              description: A unique key that represents an action helper
              type: string
              example: big-win
              x-vue-form-type: 'NAMEKEY, showKey: true'
            description:
              description: The description of the rule action helper for your reference
              type: string
              example: The action called Big Win
              x-vue-form-type: TEXTAREA
            addConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- system'
              x-vue-form-type: SELECT
              x-vue-formTypeOptionsParams: 'multiple: false'
              x-vue-formTypeOptions:
                - Normal
                - Notify
                - Severe
            unitOfMeasure:
              description: The unit of measure id
              type: string
      example:
        description: Test Description
        key: test_key
        name: Test Name
        unitOfMeasure: ziqniModelId
        addConstraints: []
        customFields: {}
        tags:
          - ziqniTag
          - ziqniTag1
        metadata: {}
      x-vue-create: actionType
      x-vue-creator: actionTypes
    CreateRewardTypeRequest:
      description: This is a request for Reward Type creation
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - name
            - key
            - unitOfMeasure
          type: object
          properties:
            name:
              description: The name of the Reward type
              type: string
              example: Points
            description:
              description: The description of a reward type
              type: string
              example: Free spins
              x-vue-form-type: TEXTAREA
            key:
              description: A unique key that represents the reward type
              type: string
              example: free-spin-reward
              x-vue-form-type: 'NAMEKEY, showKey: true'
            translations:
              type: array
              items:
                $ref: '#/components/schemas/Translation'
            addConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- system'
            unitOfMeasure:
              type: string
      example:
        customFields:
          test_cf_termd65bcccf-d37f-441a-a96d-d0da55a77719:
            - 1
            - 2
        tags:
          - Test_key-7563406f-6983-4308-9422-91838fd40fe7
        metadata:
          fea089d7-f751-432e-8646-838c7769ab1e: f2dfff99-b766-414f-8e33-4d77aebbdb5e
        name: Test_name-b6f072c2-df68-4905-a4f6-c19246ff5dc8
        key: Test_key-2148168c-3a6c-48ba-b005-68a67a10aebc
        unitOfMeasure: ziqniModelId
        translations:
          -
            languageKey: csb
            translations:
              -
                fieldName: name
                text: test1
          -
            languageKey: den
            translations:
              -
                fieldName: name
                text: test-temp
          -
            languageKey: kmb
            translations:
              -
                fieldName: name
                text: Level-Up
        addConstraints:
          - system
      x-vue-create: rewardType
      x-vue-creator: rewardTypes
    UpdateRewardTypeRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
        -
          required: []
          type: object
          properties:
            name:
              description: The name of the Reward type
              type: string
              example: Points
              x-vue-as-string: true
              x-vue-translatable: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            description:
              description: The description of a reward type
              type: string
              example: Free spins
              x-vue-form-type: TEXTAREA
              x-vue-translatable: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1002
            addConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- system'
            removeConstraints:
              description: Remove constraints
              type: array
              items:
                type: string
              example: '- system'
            unitOfMeasure:
              type: string
      x-vue-update: rewardType
      x-vue-updater: rewardTypes
    CreateMemberMessageRequest:
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - eventRefType
            - eventReId
            - messageType
            - subject
            - body
            - status
            - links
          type: object
          properties:
            eventRefType:
              $ref: '#/components/schemas/EventRefType'
            eventRefId:
              description: The reference ID of the event object
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            messageType:
              $ref: '#/components/schemas/MessageType'
            subject:
              description: The title of the message
              type: string
              example: Hello and welcome
            body:
              description: The context of the message
              type: string
              example: Here is a message to welcome you on board!
              x-vue-form-type: TEXTAREA
            status:
              $ref: '#/components/schemas/MessageStatus'
            expireAfterDate:
              format: date-time
              description: >-
                Specify the expiry as a date after creation of the record. If expireAfterDays
                is specified then expireAfterDate should not be specified.
              type: string
            expireAfterDays:
              format: int32
              description: >-
                Specify the expiry in number of days after creation of the record. If
                expireAfterDate is specified then expireAfterDays should not be specified.
              type: integer
            links:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/MessageLink'
            memberIds:
              description: ''
              type: array
              items:
                type: string
            translations:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/Translation'
      x-vue-create: memberMessage
      x-vue-creator: memberMessages
    CreateTranslationRequest:
      description: Translations to attach to the models.
      required:
        - languageId
        - translations
        - entityId
        - entityType
        - languageKey
      type: object
      properties:
        entityId:
          description: ''
          type: string
        entityType:
          description: ''
          type: string
        translations:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/TranslationEntry'
          x-vue-hidden: true
        languageId:
          description: ''
          type: string
        languageKey:
          description: ''
          type: string
      x-vue-create: translation
      x-vue-creator: translations
    ModelDefault:
      required:
        - id
        - spaceName
        - created
      type: object
      properties:
        id:
          description: A unique system generated identifier
          type: string
          readOnly: false
          example: sc1samQmVr61KgaPQq7x
          x-vue-search-field: true
          x-vue-disaply-order: 2
          x-vue-sortable: true
        spaceName:
          description: This is the space name which is linked to the account
          type: string
          readOnly: false
          example: Your_space_name
          x-vue-hidden: true
          x-vue-disaply-order: 9000
          x-vue-sortable: true
        created:
          format: date-time
          description: >-
            ISO8601 timestamp for when a Model was created. All records are stored in UTC time
            zone
          type: string
          readOnly: false
          example: '2019-09-25T15:47:00.000+0000'
          x-vue-search-field: true
          x-vue-disaply-order: 9001
          x-vue-sortable: true
      example:
        id: someText
        spaceName: someText
        created: '2018-02-10T09:30Z'
    OptParamModels:
      type: object
      properties:
        customFields:
          type: object
          additionalProperties: true
          x-vue-table-getter: /** DO SOMETHING WITH CUSTOM FIELDS */
          x-vue-custom-fields: true
          x-vue-disaply-order: 5000
          x-vue-hidden: true
        tags:
          description: A list of id's used to tag models
          type: array
          items:
            type: string
          x-vue-tags: true
          x-vue-disaply-order: 1
          x-vue-sortable: true
        metadata:
          type: object
          additionalProperties:
            type: string
          x-vue-form-type: META
          x-vue-table-getter: getMetaData(item.metadata)
          x-vue-metadata: true
          x-vue-hidden: true
          x-vue-disaply-order: 10000
      example:
        customFields: {}
        tags:
          - some text
          - some text
        metadata: {}
    UpdateOptParamModels:
      type: object
      properties:
        customFields:
          description: A list of id's used to add cutom fields
          type: object
          additionalProperties: true
          x-vue-custom-fields: true
          x-vue-form-type: CUSTOM
        tags:
          description: A list of id's used to tag models
          type: array
          items:
            type: string
          example:
            - Dc4swmQBVd51K6gPQqFx
            - Dc4swmQBVd51K6gPQqF2
          x-vue-tags: true
          x-vue-form-type: TAG
        metadata:
          type: object
          additionalProperties:
            type: string
          x-vue-metadata: true
          x-vue-form-type: META
      example:
        id: 1
    MemberAward:
      description: This is the Member Award model
      allOf:
        -
          required:
            - rewardId
            - rewardTypeId
            - rewardType
            - rewardValue
            - constraints
            - entityType
            - entityId
          type: object
          properties:
            rewardId:
              description: A unique identifier of a Reward
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            rewardType:
              description: The type of the Reward
              type: string
              example: Free-spins
            rewardTypeId:
              description: A unique id of the Reward Type
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            rewardValue:
              format: double
              description: Numerical value of the reward that will be issued based on the reward type
              type: number
              example: '1'
            delay:
              format: int32
              description: Delay of issuing a reward in minutes
              type: integer
              example: '2'
            entityType:
              $ref: '#/components/schemas/EntityType'
            entityId:
              description: >-
                The Id of the contest or achievement related to this Award. Dependant on
                entityType
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            pointInTime:
              format: date-time
              description: >-
                ISO8601 timestamp for when an Award is available until a specific point in
                time. All records are stored in UTC time zone. * There can only be one time
                definition used for claim period either "pointInTime" or "period"
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            period:
              format: int32
              description: >-
                Claimable duration in minutes, this value will set the controls until when the
                award is claimable. * There can only be one time definition used for claim
                period either "pointInTime" or "period"
              type: integer
              example: '2'
            tags:
              description: A list of Strings of groups that the reward belongs to.
              type: array
              items:
                type: string
            metadata:
              type: object
              additionalProperties:
                type: string
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- memberAcknowledgmentRequired - claimed'
            claimedTimestamp:
              format: date-time
              description: >-
                ISO8601 timestamp for when an Award is claimed. All records are stored in UTC
                time zone. *
              type: string
              example: '2019-09-25T15:47:00.000+0000'
        -
          $ref: '#/components/schemas/ModelDefault'
      example:
        id: someText
        spaceName: someText
        created: '2018-02-10T09:30Z'
        rewardId: ziqniRewardModelId
        rewardType: ziqniRewardType
        rewardTypeId: ziqniRewardTypeModelId
        rewardValue: 200
        delay: 20
        entityType: Reward
        entityId: ziqniModelId
        pointInTime: '2019-09-25T15:47:00.000+0000'
        period: 2
        tags:
          - ziqniTagModelId
          - ziqniTagModelId
        constraints:
          - disabled
        metadata:
          key1: value1
          key2: value
        claimedTimestamp: '2018-02-10T09:30Z'
    FieldType:
      description: The data type of custom field
      enum:
        - Text
        - TextArray
        - Number
        - NumberArray
      type: string
      example: '"String"'
      x-enum-varnames:
        - Text
        - TextArray
        - Number
        - NumberArray
    ApiKey:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - constraints
            - role
            - key
          type: object
          properties:
            description:
              description: The description of an Api key
              type: string
              example: User api key
              x-vue-disaply-order: 1001
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-form-type: TEXTAREA
            whiteListIPs:
              description: the IP's that need to be whitelisted with the Api key
              type: array
              items:
                type: string
              example:
                - 123.221.22.1
                - 333.224.34.1
              x-vue-disaply-order: 1002
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-form-type: TEXTAREA
            key:
              description: An Api key hash
              type: string
              example: UUID.randomUUID.toString.replace
              x-vue-disaply-order: 1000
            role:
              $ref: '#/components/schemas/Role'
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: |-
                - active
                - default
              x-vue-disaply-order: 1003
              x-vue-search-field: true
              x-vue-search-postfix: .text
              x-vue-constraint: true
              x-vue-constraint-options:
                - active
                - default
      x-vue-search-field: true
      x-vue-getter: apiKeys
      x-vue-list: true
      x-vue-show: true
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-section: settings
      x-vue-ops:
        - Create
        - Update
    CompetitionStatus:
      description: The status of competition
      enum:
        - Unknown
        - Deleting
        - Deleted
        - Draft
        - Template
        - Preparing
        - Ready
        - Starting
        - Active
        - Finishing
        - Finished
        - Cancelling
        - Cancelled
        - Finalising
        - Finalised
      type: string
      readOnly: true
    ContestStatus:
      description: The status of contest
      enum:
        - Unknown
        - Deleting
        - Deleted
        - Draft
        - Template
        - Preparing
        - Ready
        - Starting
        - Active
        - Finishing
        - Finished
        - Cancelling
        - Cancelled
        - Finalising
        - Finalised
      type: string
      readOnly: true
    AchievementStatus:
      description: The status of achievement
      enum:
        - Unknown
        - Draft
        - Preparing
        - Ready
        - Starting
        - Active
        - Finishing
        - Finished
        - Template
        - Cancelling
        - Cancelled
        - Deleting
        - Deleted
      type: string
      readOnly: true
    UpdateTranslationRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          required:
            - translations
          type: object
          properties:
            entityId:
              description: ''
              type: string
            entityType:
              description: ''
              type: string
            languageId:
              description: ''
              type: string
            languageKey:
              description: ''
              type: string
            translations:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/TranslationEntry'
      example:
        -
          id: some test
          translations:
            fieldName: some text
            text: some text
        -
          id: some test
          translations:
            fieldName: some text
            text: some text
      x-vue-update: translation
      x-vue-updater: translations
    Tag:
      description: Tag model
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          required:
            - name
            - key
            - entityType
          type: object
          properties:
            name:
              description: The name of the tag
              type: string
              example: This is a group
              x-vue-hidden: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            key:
              description: A unique key that represents a tag
              type: string
              example: This_is_a_group
              x-vue-as-string: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1000
            description:
              description: The description of the tag for your reference
              type: string
              example: The group that has been called This is a group
              x-vue-hidden: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1002
            entityTypes:
              description: The model name the tag refers to
              type: array
              items:
                type: string
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1003
              x-vue-form-type: SELECT
            metadata:
              type: object
              additionalProperties:
                type: string
              x-vue-table-getter: getMetaData(item.metadata)
              x-vue-metadata: true
              x-vue-hidden: true
              x-vue-disaply-order: 10000
      example:
        id: ziqniModelId
        spaceName: ziqniSpaceName
        created: '2018-02-10T09:30Z'
        name: Test tag name
        key: test_tag_key
        description: test description
        metadata:
          key1: value1
          key2: value
        entityTypes:
          - Reward
          - Repository
      x-vue-list: true
      x-vue-show: true
      x-vue-getter: tags
      x-vue-section: settings
      x-vue-sort-by: name
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-ops:
        - Create
        - Update
    CreateApiKeyRequest:
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - role
          type: object
          properties:
            description:
              description: The description of an Api key
              type: string
              example: User api key
            whiteListIPs:
              description: the IP's that need to be whitelisted with the Api key
              type: array
              items:
                type: string
              example: '- 123.221.22.1 - 333.224.34.1'
            role:
              $ref: '#/components/schemas/Role'
            addConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- active - default                    '
              x-vue-formTypeOptionsParams: 'multiple: true'
      x-vue-create: apiKey
      x-vue-creator: apiKeys
    SaveTemplateRequest:
      description: 'Either the file [id] or the [parentFolderPath] + [filename] are mandatory fields.'
      allOf:
        -
          required:
            - file
            - templateToSave
            - repositoryId
            - templateName
          type: object
          properties:
            parentFolderPath:
              description: The folder to save these file in.
              type: string
              example: /achievement-icons
            repositoryId:
              description: ''
              type: string
            templateToSave:
              description: ''
              type: string
            templateName:
              description: ''
              type: string
            tags:
              description: ''
              type: string
    CloneCompetitionResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/CreateCompetitionRequest'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    TokenResponse:
      description: '        '
      required: []
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaBasic'
          description: ''
        data:
          $ref: '#/components/schemas/Token'
          description: ''
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          totalRecordsFound: 59
          skip: 93
          limit: 53
          time: '2018-02-10T09:30Z'
        data:
          -
            icon: some text
            jsonClass: some text
            name: some text
            description: some text
            termsAndConditions: some text
            constraints:
              - some text
              - some text
            maxNumberOfIssues: 44
            achievementLiveStatus: Live
            scheduling:
              scheduleType: Once
              scheduleOccurrencesLimit: 63
              every:
                - 2
                - 29
              startDate: '2018-02-10T09:30Z'
              endDate: '2018-02-10T09:30Z'
              constraints:
                - some text
                - some text
            dependantOn:
              entityType: some text
              dependantOn:
                must:
                  - some text
                  - some text
                mustNot:
                  - some text
                  - some text
                should:
                  - some text
                  - some text
                shouldMatchAtLeast: 8
          -
            icon: some text
            jsonClass: some text
            name: some text
            description: some text
            termsAndConditions: some text
            constraints:
              - some text
              - some text
            maxNumberOfIssues: 62
            achievementLiveStatus: Draft
            scheduling:
              scheduleType: Weekly
              scheduleOccurrencesLimit: 15
              every:
                - 36
                - 65
              startDate: '2018-02-10T09:30Z'
              endDate: '2018-02-10T09:30Z'
              constraints:
                - some text
                - some text
            dependantOn:
              entityType: some text
              dependantOn:
                must:
                  - some text
                  - some text
                mustNot:
                  - some text
                  - some text
                should:
                  - some text
                  - some text
                shouldMatchAtLeast: 18
        errors:
          -
            message: some text
            code: 61
            status: 75
          -
            message: some text
            code: 88
            status: 70
    Token:
      description: ''
      required:
        - jwtToken
      type: object
      properties:
        jwtToken:
          description: ''
          type: string
      example:
        jwtToken: some text
    MemberTokenRequest:
      description: ''
      required:
        - member
        - apiKey
        - resource
      type: object
      properties:
        apiKey:
          description: The API key to use to generate this token.
          type: string
        isReferenceId:
          description: >-
            Default is FALSE, if set to TRUE then the meberId will be assumed to be client
            provided reference id, if set to false then the memberId will be assumed to be a ZIQNI
            generated identifier.
          type: boolean
        origins:
          description: >
            Allowed origins for the generated token. Leave empty to permit all origins,
            Alternative provide up to 3 allowed origin URIs like https://my-space.api.ziqni.app
          type: array
          items:
            type: string
        member:
          description: >-
            The identifier used to find the member information. if this value is set to
            "__PUBLIC__" and isReferenceId is set to "FALSE" then a genral use, non-member
            specific token will be issued
          type: string
        expires:
          description: >-
            The number of minutes this token will be valid for. If left blank the token will only
            be valid for 30 minutes
          type: integer
        resource:
          description: This will be ziqni-gapi or similar
          type: string
        disabledServices:
          description: 'A list of services to be disabled for this web token '
          type: array
          items:
            type: string
        languageKey:
          description: 'The language code to use if none is provided in the member api requests '
          type: string
        currencyKey:
          description: The language key to use if none is provided in the member api requests
          type: string
        timeZoneOffset:
          description: The time zone to use when returning date and time values
          type: integer
      example:
        apiKey: some text
        isReferenceId: true
        origins:
          - some text
          - some text
        member: some text
        expires: 72
    Collaborator:
      allOf:
        -
          required:
            - email
          type: object
          properties:
            email:
              description: The email of the user to log in
              type: string
              example: abc@ziqni.com
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
              x-vue-as-string: true
            roles:
              description: The access role of an individual
              type: array
              items:
                type: string
              example: 'Administrator, Web, User etc'
              x-vue-hidden: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1004
            lastName:
              description: The Surname of an individual
              type: string
              example: Dough
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1003
            firstName:
              description: The Name of an individual
              type: string
              example: John
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1002
            availableRoles:
              $ref: '#/components/schemas/CollaboratorRolesAvailable'
              description: ''
              x-vue-hidden: true
              x-vue-disaply-order: 1005
            id:
              description: A unique system generated identifier
              type: string
              readOnly: false
              example: sc1samQmVr61KgaPQq7x
              x-vue-search-field: true
              x-vue-disaply-order: 2
              x-vue-sortable: true
            spaceName:
              description: This is the space name which is linked to the account
              type: string
              readOnly: false
              example: Your_space_name
              x-vue-hidden: true
              x-vue-disaply-order: 9000
              x-vue-sortable: true
      x-vue-list: true
      x-vue-show: true
      x-vue-getter: collaborators
      x-vue-section: settings
      x-vue-sort-by: lastName
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-ops:
        - Create
        - Update
    EntityStateChanged:
      description: ''
      required:
        - state
      type: object
      properties:
        entityId:
          description: ''
          type: string
        entityType:
          description: ''
          type: string
        changedAt:
          format: date-time
          description: ''
          type: string
        changedBy:
          description: ''
          type: string
        typeOffChange:
          format: int32
          description: ''
          type: integer
        displayName:
          description: ''
          type: string
        accountId:
          description: ''
          type: string
        sequenceNumber:
          format: int64
          description: ''
          type: integer
        entityRefId:
          description: ''
          type: string
        entityParentId:
          description: ''
          type: string
        metadata:
          type: object
        previousState:
          format: int32
          description: ''
          type: integer
        currentState:
          format: int32
          description: ''
          type: integer
    EntityChanged:
      description: ''
      required: []
      type: object
      properties:
        entityId:
          description: ''
          type: string
        entityType:
          description: ''
          type: string
        changedAt:
          format: date-time
          description: ''
          type: string
        changedBy:
          description: ''
          type: string
        typeOffChange:
          format: int32
          description: ''
          type: integer
        displayName:
          description: ''
          type: string
        accountId:
          description: ''
          type: string
        sequenceNumber:
          format: int64
          description: ''
          type: integer
        entityRefId:
          description: ''
          type: string
        entityParentId:
          description: ''
          type: string
        metadata:
          type: object
          additionalProperties: true
    SubscriptionTypes:
      description: ''
      required: []
      type: object
      properties:
        entityType:
          description: ''
          type: array
          items:
            type: string
    NotificationResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    NotificationMessage:
      anyOf:
        -
          type: object
        -
          $ref: '#/components/schemas/EntityChanged'
        -
          $ref: '#/components/schemas/EntityStateChanged'
        -
          $ref: '#/components/schemas/EntityChangeSubscription'
        -
          $ref: '#/components/schemas/EntityChangeSubscriptionResponse'
        -
          $ref: '#/components/schemas/SubscriptionTypes'
    EntityChangeSubscription:
      description: Subscribes a client to receive out-of-band data
      required:
        - entityTypes
        - subscriptionId
        - entityType
      type: object
      properties:
        entityType:
          description: ''
          type: string
        subscriptionId:
          description: ''
          type: string
        constraints:
          description: Constraints of this subscription like gauranteedDelivery
          type: array
          items:
            type: string
        topic:
          description: /user/queue/callbacks
          type: string
    EntityChangeSubscriptionRequest:
      description: ''
      required:
        - entityType
        - callback
        - action
      type: object
      properties:
        entityType:
          description: 'What you are subscribing to, like Competition, Contest, Member, Award etc.'
          type: string
        constraints:
          description: Constraints of this subscription.
          type: array
          items:
            type: string
        callback:
          description: >-
            The callback operation you are subscribing too. Like entityChanged or
            entityStateChanged
          type: string
        action:
          description: Either subscribe or unsubscribe from the data feed
          enum:
            - Subscribe
            - Unsubscribe
          type: string
    EntityChangeSubscriptionResponse:
      description: ''
      required:
        - subscriptions
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaBasic'
          description: ''
        data:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/EntityChangeSubscription'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example: 2531329f-fb09-4ef7-887e-84e648214436
    LeaderboardFilter:
      description: ''
      required:
        - topRanksToInclude
      type: object
      properties:
        topRanksToInclude:
          format: int32
          description: 'Include rank from one [1] to the rank specified here. The maximum allowed is 50'
          maximum: 50
          minimum: 1
          type: integer
        ranksAboveToInclude:
          format: int32
          description: Include ranks above member position. The maximum allowed is 20
          maximum: 20
          minimum: 0
          type: integer
        ranksBelowToInclude:
          format: int32
          description: Include ranks below member position. The maximum allowed is 20
          maximum: 20
          minimum: 0
          type: integer
    DataSetsValue:
      description: ''
      required:
        - label
        - labels
        - data
      type: object
      properties:
        label:
          description: Label of the data set
          type: string
        labels:
          description: Labels to reference data sets
          type: string
        data:
          description: The actual data points for the data set
          type: array
          items:
            type: string
      example:
        label: events_action_sourceValue_count (events_action_sourceValue_count)
        labels: events_action
        data:
          - 1578
          - 1578
    DataSets:
      description: >-
        This is a map of data sets. The keys for this map are the data set labels and values are
        complex object which consist of data to be populated.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/DataSetsValue'
        type: object
      example:
        events.action.points.count:
          label: events.action.points.count (events.action.points.count)
          labels: events.action
          data:
            - 7411162
            - 1712995
        events.1w.action.points.sum.win:
          label: win (events.1w.action.points.sum)
          labels: events.1w
          data:
            - 69969904
            - 131196466
            - 134481263
        events.action.points.sum:
          label: events.action.points.sum (events.action.points.sum)
          labels: events.action
          data:
            - 2161344920.35
            - 1073032576
        events.1w.action.sourceValue.sum.win:
          label: win (events.1w.action.sourceValue.sum)
          labels: events.1w
          data:
            - 69969904
            - 131196466
            - 134481263
        events.action.sourceValue.sum:
          label: events.action.sourceValue.sum (events.action.sourceValue.sum)
          labels: events.action
          data:
            - 2161344920.35
            - 1073032576
        events.1w.action.sourceValue.sum.bet:
          label: bet (events.1w.action.sourceValue.sum)
          labels: events.1w
          data:
            - 67705635
            - 136551165
            - 144638430
        events.action.sourceValue.count:
          label: events.action.sourceValue.count (events.action.sourceValue.count)
          labels: events.action
          data:
            - 7411162
            - 1712995
        events.1w.action.points.sum.bet:
          label: bet (events.1w.action.points.sum)
          labels: events.1w
          data:
            - 67705635
            - 136551165
            - 144638430
    DataSetsReference:
      description: The reference to the DataSets.
      required:
        - key
      type: object
      properties:
        style:
          description: The type of graph to inject the DataSets into.
          type: string
          example: line
        key:
          description: Data set values to retrive from DataSets map of the response.
          type: string
          example: events.1w.action.points.sum.bet
      example:
        style: line
        key: events.1w.action.points.sum.bet
    Labels:
      description: Labels for the charts as a map.
      type: object
      additionalProperties:
        description: Labels for charts.
        type: array
        items:
          type: string
        example:
          - '2020-04-27 00:00'
          - '2020-05-04 00:00'
      example:
        events.1w:
          - '2020-04-27 00:00'
          - '2020-05-04 00:00'
          - '2020-05-11 00:00'
          - '2020-05-18 00:00'
        events.action:
          - bet
          - win
    Modules:
      description: Various modules returned for rendering dashboard.
      required:
        - key
        - label
        - moduleType
        - order
        - dataSets
      type: object
      properties:
        key:
          description: Key of the chart.
          type: string
        label:
          description: Label for the chart.
          type: string
        moduleType:
          description: Type of chart to insert te data into.
          type: string
        order:
          description: Order at which the chart appears on the web page.
          type: string
        dataSets:
          description: >-
            Array of DataSets map reference keys. If style information is required for a specific
            chart type then it will be returned.
          type: array
          items:
            $ref: '#/components/schemas/DataSetsReference'
      example:
        key: my-line-1
        label: Sample Chart 1
        moduleType: bar
        order: '1'
        dataSets:
          -
            style: line
            key: events.1w.action.points.sum.bet
          -
            style: line
            key: events.1w.action.points.sum.win
          -
            style: line
            key: events.1w.action.sourceValue.sum.bet
          -
            style: line
            key: events.1w.action.sourceValue.sum.win
    Dashboard:
      description: The dashboard to be rendered.
      required:
        - dataSets
        - labels
        - modules
      type: object
      properties:
        dataSets:
          $ref: '#/components/schemas/DataSets'
          description: The datasets to render on dashboard.
        labels:
          $ref: '#/components/schemas/Labels'
          description: Label to use for the chart.
        modules:
          description: Modules to inject into the chart for rendering.
          type: array
          items:
            $ref: '#/components/schemas/Modules'
      example:
        dataSets:
          events.action.points.count:
            label: events.action.points.count (events.action.points.count)
            labels: events.action
            data:
              - 7411162
              - 1712995
          events.1w.action.points.sum.win:
            label: win (events.1w.action.points.sum)
            labels: events.1w
            data:
              - 69969904
              - 131196466
              - 134481263
          events.action.points.sum:
            label: events.action.points.sum (events.action.points.sum)
            labels: events.action
            data:
              - 2161344920.35
              - 1073032576
          events.1w.action.sourceValue.sum.win:
            label: win (events.1w.action.sourceValue.sum)
            labels: events.1w
            data:
              - 69969904
              - 131196466
              - 134481263
          events.action.sourceValue.sum:
            label: events.action.sourceValue.sum (events.action.sourceValue.sum)
            labels: events.action
            data:
              - 2161344920.35
              - 1073032576
          events.1w.action.sourceValue.sum.bet:
            label: bet (events.1w.action.sourceValue.sum)
            labels: events.1w
            data:
              - 67705635
              - 136551165
              - 144638430
          events.action.sourceValue.count:
            label: events.action.sourceValue.count (events.action.sourceValue.count)
            labels: events.action
            data:
              - 7411162
              - 1712995
          events.1w.action.points.sum.bet:
            label: bet (events.1w.action.points.sum)
            labels: events.1w
            data:
              - 67705635
              - 136551165
              - 144638430
        labels:
          events.1w:
            - '2020-04-27 00:00'
            - '2020-05-04 00:00'
            - '2020-05-11 00:00'
            - '2020-05-18 00:00'
          events.action:
            - bet
            - win
        modules:
          -
            key: my-line-1
            label: Sample Chart 1
            moduleType: bar
            order: '1'
            dataSets:
              -
                style: line
                key: events.1w.action.points.sum.bet
              -
                style: line
                key: events.1w.action.points.sum.win
              -
                style: line
                key: events.1w.action.sourceValue.sum.bet
              -
                style: line
                key: events.1w.action.sourceValue.sum.win
          -
            key: my-line-2
            label: Sample Chart 2
            moduleType: pie
            order: '2'
            dataSets:
              -
                key: events.action.points.count
              -
                key: events.action.sourceValue.count
              -
                key: events.action.points.sum
              -
                key: events.action.sourceValue.sum
    DashboardResponse:
      description: The dashboard response.
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
          description: Metadata associated with the response.
        results:
          description: Valid result as a part of the response.
          type: array
          items:
            $ref: '#/components/schemas/Dashboard'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          objectType: some text
          totalRecords: 26
          resultCount: 2
          errorCount: 0
          limit: 2
          skip: 0
        results:
          dataSets:
            events.action.points.count:
              label: events.action.points.count (events.action.points.count)
              labels: events.action
              data:
                - 7411162
                - 1712995
            events.1w.action.points.sum.win:
              label: win (events.1w.action.points.sum)
              labels: events.1w
              data:
                - 69969904
                - 131196466
                - 134481263
            events.action.points.sum:
              label: events.action.points.sum (events.action.points.sum)
              labels: events.action
              data:
                - 2161344920.35
                - 1073032576
            events.1w.action.sourceValue.sum.win:
              label: win (events.1w.action.sourceValue.sum)
              labels: events.1w
              data:
                - 69969904
                - 131196466
                - 134481263
            events.action.sourceValue.sum:
              label: events.action.sourceValue.sum (events.action.sourceValue.sum)
              labels: events.action
              data:
                - 2161344920.35
                - 1073032576
            events.1w.action.sourceValue.sum.bet:
              label: bet (events.1w.action.sourceValue.sum)
              labels: events.1w
              data:
                - 67705635
                - 136551165
                - 144638430
            events.action.sourceValue.count:
              label: events.action.sourceValue.count (events.action.sourceValue.count)
              labels: events.action
              data:
                - 7411162
                - 1712995
            events.1w.action.points.sum.bet:
              label: bet (events.1w.action.points.sum)
              labels: events.1w
              data:
                - 67705635
                - 136551165
                - 144638430
          labels:
            events.1w:
              - '2020-04-27 00:00'
              - '2020-05-04 00:00'
              - '2020-05-11 00:00'
              - '2020-05-18 00:00'
            events.action:
              - bet
              - win
          modules:
            -
              key: my-line-1
              label: Sample Chart 1
              moduleType: bar
              order: '1'
              dataSets:
                -
                  style: line
                  key: events.1w.action.points.sum.bet
                -
                  style: line
                  key: events.1w.action.points.sum.win
                -
                  style: line
                  key: events.1w.action.sourceValue.sum.bet
                -
                  style: line
                  key: events.1w.action.sourceValue.sum.win
            -
              key: my-line-2
              label: Sample Chart 2
              moduleType: pie
              order: '2'
              dataSets:
                -
                  key: events.action.points.count
                -
                  key: events.action.sourceValue.count
                -
                  key: events.action.points.sum
                -
                  key: events.action.sourceValue.sum
        errors:
          -
            modelId: some text
            errorCode: 23
            message: some text
            detail:
              -
                modelId: some text
                errorCode: 52
                message: some text
              -
                modelId: some text
                errorCode: 19
                message: some text
          -
            modelId: some text
            errorCode: 58
            message: some text
            detail:
              -
                modelId: some text
                errorCode: 53
                message: some text
              -
                modelId: some text
                errorCode: 22
                message: some text
    MessageLink:
      description: ''
      required:
        - entityId
        - entityType
        - linkType
      type: object
      properties:
        entityId:
          description: The identifier of the entity
          type: string
        entityType:
          description: 'The type of entity the link refers to like Award or Achievement, Contest, etc'
          type: string
        linkType:
          description: 'The type of link, relatesTo, refersTo, describes'
          type: string
    CreateNotificationRequest:
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - messageType
            - subject
            - body
            - status
            - scheduling
            - constraints
          type: object
          properties:
            messageType:
              $ref: '#/components/schemas/MessageType'
            subject:
              description: The title of the message
              type: string
              example: Hello and welcome
            body:
              description: The context of the message
              type: string
              example: Here is a message to welcome you on board!
            status:
              $ref: '#/components/schemas/MessageStatus'
              example: |-
                New,
                Read,
                Actioned,
                Claimed,
                Expired,
                Cancelled,
                Deprecated
            translations:
              type: array
              items:
                $ref: '#/components/schemas/Translation'
            scheduling:
              $ref: '#/components/schemas/Scheduling'
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- deprecated'
            memberTags:
              description: ''
              type: array
              items:
                type: string
            memberIds:
              description: ''
              type: array
              items:
                type: string
            expireAfterDate:
              format: date-time
              description: >-
                Specify the expiry as a date after creation of the record. If expireAfterDays
                is specified then expireAfterDate should not be specified.
              type: string
            expireAfterDays:
              format: int32
              description: >-
                Specify the expiry in number of days after creation of the record. If
                expireAfterDate is specified then expireAfterDays should not be specified.
              type: integer
    Connection:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - user
            - name
            - constraints
            - secret
            - lastKnownStatus
            - lastKnownStatusCode
            - transformerId
          type: object
          properties:
            name:
              description: The name of the consumer
              type: string
              example: RabbitMq Test
            description:
              description: The description of the consumer
              type: string
              example: RabbitMq Test
            lastKnownStatus:
              description: Last known status of the connection
              type: string
              example: Stopped
            lastKnownStatusCode:
              description: Status code correspoding to the last known status
              type: integer
              example: '0'
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- useSsl'
            transformerId:
              description: 'The transformer to use, if empty the default system transformer will be used'
              type: string
            connectionType:
              $ref: '#/components/schemas/ConnectionType'
              description: The type of connection
            secret:
              description: Consumer secret used for authentication
              type: string
              example: SomePassword
            user:
              description: Consumer username for authentication
              type: string
              example: testUser
      x-vue-route:
        - settings
    ObjectParametersResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/ObjectParameters'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    ObjectConstraint:
      description: ''
      required:
        - name
        - key
      type: object
      properties:
        name:
          description: ''
          type: string
        key:
          description: ''
          type: string
    ObjectParameters:
      description: ''
      required:
        - userConstraints
        - customFields
        - objectType
        - systemConstraints
      type: object
      properties:
        customFields:
          description: Custom fields for this object
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        objectType:
          $ref: '#/components/schemas/AppliesTo'
          description: The type of the object
        objectSubType:
          description: The sub type of the object
          type: string
        userConstraints:
          description: Valid contraints for this object type that the user can set and unset
          type: array
          items:
            $ref: '#/components/schemas/ObjectConstraint'
        systemConstraints:
          description: System contraints that the user connot modify
          type: array
          items:
            $ref: '#/components/schemas/ObjectConstraint'
    UpdateConnectionRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          type: object
          properties:
            name:
              description: The name of the consumer
              type: string
              example: RabbitMq Test
            description:
              description: The description of the consumer
              type: string
              example: RabbitMq Test
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
            transformerId:
              description: 'The transformer to use, if empty the default system transformer will be used'
              type: string
            connectionType:
              $ref: '#/components/schemas/ConnectionType'
              description: The type of connection
            secret:
              description: Consumer secret used for authentication
              type: string
              example: SomePassword
            user:
              description: Consumer username for authentication
              type: string
              example: testUser
    CreateConnectionRequest:
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - name
            - connectionType
          type: object
          properties:
            name:
              description: The name of the consumer
              type: string
              example: RabbitMq Test
            description:
              description: The description of the consumer
              type: string
              example: RabbitMq Test
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
            transformerId:
              description: 'The transformer to use, if empty the default system transformer will be used'
              type: string
            connectionType:
              $ref: '#/components/schemas/ConnectionType'
              description: The type of connection
            secret:
              description: Consumer secret used for authentication
              type: string
              example: SomePassword
            user:
              description: Consumer username for authentication
              type: string
              example: testUser
    LeaderboardResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Leaderboard'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    LogEvent:
      required:
        - accountId
        - created
        - hostName
        - id
        - logLevel
        - message
        - privateIpAddress
        - serverType
        - stackTrace
        - entityId
        - entityType
      type: object
      properties:
        accountId:
          type: string
        logLevel:
          type: string
        message:
          type: string
        hostName:
          type: string
        created:
          format: date-time
          description: date-time
          type: string
        serverType:
          type: string
        id:
          type: string
        stackTrace:
          type: string
        privateIpAddress:
          type: string
        version:
          format: int64
          type: integer
        entityId:
          description: ''
          type: string
        entityType:
          description: ''
          type: string
    LogEventResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/LogEvent'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    Notification:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - messageType
            - subject
            - body
            - status
            - scheduling
            - constraints
          type: object
          properties:
            messageType:
              $ref: '#/components/schemas/MessageType'
            subject:
              description: The title of the message
              type: string
              example: Hello and welcome
              x-vue-translatable: true
            body:
              description: The context of the message
              type: string
              example: Here is a message to welcome you on board!
              x-vue-translatable: true
            status:
              $ref: '#/components/schemas/NotificationStatus'
            translations:
              type: array
              items:
                $ref: '#/components/schemas/Translation'
            scheduling:
              $ref: '#/components/schemas/Scheduling'
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- deprecated'
            memberTags:
              description: ''
              type: array
              items:
                type: string
            memberIds:
              description: ''
              type: array
              items:
                type: string
    MemberMessage:
      description: This is the Member Message model
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - eventRefType
            - eventReId
            - messageType
            - subject
            - body
            - status
            - expiry
            - links
          type: object
          properties:
            eventRefType:
              $ref: '#/components/schemas/EventRefType'
            eventRefId:
              description: The reference ID of the event object
              type: string
              example: Dc4swmQBVd51K6gPQqFx
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            messageType:
              $ref: '#/components/schemas/MessageType'
              x-vue-disaply-order: 1003
            subject:
              description: The title of the message
              type: string
              example: Hello and welcome
              x-vue-translatable: true
              x-vue-disaply-order: 1002
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-form-type: TEXTAREA
            body:
              description: The context of the message
              type: string
              example: Here is a message to welcome you on board!
              x-vue-translatable: true
              x-vue-disaply-order: 1003
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-form-type: TEXTAREA
            status:
              $ref: '#/components/schemas/MessageStatus'
              x-vue-disaply-order: 1003
            expiry:
              format: date-time
              description: The time that the message will disappear after. ISO8601 timestamp
              type: string
              example: '2019-09-25T15:47:00.000+0000'
              x-vue-search-field: true
              x-vue-disaply-order: 1004
            links:
              $ref: '#/components/schemas/MessageLink'
              description: ''
            memberIds:
              description: ''
              type: array
              items:
                type: string
      x-vue-list: true
      x-vue-show: true
      x-vue-getter: memberMessages
      x-vue-sort-by: name
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-ops:
        - Create
        - Update
    ContestStateOperations:
      description: Operations supported by update contest state action.
      enum:
        - Deleted
        - Ready
        - Active
        - Finished
        - Finalised
        - Cancelled
      type: string
      readOnly: true
    LeaderboardMember:
      required:
        - name
        - rank
        - points
        - memberId
        - memberRefId
      type: object
      properties:
        name:
          description: The name of the player
          type: string
          example: Player 1
        memberId:
          description: Unique system identifier of a Member
          type: string
          example: Dc4swmQBVd51K6gPQqFx
        memberRefId:
          description: The reference to this member in your system
          type: string
          example: Player-1
        rankChangeFrom:
          format: int32
          description: 'Previous rank held, null if no changes are recorded'
          type: integer
        rankChangeType:
          format: int32
          description: '[-1] for rank-down, like 5 to 8. [0] for no change, [1] for rank-up like 9 to 3'
          type: integer
        params:
          description: The user defined values used in the rules builder
          type: object
          additionalProperties:
            type: number
    ExportResponse:
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/Entrant'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    UpdateEntrantRequest:
      required:
        - entrantStatus
        - entityId
        - entrantAction
      type: object
      properties:
        memberId:
          description: Unique member identifier. A member has to exist in the Ziqni database
          type: string
          example: Dc4swmQBVd51K6gPQqFx
        entityId:
          description: Unique competition identifier
          type: string
          example: PXXQrm4BuCEBoI5DKW47
        entrantStatus:
          $ref: '#/components/schemas/EntrantStatus'
        entrantAction:
          $ref: '#/components/schemas/EntrantAction'
    Event:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          required:
            - action
            - sourceValue
            - points
            - transactionTimestamp
          type: object
          properties:
            memberId:
              description: Unique system identifier of a Member
              type: string
              example: ac1samQmVr61KgaPQq7x
            memberRefId:
              description: The reference to this member in external system
              type: string
              example: Player-1
            action:
              description: The identifier that describes the meaning of this event
              type: string
              example: win
            batchId:
              description: >-
                The batch identifier is used to group related event stream data together. This
                could be as simple as a UUID or your internal reference to that distinct
                player session event
              type: string
              example: ecrsamQm23r61KgaPQq7x
            entityId:
              description: >-
                It is a reference to a models ID for any of the following objects - Product,
                Achievement, Reward, Award
              type: string
              example: 6c1samQmVr61KgaPQq7x
            eventRefId:
              description: >-
                It is a reference to a models ID for any of the following objects - Product,
                Achievement, Reward, Award
              type: string
              example: 6c1samQmVr61KgaPQq7x
            entityRefId:
              description: >-
                It is a reference to a models ID for any of the following objects - Product,
                Achievement, Reward, Award
              type: string
              example: 6c1samQmVr61KgaPQq7x
            sourceValue:
              format: double
              description: The actual numerical value related to the event
              type: number
              example: '12.345'
            points:
              format: double
              description: >-
                A value derived from the source value field. In the context of Product
                additionally an adjustment factor will be applied
              type: number
              example: '12.345'
            transactionTimestamp:
              format: date-time
              description: >-
                ISO8601 timestamp for when this event happened. All records are stored in UTC
                time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            metadata:
              $ref: '#/components/schemas/EventMetadata'
            customFields:
              type: object
              additionalProperties: true
            tags:
              description: A list of Strings of groups that the tag belongs to
              type: array
              items:
                type: string
            relatesTo:
              type: array
              items:
                type: string
            relatesToExternal:
              type: array
              items:
                type: string
            unitOfMeasure:
              description: >-
                The unit of measure is used to determine the type of the source value. It is
                used to normalize points values for currency based calculations by normalizing
                the source value.
              type: string
    EntityGraphRequest:
      description: ''
      required:
        - ids
        - entityType
      type: object
      properties:
        ids:
          description: The identifier of the node to create a connected graph for
          type: array
          items:
            type: string
        constraints:
          description: Specify the constraints that need to be applied to the filter.
          type: array
          items:
            type: string
        traversal:
          $ref: '#/components/schemas/EntityGraphTraversal'
          description: >-
            Depth first [DFT] or breadth first [BFT] traversal. is a traversal technique in which
            all the nodes of the same level are explored first, and then we move to the next
            level. DFS is also a traversal technique in which traversal is started from the root
            node and explore the nodes as far as possible until we reach the node that has no
            unvisited adjacent nodes.
        languageKey:
          description: >-
            The language codes can be found in the settings/transalations section of the back
            office
          type: string
        includes:
          description: >-
            What objects to include from the entity in this response. For achievement the
            following can be included; description, memberTagsFilter, scheduling, and
            termsAndConditions
          type: array
          items:
            type: string
        entityType:
          $ref: '#/components/schemas/EntityType'
          description: ''
    EntityGraphTraversal:
      description: The status of award
      enum:
        - DEPTH_FIRST
        - BREADTH_FIRST
      type: string
      readOnly: true
    EntityGraphNode:
      description: |-
        Mission is a specialised view of connected achievements.
        The first achievement is the container, every dependant achievement is a chained dependency
      required:
        - entries
        - entityId
        - optInStatus
      type: object
      properties:
        name:
          description: ''
          type: string
        optInStatus:
          $ref: '#/components/schemas/OptinStatus'
          description: ''
        constraints:
          description: 'isCompleted, etc'
          type: array
          items:
            type: string
        entityType:
          description: ''
          type: string
        entityId:
          description: ''
          type: string
        entityStatusCode:
          description: ''
          type: integer
        entityStatus:
          description: ''
          type: string
        includes:
          description: ''
          type: object
          additionalProperties:
            type: object
    OptinStatus:
      description: ''
      required:
        - entityType
        - statusCode
        - status
        - entityType
        - entityId
        - statusCode
        - status
      type: object
      properties:
        entityType:
          description: ''
          type: string
        entityId:
          description: ''
          type: string
        statusCode:
          description: >-
            Processing = 0, NotEntered = 5, Entering = 10, Entrant = 15, Preparing = 20, Running =
            25, Completing = 30, Completed = 35
          type: integer
        status:
          description: |-
            Processing = 0, NotEntered = 5, Entering = 10, Entrant = 15,\
                        \ Preparing = 20, Running = 25, Completing = 30, Completed = 35
          type: string
        percentageComplete:
          description: 'What percentage has been completed so far, this is a number between 0 and 100'
          type: number
    CreateCustomFieldRequest:
      description: Request to create custom fields
      required:
        - name
        - key
        - fieldType
        - appliesTo
      type: object
      properties:
        name:
          description: The name of a Custom field
          type: string
          example: Promotional field
        key:
          description: The key of a Custom field
          type: string
          example: promotional-field
          x-vue-form-type: 'NAMEKEY, showKey: true'
        description:
          description: The description of a Custom field
          type: string
          example: Promotional discount field (AD20) applied to Events
          x-vue-form-type: TEXTAREA
        fieldType:
          $ref: '#/components/schemas/FieldType'
        appliesTo:
          $ref: '#/components/schemas/AppliesTo'
        addConstraints:
          description: For example "required" to indicate the field is required.
          type: array
          items:
            type: string
      example:
        name: some text
        key: some text
        description: some text
        fieldType: TextArray
        appliesTo: Repository
      x-vue-create: customField
      x-vue-creator: customFields
    UpdateCustomFieldRequest:
      description: Request to update custom fields
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          required: []
          type: object
          properties:
            name:
              description: The name of a Custom field
              type: string
              example: Promotional field
            description:
              description: The description of a Custom field
              type: string
              example: Promotional discount field (AD20) applied to Events
              x-vue-form-type: TEXTAREA
            fieldType:
              $ref: '#/components/schemas/FieldType'
              readOnly: true
            appliesTo:
              $ref: '#/components/schemas/AppliesTo'
              readOnly: true
            addConstraints:
              description: For example "required" to indicate the field is required.
              type: array
              items:
                type: string
            removeConstraints:
              description: For example "required" to indicate the field is required.
              type: array
              items:
                type: string
      example:
        id: ziqniModelId
        name: some text
        description: some text
        fieldType: TextArray
        appliesTo: Repository
      x-vue-update: customField
      x-vue-updater: customFields
    ConditionalOperator:
      description: Available actions for competition status
      enum:
        - Equals
        - GreaterThan
        - GreaterThanEquals
        - LessThan
        - LessThanEquals
        - Between
      type: string
    TournamentStrategies:
      required:
        - strategyType
        - rankingStrategy
        - scoringStrategy
      type: object
      properties:
        strategyType:
          $ref: '#/components/schemas/StrategyType'
        rankingStrategy:
          $ref: '#/components/schemas/RankingStrategy'
        scoringStrategy:
          $ref: '#/components/schemas/ScoringStrategy'
    AchievementStrategies:
      required:
        - scoringStrategy
      type: object
      properties:
        pointsStrategy:
          $ref: '#/components/schemas/PointsStrategy'
    PointsStrategy:
      description: The target points to achieve
      required:
        - TargetType
        - TargetPoints
        - pointsValueMin
        - operator
        - context
        - action
      type: object
      properties:
        operator:
          $ref: '#/components/schemas/ConditionalOperator'
          description: The operator
        pointsValueUpper:
          description: >-
            The upper points to achieve. This is only used where secondary number are required
            like, between, or average between
          type: number
        pointsValue:
          description: The points to achieve
          type: number
        context:
          description: 'The context this strategy is bound to, like: achievement'
          type: string
        action:
          description: 'The action this strategy is bound to, like: achievement.points'
          type: string
    EntityGraph:
      description: ''
      required:
        - links
      type: object
      properties:
        edges:
          description: Pairs of nodes that specify a line joining these two nodes are said to form an edge
          type: array
          items:
            $ref: '#/components/schemas/EntityGraphEdge'
        nodesInCompletedState:
          format: int32
          description: Nodes in this graph that are in state greater than 35
          type: integer
    EntityGraphEdge:
      description: ''
      required:
        - ordering
      type: object
      properties:
        ordering:
          description: ''
          type: integer
        constraints:
          description: ''
          type: array
          items:
            type: string
        tailEntityId:
          description: 'X the tail of the edge '
          type: string
        headEntityId:
          description: Y the head of the edge.
          type: string
        graphEdgeType:
          $ref: '#/components/schemas/EntityGraphEdgeType'
          description: ''
    EntityGraphResponse:
      description: '        '
      required: []
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
          description: ''
        data:
          $ref: '#/components/schemas/EntityGraphResult'
          description: ''
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Error'
    EntityGraphResult:
      description: ''
      required:
        - nodes
        - links
      type: object
      properties:
        nodes:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/EntityGraphNode'
        graphs:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/EntityGraph'
    EntrantCountResponse:
      required:
        - numberOfRecords
        - downloadUrl
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
        numberOfRecords:
          type: integer
        downloadUrl:
          type: string
    EntityGraphEdgeType:
      description: The type of link
      enum:
        - ROOT
        - MUST
        - SHOULD
        - MUST_NOT
        - UNKNOWN
        - BROKEN
      type: string
      readOnly: true
    Member:
      description: This is the Member model
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - name
            - memberType
            - memberRefId
          type: object
          properties:
            name:
              description: The name of the member that is used on leader boards and public displays
              type: string
              example: Player 1
              x-vue-as-string: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            memberRefId:
              description: The reference to this member in your system
              type: string
              example: Player-1
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1000
            memberType:
              $ref: '#/components/schemas/MemberType'
              x-vue-disaply-order: 1002
            icon:
              description: An Icon id that has been pre uploaded to the system to display for Member
              type: string
              x-vue-hidden: true
              x-vue-disaply-order: 1007
            teamMembers:
              description: A social group like Guilds
              type: array
              items:
                type: string
              x-vue-hidden: true
              x-vue-disaply-order: 1003
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
              x-vue-search-field: true
              x-vue-disaply-order: 1006
              x-vue-constraint: true
              x-vue-constraint-options:
                - Disabled
            timeZoneOffset:
              description: The timezone offset from UTC to use for this member
              type: string
              x-vue-search-field: true
              x-vue-disaply-order: 1005
      example:
        id: ziqniModelId
        spaceName: ziqniModelSpaceName
        created: '2018-02-10T09:30Z'
        name: name
        memberRefId: memberRefId
        memberType: Individual
        teamMembers:
          - ziqniMemberId
          - ziqniMemberId
        constraints:
          - disabled
        timeZoneOffset: UTC
        customFields:
          customField1: customFieldValue1
          customField2: customFieldValue2
        tags:
          - ziqniTagId
          - ziqniTagId
        metadata:
          key1: value1
          key2: value
      x-vue-list: true
      x-vue-show: true
      x-vue-getter: members
      x-vue-csv-supported: true
      x-vue-sort-by: name
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-ops:
        - Create
        - Update
    UpdateMemberRequest:
      description: This is a request for Member update
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
        -
          required: []
          type: object
          properties:
            name:
              description: The name of the member that is used on leader boards and public displays
              type: string
              example: Player 1
            memberType:
              $ref: '#/components/schemas/MemberType'
            teamMembers:
              description: A social group like Guilds
              type: array
              items:
                type: string
            icon:
              description: An Icon id that has been pre uploaded to the system to display for Member
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            addConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- Disabled'
            removeConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- Disabled'
            timeZoneOffset:
              description: To what time zone teh emmber belongs to
              type: string
      example:
        id: ziqniModelId
        name: name
        memberType: Individual
        teamMembers:
          - ziqniMemberId
          - ziqniMemberId
        addConstraints:
          - disabled
        timeZoneOffset: UTC
        customFields:
          customField1: customFieldValue1
          customField2: customFieldValue2
        metadata:
          metaKey1: metaValue1
          metaKey2: metaValue2
        tags:
          - ziqniTagId
          - ziqniTagId
      x-vue-update: member
      x-vue-updater: members
    CreateMemberRequest:
      description: This is a request for Member creation
      allOf:
        -
          required:
            - name
            - memberRefId
            - memberType
          type: object
          properties:
            name:
              description: The name of the member that is used on leader boards and public displays
              type: string
              example: Player 1
            memberRefId:
              description: The reference to this member in your system
              type: string
              example: Player-1
            memberType:
              $ref: '#/components/schemas/MemberType'
            icon:
              description: An Icon id that has been pre uploaded to the system to display for Member
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            teamMembers:
              description: A social group like Guilds
              type: array
              items:
                type: string
            addConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- notifyMember - isMemberAcknowledgmentRequired'
            timeZoneOffset:
              description: To what time zone teh emmber belongs to
              type: string
        -
          $ref: '#/components/schemas/CreateOptParamModels'
      example:
        name: name
        memberRefId: memberRefId
        memberType: Individual
        teamMembers:
          - ziqniMemberId
          - ziqniMemberId
        addConstraints:
          - disabled
        timeZoneOffset: UTC
        customFields:
          customField1: customFieldValue1
          customField2: customFieldValue2
        metadata:
          metaKey1: metaValue1
          metaKey2: metaValue2
        tags:
          - ziqniTagId
          - ziqniTagId
      x-vue-create: member
      x-vue-creator: members
    InstantWinResponse:
      description: This is the Response for Instant win
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaExtended'
        results:
          type: array
          items:
            $ref: '#/components/schemas/InstantWin'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      example:
        meta:
          objectType: some text
          totalRecords: 26
          resultCount: 2
          errorCount: 0
          limit: 2
          skip: 0
        results:
          -
            id: ziqniModelId
            spaceName: ziqniSpaceName
            created: '2018-02-10T09:30Z'
            productRefId: '10002'
            name: test1
            adjustmentFactor: '1'
            actionTypeAdjustmentFactors:
              -
                adjustmentFactor: 67.71
                actionTypeId: ziqniModelId
              -
                adjustmentFactor: 96.91
                actionTypeId: ziqniModelId
            customFields:
              customField1: customFieldValue1
              customField2: customFieldValue2
            metadata:
              key1: value1
              key2: value
            tags:
              - tagId1
              - tagId2
            translations:
              -
                languageKey: csb
                translations:
                  -
                    fieldName: name
                    text: test1
              -
                languageKey: den
                translations:
                  -
                    fieldName: name
                    text: test-temp
              -
                languageKey: kmb
                translations:
                  -
                    fieldName: name
                    text: Level-Up
          -
            id: ziqniModelId
            spaceName: ziqniSpaceName
            created: '2018-02-10T09:30Z'
            productRefId: '10002'
            name: test1
            adjustmentFactor: '1'
            actionTypeAdjustmentFactors:
              -
                adjustmentFactor: 67.71
                actionTypeId: ziqniModelId
              -
                adjustmentFactor: 96.91
                actionTypeId: ziqniModelId
            customFields:
              customField1: customFieldValue1
              customField2: customFieldValue2
            metadata:
              key1: value1
              key2: value
            tags:
              - tagId1
              - tagId2
            translations:
              -
                languageKey: csb
                translations:
                  -
                    fieldName: name
                    text: test1
              -
                languageKey: den
                translations:
                  -
                    fieldName: name
                    text: test-temp
              -
                languageKey: kmb
                translations:
                  -
                    fieldName: name
                    text: Level-Up
        errors:
          -
            modelId: some text
            errorCode: 78
            message: some text
            errorAt: 90
            detail:
              -
                modelId: some text
                errorCode: 90
                message: some text
                errorAt: 24
              -
                modelId: some text
                errorCode: 52
                message: some text
                errorAt: 45
          -
            modelId: some text
            errorCode: 55
            message: some text
            errorAt: 64
            detail:
              -
                modelId: some text
                errorCode: 72
                message: some text
                errorAt: 56
              -
                modelId: some text
                errorCode: 56
                message: some text
                errorAt: 90
    GridLocation:
      description: >-
        This struct contains two integer-valued fields, row and col . A GridLocation can be used to
        represent a location in a two-dimensional grid.
      required:
        - row
        - col
      type: object
      properties:
        row:
          description: ''
          type: integer
        col:
          description: ''
          type: integer
    InstantWinTile:
      description: ''
      required:
        - orderNumber
        - probability
        - icon
        - horizontalPosition
        - verticalPosition
        - probability
      type: object
      properties:
        icon:
          description: The id to the image file
          type: string
        text:
          description: ''
          type: string
        contraints:
          description: 'hasPrizes, glow'
          type: array
          items:
            type: string
          example: hasPrizes
        reward:
          $ref: '#/components/schemas/RewardReduced'
          description: The reward associated with this tile
        location:
          $ref: '#/components/schemas/GridLocation'
          description: ''
        probability:
          format: double
          description: ''
          type: number
        background:
          description: ''
          type: string
    Competition:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - competitionType
            - numberOfRounds
            - name
            - minNumberOfEntrants
            - ruleSets
            - scheduledStartDate
            - scheduledEndDate
            - status
            - constraints
            - products
          type: object
          properties:
            competitionType:
              $ref: '#/components/schemas/CompetitionType'
            numberOfRounds:
              format: int32
              description: Number of rounds to be played in a competition
              type: integer
              example: '1'
              x-vue-search-field: true
              x-vue-disaply-order: 1006
            numberOfGroupStages:
              description: Number of group stages
              type: integer
              x-vue-search-field: true
              x-vue-disaply-order: 1006
            name:
              description: A name or a name of a competition. Can be translated
              type: string
              example: Summer fest
              x-vue-translatable: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            description:
              description: Description of the competition. Can be translated
              type: string
              example: A competition that is for 1 day
              x-vue-translatable: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1002
              x-vue-form-type: TEXTAREA
            termsAndConditions:
              description: Terms and conditions of a competition. Can be translated
              type: string
              example: Participate to win
              x-vue-translatable: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-form-type: TEXTAREA
              x-vue-disaply-order: 1003
            maxNumberOfEntrants:
              format: int32
              description: Maximum number of partiipants allowed in a competition
              type: integer
              example: '9999'
              x-vue-search-field: true
              x-vue-disaply-order: 1006
            minNumberOfEntrants:
              format: int32
              description: Maximum number of partiipants allowed in a competition
              type: integer
              example: '0'
              x-vue-search-field: true
              x-vue-disaply-order: 1006
            entrantMemberType:
              type: string
              x-vue-disaply-order: 1005
              x-vue-filter: true
            scheduledStartDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Competition should start. All records are stored
                in UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
              x-vue-search-field: true
              x-vue-disaply-order: 1006
            scheduledEndDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Competition should end. All records are stored in
                UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
              x-vue-search-field: true
              x-vue-disaply-order: 1006
            actualStartDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Competition started. All records are stored in
                UTC time zone
              type: string
              readOnly: true
              example: '2019-09-25T15:47:00.000+0000'
              x-vue-search-field: true
              x-vue-disaply-order: 1006
            actualEndDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Competition ended. All records are stored in UTC
                time zone
              type: string
              readOnly: true
              example: '2019-09-25T15:47:00.000+0000'
              x-vue-search-field: true
              x-vue-disaply-order: 1006
            status:
              $ref: '#/components/schemas/CompetitionStatus'
              x-vue-disaply-order: 1006
            statusCode:
              description: The code of the competition
              type: integer
              readOnly: true
              example: '3'
              x-vue-search-field: true
              x-vue-disaply-order: 1006
            constraints:
              description: Additional constraints
              uniqueItems: true
              type: array
              items:
                type: string
              example: |-
                - notifyMember
                - memberAcknowledgmentRequired
                - isPublic
                - autoStart
                - autoStop
                - optinRequiredForEntrants
              x-vue-constraint: true
              x-vue-constraint-options:
                - notifyMember
                - memberAcknowledgmentRequired
                - isPublic
                - autoStart
                - autoStop
                - optinRequiredForEntrants
              x-vue-disaply-order: 1006
            products:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/ProductReduced'
              x-vue-disaply-order: 1006
            entrantMemberTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: ''
            productTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: ''
            icon:
              description: Link to the icon
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
      x-vue-list: true
      x-vue-show: true
      x-vue-getter: competitions
      x-vue-sort-by: name
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-ops:
        - Create
        - Update
      x-vue-entity-links-from:
        - Rules
        - Reward
        - Award
        - Contest
    Contest:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - competitionId
            - row
            - name
            - round
            - roundType
            - entrantsFromContest
            - ruleSets
            - minNumberOfEntrants
            - scheduledStartDate
            - scheduledEndDate
            - status
            - statusCode
            - isPublic
            - constraints
          type: object
          properties:
            competitionId:
              description: A unique identifier of a Competition
              type: string
              example: Dc4swmQBVd51K6gPQqFx
              x-vue-links-to: Competition
              x-vue-disaply-order: 1001
            row:
              format: int32
              description: The row number for displaying the Contest in a table
              type: integer
              example: '2'
              x-vue-search-field: true
              x-vue-disaply-order: 1006
            name:
              description: A name for the Contest. Can be translated
              type: string
              example: Fish and Chips
              x-vue-as-string: true
              x-vue-translatable: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            description:
              description: Description of the contest
              type: string
              example: Fish and Chips contest
              x-vue-translatable: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1002
              x-vue-form-type: TEXTAREA
            termsAndConditions:
              description: Terms and conditions for participating in the Contest. Can be translated
              type: string
              example: Buy 1 get 1 free
              x-vue-translatable: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1002
              x-vue-form-type: TEXTAREA
            round:
              format: int32
              description: To what round does the contest belong
              type: integer
              example: '2'
              x-vue-search-field: true
              x-vue-disaply-order: 1006
            roundType:
              $ref: '#/components/schemas/RoundType'
              x-vue-search-field: true
              x-vue-disaply-order: 1006
            entrantsFromContest:
              description: >-
                A list of Ziqni contest identifiers to allow contests chaining. When a
                Progression competition is active and you have a 2 round competition the first
                round has to reference the second round then this parameter becomes mandatory
                instead of Optional.
              type: array
              items:
                type: string
              example: '- Dc4swmQBVd51K6gPQqFx - sc3jsrfLewVdt6KugPqFx'
              x-vue-links-to: Contest
            maxNumberOfEntrants:
              format: int32
              description: Maximum number of entrants for the contest
              type: integer
              example: '9999'
              x-vue-disaply-order: 1001
            minNumberOfEntrants:
              format: int32
              description: Minimum number of entrants for the contest
              type: integer
              example: '0'
              x-vue-search-field: true
              x-vue-disaply-order: 2001
            scheduledStartDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Contest should start. All records are stored in
                UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
              x-vue-search-field: true
              x-vue-disaply-order: 1004
            scheduledEndDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Contest should end. All records are stored in UTC
                time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
              x-vue-search-field: true
              x-vue-disaply-order: 1004
            actualStartDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Competition started. All records are stored in
                UTC time zone
              type: string
              readOnly: true
              example: '2019-09-25T15:47:00.000+0000'
              x-vue-search-field: true
              x-vue-disaply-order: 1004
            actualEndDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Competition ended. All records are stored in UTC
                time zone
              type: string
              readOnly: true
              example: '2019-09-25T15:47:00.000+0000'
              x-vue-search-field: true
              x-vue-disaply-order: 1004
            strategies:
              $ref: '#/components/schemas/TournamentStrategies'
              x-vue-disaply-order: 1004
            status:
              $ref: '#/components/schemas/ContestStatus'
              x-vue-disaply-order: 1004
            statusCode:
              description: The code of the contest
              type: integer
              readOnly: true
              example: '3'
              x-vue-search-field: true
              x-vue-disaply-order: 1006
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- isPublic - autoStart - auto Stop - memberAcknowledgmentRequired'
              x-vue-constraint: true
            icon:
              description: Link to the icon
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
      x-vue-list: true
      x-vue-show: true
      x-vue-getter: contests
      x-vue-sort-by: name
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-ops:
        - Create
        - Update
      x-vue-enityty-links-from:
        - Rules
        - Rewards
        - Awards
    CreateCompetitionRequest:
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - competitionType
            - numberOfRounds
            - name
            - minNumberOfEntrants
            - ruleSets
            - scheduledStartDate
            - scheduledEndDate
            - constraints
            - productIds
          type: object
          properties:
            competitionType:
              $ref: '#/components/schemas/CompetitionType'
            numberOfRounds:
              format: int32
              description: Number of rounds to be played in a competition
              type: integer
              example: '1'
            numberOfGroupStages:
              description: Number of group stages
              type: integer
            name:
              description: A name or a name of a competition. Can be translated
              type: string
              example: Summer fest
            description:
              description: Description of the competition. Can be translated
              type: string
              example: A competition that is for 1 day
            termsAndConditions:
              description: Terms and conditions of a competition. Can be translated
              type: string
              example: Participate to win
            entrantMemberType:
              type: string
            maxNumberOfEntrants:
              format: int32
              description: Maximum number of partiipants allowed in a competition
              type: integer
              example: '9999'
            minNumberOfEntrants:
              format: int32
              description: Maximum number of partiipants allowed in a competition
              type: integer
              example: '0'
            rules:
              type: array
              items:
                $ref: '#/components/schemas/Rule'
            scheduledStartDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Competition should start. All records are stored
                in UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            scheduledEndDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Competition should end. All records are stored in
                UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            translations:
              type: array
              items:
                $ref: '#/components/schemas/Translation'
            contests:
              $ref: '#/components/schemas/CreateContestRequest'
            rewards:
              type: array
              items:
                $ref: '#/components/schemas/CreateRewardRequest'
            constraints:
              deprecated: true
              description: Additional constraints
              type: array
              items:
                type: string
              example: >-
                - notifyMember - memberAcknowledgmentRequired - isPublic - autoStart -
                autoStop - optinRequiredForEntrants
            addConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: >-
                - notifyMember - memberAcknowledgmentRequired - isPublic - autoStart -
                autoStop - optinRequiredForEntrants
            productIds:
              description: ''
              type: array
              items:
                type: string
            entrantMemberTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: ''
            productTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: ''
            icon:
              description: Link to the icon
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
    CreateContestRequest:
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - name
            - ruleSets
            - roundType
            - minNumberOfEntrants
            - scheduledStartDate
            - scheduledEndDate
            - strategies
            - constraints
          type: object
          properties:
            row:
              format: int32
              description: The row number for displaying the Contest in a table
              type: integer
              example: '2'
            round:
              format: int32
              description: To what round does the contest belong
              type: integer
              example: '2'
            entrantsFromContest:
              description: >-
                A list of Ziqni contest identifiers to allow contests chaining. When a
                Progression competition is active and you have a 2 round competition the first
                round has to reference the second round then this parameter becomes mandatory
                instead of Optional.
              type: array
              items:
                type: string
              example: '- Dc4swmQBVd51K6gPQqFx - sc3jsrfLewVdt6KugPqFx'
            name:
              description: A name for the Contest. Can be translated
              type: string
              example: Fish and Chips
            description:
              description: A name for the Contest. Can be translated
              type: string
              example: Fish and Chips contest
            termsAndConditions:
              description: A name for the Contest. Can be translated
              type: string
              example: Buy 1 get 1 free
            roundType:
              $ref: '#/components/schemas/RoundType'
            maxNumberOfEntrants:
              format: int32
              description: Maximum number of entrants for the contest
              type: integer
              example: '9999'
            minNumberOfEntrants:
              format: int32§
              description: Minimum number of entrants for the contest
              type: integer
              example: '0'
            rules:
              type: array
              items:
                $ref: '#/components/schemas/Rule'
            scheduledStartDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Contest should start. All records are stored in
                UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            scheduledEndDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Contest should end. All records are stored in UTC
                time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            strategies:
              $ref: '#/components/schemas/TournamentStrategies'
            constraints:
              deprecated: true
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- notifyMember - memberAcknowledgmentRequired - autoStart - auto Stop'
            addConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- notifyMember - memberAcknowledgmentRequired - autoStart - auto Stop'
            translations:
              type: array
              items:
                $ref: '#/components/schemas/Translation'
            rewards:
              type: array
              items:
                $ref: '#/components/schemas/CreateRewardRequest'
            icon:
              description: Link to the icon
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
    UpdateCompetitionRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
        -
          required: []
          type: object
          properties:
            competitionType:
              $ref: '#/components/schemas/CompetitionType'
            numberOfRounds:
              format: int32
              description: Number of rounds to be played in a competition
              type: integer
              example: '1'
            numberOfGroupStages:
              description: Number of group stages
              type: integer
            name:
              description: A name or a name of a competition. Can be translated
              type: string
              example: Summer fest
            description:
              description: Description of the competition. Can be translated
              type: string
              example: A competition that is for 1 day
            termsAndConditions:
              description: Terms and conditions of a competition. Can be translated
              type: string
              example: Participate to win
            entrantMemberType:
              type: string
            maxNumberOfEntrants:
              format: int32
              description: Maximum number of partiipants allowed in a competition
              type: integer
              example: '9999'
            minNumberOfEntrants:
              format: int32
              description: Maximum number of partiipants allowed in a competition
              type: integer
              example: '0'
            scheduledStartDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Competition should start. All records are stored
                in UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            scheduledEndDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Competition should end. All records are stored in
                UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            constraints:
              deprecated: true
              description: Additional constraints
              type: array
              items:
                type: string
              example: >-
                - notifyMember - memberAcknowledgmentRequired - isPublic - autoStart -
                autoStop - optinRequiredForEntrants
            addConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- memberAcknowledgmentRequired'
            removeConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- isPublic'
            productIds:
              description: ''
              type: array
              items:
                type: string
            createContests:
              $ref: '#/components/schemas/CreateContestForCompetitionRequest'
              description: ''
            updateContests:
              $ref: '#/components/schemas/UpdateContestRequest'
              description: ''
            entrantMemberTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: ''
            productTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: ''
            icon:
              description: Link to the icon
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
    UpdateContestRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
        -
          required: []
          type: object
          properties:
            name:
              description: A name for the Contest. Can be translated
              type: string
              example: Fish and Chips
            description:
              description: A name for the Contest. Can be translated
              type: string
              example: Fish and Chips contest
            termsAndConditions:
              description: A name for the Contest. Can be translated
              type: string
              example: Buy 1 get 1 free
            roundType:
              $ref: '#/components/schemas/RoundType'
            maxNumberOfEntrants:
              format: int32
              description: Maximum number of entrants for the contest
              type: integer
              example: '9999'
            minNumberOfEntrants:
              format: int32§
              description: Minimum number of entrants for the contest
              type: integer
              example: '0'
            scheduledStartDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Contest should start. All records are stored in
                UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            scheduledEndDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Contest should end. All records are stored in UTC
                time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            strategies:
              $ref: '#/components/schemas/TournamentStrategies'
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- notifyMember - memberAcknowledgmentRequired - autoStart - auto Stop'
            icon:
              description: Link to the icon
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
    CreateSimpleCompetitionRequest:
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - competitionType
            - name
            - minNumberOfEntrants
            - ruleSets
            - scheduledStartDate
            - scheduledEndDate
            - productIds
          type: object
          properties:
            competitionType:
              $ref: '#/components/schemas/CompetitionType'
            name:
              description: A name or a name of a competition. Can be translated
              type: string
              example: Summer fest
            description:
              description: Description of the competition. Can be translated
              type: string
              example: A competition that is for 1 day
            termsAndConditions:
              description: Terms and conditions of a competition. Can be translated
              type: string
              example: Participate to win
            entrantMemberType:
              type: string
            maxNumberOfEntrants:
              format: int32
              description: Maximum number of partiipants allowed in a competition
              type: integer
              example: '9999'
            minNumberOfEntrants:
              format: int32
              description: Maximum number of partiipants allowed in a competition
              type: integer
              example: '0'
            rules:
              type: array
              items:
                $ref: '#/components/schemas/Rule'
            scheduledStartDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Competition should start. All records are stored
                in UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            scheduledEndDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Competition should end. All records are stored in
                UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            translations:
              type: array
              items:
                $ref: '#/components/schemas/Translation'
            rewards:
              type: array
              items:
                $ref: '#/components/schemas/CreateRewardRequest'
            addConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: >-
                - notifyMember - memberAcknowledgmentRequired - isPublic - autoStart -
                autoStop - optinRequiredForEntrants
            productIds:
              description: ''
              type: array
              items:
                type: string
            entrantMemberTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: ''
            productTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: ''
            strategies:
              $ref: '#/components/schemas/TournamentStrategies'
            icon:
              description: Link to the icon
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
    CreateContestForCompetitionRequest:
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - competitionId
            - row
            - round
            - roundType
            - name
            - ruleSets
            - minNumberOfEntrants
            - scheduledStartDate
            - scheduledEndDate
            - constraints
            - strategies
          type: object
          properties:
            competitionId:
              description: A unique identifier of a Competition
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            row:
              format: int32
              description: The row number for displaying the Contest in a table
              type: integer
              example: '2'
            round:
              format: int32
              description: To what round does the contest belong
              type: integer
              example: '2'
            groupStage:
              format: int32
              description: >-
                Is used for more complex Competitions e.g. multi round competitions where
                round 1 group stage matched round 2
              type: integer
              example: '2'
            groupStageLabel:
              description: The name of the group stages
              type: string
              example: Semi-finals
            entrantsFromContest:
              description: >-
                A list of Ziqni contest identifiers to allow contests chaining. When a
                Progression competition is active and you have a 2 round competition the first
                round has to reference the second round then this parameter becomes mandatory
                instead of Optional.
              type: array
              items:
                type: string
              example: '- Dc4swmQBVd51K6gPQqFx - sc3jsrfLewVdt6KugPqFx'
            name:
              description: A name for the Contest. Can be translated
              type: string
              example: Fish and Chips
            description:
              description: A name for the Contest. Can be translated
              type: string
              example: Fish and Chips contest
            termsAndConditions:
              description: A name for the Contest. Can be translated
              type: string
              example: Buy 1 get 1 free
            roundType:
              $ref: '#/components/schemas/RoundType'
            maxNumberOfEntrants:
              format: int32
              description: Maximum number of entrants for the contest
              type: integer
              example: '9999'
            minNumberOfEntrants:
              format: int32§
              description: Minimum number of entrants for the contest
              type: integer
              example: '0'
            rules:
              type: array
              items:
                $ref: '#/components/schemas/Rule'
            scheduledStartDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Contest should start. All records are stored in
                UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            scheduledEndDate:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Contest should end. All records are stored in UTC
                time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            strategies:
              $ref: '#/components/schemas/TournamentStrategies'
            translations:
              type: array
              items:
                $ref: '#/components/schemas/Translation'
            rewards:
              type: array
              items:
                $ref: '#/components/schemas/CreateRewardRequest'
            icon:
              description: Link to the icon
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- notifyMember - memberAcknowledgmentRequired - autoStart - auto Stop'
    Achievement:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - name
            - icon
            - ruleSets
            - schedulings
            - achievementLiveStatus
            - constraints
          type: object
          properties:
            name:
              description: A name for the Achievement. Can be translated
              type: string
              x-vue-as-string: true
              x-vue-translatable: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            description:
              description: A name for the Achievement. Can be translated
              type: string
              x-vue-translatable: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1002
              x-vue-form-type: TEXTAREA
            termsAndConditions:
              description: Terms and conditions of an achievement. Can be translated
              type: string
              x-vue-translatable: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1003
            icon:
              description: An Icon id that has been pre uploaded to the system to display for Achievement
              type: string
              x-vue-hidden: true
              x-vue-disaply-order: 1011
            banner:
              description: >-
                A banner id that has been pre uploaded to the system to display for
                Achievement
              type: string
            bannerLowResolution:
              description: >-
                A bannerLowResolution id that has been pre uploaded to the system to display
                for Achievement
              type: string
            bannerHighResolution:
              description: >-
                A bannerHighResolution id that has been pre uploaded to the system to display
                for Achievement
              type: string
            scheduling:
              $ref: '#/components/schemas/Scheduling'
              x-vue-search-field: true
              x-vue-disaply-order: 1004
            maxNumberOfIssues:
              format: int32
              description: Maximum number of issued achievements
              type: integer
              x-vue-search-field: true
              x-vue-disaply-order: 1006
            status:
              $ref: '#/components/schemas/AchievementStatus'
              x-vue-disaply-order: 1004
            statusCode:
              description: The code of the contest
              type: integer
              readOnly: true
              example: '3'
              x-vue-search-field: true
              x-vue-disaply-order: 1006
            constraints:
              description: 'Additional constraints, if set means true'
              type: array
              items:
                type: string
              example: |-
                - deprecated
                - notifyMember
                - isHidden
                - optinRequiredForEntrants
                - expired
              x-vue-constraint: true
              x-vue-search-field: true
              x-vue-disaply-order: 1100
            achievementDependencies:
              $ref: '#/components/schemas/DependantOn'
              x-vue-search-field: true
              x-vue-disaply-order: 1003
            memberTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: Restrict which members this is available to using their tags
            products:
              description: Restrict this to specific products
              type: array
              items:
                $ref: '#/components/schemas/ProductReduced'
              x-vue-disaply-order: 1006
            productTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: Restrict which products this is available to using their tags
            strategies:
              $ref: '#/components/schemas/AchievementStrategies'
              description: The target to reach in order to receive this achievement
      x-vue-table-show: 'All, Live, Draft, Archived'
      x-vue-list: true
      x-vue-show: true
      x-vue-getter: achievements
      x-vue-sort-by: name
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-ops:
        - Create
        - Update
      x-vue-enity-links-from:
        - Rules
        - Rewards
        - Awards
        - Events
    CreateAchievementRequest:
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - name
            - ruleSets
            - scheduling
            - constraints
          type: object
          properties:
            name:
              description: A name for the Achievement. Can be translated
              type: string
              example: Welcome badge
            description:
              description: A name for the Achievement. Can be translated
              type: string
              example: A Badge to welcome you on board
            termsAndConditions:
              description: Terms and conditions of an achievement. Can be translated
              type: string
              example: Participate to win
            icon:
              description: An Icon id that has been pre uploaded to the system to display for Achievement
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            banner:
              description: >-
                A banner id that has been pre uploaded to the system to display for
                Achievement
              type: string
            bannerLowResolution:
              description: >-
                A bannerLowResolution id that has been pre uploaded to the system to display
                for Achievement
              type: string
            bannerHighResolution:
              description: >-
                A bannerHighResolution id that has been pre uploaded to the system to display
                for Achievement
              type: string
            rules:
              type: array
              items:
                $ref: '#/components/schemas/Rule'
            scheduling:
              $ref: '#/components/schemas/Scheduling'
            maxNumberOfIssues:
              format: int32
              description: Maximum number of issued achievements
              type: integer
              example: '9999'
            translations:
              type: array
              items:
                $ref: '#/components/schemas/Translation'
            rewards:
              type: array
              items:
                $ref: '#/components/schemas/CreateRewardRequest'
            constraints:
              deprecated: true
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- notifyMember - isHidden - deprecated - optinRequiredForEntrants'
            achievementDependencies:
              $ref: '#/components/schemas/DependantOn'
            memberTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: Restrict which members this is available to using their tags
            productIds:
              description: Restrict this to specific products
              type: array
              items:
                type: string
            productTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: Restrict which products this is available to using their tags
            strategies:
              $ref: '#/components/schemas/AchievementStrategies'
              description: The target to reach in order to receive this achievement
            addConstraints:
              description: ''
              type: array
              items:
                type: string
      x-vue-create: achievement
      x-vue-creator: achievements
      x-vue-rules: true
    UpdateAchievementRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
        -
          required: []
          type: object
          properties:
            name:
              description: A name for the Achievement. Can be translated
              type: string
              example: Welcome badge
            description:
              description: A name for the Achievement. Can be translated
              type: string
              example: A Badge to welcome you on board
            termsAndConditions:
              description: Terms and conditions of an achievement. Can be translated
              type: string
              example: Participate to win
            icon:
              description: An Icon id that has been pre uploaded to the system to display for Achievement
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            banner:
              description: >-
                A banner id that has been pre uploaded to the system to display for
                Achievement
              type: string
            bannerLowResolution:
              description: >-
                A bannerLowResolution id that has been pre uploaded to the system to display
                for Achievement
              type: string
            bannerHighResolution:
              description: >-
                A bannerHighResolution id that has been pre uploaded to the system to display
                for Achievement
              type: string
            scheduling:
              $ref: '#/components/schemas/Scheduling'
            achievementLiveStatus:
              $ref: '#/components/schemas/AchievementLiveStatus'
            maxNumberOfIssues:
              format: int32
              description: Maximum number of issued achievements
              type: integer
              example: '9999'
            constraints:
              deprecated: true
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- notifyMember - isHidden - deprecated - optinRequiredForEntrants'
            achievementDependencies:
              $ref: '#/components/schemas/DependantOn'
            memberTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: ''
            productIds:
              description: ''
              type: array
              items:
                type: string
            productTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: ''
            addConstraints:
              description: ''
              type: array
              items:
                type: string
            removeConstraints:
              description: ''
              type: array
              items:
                type: string
            strategies:
              $ref: '#/components/schemas/AchievementStrategies'
              description: The target to reach in order to receive this achievement
      x-vue-update: achievement
      x-vue-updater: achievements
      x-vue-object-type: achievement
    EntrantExport:
      required:
        - accountId
        - bestScores
        - goalReached
        - markerTimeStamp
        - participationId
        - timestamp
        - updateCount
        - id
      type: object
      properties:
        created:
          format: date-time
          description: >-
            ISO8601 timestamp for when a Model was created. All records are stored in UTC time
            zone
          type: string
          readOnly: false
          example: '2019-09-25T15:47:00.000+0000'
        memberId:
          type: string
        memberRefId:
          type: string
        name:
          type: string
        points:
          description: double
          type: number
        rank:
          format: int32
          description: integer
          type: integer
        groups:
          type: array
          items:
            type: string
        awards:
          description: Rewards
          type: array
          items:
            $ref: '#/components/schemas/Award'
        rewards:
          description: Rewards
          type: array
          items:
            $ref: '#/components/schemas/Reward'
    CreateEventRequest:
      required:
        - action
        - sourceValue
        - transactionTimestamp
        - entityRefId
        - memberRefId
        - eventRefId
      type: object
      properties:
        memberRefId:
          description: The reference to this member in external system
          type: string
          example: Player-1
        action:
          description: The identifier that describes the meaning of this event
          type: string
          example: win
        batchId:
          description: >-
            The batch identifier is used to group related event stream data together. This could
            be as simple as a UUID or your internal reference to that distinct player session
            event
          type: string
          example: ecrsamQm23r61KgaPQq7x
        entityRefId:
          description: It is a reference to a game/product ID from external system
          type: string
          example: fruits
        sourceValue:
          format: double
          description: The actual numerical value related to the event
          type: number
          example: '12.345'
        transactionTimestamp:
          format: date-time
          description: >-
            ISO8601 timestamp for when this event happened. All records are stored in UTC time
            zone
          type: string
          example: '2019-09-25T15:47:00.000+0000'
        tags:
          description: A list of Strings of groups that the tag belongs to
          type: array
          items:
            type: string
          example:
            - Dc4swmQBVd51K6gPQqFx
            - Dc4swmQBVd51K6gPQqF2
          x-vue-tags: true
          x-vue-form-type: TAG
        eventRefId:
          description: ''
          type: string
        memberId:
          description: ''
          type: string
        customFields:
          description: A list of custom field entries
          type: object
          additionalProperties: true
          x-vue-custom-fields: true
          x-vue-form-type: CUSTOM
        unitOfMeasure:
          description: >-
            The unit of measure is used to determine the type of the source value. It is used to
            normalize points values for currency based calculations by normalizing the source
            value.
          type: string
      x-vue-create: event
      x-vue-creator: events
    UpdateSpaceRequest:
      required: []
      type: object
      properties:
        accountType:
          description: Type of account; personal or company or vendor
          type: string
          example: company
        masterSpace:
          description: The master account for this account
          type: string
          example: sc1samQmVr61KgaPQq7x
        baseCurrencyUOM:
          description: Foreign key to unit of measure id.
          type: string
        constraints:
          description: 'Additional constraints, if set means true'
          type: array
          items:
            type: string
          example: '- wysiwygEditor'
    CreateSpaceRequest:
      required:
        - name
        - accountType
      type: object
      properties:
        name:
          description: The space name in the Ziqni system
          type: string
          example: Your_space_name
        accountType:
          description: Type of account; personal or company or vendor
          type: string
          example: company
        masterSpace:
          description: The master account for this account
          type: string
          example: sc1samQmVr61KgaPQq7x
        constraints:
          description: 'Additional constraints, if set means true'
          type: array
          items:
            type: string
          example: '- wysiwygEditor'
    RuleOperandLookupRequest:
      required:
        - context
        - context
        - operand
      type: object
      properties:
        context:
          description: The object context to search within
          type: string
        searchText:
          description: 'The text to search, at least 3 characters are required.'
          type: string
        id:
          description: 'The identifier to retrieve, if this is set search text will be ignored'
          type: array
          items:
            type: string
        skip:
          format: int32
          description: 'How many response objects will be skipped for preview. Deafault is zero [0]'
          type: integer
          example: isCountQuery
        limit:
          description: >-
            How many response objects will be returned. Deafult is zero [0] and the maximum is
            fifty [50]
          type: integer
        constraints:
          description: Additional constraints
          type: array
          items:
            type: string
        operand:
          description: The operand like "product.tags" or "member.tags" or "event.product"
          type: string
        sortBy:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/QuerySortBy'
    CreateInstantWinTile:
      description: ''
      required:
        - orderNumber
        - probability
        - icon
        - horizontalPosition
        - verticalPosition
        - probability
      type: object
      properties:
        icon:
          description: The id to the image file
          type: string
        text:
          description: ''
          type: string
        contraints:
          description: 'hasPrizes, glow'
          type: array
          items:
            type: string
          example: hasPrizes
        reward:
          $ref: '#/components/schemas/CreateRewardRequest'
          description: The reward associated with this tile
        location:
          $ref: '#/components/schemas/GridLocation'
          description: ''
        probability:
          format: double
          description: ''
          type: number
        background:
          description: ''
          type: string
    UpdateInstantWinTile:
      description: ''
      required:
        - orderNumber
        - probability
        - icon
        - horizontalPosition
        - verticalPosition
        - probability
      type: object
      properties:
        icon:
          description: The id to the image file
          type: string
        text:
          description: ''
          type: string
        contraints:
          description: 'hasPrizes, glow'
          type: array
          items:
            type: string
          example: hasPrizes
        reward:
          $ref: '#/components/schemas/UpdateRewardRequest'
          description: The reward associated with this tile
        location:
          $ref: '#/components/schemas/GridLocation'
          description: ''
        probability:
          format: double
          description: ''
          type: number
        background:
          description: ''
          type: string
    CompetitionStateActions:
      description: Available actions for competition status
      enum:
        - Deleted
        - Ready
        - Active
        - Finished
        - Finalised
        - Cancelled
      type: string
      example: '"Deleted"'
    InstantWin:
      description: ''
      type: object
      allOf:
        -
          required:
            - instantWinType
            - tiles
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            termsAndConditions:
              type: string
            constraints:
              type: array
              items:
                type: string
              example: hasRewards
            statusCode:
              format: int32
              description: integer
              type: integer
            instantWinType:
              description: integer
              type: integer
            icon:
              description: Attachement id for the corresponding icon image.
              type: string
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            tiles:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/InstantWinTile'
            version:
              format: int64
              type: integer
            style:
              description: A link link to the cms entry for this objects style sheet
              type: string
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          $ref: '#/components/schemas/ModelDefault'
    CreateInstantWinRequest:
      description: This is a request for Instant win creation
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - name
            - gridLocation
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            termsAndConditions:
              type: string
            constraints:
              type: array
              items:
                type: string
              example: hasRewards
            statusCode:
              format: int32
              description: integer
              type: integer
            instantWinType:
              description: integer
              type: integer
            icon:
              description: Attachement id for the corresponding icon image.
              type: string
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            tiles:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/CreateInstantWinTile'
            translations:
              type: array
              items:
                $ref: '#/components/schemas/Translation'
            style:
              description: A link link to the cms entry for this objects style sheet
              type: string
      x-vue-create: instantWin
      x-vue-creator: instantWins
    UpdateInstantWinRequest:
      description: This is a request for Instant win update
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
        -
          required: []
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            termsAndConditions:
              type: string
            constraints:
              type: array
              items:
                type: string
              example: hasRewards
            statusCode:
              format: int32
              description: integer
              type: integer
            instantWinType:
              description: integer
              type: integer
            icon:
              description: Attachement id for the corresponding icon image.
              type: string
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            tiles:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/UpdateInstantWinTile'
            style:
              description: A link link to the cms entry for this objects style sheet
              type: string
      example:
        id: ziqniModelId
        metadata:
          key1: value1
          key2: value
        tags:
          - tagId1
          - tagId2
        customFields:
          customField1: customFieldValue1
          customField2: customFieldValue2
        name: name
        description: description
        adjustmentFactor: 28.55
        actionTypeAdjustmentFactors:
          -
            adjustmentFactor: 67.71
            actionTypeId: ziqniModelId
          -
            adjustmentFactor: 96.91
            actionTypeId: ziqniModelId
      x-vue-update: instantWin
      x-vue-updater: instantWins
    Product:
      description: This is the Product model
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - name
            - adjustmentFactor
            - productRefId
          type: object
          properties:
            name:
              description: The name of the product
              type: string
              example: Hockey madness
              x-vue-as-string: true
              x-vue-translatable: true
              x-vue-sortable: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            description:
              description: The description of the product for your reference
              type: string
              example: Spin the hockey wheal
              x-vue-form-type: TEXTAREA
              x-vue-as-string: false
              x-vue-translatable: true
              x-vue-sortable: true
              x-vue-hidden: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1002
            adjustmentFactor:
              format: double
              description: The multiplier to apply to source values received for this product events
              type: number
              example: '1'
              x-vue-search-field: true
              x-vue-sortable: true
              x-vue-disaply-order: 1003
            productRefId:
              description: >-
                The reference to this product in your system. The reference identifier can not
                be changed after the product has been created
              type: string
              example: hockey-madness
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-sortable: true
              x-vue-disaply-order: 1000
            productType:
              description: The type to this product in your system.
              type: string
              example: hockey-madness
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-sortable: true
              x-vue-disaply-order: 1005
            actionTypeAdjustmentFactors:
              type: array
              items:
                $ref: '#/components/schemas/ActionTypeAdjustmentFactor'
              x-vue-hidden: true
              x-vue-disaply-order: 1004
            icon:
              description: An Icon id that has been pre uploaded to the system to display for Product
              type: string
              x-vue-hidden: true
              x-vue-disaply-order: 1006
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
      example:
        id: someText
        spaceName: someText
        created: '2018-02-10T09:30Z'
        productRefId: '10002'
        name: test1
        adjustmentFactor: '1'
        actionTypeAdjustmentFactors:
          -
            adjustmentFactor: 67.71
            actionTypeId: ziqniModelId
          -
            adjustmentFactor: 96.91
            actionTypeId: ziqniModelId
        customFields:
          customField1: customFieldValue1
          customField2: customFieldValue2
        metadata:
          key1: value1
          key2: value
        tags:
          - tagId1
          - tagId2
        translations:
          -
            languageKey: csb
            translations:
              -
                fieldName: name
                text: test1
          -
            languageKey: den
            translations:
              -
                fieldName: name
                text: test-temp
          -
            languageKey: kmb
            translations:
              -
                fieldName: name
                text: Level-Up
      x-vue-list: true
      x-vue-show: true
      x-vue-getter: products
      x-vue-csv-supported: true
      x-vue-sort-by: name
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-ops:
        - Create
        - Update
    CreateProductRequest:
      description: This is a request for Product creation
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - name
            - adjustmentFactor
            - productRefId
          type: object
          properties:
            name:
              description: The name of the product
              type: string
              example: Hockey madness
            description:
              description: The description of the product for your reference
              type: string
              example: Spin the hockey wheal
              x-vue-form-type: TEXTAREA
            adjustmentFactor:
              format: double
              description: The multiplier to apply to source values received for this product events
              type: number
              example: '1'
            icon:
              description: An Icon id that has been pre uploaded to the system to display for Product
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            productRefId:
              description: >-
                The reference to this product in your system. The reference identifier can not
                be changed after the product has been created
              type: string
              example: hockey-madness
            productType:
              description: The type to this product in your system.
              type: string
              example: hockey-madness
            actionTypeAdjustmentFactors:
              type: array
              items:
                $ref: '#/components/schemas/ActionTypeAdjustmentFactor'
            translations:
              type: array
              items:
                $ref: '#/components/schemas/Translation'
      example:
        productRefId: '10002'
        name: test1
        description: description
        adjustmentFactor: '1'
        actionTypeAdjustmentFactors:
          -
            adjustmentFactor: 67.71
            actionTypeId: ziqniModelId
          -
            adjustmentFactor: 96.91
            actionTypeId: ziqniModelId
        customFields:
          customField1: customFieldValue1
          customField2: customFieldValue2
        metadata:
          key1: value1
          key2: value
        tags:
          - tagId1
          - tagId2
        translations:
          -
            languageKey: csb
            translations:
              -
                fieldName: name
                text: test1
          -
            languageKey: den
            translations:
              -
                fieldName: name
                text: test-temp
          -
            languageKey: kmb
            translations:
              -
                fieldName: name
                text: Level-Up
      x-vue-create: product
      x-vue-creator: products
    UpdateProductRequest:
      description: This is a request for Product update
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
        -
          required: []
          type: object
          properties:
            name:
              description: The name of the product
              type: string
              example: Hockey madness
            description:
              description: The description of the product for your reference
              type: string
              example: Spin the hockey wheal
              x-vue-form-type: TEXTAREA
            icon:
              description: An Icon id that has been pre uploaded to the system to display for Product
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            adjustmentFactor:
              format: double
              description: The multiplier to apply to source values received for this product events
              type: number
              example: '1'
            actionTypeAdjustmentFactors:
              type: array
              items:
                $ref: '#/components/schemas/ActionTypeAdjustmentFactor'
      example:
        id: ziqniModelId
        metadata:
          key1: value1
          key2: value
        tags:
          - tagId1
          - tagId2
        customFields:
          customField1: customFieldValue1
          customField2: customFieldValue2
        name: name
        description: description
        adjustmentFactor: 28.55
        actionTypeAdjustmentFactors:
          -
            adjustmentFactor: 67.71
            actionTypeId: ziqniModelId
          -
            adjustmentFactor: 96.91
            actionTypeId: ziqniModelId
      x-vue-update: product
      x-vue-updater: products
    ConnectionType:
      description: Connection Types
      enum:
        - RabbitMq
        - Kafka
        - SQS
        - Scheduled
      type: string
    Reward:
      allOf:
        -
          $ref: '#/components/schemas/ModelDefault'
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - rewardRank
            - rewardValue
            - rewardType
            - constraints
          type: object
          properties:
            entityType:
              $ref: '#/components/schemas/EntityType'
            entityId:
              description: A unique identifier of an achievement or contest. Dependant on entityType
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            name:
              description: The name of a reward
              type: string
              example: Welcome badge
              x-vue-as-string: true
              x-vue-translatable: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1001
            description:
              description: The description of a Reward
              type: string
              example: A badge to welcome a new player
              x-vue-translatable: true
              x-vue-hidden: true
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1002
            rewardRank:
              description: >-
                If used in the context of contest this will associate with the rank of the
                leaderboard
              type: string
              example: '1,2 3 ...10'
              x-vue-search-field: true
              x-vue-sortable: true
              x-vue-disaply-order: 1003
            rewardValue:
              format: double
              description: Numerical value of the reward that will be issued based on the reward type
              type: number
              example: '1'
              x-vue-search-field: true
              x-vue-disaply-order: 1004
            rewardType:
              $ref: '#/components/schemas/RewardTypeReduced'
              x-vue-search-all: true
              x-vue-search-field: true
              x-vue-disaply-order: 1005
            memberTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: >-
                This filter limits which member are eligible for this prize based on their
                tags
              x-vue-search-field: true
              x-vue-disaply-order: 1005
            icon:
              description: An Icon id that has been pre uploaded to the system to display for reward
              type: string
              example: Dc4swmQBVd51K6gPQqFx
              x-vue-hidden: true
              x-vue-disaply-order: 1000
              x-vue-form-type: IMAGE
            issueLimit:
              format: int32
              description: how many of thsese rewards are
              type: integer
              example: '2'
              x-vue-search-field: true
              x-vue-disaply-order: 1005
            delay:
              format: int32
              description: Delay of issuing a reward in minutes
              type: integer
              example: '2'
              x-vue-search-field: true
              x-vue-disaply-order: 1005
            pointInTime:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Reward is available until a specific point in
                time. All records are stored in UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
              x-vue-search-field: true
              x-vue-disaply-order: 1006
            period:
              format: int32
              description: Reward available for a period of time from issuing in minutes
              type: integer
              example: '2'
              x-vue-search-field: true
              x-vue-disaply-order: 1007
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: |-
                - notifyMember 
                - acknowledgementRequired
              x-vue-constraint: true
      x-vue-list: true
      x-vue-show: true
      x-vue-getter: rewards
      x-vue-sort-by: name
      x-vue-sort-order: Asc
      x-vue-limit: 10
      x-vue-ops:
        - Create
        - Update
    CreateRewardRequest:
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - rewardRank
            - name
            - rewardValue
            - rewardTypeId
            - constraints
            - delay
          type: object
          properties:
            name:
              description: The name of a reward
              type: string
              example: Welcome badge
            description:
              description: The description of a Reward
              type: string
              example: A badge to welcome a new player
            rewardRank:
              description: >-
                If used in the context of contest this will associate with the rank of the
                leaderboard
              type: string
              example: '1,2 3 ...10'
              x-vue-form-type: TEXTAREA
            rewardValue:
              format: double
              description: Numerical value of the reward that will be issued based on the reward type
              type: number
              example: '1'
            icon:
              description: An Icon id that has been pre uploaded to the system to display for reward
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            issueLimit:
              format: int32
              description: how many of thsese rewards are
              type: integer
              example: '2'
            memberTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: >-
                This filter limits which member are eligible for this prize based on their
                tags
            delay:
              format: int32
              description: Delay of issuing a reward in minutes
              type: integer
              example: '2'
            pointInTime:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Reward is available until a specific point in
                time. All records are stored in UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            period:
              format: int32
              description: Reward available for a period of time from issuing in minutes
              type: integer
              example: '2'
            translations:
              type: array
              items:
                $ref: '#/components/schemas/Translation'
            addConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: |-
                - notifyMember 
                - acknowledgementRequired
            rewardTypeId:
              description: A unique id of the Reward Type
              type: string
              example: Dc4swmQBVd51K6gPQqFx
      example:
        customFields:
          test_cf_termd65bcccf-d37f-441a-a96d-d0da55a77719:
            - 1
            - 2
        tags:
          - Test_key-7563406f-6983-4308-9422-91838fd40fe7
        metadata:
          fea089d7-f751-432e-8646-838c7769ab1e: f2dfff99-b766-414f-8e33-4d77aebbdb5e
        name: Test_name-b6f072c2-df68-4905-a4f6-c19246ff5dc8
        key: Test_key-2148168c-3a6c-48ba-b005-68a67a10aebc
        unitOfMeasureType: Other
        translations:
          -
            languageKey: csb
            translations:
              -
                fieldName: name
                text: test1
          -
            languageKey: den
            translations:
              -
                fieldName: name
                text: test-temp
          -
            languageKey: kmb
            translations:
              -
                fieldName: name
                text: Level-Up
        addConstraints:
          - system
      x-vue-create: reward
      x-vue-creator: rewards
    UpdateRewardRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
        -
          required:
            - rewardType
          type: object
          properties:
            name:
              description: The name of a reward
              type: string
              example: Welcome badge
            description:
              description: The description of a Reward
              type: string
              example: A badge to welcome a new player
            rewardRank:
              description: >-
                If used in the context of contest this will associate with the rank of the
                leaderboard
              type: string
              example: '1,2 3 ...10'
            rewardValue:
              format: double
              description: Numerical value of the reward that will be issued based on the reward type
              type: number
              example: '1'
            rewardTypeId:
              description: A unique id of the Reward Type
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            icon:
              description: An Icon id that has been pre uploaded to the system to display for reward
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            issueLimit:
              format: int32
              description: how many of thsese rewards are
              type: integer
              example: '2'
            memberTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: >-
                This filter limits which member are eligible for this prize based on their
                tags
            delay:
              format: int32
              description: Delay of issuing a reward in minutes
              type: integer
              example: '2'
            pointInTime:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Reward is available until a specific point in
                time. All records are stored in UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            period:
              format: int32
              description: Reward available for a period of time from issuing in minutes
              type: integer
              example: '2'
            addConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- memberAcknowledgmentRequired'
            removeConstraints:
              description: Remove constraints
              type: array
              items:
                type: string
              example: '- memberAcknowledgmentRequired'
      x-vue-update: reward
      x-vue-updater: rewards
    CreateEntityRewardRequest:
      allOf:
        -
          $ref: '#/components/schemas/CreateOptParamModels'
        -
          required:
            - rewardRank
            - name
            - rewardValue
            - rewardTypeId
            - constraints
            - entityType
            - entityId
          type: object
          properties:
            entityType:
              $ref: '#/components/schemas/RewardEntityType'
            entityId:
              description: A unique identifier of an achievement or contest. Dependant on entityType
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            name:
              description: The name of a reward
              type: string
              example: Welcome badge
            description:
              description: The description of a Reward
              type: string
              example: A badge to welcome a new player
            rewardRank:
              description: >-
                If used in the context of contest this will associate with the rank of the
                leaderboard
              type: string
              example: '1,2 3 ...10'
            rewardValue:
              format: double
              description: Numerical value of the reward that will be issued based on the reward type
              type: number
              example: '1'
            icon:
              description: An Icon id that has been pre uploaded to the system to display for reward
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            issueLimit:
              format: int32
              description: how many of thsese rewards are
              type: integer
              example: '2'
            delay:
              format: int32
              description: Delay of issuing a reward in minutes
              type: integer
              example: '2'
            pointInTime:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Reward is available until a specific point in
                time. All records are stored in UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            period:
              format: int32
              description: Reward available for a period of time from issuing in minutes
              type: integer
              example: '2'
            memberTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: >-
                This filter limits which member are eligible for this prize based on their
                tags
            translations:
              type: array
              items:
                $ref: '#/components/schemas/Translation'
            constraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- notifyMember - isMemberAcknowledgmentRequired'
            rewardTypeId:
              description: A unique id of the Reward Type
              type: string
              example: Dc4swmQBVd51K6gPQqFx
    UpdateEntityRewardRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
        -
          required: []
          type: object
          properties:
            entityType:
              $ref: '#/components/schemas/RewardEntityType'
            entityId:
              description: A unique identifier of an achievement or contest. Dependant on entityType
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            name:
              description: The name of a reward
              type: string
              example: Welcome badge
            description:
              description: The description of a Reward
              type: string
              example: A badge to welcome a new player
            rewardRank:
              description: >-
                If used in the context of contest this will associate with the rank of the
                leaderboard
              type: string
              example: '1,2 3 ...10'
            rewardValue:
              format: double
              description: Numerical value of the reward that will be issued based on the reward type
              type: number
              example: '1'
            icon:
              description: An Icon id that has been pre uploaded to the system to display for reward
              type: string
              example: Dc4swmQBVd51K6gPQqFx
            issueLimit:
              format: int32
              description: how many of thsese rewards are
              type: integer
              example: '2'
            delay:
              format: int32
              description: Delay of issuing a reward in minutes
              type: integer
              example: '2'
            pointInTime:
              format: date-time
              description: >-
                ISO8601 timestamp for when a Reward is available until a specific point in
                time. All records are stored in UTC time zone
              type: string
              example: '2019-09-25T15:47:00.000+0000'
            period:
              format: int32
              description: Reward available for a period of time from issuing in minutes
              type: integer
              example: '2'
            memberTagsFilter:
              $ref: '#/components/schemas/DependantOn'
              description: >-
                This filter limits which member are eligible for this prize based on their
                tags
            translations:
              type: array
              items:
                $ref: '#/components/schemas/Translation'
            addConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: |-
                - notifyMember 
                - acknowledgementRequired
            removeConstraints:
              description: Additional constraints
              type: array
              items:
                type: string
              example: '- notifyMember - isMemberAcknowledgmentRequired'
            rewardTypeId:
              description: A unique id of the Reward Type
              type: string
              example: Dc4swmQBVd51K6gPQqFx
    ManageTagsRequest:
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          required: []
          type: object
      properties:
        newTags:
          description: List of new tags to add
          type: array
          items:
            type: string
        removeTags:
          description: List of tags to remove if present
          type: array
          items:
            type: string
      x-vue-update: awardTag
      x-vue-updater: awardTags
    UpdateAwardRequest:
      description: Request for tag update
      allOf:
        -
          $ref: '#/components/schemas/UpdateModelDefault'
        -
          $ref: '#/components/schemas/UpdateOptParamModels'
        -
          required:
            - entityType
          type: object
      example: {}
      x-vue-update: tag
      x-vue-updater: tags
  responses:
    ApiResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          examples:
            Example:
              $ref: '#/components/examples/ErrorResponse'
      description: A list of outcomes and/or errors
    ProductResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductResponse'
          examples:
            ProductResponseBodyExample:
              value:
                meta:
                  objectType: some text
                  totalRecords: 26
                  resultCount: 2
                  errorCount: 0
                  limit: 2
                  skip: 0
                results:
                  -
                    id: ziqniModelId
                    spaceName: ziqniSpaceName
                    created: '2018-02-10T09:30Z'
                    productRefId: '10002'
                    name: test1
                    adjustmentFactor: '1'
                    actionTypeAdjustmentFactors:
                      -
                        adjustmentFactor: 67.71
                        actionTypeId: ziqniModelId
                      -
                        adjustmentFactor: 96.91
                        actionTypeId: ziqniModelId
                    customFields:
                      customField1: customFieldValue1
                      customField2: customFieldValue2
                    metadata:
                      key1: value1
                      key2: value
                    tags:
                      - tagId1
                      - tagId2
                    translations:
                      -
                        languageKey: csb
                        translations:
                          -
                            fieldName: name
                            text: test1
                      -
                        languageKey: den
                        translations:
                          -
                            fieldName: name
                            text: test-temp
                      -
                        languageKey: kmb
                        translations:
                          -
                            fieldName: name
                            text: Level-Up
                  -
                    id: ziqniModelId
                    spaceName: ziqniSpaceName
                    created: '2018-02-10T09:30Z'
                    productRefId: '10002'
                    name: test1
                    adjustmentFactor: '1'
                    actionTypeAdjustmentFactors:
                      -
                        adjustmentFactor: 67.71
                        actionTypeId: ziqniModelId
                      -
                        adjustmentFactor: 96.91
                        actionTypeId: ziqniModelId
                    customFields:
                      customField1: customFieldValue1
                      customField2: customFieldValue2
                    metadata:
                      key1: value1
                      key2: value
                    tags:
                      - tagId1
                      - tagId2
                    translations:
                      -
                        languageKey: csb
                        translations:
                          -
                            fieldName: name
                            text: test1
                      -
                        languageKey: den
                        translations:
                          -
                            fieldName: name
                            text: test-temp
                      -
                        languageKey: kmb
                        translations:
                          -
                            fieldName: name
                            text: Level-Up
                errors:
                  -
                    modelId: some text
                    errorCode: 33
                    message: some text
                    errorAt: 13
                    detail:
                      -
                        modelId: some text
                        errorCode: 98
                        message: some text
                        errorAt: 97
                      -
                        modelId: some text
                        errorCode: 25
                        message: some text
                        errorAt: 58
                  -
                    modelId: some text
                    errorCode: 30
                    message: some text
                    errorAt: 46
                    detail:
                      -
                        modelId: some text
                        errorCode: 68
                        message: some text
                        errorAt: 8
                      -
                        modelId: some text
                        errorCode: 19
                        message: some text
                        errorAt: 36
      description: A list of products and/or errors
    CompetitionReducedResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CompetitionReducedResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: Simplified competition response
    ContestReducedResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContestReducedResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: Simplified contest response
    MemberResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberResponse'
          examples:
            BadRequest:
              $ref: '#/components/examples/GetErrorResponse'
              value:
                meta:
                  objectType: some text
                  totalRecords: 26
                  resultCount: 2
                  errorCount: 2
                  limit: 2
                  skip: 0
                results:
                  -
                    id: ziqniModelId
                    spaceName: ziqniModelSpaceName
                    created: '2018-02-10T09:30Z'
                    name: name
                    memberRefId: memberRefId
                    memberType: Individual
                    teamMembers:
                      - ziqniMemberId
                      - ziqniMemberId
                    constraints:
                      - disabled
                    timeZoneOffset: UTC
                    customFields:
                      customField1: customFieldValue1
                      customField2: customFieldValue2
                    tags:
                      - ziqniTagId
                      - ziqniTagId
                    metadata:
                      key1: value1
                      key2: value
                  -
                    id: ziqniModelId
                    spaceName: ziqniModelSpaceName
                    created: '2018-02-10T09:30Z'
                    name: name
                    memberRefId: memberRefId
                    memberType: Individual
                    teamMembers:
                      - ziqniMemberId
                      - ziqniMemberId
                    constraints:
                      - disabled
                    timeZoneOffset: UTC
                    customFields:
                      customField1: customFieldValue1
                      customField2: customFieldValue2
                    tags:
                      - ziqniTagId
                      - ziqniTagId
                    metadata:
                      key1: value1
                      key2: value
                errors:
                  -
                    modelId: some text
                    errorCode: 41
                    message: some text
                    errorAt: 41
                    detail:
                      -
                        modelId: some text
                        errorCode: 51
                        message: some text
                        errorAt: 83
                      -
                        modelId: some text
                        errorCode: 99
                        message: some text
                        errorAt: 55
                  -
                    modelId: some text
                    errorCode: 80
                    message: some text
                    errorAt: 71
                    detail:
                      -
                        modelId: some text
                        errorCode: 83
                        message: some text
                        errorAt: 89
                      -
                        modelId: some text
                        errorCode: 7
                        message: some text
                        errorAt: 86
      description: A list of members and/or errors
    AchievementReducedResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AchievementReducedResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: Simplified achievement response
    MemberAwardResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberAwardResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
              value:
                meta:
                  objectType: some text
                  totalRecords: 26
                  resultCount: 2
                  errorCount: 2
                  limit: 2
                  skip: 0
                results:
                  -
                    id: someText
                    spaceName: someText
                    created: '2018-02-10T09:30Z'
                    rewardId: ziqniRewardModelId
                    rewardType: ziqniRewardType
                    rewardTypeId: ziqniRewardTypeModelId
                    rewardValue: 200
                    delay: 20
                    entityType: Reward
                    entityId: ziqniModelId
                    pointInTime: '2019-09-25T15:47:00.000+0000'
                    period: 2
                    tags:
                      - ziqniTagModelId
                      - ziqniTagModelId
                    constraints:
                      - disabled
                    metadata:
                      key1: value1
                      key2: value
                    claimedTimestamp: '2018-02-10T09:30Z'
                  -
                    id: someText
                    spaceName: someText
                    created: '2018-02-10T09:30Z'
                    rewardId: ziqniRewardModelId
                    rewardType: ziqniRewardType
                    rewardTypeId: ziqniRewardTypeModelId
                    rewardValue: 200
                    delay: 20
                    entityType: Reward
                    entityId: ziqniModelId
                    pointInTime: '2019-09-25T15:47:00.000+0000'
                    period: 2
                    tags:
                      - ziqniTagModelId
                      - ziqniTagModelId
                    constraints:
                      - disabled
                    metadata:
                      key1: value1
                      key2: value
                    claimedTimestamp: '2018-02-10T09:30Z'
                errors:
                  -
                    modelId: some text
                    errorCode: 91
                    message: some text
                    errorAt: 32
                    detail:
                      -
                        modelId: some text
                        errorCode: 82
                        message: some text
                        errorAt: 12
                      -
                        modelId: some text
                        errorCode: 25
                        message: some text
                        errorAt: 60
                  -
                    modelId: some text
                    errorCode: 11
                    message: some text
                    errorAt: 1
                    detail:
                      -
                        modelId: some text
                        errorCode: 6
                        message: some text
                        errorAt: 48
                      -
                        modelId: some text
                        errorCode: 16
                        message: some text
                        errorAt: 40
      description: A list of member awards and/or errors
    CompetitionResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CompetitionResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of competitions and/or errors
    CreateCompetitionRequestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateCompetitionRequest'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A modeled response of a Competition that can be used for Competition creation
    CompetitionLeaderboardResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CompetitionLeaderboardResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of Contests Leaderboards and/or errors
    EntrantResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntrantResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of Entrants for the competition/contest and/or errors
    BracketResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BracketResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list Contests with rewards in Brackets for the competition id requested and/or errors
    ContestResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContestResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of contests and/or errors
    CloneContestResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloneContestResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: >-
        A modeled response of a Contest that can be used for Contest creation * The competitionId has
        to be changed to the competition Id of the competition that the contest will be cloned to
    ContestLeaderboardResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ContestLeaderboardResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A leaderboard for the contest and/or errors
    AchievementResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AchievementResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of achievements and/or errors
    AchievementIssuedResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AchievementIssuedResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A count of Issued Achievements for the id requested
    MemberAchievementIssuedResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberAchievementIssuedResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
              value:
                meta:
                  objectType: some text
                  totalRecords: 26
                  resultCount: 2
                  errorCount: 2
                  limit: 2
                  skip: 0
                results:
                  -
                    entityId: ziqniEntityId
                    countValue: 83
                    latestIssuedTimestamp: '2018-02-10T09:30Z'
                    memberId: ziqniMemberId
                    memberRefId: memberRefId
                    name: name
                  -
                    entityId: ziqniEntityId
                    countValue: 83
                    latestIssuedTimestamp: '2018-02-10T09:30Z'
                    memberId: ziqniMemberId
                    memberRefId: memberRefId
                    name: name
                errors:
                  -
                    modelId: some text
                    errorCode: 37
                    message: some text
                    errorAt: 50
                    detail:
                      -
                        modelId: some text
                        errorCode: 51
                        message: some text
                        errorAt: 9
                      -
                        modelId: some text
                        errorCode: 61
                        message: some text
                        errorAt: 86
                  -
                    modelId: some text
                    errorCode: 21
                    message: some text
                    errorAt: 39
                    detail:
                      -
                        modelId: some text
                        errorCode: 68
                        message: some text
                        errorAt: 55
                      -
                        modelId: some text
                        errorCode: 91
                        message: some text
                        errorAt: 86
      description: A count of Achievement issued for for each member
    CloneAchievementResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloneAchievementResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A modeled response of an Achievement that can be used for Achievement creation
    RewardResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RewardResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of rewards and/or errors
    AwardResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AwardResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of awards and/or errors
    LanguageResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LanguageResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of languages for the space and/or errors
    CustomFieldResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomFieldResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
              value:
                meta:
                  objectType: some text
                  totalRecords: 26
                  resultCount: 2
                  errorCount: 0
                  limit: 2
                  skip: 0
                results:
                  -
                    id: ziqniModelId
                    name: some text
                    key: some text
                    description: some text
                    fieldType: TextArray
                    appliesTo: Repository
                  -
                    id: ziqniModelId
                    name: some text
                    key: some text
                    description: some text
                    fieldType: TextArray
                    appliesTo: Repository
                errors:
                  -
                    modelId: some text
                    errorCode: 48
                    message: some text
                    errorAt: 42
                    detail:
                      -
                        modelId: some text
                        errorCode: 66
                        message: some text
                        errorAt: 88
                      -
                        modelId: some text
                        errorCode: 63
                        message: some text
                        errorAt: 60
                  -
                    modelId: some text
                    errorCode: 0
                    message: some text
                    errorAt: 4
                    detail:
                      -
                        modelId: some text
                        errorCode: 15
                        message: some text
                        errorAt: 69
                      -
                        modelId: some text
                        errorCode: 15
                        message: some text
                        errorAt: 55
      description: A list of custom fields and/or errors
    UnitOfMeasureResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnitOfMeasureResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of unit of measure and/or errors
    TransformerResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransformerResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of transformers and/or errors
    ConnectionResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConnectionResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of consumer connections and/or errors
    WebhookResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of webhooks and/or errors
    EventResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: Unauthorized
    SpaceResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SpaceResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of spaces and/or errors
    UserResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: Details of a User returned
    CollaboratorResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollaboratorResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: List of Collaborators
    ProfileResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProfileResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: Details of a User returned
    ApiKeyResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiKeyResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: List of Api keys
    FileObjectsResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FileObjectsResponse'
          examples:
            ExampleValue:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of files and/or errors
    AvailableLanguageResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LanguageResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of languages for the space and/or errors
    CollaboratorRolesResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CollaboratorRolesResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: List of Collaborators
    WebhookTriggersResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebhookTriggersResponse'
      description: ''
    MemberMessageResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberMessageResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of messages and/or errors
    AccountMessageResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AccountMessageResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of messages and/or errors
    ResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
          examples:
            BadRequest:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of members and/or errors
    RepositoryResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RepositoryResponse'
          examples:
            ExampleValue:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of repositories and/or errors
    RuleOperandLookupResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RuleOperandLookupResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of rule operand lookup values and/or errors
    RuleResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RuleResponse'
          examples:
            ExampleValue:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of repositories and/or errors
    TranslationResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TranslationResponse'
      description: ''
    TagResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TagResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
              value:
                meta:
                  objectType: some text
                  totalRecords: 26
                  resultCount: 2
                  errorCount: 0
                  limit: 2
                  skip: 0
                results:
                  -
                    id: ziqniModelId
                    spaceName: ziqniSpaceName
                    created: '2018-02-10T09:30Z'
                    name: Test tag name
                    key: test_tag_key
                    description: test description
                    metadata:
                      key1: value1
                      key2: value
                    entityTypes:
                      - Reward
                      - Repository
                  -
                    id: ziqniModelId1
                    spaceName: ziqniSpaceName
                    created: '2018-02-10T09:30Z'
                    name: Test tag name
                    key: test_tag_key
                    description: test description
                    metadata:
                      key1: value1
                      key2: value
                    entityTypes:
                      - Reward
                      - Repository
                errors:
                  -
                    modelId: some text
                    errorCode: 16
                    message: some text
                    errorAt: 63
                    detail:
                      -
                        modelId: some text
                        errorCode: 36
                        message: some text
                        errorAt: 38
                      -
                        modelId: some text
                        errorCode: 95
                        message: some text
                        errorAt: 49
                  -
                    modelId: some text
                    errorCode: 18
                    message: some text
                    errorAt: 94
                    detail:
                      -
                        modelId: some text
                        errorCode: 34
                        message: some text
                        errorAt: 8
                      -
                        modelId: some text
                        errorCode: 59
                        message: some text
                        errorAt: 15
      description: A list of action types and/or errors
    MessageResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AccountMessageResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of messages and/or errors
    ComputeEngineResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ComputeEngineResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: List of Compute Engines
    CloneCompetitionResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloneCompetitionResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: >-
        A modeled response of a Contest that can be used for Contest creation * The competitionId has
        to be changed to the competition Id of the competition that the contest will be cloned to
    TokenResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenResponse'
      description: ''
    SubscriptionResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntityChangeSubscriptionResponse'
      description: ''
    NotificationResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotificationResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of messages and/or errors
    LeaderboardResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LeaderboardResponse'
      description: ''
    RewardTypeResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RewardTypeResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
              value:
                meta:
                  objectType: some text
                  totalRecords: 26
                  resultCount: 1
                  errorCount: 0
                  limit: 2
                  skip: 0
                results:
                  -
                    id: someText
                    spaceName: someText
                    created: '2018-02-10T09:30Z'
                    customFields:
                      customField1: customFieldValue1
                      customField2: customFieldValue2
                    metadata:
                      key1: value1
                      key2: value
                    tags:
                      - tagId1
                      - tagId2
                    unitOfMeasure: ''
                    name: someText
                    description: someText
                    key: someText
                    constraints:
                      - system
                errors:
                  -
                    modelId: some text
                    errorCode: 78
                    message: some text
                    errorAt: 90
                    detail:
                      -
                        modelId: some text
                        errorCode: 90
                        message: some text
                        errorAt: 24
                      -
                        modelId: some text
                        errorCode: 52
                        message: some text
                        errorAt: 45
                  -
                    modelId: some text
                    errorCode: 55
                    message: some text
                    errorAt: 64
                    detail:
                      -
                        modelId: some text
                        errorCode: 72
                        message: some text
                        errorAt: 56
                      -
                        modelId: some text
                        errorCode: 56
                        message: some text
                        errorAt: 90
      description: A list of reward types and/or errors
    ActionTypeResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActionTypeResponse'
          examples:
            Example Response:
              value:
                meta:
                  objectType: some text
                  totalRecords: 26
                  resultCount: 2
                  errorCount: 0
                  limit: 2
                  skip: 0
                results:
                  -
                    id: ziqniModelId
                    spaceName: ziqniSpaceName
                    created: '2018-02-10T09:30Z'
                    constraints: []
                    description: ''
                    key: ''
                    name: ''
                    unitOfMeasure: ''
                    customFields: {}
                    tags:
                      - ziqniTag
                      - ziqniTag1
                    metadata: {}
                  -
                    id: ziqniModelId
                    spaceName: ziqniSpaceName
                    created: '2018-02-10T09:30Z'
                    constraints: []
                    description: ''
                    key: ''
                    name: ''
                    unitOfMeasure: ''
                    customFields: {}
                    tags:
                      - ziqniTag
                      - ziqniTag1
                    metadata: {}
                errors:
                  -
                    modelId: some text
                    errorCode: 97
                    message: some text
                    errorAt: 79
                    detail:
                      -
                        modelId: some text
                        errorCode: 68
                        message: some text
                        errorAt: 46
                      -
                        modelId: some text
                        errorCode: 32
                        message: some text
                        errorAt: 87
                  -
                    modelId: some text
                    errorCode: 76
                    message: some text
                    errorAt: 21
                    detail:
                      -
                        modelId: some text
                        errorCode: 91
                        message: some text
                        errorAt: 86
                      -
                        modelId: some text
                        errorCode: 93
                        message: some text
                        errorAt: 48
      description: A list of action types and/or errors
    ObjectParametersResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ObjectParametersResponse'
      description: ''
    LogEventResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LogEventResponse'
          examples:
            Example:
              $ref: '#/components/examples/GetErrorResponse'
      description: A list of log events and/or errors
    EntityGraphResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntityGraphResponse'
      description: ''
    EntrantCountResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EntrantCountResponse'
      description: A count of Entrants for the competition/contest to export and/or errors
    InstantWinResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InstantWinResponse'
          examples:
            Example:
              value:
                meta: {}
                results:
                  - {}
                  - {}
                errors:
                  -
                    modelId: some text
                    errorCode: 96
                    message: some text
                    errorAt: 98
                    detail:
                      -
                        modelId: some text
                        errorCode: 96
                        message: some text
                        errorAt: 89
                      -
                        modelId: some text
                        errorCode: 34
                        message: some text
                        errorAt: 87
                  -
                    modelId: some text
                    errorCode: 75
                    message: some text
                    errorAt: 39
                    detail:
                      -
                        modelId: some text
                        errorCode: 10
                        message: some text
                        errorAt: 98
                      -
                        modelId: some text
                        errorCode: 56
                        message: some text
                        errorAt: 92
      description: A list of Instant wins and/or errors
  parameters:
    spaceName:
      name: spaceName
      description: This is the space name which is linked to the account
      schema:
        type: string
      in: path
      required: true
    idPath:
      name: id
      description: Unique identifier of the resource
      schema:
        type: string
      in: path
      required: true
    idQuery:
      name: id
      description: The unique identifiers of the resources
      schema:
        type: array
        items:
          type: string
      in: query
    refId:
      name: refIds
      description: The reference ids  of the resources
      schema:
        type: array
        items:
          type: string
      in: query
    emailQuery:
      name: emails
      description: The list of user emails to search by
      schema:
        type: array
        items:
          type: string
      in: query
    limitResults:
      name: _limit
      description: Limit the returned total records found
      schema:
        type: integer
      in: query
    skipResults:
      name: _skip
      description: Skip the returned records found and return the next batch of records
      schema:
        type: integer
      in: query
  examples:
    GetErrorResponse:
      description: Example Value
      value:
        meta:
          resultCount: 0
          errorCount: 1
          skip: 0
          limit: 100
        results: []
        errors:
          -
            errorCode: 1007
            message: The error was caused by an invalid ID being submitted
            detail: []
    ErrorResponse:
      description: Example Value
      value:
        meta:
          resultCount: 0
          errorCount: 1
        results: []
        errors:
          -
            errorCode: 1007
            message: The error was caused by an invalid ID being submitted
            detail: []
  securitySchemes:
    OAuth2:
      flows:
        authorizationCode:
          authorizationUrl: 'https://identity.ziqni.com/realms/ziqni/protocol/openid-connect/auth'
          tokenUrl: 'https://identity.ziqni.com/realms/ziqni/protocol/openid-connect/token'
          scopes:
            AdminAchievements: Grants full read and write access
            ManageAchievements: Grants read and restricted write access
            ViewAchievement: Grants read access
            AdminActions: Grants full read and write access
            ViewActions: Grants read access
            AdminApi: Grants full read and write access
            AdminClaim: Grants full read and write access
            ViewAwards: Grants read access
            AdminCollaborator: Grants full read and write access
            AdminCompetition: Grants full read and write access
            ManageCompetition: Grants read and restricted write access
            ViewCompetitions: Grants read access
            AdminConsumer: Grants full read and write access
            AdminContest: Grants full read and write access
            ManageContest: Grants read and restricted write access
            ViewContest: Grants read access
            AdminCustomFields: Grants full read and write access
            ViewCustomFields: Grants read access
            AdminEvents: Grants full read and write access
            ViewEvents: Grants read access
            AdminObjects: Grants full read and write access
            ManageObjects: Grants read and restricted write access
            ViewObjects: Grants read access
            AdminLanguage: Grants full read and write access
            ViewLanguage: Grants read access
            logout: Grants read access
            AdminMembers: Grants full read and write access
            ManageMembers: Grants read and restricted write access
            ViewMembers: Grants read access
            AdminMessages: Grants full read and write access
            ManageMessages: Grants read and restricted write access
            ViewMessages: Grants read access
            AdminProducts: Grants full read and write access
            ManageProducts: Grants read and restricted write access
            ViewProducts: Grants read access
            ManageFileObjectRep: Grants read and restricted write access
            AdminRewards: Grants full read and write access
            ManageRewards: Grants read and restricted write access
            ViewRewards: Grants read access
            AdminRewardType: Grants full read and write access
            ManageRewardType: Grants read and restricted write access
            ViewRewardType: Grants read access
            ViewRules: Grants read access
            AdminSpaces: Grants full read and write access
            ViewSpaces: Grants read access
            AdminTransformers: Grants full read and write access
            ViewAccountSettings: Grants read access
            AdminUOM: Grants full read and write access
            ManageUOM: Grants read and restricted write access
            ViewUOM: Grants read access
            AdminUser: Grants full read and write access
            ViewUser: Grants read access
            AdminWebhooks: Grants full read and write access
            AdminTags: Grants full read and write access
            ManageTags: Grants read and restricted write access
            ViewTags: Grants read access
            Owner: The space owner
            Collaborator: A collaborator in this space
      type: oauth2
security:
  -
    OAuth2:
      - Owner
      - Collaborator
tags:
  -
    name: products
    description: Perform REST operations on Products
  -
    name: members
    description: Perform REST operations on Members
  -
    name: competitions
    description: Perform REST operations on Competitions
  -
    name: contests
    description: Perform REST operations on Contests
  -
    name: achievements
    description: Perform REST operations on Achievements
  -
    name: rewards
    description: Perform REST operations on Rewards
  -
    name: awards
    description: Perform REST operations on Awards
  -
    name: reward-types
    description: Perform REST operations on Reward Types
  -
    name: action-types
    description: Perform REST operations on Action Types
  -
    name: rules
    description: Perform REST operations on Rules
  -
    name: languages
    description: Perform REST operations on Languages
  -
    name: custom-fields
    description: Perform REST operations on Custom Fields
  -
    name: units-of-measure
    description: Perform REST operations on Units Of Measure
  -
    name: transformers
    description: Perform REST operations on transformers
  -
    name: consumers
    description: Perform REST operations on consumers
  -
    name: webhooks
    description: Perform REST operations on webhooks
  -
    name: events
    description: Perform REST operations on events
  -
    name: spaces
    description: Perform REST operations on users spaces
  -
    name: users
    description: Perform REST operations on users managed by this space
  -
    name: user
    description: Perform REST operations for the current user
  -
    name: two-factor-auth
    description: Perform REST operations for the current users two factor settings
  -
    name: collaborators
    description: Perform REST operations on collaborators
  -
    name: api-keys
    description: Perform REST operations on api keys
  -
    name: repositories
    description: Perform REST operations on repositories
  -
    name: file-objects
    description: Perform REST operations on file-objects
  -
    name: tags
    description: Perform REST operations on tags
  -
    name: translations
    description: Perform REST operations on translations
  -
    name: account-messages
    description: Perform operations on Account Messages.
  -
    name: member-messages
    description: Perform operations on Member Messages
  -
    name: notifications
    description: Perform operations on Notifications
  -
    name: compute-engine
    description: Perform operations on Compute Engine
externalDocs:
  description: Find out more about Ziqni
  url: 'https://www.ziqni.com'
