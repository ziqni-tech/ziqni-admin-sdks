openapi: 3.0.1
info:
  title: ZIQNI Core API
  version: 3.0.15
  description: This is the core api for Ziqni.
  contact:
    name: Support Team
    url: 'https://www.ziqni.com/'
    email: support@ziqni.com
  license:
    name: Ziqni General Licence
    url: 'https://www.ziqni.com/terms-of-service/'
servers:
  -
    url: 'https://core.ziqni.local/ziqni-core'
    description: Local development environment
  -
    url: 'https://core-staging.ziqni.com/ziqni-core'
    description: Staging environment
paths:
  /sessions/member: {}
  /sessions/tournament: {}
  /sessions/account: {}
  /access-log-events/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccessLogEventRequest'
        required: true
      tags:
        - access-log-events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateAccessLogEventsAsList
      summary: Update a list of access-log-events
  /access-log-events/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - access-log-events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessLogEventsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveAccessLogEventsAsList
      summary: Retrieve a list of access-log-events
  /access-log-events/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - access-log-events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessLogEventsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findAccessLogEventsByAccountId
      summary: Retrieve a list of access-log-events by account Id
  /access-log-events/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAccessLogEventRequest'
        required: true
      tags:
        - access-log-events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteAccessLogEventsAsList
      summary: Delete a list of access-log-events
  /access-log-events/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccessLogEventRequest'
        required: true
      tags:
        - access-log-events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createAccessLogEventsAsList
      summary: Create a list of access-log-events
  /account-messages/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountMessageRequest'
        required: true
      tags:
        - account-messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createAccountMessagesAsList
      summary: Create a list of account messages
  /account-messages/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAccountMessageRequest'
        required: true
      tags:
        - account-messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteAccountMessagesAsList
      summary: Delete a list of account messages
  /account-messages/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - account-messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountMessagesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findAccountMessagesByAccountId
      summary: Retrieve a list of account messages by account Id
  /account-messages/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - account-messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountMessagesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveAccountMessagesAsList
      summary: Retrieve a list of account messages
  /account-messages/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountMessageRequest'
        required: true
      tags:
        - account-messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateAccountMessagesAsList
      summary: Update a list of account messages
  /accounts/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
        required: true
      tags:
        - accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createAccountsAsList
      summary: Create a list of accounts
  /accounts/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAccountRequest'
        required: true
      tags:
        - accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteAccountsAsList
      summary: Delete a list of accounts
  /accounts/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findAccountsByAccountId
      summary: Retrieve a list of accounts by account Id
  /accounts/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveAccountsAsList
      summary: Retrieve a list of accounts
  /accounts/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountRequest'
        required: true
      tags:
        - accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateAccountsAsList
      summary: Update a list of accounts
  /achievements/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAchievementRequest'
        required: true
      tags:
        - achievements
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createAchievementsAsList
      summary: Create a list of achievements
  /achievements/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAchievementRequest'
        required: true
      tags:
        - achievements
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteAchievementsAsList
      summary: Delete a list of achievements
  /achievements/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - achievements
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AchievementsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findAchievementsByAccountId
      summary: Retrieve a list of achievements by account Id
  /achievements/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - achievements
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AchievementsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveAchievementsAsList
      summary: Retrieve a list of achievements
  /achievements/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAchievementRequest'
        required: true
      tags:
        - achievements
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateAchievementsAsList
      summary: Update a list of achievements
  /action-helpers/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateActionHelperRequest'
        required: true
      tags:
        - action-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createActionHelpersAsList
      summary: Create a list of action-helpers
  /action-helpers/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteActionHelperRequest'
        required: true
      tags:
        - action-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteActionHelpersAsList
      summary: Delete a list of action-helpers
  /action-helpers/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - action-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionHelpersResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findActionHelpersByAccountId
      summary: Retrieve a list of action-helpers by account id
  /action-helpers/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - action-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionHelpersResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveActionHelpersAsList
      summary: Retrieve a list of action-helpers
  /action-helpers/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateActionHelperRequest'
        required: true
      tags:
        - action-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateActionHelpersAsList
      summary: Update a list of action-helpers
  /api-keys/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyRequest'
        required: true
      tags:
        - api-keys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createApiKeysAsList
      summary: Create a list of api-keys
  /api-keys/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteApiKeyRequest'
        required: true
      tags:
        - api-keys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteApiKeysAsList
      summary: Delete a list of api-keys
  /api-keys/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - api-keys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeysResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findApiKeysByAccountId
      summary: Retrieve a list of api-keys by account id
  /api-keys/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - api-keys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeysResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveApiKeysAsList
      summary: Retrieve a list of api-keys
  /api-keys/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiKeyRequest'
        required: true
      tags:
        - api-keys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateApiKeysAsList
      summary: Update a list of api-keys
  /attachments/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAttachmentRequest'
        required: true
      tags:
        - attachments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createAttachmentsAsList
      summary: Create a list of attachments
  /attachments/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAttachmentRequest'
        required: true
      tags:
        - attachments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteAttachmentsAsList
      summary: Delete a list of attachments
  /attachments/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - attachments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findAttachmentsByAccountId
      summary: Retrieve a list of attachments by account id
  /attachments/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - attachments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveAttachmentsAsList
      summary: Retrieve a list of attachments
  /attachments/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAttachmentRequest'
        required: true
      tags:
        - attachments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateAttachmentsAsList
      summary: Update a list of attachments
  /awards/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAwardRequest'
        required: true
      tags:
        - awards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createAwardsAsList
      summary: Create a list of awards
  /awards/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAwardRequest'
        required: true
      tags:
        - awards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteAwardsAsList
      summary: Delete a list of awards
  /awards/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - awards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AwardsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findAwardsByAccountId
      summary: Retrieve a list of awards by account id
  /awards/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - awards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AwardsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveAwardsAsList
      summary: Retrieve a list of awards
  /awards/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAwardRequest'
        required: true
      tags:
        - awards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateAwardsAsList
      summary: Update a list of awards
  /competitions/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompetitionRequest'
        required: true
      tags:
        - competitions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createCompetitionsAsList
      summary: Create a list of competitions
  /competitions/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCompetitionRequest'
        required: true
      tags:
        - competitions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteCompetitionsAsList
      summary: Delete a list of competitions
  /competitions/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - competitions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findCompetitionsByAccountId
      summary: Retrieve a list of competitions by account id
  /competitions/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - competitions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveCompetitionsAsList
      summary: Retrieve a list of competitions
  /competitions/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCompetitionRequest'
        required: true
      tags:
        - competitions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateCompetitionsAsList
      summary: Update a list of competitions
  /consumer-configs/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConsumerConfigRequest'
        required: true
      tags:
        - consumer-configs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createConsumerConfigsAsList
      summary: Create a list of consumer-configs
  /consumer-configs/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteConsumerConfigRequest'
        required: true
      tags:
        - consumer-configs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteConsumerConfigsAsList
      summary: Delete a list of consumer-configs
  /consumer-configs/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - consumer-configs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerConfigsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findConsumerConfigsByAccountId
      summary: Retrieve a list of consumer-configs by account id
  /consumer-configs/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - consumer-configs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerConfigsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveConsumerConfigsAsList
      summary: Retrieve a list of consumer-configs
  /consumer-configs/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConsumerConfigRequest'
        required: true
      tags:
        - consumer-configs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateConsumerConfigsAsList
      summary: Update a list of consumer-configs
  /contests/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContestRequest'
        required: true
      tags:
        - contests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createContestsAsList
      summary: Create a list of contests
  /contests/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteContestRequest'
        required: true
      tags:
        - contests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteContestsAsList
      summary: Delete a list of contests
  /contests/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - contests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContestsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findContestsByAccountId
      summary: Retrieve a list of contests by account id
  /contests/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - contests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContestsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveContestsAsList
      summary: Retrieve a list of contests
  /contests/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContestRequest'
        required: true
      tags:
        - contests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateContestsAsList
      summary: Update a list of contests
  /event-action-aggregations/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventActionAggregationRequest'
        required: true
      tags:
        - event-action-aggregations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createEventActionAggregationsAsList
      summary: Create a list of event-action-aggregations
  /event-action-aggregations/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteEventActionAggregationRequest'
        required: true
      tags:
        - event-action-aggregations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteEventActionAggregationsAsList
      summary: Delete a list of event-action-aggregations
  /event-action-aggregations/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - event-action-aggregations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventActionAggregationsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findEventActionAggregationsByAccountId
      summary: Retrieve a list of event-action-aggregations by account id
  /event-action-aggregations/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - event-action-aggregations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventActionAggregationsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveEventActionAggregationsAsList
      summary: Retrieve a list of event-action-aggregations
  /event-action-aggregations/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventActionAggregationRequest'
        required: true
      tags:
        - event-action-aggregations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateEventActionAggregationsAsList
      summary: Update a list of event-action-aggregations
  /events/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
        required: true
      tags:
        - events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createEventsAsList
      summary: Create a list of events
  /events/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteEventRequest'
        required: true
      tags:
        - events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteEventsAsList
      summary: Delete a list of events
  /events/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findEventsByAccountId
      summary: Retrieve a list of events by account id
  /events/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveEventsAsList
      summary: Retrieve a list of events
  /events/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventRequest'
        required: true
      tags:
        - events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateEventsAsList
      summary: Update a list of events
  /file-objects/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFileObjectRequest'
        required: true
      tags:
        - file-objects
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createFileObjectsAsList
      summary: Create a list of file-objects
  /file-objects/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFileObjectRequest'
        required: true
      tags:
        - file-objects
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteFileObjectsAsList
      summary: Delete a list of file-objects
  /file-objects/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - file-objects
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileObjectsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findFileObjectsByAccountId
      summary: Retrieve a list of file-objects by account id
  /file-objects/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - file-objects
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileObjectsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveFileObjectsAsList
      summary: Retrieve a list of file-objects
  /file-objects/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFileObjectRequest'
        required: true
      tags:
        - file-objects
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateFileObjectsAsList
      summary: Update a list of file-objects
  /file-repositories/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFileRepositoryRequest'
        required: true
      tags:
        - file-repositories
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createFileRepositoriesAsList
      summary: Create a list of file-repositories
  /file-repositories/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFileRepositoryRequest'
        required: true
      tags:
        - file-repositories
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteFileRepositoriesAsList
      summary: Delete a list of file-repositories
  /file-repositories/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - file-repositories
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileRepositoriesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findFileRepositoriesByAccountId
      summary: Retrieve a list of file-repositories by account id
  /file-repositories/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - file-repositories
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileRepositoriesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveFileRepositoriesAsList
      summary: Retrieve a list of file-repositories
  /file-repositories/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFileRepositoryRequest'
        required: true
      tags:
        - file-repositories
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateFileRepositoriesAsList
      summary: Update a list of file-repositories
  /language-helpers/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLanguageHelperRequest'
        required: true
      tags:
        - language-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createLanguageHelpersAsList
      summary: Create a list of language-helpers
  /language-helpers/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLanguageHelperRequest'
        required: true
      tags:
        - language-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteLanguageHelpersAsList
      summary: Delete a list of language-helpers
  /language-helpers/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - language-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageHelpersResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findLanguageHelpersByAccountId
      summary: Retrieve a list of language-helpers by account id
  /language-helpers/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - language-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageHelpersResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveLanguageHelpersAsList
      summary: Retrieve a list of language-helpers
  /language-helpers/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLanguageHelperRequest'
        required: true
      tags:
        - language-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateLanguageHelpersAsList
      summary: Update a list of language-helpers
  /log-events/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLogEventRequest'
        required: true
      tags:
        - log-events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createLogEventsAsList
      summary: Create a list of log-events
  /log-events/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLogEventRequest'
        required: true
      tags:
        - log-events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteLogEventsAsList
      summary: Delete a list of log-events
  /log-events/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - log-events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogEventsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findLogEventsByAccountId
      summary: Retrieve a list of log-events by account id
  /log-events/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - log-events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogEventsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveLogEventsAsList
      summary: Retrieve a list of log-events
  /log-events/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLogEventRequest'
        required: true
      tags:
        - log-events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateLogEventsAsList
      summary: Update a list of log-events
  /member-messages/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMemberMessageRequest'
        required: true
      tags:
        - member-messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createMemberMessagesAsList
      summary: Create a list of member-messages
  /member-messages/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMemberMessageRequest'
        required: true
      tags:
        - member-messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteMemberMessagesAsList
      summary: Delete a list of member-messages
  /member-messages/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - member-messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberMessagesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findMemberMessagesByAccountId
      summary: Retrieve a list of member-messages by account id
  /member-messages/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - member-messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberMessagesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveMemberMessagesAsList
      summary: Retrieve a list of member-messages
  /member-messages/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMemberMessageRequest'
        required: true
      tags:
        - member-messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateMemberMessagesAsList
      summary: Update a list of member-messages
  /member-notifications/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMemberNotificationRequest'
        required: true
      tags:
        - member-notifications
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createMemberNotificationsAsList
      summary: Create a list of member-notifications
  /member-notifications/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMemberNotificationRequest'
        required: true
      tags:
        - member-notifications
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteMemberNotificationsAsList
      summary: Delete a list of member-notifications
  /member-notifications/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - member-notifications
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberNotificationsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findeMemberNotificationsByAccountId
      summary: Retrieve a list of member-notifications by account id
  /member-notifications/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - member-notifications
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberNotificationsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveMemberNotificationsAsList
      summary: Retrieve a list of member-notifications
  /member-notifications/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMemberNotificationRequest'
        required: true
      tags:
        - member-notifications
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateMemberNotificationsAsList
      summary: Update a list of member-notifications
  /members/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMemberRequest'
        required: true
      tags:
        - members
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createMembersAsList
      summary: Create a list of members
  /members/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMemberRequest'
        required: true
      tags:
        - members
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteMembersAsList
      summary: Delete a list of members
  /members/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - members
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembersResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findMembersByAccountId
      summary: Retrieve a list of members by account id
  /members/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - members
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembersResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveMembersAsList
      summary: Retrieve a list of members
  /members/get-achievement-stats:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetMemberAchievementStatsRequest'
        required: true
      tags:
        - members
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MemberAchievementStats'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getMemberAchievementStats
      summary: Retrieve the current statistics for a members achievements
  /members/get-score:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetMemberScoreRequest'
        required: true
      tags:
        - members
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Score'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getMemberScore
      summary: Retrieve the member score for a competition or contest statistics
  /members/register-tournament-entry:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterMemberTournamentEntryRequest'
        required: true
      tags:
        - members
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Score'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: registerMemberTournamentEntry
      summary: Enter a member into a tournament
  /members/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMemberRequest'
        required: true
      tags:
        - members
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateMembersAsList
      summary: Update a list of members
  /password-change-requests/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePasswordChangeRequest'
        required: true
      tags:
        - password-change-requests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createPasswordChangeRequestsAsList
      summary: Create a list of password-change-requests
  /password-change-requests/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePasswordChangeRequest'
        required: true
      tags:
        - password-change-requests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deletePasswordChangeRequestsAsList
      summary: Delete a list of password-change-requests
  /password-change-requests/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - password-change-requests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChangeRequestsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findPasswordChangeRequestsByAccountId
      summary: Retrieve a list of password-change-requests by account id
  /password-change-requests/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - password-change-requests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChangeRequestsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrievePasswordChangeRequestsAsList
      summary: Retrieve a list of password-change-requests
  /password-change-requests/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordChangeRequest'
        required: true
      tags:
        - password-change-requests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updatePasswordChangeRequestsAsList
      summary: Update a list of password-change-requests
  /products/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
        required: true
      tags:
        - products
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createProductsAsList
      summary: Create a list of products
  /products/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteProductRequest'
        required: true
      tags:
        - products
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteProductsAsList
      summary: Delete a list of products
  /products/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - products
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findProductsByAccountId
      summary: Retrieve a list of products by account id
  /products/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - products
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveProductsAsList
      summary: Retrieve a list of products
  /products/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
        required: true
      tags:
        - products
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateProductsAsList
      summary: Update a list of products
  /promotion-pages/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePromotionPageRequest'
        required: true
      tags:
        - promotion-pages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createPromotionPagesAsList
      summary: Create a list of promotion-pages
  /promotion-pages/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePromotionPageRequest'
        required: true
      tags:
        - promotion-pages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deletePromotionPagesAsList
      summary: Delete a list of promotion-pages
  /promotion-pages/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - promotion-pages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromotionPagesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findPromotionPagesByAccountId
      summary: Retrieve a list of promotion-pages by account id
  /promotion-pages/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - promotion-pages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromotionPagesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrievePromotionPagesAsList
      summary: Retrieve a list of promotion-pages
  /promotion-pages/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePromotionPageRequest'
        required: true
      tags:
        - promotion-pages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updatePromotionPagesAsList
      summary: Update a list of promotion-pages
  /rabbit-configurations/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRabbitConfigurationRequest'
        required: true
      tags:
        - rabbit-configurations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createRabbitConfigurationsAsList
      summary: Create a list of rabbit-configurations
  /rabbit-configurations/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRabbitConfigurationRequest'
        required: true
      tags:
        - rabbit-configurations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteRabbitConfigurationsAsList
      summary: Delete a list of rabbit-configurations
  /rabbit-configurations/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - rabbit-configurations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RabbitConfigurationsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findRabbitConfigurationsByAccountId
      summary: Retrieve a list of rabbit-configurations by account id
  /rabbit-configurations/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - rabbit-configurations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RabbitConfigurationsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveRabbitConfigurationsAsList
      summary: Retrieve a list of rabbit-configurations
  /rabbit-configurations/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRabbitConfigurationRequest'
        required: true
      tags:
        - rabbit-configurations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateRabbitConfigurationsAsList
      summary: Update a list of rabbit-configurations
  /reward-types/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRewardTypeRequest'
        required: true
      tags:
        - reward-types
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createRewardTypesAsList
      summary: Create a list of reward-types
  /reward-types/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRewardTypeRequest'
        required: true
      tags:
        - reward-types
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteRewardTypesAsList
      summary: Delete a list of reward-types
  /reward-types/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - reward-types
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardTypesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findRewardTypesByAccountId
      summary: Retrieve a list of reward-types by account id
  /reward-types/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - reward-types
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardTypesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveRewardTypesAsList
      summary: Retrieve a list of reward-types
  /reward-types/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRewardTypeRequest'
        required: true
      tags:
        - reward-types
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateRewardTypesAsList
      summary: Update a list of reward-types
  /rewards/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRewardRequest'
        required: true
      tags:
        - rewards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createRewardsAsList
      summary: Create a list of rewards
  /rewards/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRewardRequest'
        required: true
      tags:
        - rewards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteRewardsAsList
      summary: Delete a list of rewards
  /rewards/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - rewards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findRewardsByAccountId
      summary: Retrieve a list of rewards by account id
  /rewards/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - rewards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveRewardsAsList
      summary: Retrieve a list of rewards
  /rewards/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRewardRequest'
        required: true
      tags:
        - rewards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateRewardsAsList
      summary: Update a list of rewards
  /scores/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScoreRequest'
        required: true
      tags:
        - scores
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createScoresAsList
      summary: Create a list of scores
  /scores/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteScoreRequest'
        required: true
      tags:
        - scores
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteScoresAsList
      summary: Delete a list of scores
  /scores/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - scores
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoresResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findScoresByAccountId
      summary: Retrieve a list of scores by account id
  /scores/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - scores
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoresResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveScoresAsList
      summary: Retrieve a list of scores
  /scores/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScoreRequest'
        required: true
      tags:
        - scores
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateScoresAsList
      summary: Update a list of scores
  /theme-templates/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThemeTemplateRequest'
        required: true
      tags:
        - theme-templates
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createThemeTemplatesAsList
      summary: Create a list of theme-templates
  /theme-templates/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteThemeTemplateRequest'
        required: true
      tags:
        - theme-templates
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteThemeTemplatesAsList
      summary: Delete a list of theme-templates
  /theme-templates/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - theme-templates
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeTemplatesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findThemeTemplatesByAccountId
      summary: Retrieve a list of theme-templates by account id
  /theme-templates/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - theme-templates
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeTemplatesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveThemeTemplatesAsList
      summary: Retrieve a list of theme-templates
  /theme-templates/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateThemeTemplateRequest'
        required: true
      tags:
        - theme-templates
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateThemeTemplatesAsList
      summary: Update a list of theme-templates
  /tournaments/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTournamentRequest'
        required: true
      tags:
        - tournaments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createTournamentsAsList
      summary: Create a list of tournaments
  /tournaments/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTournamentRequest'
        required: true
      tags:
        - tournaments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteTournamentsAsList
      summary: Delete a list of tournaments
  /tournaments/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - tournaments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findTournamentsByAccountId
      summary: Retrieve a list of tournaments by account id
  /tournaments/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - tournaments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveTournamentsAsList
      summary: Retrieve a list of tournaments
  /tournaments/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTournamentRequest'
        required: true
      tags:
        - tournaments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateTournamentsAsList
      summary: Update a list of tournaments
  /transformers/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransformerRequest'
        required: true
      tags:
        - transformers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createTransformersAsList
      summary: Create a list of transformers
  /transformers/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTransformerRequest'
        required: true
      tags:
        - transformers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteTransformersAsList
      summary: Delete a list of transformers
  /transformers/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - transformers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransformersResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findTransformersByAccountId
      summary: Retrieve a list of transformers by account id
  /transformers/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - transformers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransformersResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveTransformersAsList
      summary: Retrieve a list of transformers
  /transformers/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTransformerRequest'
        required: true
      tags:
        - transformers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateTransformersAsList
      summary: Update a list of transformers
  /units-of-measure/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUnitsOfMeasureRequest'
        required: true
      tags:
        - units-of-measure
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createUnitsOfMeasureAsList
      summary: Create a list of units-of-measure
  /units-of-measure/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUnitsOfMeasureRequest'
        required: true
      tags:
        - units-of-measure
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteUnitsOfMeasureAsList
      summary: Delete a list of units-of-measure
  /units-of-measure/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - units-of-measure
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitsOfMeasureResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findUnitsOfMeasureByAccountId
      summary: Retrieve a list of units-of-measure by account id
  /units-of-measure/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - units-of-measure
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitsOfMeasureResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveUnitsOfMeasureAsList
      summary: Retrieve a list of units-of-measure
  /units-of-measure/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUnitsOfMeasureRequest'
        required: true
      tags:
        - units-of-measure
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateUnitsOfMeasureAsList
      summary: Update a list of units-of-measure
  /users/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserRequest'
        required: true
      tags:
        - users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteUsersAsList
      summary: Delete a list of users
  /webhooks/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookRequest'
        required: true
      tags:
        - webhooks
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createWebhooksAsList
      summary: Create a list of webhooks
  /webhooks/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteWebhookRequest'
        required: true
      tags:
        - webhooks
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteWebhooksAsList
      summary: Delete a list of webhooks
  /webhooks/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - webhooks
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findWebhooksByAccountId
      summary: Retrieve a list of webhooks by account id
  /webhooks/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - webhooks
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveWebhooksAsList
      summary: Retrieve a list of webhooks
  /webhooks/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWebhookRequest'
        required: true
      tags:
        - webhooks
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateWebhooksAsList
      summary: Update a list of webhooks
  /widgets/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWidgetRequest'
        required: true
      tags:
        - widgets
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createWidgetsAsList
      summary: Create a list of widgets
  /widgets/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteWidgetRequest'
        required: true
      tags:
        - widgets
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteWidgetsAsList
      summary: Delete a list of widgets
  /widgets/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - widgets
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WidgetsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findWidgetsByAccountId
      summary: Retrieve a list of widgets by account id
  /widgets/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - widgets
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WidgetsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveWidgetsAsList
      summary: Retrieve a list of widgets
  /widgets/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWidgetRequest'
        required: true
      tags:
        - widgets
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateWidgetsAsList
      summary: Update a list of widgets
  /widgets/widget:
    get:
      tags:
        - widgets
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Widget'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getWidget
      summary: Get a widget by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Widget'
        required: true
      tags:
        - widgets
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putWidget
      summary: Update a widget
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Widget'
        required: true
      tags:
        - widgets
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postWidget
      summary: Create a widget
    delete:
      tags:
        - widgets
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteWidget
      summary: Delete a widget
  /webhooks/webhook:
    get:
      tags:
        - webhooks
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getWebhook
      summary: Get a webhook by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
        required: true
      tags:
        - webhooks
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putWebhook
      summary: Update a webhook
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
        required: true
      tags:
        - webhooks
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postWebhook
      summary: Create a webhook
    delete:
      tags:
        - webhooks
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteWebhook
      summary: Delete a webhook
  /units-of-measure/unit-of-measure:
    get:
      tags:
        - units-of-measure
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitOfMeasure'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getUnitOfMeasure
      summary: Get a unit-of-measure by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitOfMeasure'
        required: true
      tags:
        - units-of-measure
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putUnitOfMeasure
      summary: Update a unit-of-measure
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitOfMeasure'
        required: true
      tags:
        - units-of-measure
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postUnitOfMeasure
      summary: Create a unit-of-measure
    delete:
      tags:
        - units-of-measure
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteUnitOfMeasure
      summary: Delete a unit-of-measure
  /transformers/transformer:
    get:
      tags:
        - transformers
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transformer'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getTransformer
      summary: Get a transformer by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transformer'
        required: true
      tags:
        - transformers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putTransformer
      summary: Update a transformer
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transformer'
        required: true
      tags:
        - transformers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postTransformer
      summary: Create a transformer
    delete:
      tags:
        - transformers
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteTransformer
      summary: Delete a transformer
  /tournaments/tournament:
    get:
      tags:
        - tournaments
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getTournament
      summary: Get a tournament by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tournament'
        required: true
      tags:
        - tournaments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putTournament
      summary: Update a tournament
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tournament'
        required: true
      tags:
        - tournaments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postTournament
      summary: Create a tournament
    delete:
      tags:
        - tournaments
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteTournament
      summary: Delete a tournament
  /theme-templates/theme-template:
    get:
      tags:
        - theme-templates
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeTemplate'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getThemeTemplate
      summary: Get a theme-template by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThemeTemplate'
        required: true
      tags:
        - theme-templates
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putThemeTemplate
      summary: Update a theme-template
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThemeTemplate'
        required: true
      tags:
        - theme-templates
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postThemeTemplate
      summary: Create a theme-template
    delete:
      tags:
        - theme-templates
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteThemeTemplate
      summary: Delete a theme-template
  /scores/score:
    get:
      tags:
        - scores
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Score'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getScore
      summary: Get a score by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Score'
        required: true
      tags:
        - scores
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putScore
      summary: Update a score
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Score'
        required: true
      tags:
        - scores
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postScore
      summary: Create a score
    delete:
      tags:
        - scores
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteScore
      summary: Delete a score
  /rewards/reward:
    get:
      tags:
        - rewards
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reward'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getReward
      summary: Get a reward by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reward'
        required: true
      tags:
        - rewards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putReward
      summary: Update a reward
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reward'
        required: true
      tags:
        - rewards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postReward
      summary: Create a reward
    delete:
      tags:
        - rewards
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteReward
      summary: Delete a reward
  /reward-types/reward-type:
    get:
      tags:
        - reward-types
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardType'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getRewardType
      summary: Get a reward-type by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RewardType'
        required: true
      tags:
        - reward-types
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putRewardType
      summary: Update a reward-type
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RewardType'
        required: true
      tags:
        - reward-types
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postRewardType
      summary: Create a reward-type
    delete:
      tags:
        - reward-types
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteRewardType
      summary: Delete a reward-type
  /rabbit-configurations/rabbit-configuration:
    get:
      tags:
        - rabbit-configurations
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RabbitConfiguration'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getRabbitConfiguration
      summary: Get a rabbit-configuration by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RabbitConfiguration'
        required: true
      tags:
        - rabbit-configurations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putRabbitConfiguration
      summary: Update a rabbit-configuration
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RabbitConfiguration'
        required: true
      tags:
        - rabbit-configurations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postRabbitConfiguration
      summary: Create a rabbit-configuration
    delete:
      tags:
        - rabbit-configurations
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteRabbitConfiguration
      summary: Delete a rabbit-configuration
  /promotion-pages/promotion-page:
    get:
      tags:
        - promotion-pages
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromotionPage'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getPromotionPage
      summary: Get a promotion-page by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromotionPage'
        required: true
      tags:
        - promotion-pages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putPromotionPage
      summary: Update a promotion-page
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromotionPage'
        required: true
      tags:
        - promotion-pages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postPromotionPage
      summary: Create a promotion-page
    delete:
      tags:
        - promotion-pages
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deletePromotionPage
      summary: Delete a promotion-page
  /products/product:
    get:
      tags:
        - products
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getProduct
      summary: Get a product by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      tags:
        - products
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putProduct
      summary: Create a product
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      tags:
        - products
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postProduct
      summary: Update a product
    delete:
      tags:
        - products
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteProduct
      summary: Delete a product
  /password-change-requests/password-change-request:
    get:
      tags:
        - password-change-requests
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChangeRequest'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getPasswordChangeRequest
      summary: Get a password-change-request by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      tags:
        - password-change-requests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putPasswordChangeRequest
      summary: Update a password-change-request
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      tags:
        - password-change-requests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postPasswordChangeRequest
      summary: Create a password-change-request
    delete:
      tags:
        - password-change-requests
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deletePasswordChangeRequest
      summary: Delete a password-change-request
  /members/member:
    get:
      tags:
        - members
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getMember
      summary: Get a member by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
        required: true
      tags:
        - members
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putMember
      summary: Update a member
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
        required: true
      tags:
        - members
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postMember
      summary: Create a member
    delete:
      tags:
        - members
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteMember
      summary: Delete a member
  /member-notifications/member-notification:
    get:
      tags:
        - member-notifications
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberNotification'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getMemberNotification
      summary: Get a member-notification by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberNotification'
        required: true
      tags:
        - member-notifications
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putMemberNotification
      summary: Update a member-notification
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberNotification'
        required: true
      tags:
        - member-notifications
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postMemberNotification
      summary: Create a member-notification
    delete:
      tags:
        - member-notifications
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteMemberNotification
      summary: Delete a member-notification
  /member-messages/member-message:
    get:
      tags:
        - member-messages
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberMessage'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getMemberMessage
      summary: Get a member-message by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberMessage'
        required: true
      tags:
        - member-messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putMemberMessage
      summary: Update a member-message
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberMessage'
        required: true
      tags:
        - member-messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postMemberMessage
      summary: Create a member-message
    delete:
      tags:
        - member-messages
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteMemberMessage
      summary: Delete a member-message
  /log-events/log-event:
    get:
      tags:
        - log-events
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogEvent'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getLogEvent
      summary: Get a log-event by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogEvent'
        required: true
      tags:
        - log-events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putLogEvent
      summary: Update a log-event
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogEvent'
        required: true
      tags:
        - log-events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postLogEvent
      summary: Create a log-event
    delete:
      tags:
        - log-events
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteLogEvent
      summary: Delete a log-event
  /language-helpers/language-helper:
    get:
      tags:
        - language-helpers
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageHelper'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getLanguageHelper
      summary: Get a language-helper by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LanguageHelper'
        required: true
      tags:
        - language-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putLanguageHelper
      summary: Update a language-helper
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LanguageHelper'
        required: true
      tags:
        - language-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postLanguageHelper
      summary: Create a language-helper
    delete:
      tags:
        - language-helpers
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteLanguageHelper
      summary: Delete a language-helper
  /file-repositories/file-repository:
    get:
      tags:
        - file-repositories
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileRepository'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getFileRepository
      summary: Get a file-repository by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileRepository'
        required: true
      tags:
        - file-repositories
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putFileRepository
      summary: Create a file-repository
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileRepository'
        required: true
      tags:
        - file-repositories
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postFileRepository
      summary: Update a file-repository
    delete:
      tags:
        - file-repositories
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteFileRepository
      summary: Delete a file-repository
  /file-objects/file-object:
    get:
      tags:
        - file-objects
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileObject'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getFileObject
      summary: Get a file-object by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileObject'
        required: true
      tags:
        - file-objects
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putFileObject
      summary: Update a file-object
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileObject'
        required: true
      tags:
        - file-objects
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postFileObject
      summary: Create a file-object
    delete:
      tags:
        - file-objects
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteFileObject
      summary: Delete a file-object
  /events/event:
    get:
      tags:
        - events
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getEvent
      summary: Get an event by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      tags:
        - events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putEvent
      summary: Update an event
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      tags:
        - events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postEvent
      summary: Create an event
    delete:
      tags:
        - events
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteEvent
      summary: Delete an event
  /event-action-aggregations/event-action-aggregation:
    get:
      tags:
        - event-action-aggregations
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventActionAggregation'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getEventActionAggregation
      summary: Get a event-action-aggregation by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventActionAggregation'
        required: true
      tags:
        - event-action-aggregations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putEventActionAggregation
      summary: Update a event-action-aggregation
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventActionAggregation'
        required: true
      tags:
        - event-action-aggregations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postEventActionAggregation
      summary: Create a event-action-aggregation
    delete:
      tags:
        - event-action-aggregations
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteEventActionAggregation
      summary: Delete a event-action-aggregation
  /contests/contest:
    get:
      tags:
        - contests
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contest'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getContest
      summary: Get a contest by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contest'
        required: true
      tags:
        - contests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putContest
      summary: Update a contest
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contest'
        required: true
      tags:
        - contests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postContest
      summary: Create a contest
    delete:
      tags:
        - contests
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteContest
      summary: Delete a contest
  /consumer-configs/consumer-config:
    get:
      tags:
        - consumer-configs
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerConfig'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getConsumerConfig
      summary: Get a consumer-config by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsumerConfig'
        required: true
      tags:
        - consumer-configs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putConsumerConfig
      summary: Update a consumer-config
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsumerConfig'
        required: true
      tags:
        - consumer-configs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postConsumerConfig
      summary: Create a consumer-config
    delete:
      tags:
        - consumer-configs
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteConsumerConfig
      summary: Delete a consumer-config
  /competitions/competition:
    get:
      tags:
        - competitions
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competition'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getCompetition
      summary: Get a competition by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Competition'
        required: true
      tags:
        - competitions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putCompetition
      summary: Update a competition
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Competition'
        required: true
      tags:
        - competitions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postCompetition
      summary: Create a competition
    delete:
      tags:
        - competitions
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteCompetition
      summary: Delete a competition
  /competitions/find-by-status:
    summary: Find competitions by status
    get:
      tags:
        - competitions
      parameters:
        -
          name: status
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionsResponse'
          description: Returns a list of competitions
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: competitionFindByStatus
      summary: Find competitions by status
  /awards/award:
    get:
      tags:
        - awards
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Award'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getAward
      summary: Get an award by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Award'
        required: true
      tags:
        - awards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putAward
      summary: Update an award
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Award'
        required: true
      tags:
        - awards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postAward
      summary: Create an award
    delete:
      tags:
        - awards
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteAward
      summary: Delete an award
  /attachments/attachment:
    get:
      tags:
        - attachments
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getAttachment
      summary: Get an attachment by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attachment'
        required: true
      tags:
        - attachments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putAttachment
      summary: Update an attachment
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attachment'
        required: true
      tags:
        - attachments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postAttachment
      summary: Create an attachment
    delete:
      tags:
        - attachments
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteAttachment
      summary: Delete an attachment
  /api-keys/api-key:
    get:
      tags:
        - api-keys
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getApiKey
      summary: Get an api-key by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
        required: true
      tags:
        - api-keys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putApiKey
      summary: Update an api-key
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKey'
        required: true
      tags:
        - api-keys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postApiKey
      summary: Create an api-key
    delete:
      tags:
        - api-keys
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteApiKey
      summary: Delete an api-key
  /action-helpers/action-helper:
    get:
      tags:
        - action-helpers
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionHelper'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getActionHelper
      summary: Get an action-helper by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionHelper'
        required: true
      tags:
        - action-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putActionHelper
      summary: Update an action-helper
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionHelper'
        required: true
      tags:
        - action-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postActionHelper
      summary: Create an action-helper
    delete:
      tags:
        - action-helpers
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteActionHelper
      summary: Delete an action-helper
  /achievements/achievement:
    get:
      tags:
        - achievements
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Achievement'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getAchievement
      summary: Get a achievement by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Achievement'
        required: true
      tags:
        - achievements
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putAchievement
      summary: Update an achievement
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAchievement'
        required: true
      tags:
        - achievements
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postAchievement
      summary: Create an achievement
    delete:
      tags:
        - achievements
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteAchievement
      summary: Delete an achievement
  /accounts/account:
    get:
      tags:
        - accounts
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getAccount
      summary: Get a account by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      tags:
        - accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putAccount
      summary: Update an account
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
        required: true
      tags:
        - accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postAccount
      summary: Create an account
    delete:
      tags:
        - accounts
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteAccount
      summary: Delete an account
  /tags/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTagRequest'
        required: true
      tags:
        - tags
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createTags
      summary: Create a list of tags
  /tags/tag:
    get:
      tags:
        - tags
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getTags
      summary: Get a Tag by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      tags:
        - tags
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putTags
      summary: Update a tag
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      tags:
        - tags
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postTags
      summary: Create a tag
    delete:
      tags:
        - tags
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteTags
      summary: Delete a tag
  /tags/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTagRequest'
        required: true
      tags:
        - tags
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteTagsAsList
      summary: Delete a list of tags
  /tags/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTagRequest'
        required: true
      tags:
        - tags
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateTagsAsList
      summary: Update a list of tags
  /tags/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - tags
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findTagsByAccountId
      summary: Retrieve a list of tags by account id
  /tags/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - tags
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveTagsAsList
      summary: Retrieve a list of tags
  /access-log-events/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - access-log-events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteAccessLogEventsByQuery
      summary: Delete a list of access-log-events by a query request
  /access-log-events/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - access-log-events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessLogEventsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findAccessLogEventsByQuery
      summary: Retrieve a list of access-log-events by a query request
  /account-messages/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - account-messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteAccountMessagesByQuery
      summary: Delete a list of account messages by a query request
  /account-messages/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - account-messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountMessagesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findAccountMessagesByQuery
      summary: Retrieve a list of account messages by a query request
  /accounts/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteAccountsByQuery
      summary: Delete a list of accounts by a query request
  /accounts/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - accounts
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findAccountsByQuery
      summary: Retrieve a list of accounts by a query request
  /achievements/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - achievements
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteAchievementsByQuery
      summary: Delete a list of achievements by a query request
  /achievements/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - achievements
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AchievementsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findAchievementsByQuery
      summary: Retrieve a list of achievements by a query request
  /action-helpers/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - action-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteActionHelpersByQuery
      summary: Delete a list of action-helpers by a query request
  /action-helpers/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - action-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionHelpersResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findActionHelpersByQuery
      summary: Retrieve a list of action-helpers by a query request
  /api-keys/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - api-keys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteApiKeysByQuery
      summary: Delete a list of api-keys by a query request
  /attachments/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - attachments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteAttachmentsByQuery
      summary: Delete a list of attachments by a query request
  /attachments/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - attachments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findAttachmentsByQuery
      summary: Retrieve a list of attachments by a query request
  /awards/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - awards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteAwardsByQuery
      summary: Delete a list of awards by a query request
  /awards/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - awards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AwardsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findAwardsByQuery
      summary: Retrieve a list of awards by a query request
  /competitions/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - competitions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteCompetitionsByQuery
      summary: Delete a list of competitions by a query request
  /competitions/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - competitions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findCompetitionsByQuery
      summary: Retrieve a list of competitions by a query request
  /consumer-configs/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - consumer-configs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteConsumerConfigsByQuery
      summary: Delete a list of consumer-configs by a query request
  /consumer-configs/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - consumer-configs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerConfigsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findConsumerConfigsByQuery
      summary: Retrieve a list of consumer-configs by a query request
  /contests/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - contests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteContestsByQuery
      summary: Delete a list of contests by a query request
  /contests/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - contests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContestsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findContestsByQuery
      summary: Retrieve a list of contests by a query request
  /event-action-aggregations/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - event-action-aggregations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteEventActionAggregationsByQuery
      summary: Delete a list of event-action-aggregations by a query request
  /event-action-aggregations/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - event-action-aggregations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventActionAggregationsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findEventActionAggregationsByQuery
      summary: Retrieve a list of event-action-aggregations by a query request
  /events/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteEventsByQuery
      summary: Delete a list of events by a query request
  /events/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findEventsByQuery
      summary: Retrieve a list of events by a query request
  /file-objects/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - file-objects
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteFileObjectsByQuery
      summary: Delete a list of file-objects by a query request
  /file-objects/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - file-objects
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileObjectsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findFileObjectsByQuery
      summary: Retrieve a list of file-objects by a query request
  /file-repositories/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - file-repositories
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteFileRepositoriesByQuery
      summary: Delete a list of file-repositories by a query request
  /file-repositories/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - file-repositories
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileRepositoriesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findFileRepositoriesByQuery
      summary: Retrieve a list of file-repositories by a query request
  /language-helpers/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - language-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteLanguageHelpersByQuery
      summary: Delete a list of language-helpers by a query request
  /language-helpers/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - language-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageHelpersResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findLanguageHelpersByQuery
      summary: Retrieve a list of language-helpers by a query request
  /log-events/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - log-events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteLogEventsByQuery
      summary: Delete a list of log-events by a query request
  /log-events/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - log-events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogEventsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findLogEventsByQuery
      summary: Retrieve a list of log-events by a query request
  /member-messages/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - member-messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteMemberMessagesByQuery
      summary: Delete a list of member-messages by a query request
  /member-messages/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - member-messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberMessagesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findMemberMessagesByQuery
      summary: Retrieve a list of member-messages by a query request
  /member-notifications/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - member-notifications
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteMemberNotificationsByQuery
      summary: Delete a list of member-notifications by a query request
  /member-notifications/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - member-notifications
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberNotificationsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findMemberNotificationsByQuery
      summary: Retrieve a list of member-notifications by a query request
  /members/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - members
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteMembersByQuery
      summary: Delete a list of members by a query request
  /members/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - members
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembersResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findMembersByQuery
      summary: Retrieve a list of members by a query request
  /password-change-requests/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - password-change-requests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deletePasswordChangeRequestsByQuery
      summary: Delete a list of password-change-requests by a query request
  /password-change-requests/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - password-change-requests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChangeRequestsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findPasswordChangeRequestsByQuery
      summary: Retrieve a list of password-change-requests by a query request
  /products/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - products
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteProductsByQuery
      summary: Delete a list of products by a query request
  /products/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - products
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findProductsByQuery
      summary: Retrieve a list of products by a query request
  /promotion-pages/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - promotion-pages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deletePromotionPagesByQuery
      summary: Delete a list of promotion-pages by a query request
  /promotion-pages/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - promotion-pages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromotionPagesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findPromotionPagesByQuery
      summary: Retrieve a list of promotion-pages by a query request
  /rabbit-configurations/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - rabbit-configurations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteRabbitConfigurationsByQuery
      summary: Delete a list of rabbit-configurations by a query request
  /rabbit-configurations/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - rabbit-configurations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RabbitConfigurationsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findRabbitConfigurationsByQuery
      summary: Retrieve a list of rabbit-configurations by a query request
  /reward-types/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - reward-types
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteRewardTypesByQuery
      summary: Delete a list of reward-types by a query request
  /reward-types/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - reward-types
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardTypesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findRewardTypesByQuery
      summary: Retrieve a list of reward-types by a query request
  /rewards/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - rewards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteRewardsByQuery
      summary: Delete a list of rewards by a query request
  /rewards/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - rewards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RewardsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findRewardsByQuery
      summary: Retrieve a list of rewards by a query request
  /scores/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - scores
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteScoresByQuery
      summary: Delete a list of scores by a query request
  /scores/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - scores
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoresResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findScoresByQuery
      summary: Retrieve a list of scores by a query request
  /tags/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - tags
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteTagsByQuery
      summary: Delete a list of tags by a query request
  /tags/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - tags
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findTagsByQuery
      summary: Retrieve a list of tags by a query request
  /theme-templates/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - theme-templates
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteThemeTemplatesByQuery
      summary: Delete a list of theme-templates by a query request
  /theme-templates/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - theme-templates
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThemeTemplatesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findThemeTemplatesByQuery
      summary: Retrieve a list of theme-templates by a query request
  /tournaments/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - tournaments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteTournamentsByQuery
      summary: Delete a list of tournaments by a query request
  /tournaments/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - tournaments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TournamentsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findTournamentsByQuery
      summary: Retrieve a list of tournaments by a query request
  /transformers/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - transformers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteTransformersByQuery
      summary: Delete a list of transformers by a query request
  /transformers/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - transformers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransformersResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findTransformersByQuery
      summary: Retrieve a list of transformers by a query request
  /units-of-measure/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - units-of-measure
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteUnitsOfMeasureByQuery
      summary: Delete a list of units-of-measure by a query request
  /units-of-measure/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - units-of-measure
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitsOfMeasureResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findUnitsOfMeasureByQuery
      summary: Retrieve a list of units-of-measure by a query request
  /webhooks/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - webhooks
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteWebhooksByQuery
      summary: Delete a list of webhooks by a query request
  /webhooks/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - webhooks
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhooksResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findWebhooksByQuery
      summary: Retrieve a list of webhooks by a query request
  /widgets/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - widgets
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteWidgetsByQuery
      summary: Delete a list of widgets by a query request
  /widgets/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - widgets
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WidgetsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findWidgetsByQuery
      summary: Retrieve a list of widgets by a query request
  /custom-fields/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomFieldRequest'
        required: true
      tags:
        - custom-fields
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createCustomFieldsAsList
      summary: Create a list of event-custom-fields
  /custom-fields/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCustomFieldRequest'
        required: true
      tags:
        - custom-fields
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteCustomFieldsAsList
      summary: Delete a list of event-custom-fields
  /custom-fields/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - custom-fields
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteCustomFieldsByQuery
      summary: Delete a list of event-custom-fields by a query request
  /custom-fields/custom-field:
    get:
      tags:
        - custom-fields
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomField'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getCustomField
      summary: Get an event-custom-field by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomField'
        required: true
      tags:
        - custom-fields
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putCustomField
      summary: Update an event-custom-field
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomField'
        required: true
      tags:
        - custom-fields
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postCustomField
      summary: Create an event-custom-field
    delete:
      tags:
        - custom-fields
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteCustomField
      summary: Delete an event-custom-field
  /custom-fields/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - custom-fields
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findCustomFieldsByAccountId
      summary: Retrieve a list of event-custom-fields by account id
  /custom-fields/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - custom-fields
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveCustomFieldsAsList
      summary: Retrieve a list of event-custom-fields
  /custom-fields/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - custom-fields
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findCustomFieldsByQuery
      summary: Retrieve a list of event-custom-fields by a query request
  /custom-fields/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomFieldRequest'
        required: true
      tags:
        - custom-fields
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateCustomFieldsAsList
      summary: Update a list of event-custom-fields
  /language-helpers/supported:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - language-helpers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageHelpersResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findSupportedLanguageHelpersByKey
      summary: Retrieve a list of supported language-helpers by account id
  /collaborators/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCollaboratorsRequest'
        required: true
      tags:
        - collaborators
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createCollaboratorsAsList
      summary: Create a list of collaborators
  /collaborators/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCollaboratorsRequest'
        required: true
      tags:
        - collaborators
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteCollaboratorsAsList
      summary: Delete a list of collaborators
  /collaborators/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - collaborators
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteCollaboratorsByQuery
      summary: Delete a list of collaborators by a query request
  /collaborators/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - collaborators
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollaboratorsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findCollaboratorsByAccountId
      summary: Retrieve a list of collaborators by account id
  /collaborators/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - collaborators
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollaboratorsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveCollaboratorssAsList
      summary: Retrieve a list of collaborators
  /collaborators/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - collaborators
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollaboratorsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findCollaboratorsByQuery
      summary: Retrieve a list of collaborators by a query request
  /collaborators/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCollaboratorsRequest'
        required: true
      tags:
        - collaborators
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateCollaboratorsAsList
      summary: Update a list of collaborators
  /users/find-by-email:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveUsersAsList
      summary: Retrieve a list of users
  /users/spaces:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      tags:
        - users
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSpaceResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getUserSpaces
      summary: Get user spaces
  /collaborators/collaborator:
    get:
      tags:
        - collaborators
      parameters:
        -
          name: email
          description: ''
          schema:
            type: string
          in: query
        -
          name: accountId
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collaborator'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getCollaborator
      summary: Get a Collaborator by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollaboratorAndAccountIdRequest'
        required: true
      tags:
        - collaborators
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putCollaborator
      summary: Update a Collaborator
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollaboratorAndAccountIdRequest'
        required: true
      tags:
        - collaborators
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postCollaborator
      summary: Create a Collaborator
    delete:
      tags:
        - collaborators
      parameters:
        -
          name: email
          description: ''
          schema:
            type: string
          in: query
          required: true
        -
          name: accountId
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteCollaborator
      summary: Delete a Collaborator
  /collaborators/available-roles:
    get:
      tags:
        - collaborators
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollaboratorRolesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getCollaboratorAvailableRoles
      summary: Get a Collaborator by id
  /webhooks/available-triggers/:
    get:
      tags:
        - webhooks
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TriggerResponse'
          description: On success
        '400':
          description: Bad request
        '404':
          description: Not found
        '500':
          description: Internal Server Error
      operationId: getAvailableTriggers
  /products/find-by-ref-identifiers/:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - products
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveProductsByRefIdAsList
      summary: Retrieve a list of products
  /achievement-journals/create/:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAchievementJournalEntriesRequest'
        required: true
      tags:
        - achievement-journals
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createAchievementJournalEntries
      summary: Create a list of achievement journal entries
  /achievement-journals/find-by-query/:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - achievement-journals
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AchievementJournalEntriesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findAchievementJournalEntriesByQuery
      summary: Retrieve a list of achievements by a query request
  /competition-journals/create/:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompetitionJournalEntriesRequest'
        required: true
      tags:
        - competition-journals
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createCompetitionJournalEntries
      summary: Create a list of achievement journal entries
  /competition-journals/find-by-query/:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - competition-journals
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompetitionJournalEntriesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findCompetitionJournalEntriesByQuery
      summary: Retrieve a list of achievements by a query request
  /contest-journals/create/:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContestJournalEntriesRequest'
        required: true
      tags:
        - contest-journals
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createContestJournalEntries
      summary: Create a list of achievement journal entries
  /contest-journals/find-by-query/:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - contest-journals
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContestJournalEntriesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findContestJournalEntriesByQuery
      summary: Retrieve a list of achievements by a query request
  /system/cluster/subscribed-topics:
    get:
      tags:
        - system
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscribedTopicsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      deprecated: false
      operationId: getSubscribedTopicsForNode
      summary: Get a access-log-event by id
  /access-log-events/access-log-event:
    get:
      tags:
        - access-log-events
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessLogEvent'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      deprecated: false
      operationId: getAccessLogEvent
      summary: Get a access-log-event by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessLogEvent'
        required: true
      tags:
        - access-log-events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      deprecated: true
      operationId: putAccessLogEvent
      summary: Update a access-log-event
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessLogEvent'
        required: true
      tags:
        - access-log-events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      deprecated: true
      operationId: postAccessLogEvent
      summary: Create a access-log-event
    delete:
      tags:
        - access-log-events
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      deprecated: true
      operationId: deleteAccessLogEvent
      summary: Delete a access-log-event
  /messages/create/:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessagesRequest'
        required: true
      tags:
        - messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createMessagesAsList
      summary: Create a list of messages
  /messages/delete/:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMessagesRequest'
        required: true
      tags:
        - messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteMessagesAsList
      summary: Delete a list of messages
  /messages/delete-by-query/:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteMessagesByQuery
      summary: Delete a list of messages by a query request
  /messages/find-by-account-id/:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findMessagesByAccountId
      summary: Retrieve a list of messages by account id
  /messages/find-by-identifiers/:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveMessagesAsList
      summary: Retrieve a list of messages
  /messages/find-by-query/:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findMessagesByQuery
      summary: Retrieve a list of messages by a query request
  /messages/message/:
    get:
      tags:
        - messages
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getMessage
      summary: Get a message by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      tags:
        - messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putMessage
      summary: Update a message
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      tags:
        - messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postMessage
      summary: Create a message
    delete:
      tags:
        - messages
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteMessage
      summary: Delete a message
  /messages/update/:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMessagesRequest'
        required: true
      tags:
        - messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateMessagesAsList
      summary: Update a list of messages
  /members/find-by-ref-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - members
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembersResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveMembersByRefIdsAsList
      summary: Retrieve a list of members
  /account-messages/account-message:
    get:
      tags:
        - account-messages
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountMessage'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      deprecated: true
      operationId: getAccountMessage
      summary: Get a account-message by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountMessage'
        required: true
      tags:
        - account-messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putAccountMessage
      summary: Update an account-message
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountMessage'
        required: true
      tags:
        - account-messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postAccountMessage
      summary: Create an account-message
    delete:
      tags:
        - account-messages
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteAccountMessage
      summary: Delete an account-message
  /rules/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRuleRequest'
        required: true
      tags:
        - rules
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createRulesAsList
      summary: Create a list of rules
  /rules/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRuleRequest'
        required: true
      tags:
        - rules
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteRulesAsList
      summary: Delete a list of rules
  /rules/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - rules
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveRulesAsList
      summary: Retrieve a list of rules
  /rules/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - rules
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findRulesByQuery
      summary: Retrieve a list of rules by a query request
  /rules/rule:
    get:
      tags:
        - rules
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getRule
      summary: Get a rule by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
        required: true
      tags:
        - rules
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putRule
      summary: Update a rule
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
        required: true
      tags:
        - rules
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postRule
      summary: Create a rule
    delete:
      tags:
        - rules
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteRule
      summary: Delete a rule
  /rules/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRuleRequest'
        required: true
      tags:
        - rules
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateRulesAsList
      summary: Update a list of rules
  /system/cluster/client-session:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterClientMessageRequest'
        required: true
      tags:
        - system
      responses:
        '200':
          content:
            application/json: {}
          description: On success
      operationId: clusterClientMessage
  /api-keys/find-by-key/:
    get:
      tags:
        - api-keys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeysResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findApiKeysByKey
      summary: Retrieve  api-key by key
    parameters:
      -
        name: key
        description: ''
        schema:
          type: string
        in: query
        required: true
  /translations/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTranslationRequest'
        required: true
      tags:
        - translations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createTranslationsAsList
      summary: Create a list of translations
  /translations/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTranslationRequest'
        required: true
      tags:
        - translations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteTranslationsAsList
      summary: Delete a list of translations
  /translations/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - translations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteTranslationsByQuery
      summary: Delete a list of translations by a query request
  /rules/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - rules
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteRulesByQuery
      summary: Delete a list of rules by a query request
  /translations/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - translations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findTranslationsByAccountId
      summary: Retrieve a list of translations by account id
  /translations/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - translations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveTranslationsAsList
      summary: Retrieve a list of translations
  /translations/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - translations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findTranslationsByQuery
      summary: Retrieve a list of translations by a query request
  /translations/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTranslationRequest'
        required: true
      tags:
        - translations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateTranslationsAsList
      summary: Update a list of translations
  /rules/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - rules
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findRulesByAccountId
      summary: Retrieve a list of rules by account id
  /translations/translation:
    get:
      tags:
        - translations
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Translation'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getTranslation
      summary: Get a translation by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Translation'
        required: true
      tags:
        - translations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putTranslation
      summary: Update a translation
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Translation'
        required: true
      tags:
        - translations
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postTranslation
      summary: Create a translation
    delete:
      tags:
        - translations
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteTranslation
      summary: Delete a translation
  /tags/find-by-ref-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - tags
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveTagsByRefIdsAsList
      summary: Retrieve a list of tags
  /compute-engines/compute-engine:
    get:
      tags:
        - compute-engines
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComputeEngine'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getComputeEngine
      summary: Get an compute-engine by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComputeEngine'
        required: true
      tags:
        - compute-engines
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putComputeEngine
      summary: Update a compute-engine
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComputeEngine'
        required: true
      tags:
        - compute-engines
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postComputeEngine
      summary: Create a compute-engine
    delete:
      tags:
        - compute-engines
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteComputeEngine
      summary: Delete a compute-engine
  /compute-engines/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComputeEngineRequest'
        required: true
      tags:
        - compute-engines
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createComputeEnginesAsList
      summary: Create a list of compute-engines
  /compute-engines/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteComputeEngineRequest'
        required: true
      tags:
        - compute-engines
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteComputeEnginesAsList
      summary: Delete a list of compute-engines
  /compute-engines/delete-by-query/:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - compute-engines
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteComputeEnginesByQuery
      summary: Delete a list of compute-engines by a query request
  /compute-engines/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - compute-engines
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComputeEnginesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findComputeEnginesByAccountId
      summary: Retrieve a list of compute-engines by account id
  /compute-engines/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - compute-engines
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComputeEnginesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveComputeEnginesAsList
      summary: Retrieve a list of compute-engines
  /api-keys/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - api-keys
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeysResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findApiKeysByQuery
      summary: Retrieve a list of api-keys by a query request
  /compute-engines/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - compute-engines
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComputeEnginesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findComputeEnginesByQuery
      summary: Retrieve a list of compute-engines by a query request
  /compute-engines/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateComputeEngineRequest'
        required: true
      tags:
        - compute-engines
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateComputeEnginesAsList
      summary: Update a list of compute-engines
  /leaderboards/query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaderboardQuery'
      tags:
        - leader-boards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findLeaderBoardsByQuery
      summary: Retrieve a list of leader-boards by a query request
  /leaderboards/subscribe:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeaderboardSubscription'
      tags:
        - leader-boards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaderboardsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: leaderBoardsSubscribe
      summary: Retrieve a list of leader-boards by a query request
  /dashboard:
    summary: Get dashboard for landing page
    description: >-
      The endopints allow you to get default dashboard or customise the dashboard and save it for next
      login.
    get:
      tags:
        - dashboard
      parameters:
        -
          name: ids
          description: ''
          schema:
            type: array
            items:
              type: string
          in: query
          required: true
        -
          name: limit
          description: ''
          schema:
            format: int32
            type: integer
          in: query
          required: true
        -
          name: skip
          description: ''
          schema:
            format: int32
            type: integer
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getDashboard
      summary: Get default dashboard
      description: Returns the default Ziqni dashboard response.
      x-codegen-request-body-name: body
    put:
      requestBody:
        description: Update the dashboard in the Ziqni database.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomDashboardRequest'
        required: true
      tags:
        - dashboard
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateCustomDashboard
      summary: Update custom dashboard
      description: Update custom dashboard in the Ziqni database
    post:
      requestBody:
        description: Create a Dashboard in the Ziqni database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomDashboardRequest'
        required: true
      tags:
        - dashboard
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createCustomDashboard
      summary: Create custom dashboard
      description: Customise the dashboard to view KPIs important to you next time when you login to Ziqni.
    delete:
      tags:
        - dashboard
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteCustomDashboard
      summary: Delete custom dashboard
      description: >-
        Delete the custom dashboard, which will in turn reset the user account to default dashboard
        response.
  /dashboard/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - dashboard
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveDashboard
      summary: Get default dashboard
  /competitions/state:
    put:
      requestBody:
        description: Updates the state of the Competition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCompetitionStateRequest'
      tags:
        - competitions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateCompetitionsState
      summary: Manages the Competitions state
      description: Manages the Competitions state
  /contests/state:
    put:
      requestBody:
        description: Updates the state of the Contest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContestStateRequest'
      tags:
        - contests
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateContestsState
      summary: Manages the Contests state
      description: Manages the Contests state
  /achievements/state:
    put:
      requestBody:
        description: Updates the state of the Achievement
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAchievementLiveStatusRequest'
      tags:
        - achievements
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateAchievementsLiveStatus
      summary: Manages the Achievements state
      description: Manages the Achievements state
  /manage-optin:
    summary: Member optin operation
    description: This endpoint supports member's optin operation.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManageOptinRequest'
        required: true
      tags:
        - opt-in
      responses:
        '200':
          $ref: '#/components/responses/OptInResponseBody'
        '400':
          $ref: '#/components/responses/OptInResponseBody'
        '500':
          $ref: '#/components/responses/OptInResponseBody'
      operationId: manageOptin
      summary: Get member optin information
      description: Returns a list of member optin information
      x-ws-only: true
  /manage-optin/optin-states:
    summary: Member optin operation
    description: This endpoint supports member's optin operation.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OptinStatesRequest'
        required: true
      tags:
        - opt-in
      responses:
        '200':
          $ref: '#/components/responses/OptInStatesResponseBody'
        '400':
          $ref: '#/components/responses/OptInStatesResponseBody'
        '500':
          $ref: '#/components/responses/OptInStatesResponseBody'
      operationId: optInStates
      summary: Get member optin status information
      description: Returns a list of member optin status information
      x-ws-only: true
  /awards/claim-award:
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClaimAwardRequest'
        required: true
      tags:
        - awards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: claimAward
      summary: Create a list of awards
  /active-entities/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActiveEntitiesRequest'
      tags:
        - active-entities
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveEntitiesResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findActiveEntitiesByAccountId
      summary: Retrieve a list of active entities by account Id
      description: Find active entities by account
  /scores/export-entrants:
    get:
      tags:
        - scores
      parameters:
        -
          name: job
          description: The job identifier
          schema:
            type: string
          in: query
          required: true
        -
          name: accountId
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoresResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: exportEntrantsNext
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - scores
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoresResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: exportEntrants
      summary: Retrieve a list of entrant scores
  /products/find-similar-to-products:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - products
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findSimilarToProducts
      summary: Retrieve a list of products recommended
  /instant-wins/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInstantWinRequest'
        required: true
      tags:
        - instant-wins
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createInstantWinsAsList
      summary: Create a list of instant wins
  /instant-wins/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInstantWinRequest'
        required: true
      tags:
        - instant-wins
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateInstantWinsAsList
      summary: Update a list of instant wins
  /instant-wins/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteInstantWinRequest'
        required: true
      tags:
        - instant-wins
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteInstantWinsAsList
      summary: Delete a list of instant wins
  /instant-wins/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - instant-wins
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteInstantWinsByQuery
      summary: Delete a list of instant wins by a query request
  /instant-wins/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - instant-wins
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstantWinsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findInstantWinsByQuery
      summary: Retrieve a list of instant wins by a query request
  /instant-wins/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - instant-wins
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstantWinsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findInstantWinsByAccountId
      summary: Retrieve a list of instant wins by account id
  /instant-wins/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - instant-wins
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstantWinsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveInstantWinsAsList
      summary: Retrieve a list of instant wins
  /instant-wins/instant-win:
    get:
      tags:
        - instant-wins
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstantWin'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getInstantWin
      summary: Get an instant win by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantWin'
        required: true
      tags:
        - instant-wins
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putInstantWin
      summary: Update an instant win
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstantWin'
        required: true
      tags:
        - instant-wins
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postInstantWin
      summary: Create an instant win
    delete:
      tags:
        - instant-wins
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteInstantWin
      summary: Delete an instant win
  /member-journals/create:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMemberJournalRequest'
        required: true
      tags:
        - member-journals
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: createMemberJournalsAsList
      summary: Create a list of member journals
  /member-journals/delete-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - member-journals
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteMemberJournalsByQuery
      summary: Delete a list of member journals by a query request
  /member-journals/find-by-account-id:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - member-journals
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberJournalsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findMemberJournalsByAccountId
      summary: Retrieve a list of member journals by account id
  /member-journals/member-journal:
    get:
      tags:
        - member-journals
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberJournal'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: getMemberJournal
      summary: Get an member journal by id
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberJournal'
        required: true
      tags:
        - member-journals
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: putMemberJournal
      summary: Update an member journal
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberJournal'
        required: true
      tags:
        - member-journals
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: postMemberJournal
      summary: Create an member journal
    delete:
      tags:
        - member-journals
      parameters:
        -
          name: id
          description: ''
          schema:
            type: string
          in: query
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteMemberJournal
      summary: Delete an member journal
  /member-journals/update:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMemberJournalRequest'
        required: true
      tags:
        - member-journals
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateMemberJournalsAsList
      summary: Update a list of member journals
  /member-journals/find-by-query:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - member-journals
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberJournalsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findMemberJournalsByQuery
      summary: Retrieve a list of member journals by a query request
  /member-journals/delete:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMemberJournalRequest'
        required: true
      tags:
        - member-journals
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: deleteMemberJournalsAsList
      summary: Delete a list of member journals
  /member-journals/find-by-identifiers:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindByIdsRequest'
        required: true
      tags:
        - member-journals
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberJournalsResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: retrieveMemberJournalsAsList
      summary: Retrieve a list of member journals
  /members/merge-duplicates:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeDuplicateMembersRequest'
        required: true
      tags:
        - members
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: mergeDuplicateMembers
      summary: merge duplicate members
  /members/find-duplicates:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ByQueryRequest'
        required: true
      tags:
        - members
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: findDuplicateMembers
      summary: Retrieve a list of members that are duplicates
  /awards/state:
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAwardStateRequest'
        required: true
      tags:
        - awards
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResponse'
          description: On success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Record not found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Server error
      operationId: updateAwardState
      summary: Update the state of awards
components:
  schemas:
    Identification:
      description: Standart accountId and userId parameter implementation
      required:
        - accountId
      type: object
      properties:
        userId:
          description: ''
          type: string
        accountId:
          description: ''
          type: string
    QuerySingle:
      required:
        - queryField
        - queryValue
      type: object
      properties:
        queryField:
          description: The key of the parameter that is being searched
          type: string
          example: competitionId
        queryValue:
          description: The value of the parameter that is being searched
          type: string
          example: Dc4swmQBVd51K6gPQqFx
    QueryMultiple:
      required:
        - queryField
        - queryValues
      type: object
      properties:
        queryField:
          description: The key of the parameter that is being searched
          type: string
          example: competitionId
        queryValues:
          description: Multiple values for parameter that is being searched
          type: array
          items:
            type: string
          example:
            - Dc4swmQBVd51K6gPQqFx
            - Dc4swmQBVd51K6gPQqFx
    QueryMultipleFields:
      required:
        - queryFields
        - queryValue
      type: object
      properties:
        queryFields:
          description: Multiple fields to be included in search for the given value
          type: array
          items:
            type: string
          example:
            - name
            - description
        queryValue:
          description: The value to search for across given fields.
          type: string
          example: test ziqni 2020
    QuerySortBy:
      required:
        - queryField
        - order
      type: object
      properties:
        queryField:
          description: The key of the parameter that is being searched
          type: string
          example: competitionId
        order:
          $ref: '#/components/schemas/SortOrder'
    RangeQuery:
      required:
        - queryField
        - gt
        - lt
        - constraints
      type: object
      properties:
        queryField:
          description: The key of the parameter that is being searched
          type: string
          example: sourceValue
        gt:
          description: Greater than value
          type: string
          example: '1.0'
        lt:
          description: Less than value
          type: string
          example: '2.0'
        constraints:
          description: Additional constraints
          type: array
          items:
            type: string
          example:
            - includeBounds
    SortOrder:
      description: Specify the sort order.
      enum:
        - Asc
        - Desc
      type: string
    DeleteAccountMessageRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    CreateAccountMessageRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/AccountMessage'
    UpdateAccountMessageRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/AccountMessage'
    DeleteAccountRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateAccountRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Account'
    CreateAccountRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Account'
    CreateAchievementRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/CreateAchievement'
    DeleteAchievementRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateAchievementRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/UpdateAchievement'
    CreateActionHelperRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/ActionHelper'
    DeleteActionHelperRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateActionHelperRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/ActionHelper'
    CreateApiKeyRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/ApiKey'
    DeleteApiKeyRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateApiKeyRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/ApiKey'
    CreateAttachmentRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Attachment'
    DeleteAttachmentRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateAttachmentRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Attachment'
    CreateAwardRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/CreateAward'
    DeleteAwardRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateAwardRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Award'
    CreateCompetitionRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/CreateCompetition'
    DeleteCompetitionRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateCompetitionRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/UpdateCompetition'
    CreateConsumerConfigRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/ConsumerConfig'
    DeleteConsumerConfigRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateConsumerConfigRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/ConsumerConfig'
    CreateContestRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/CreateContest'
    DeleteContestRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateContestRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/UpdateContest'
    CreateEventRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Event'
    UpdateEventRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Event'
    DeleteEventRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    CreateFileObjectRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/FileObject'
    DeleteFileObjectRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateFileObjectRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/FileObject'
    CreateFileRepositoryRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/FileRepository'
    DeleteFileRepositoryRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateFileRepositoryRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/FileRepository'
    CreateLanguageHelperRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/LanguageHelper'
    DeleteLanguageHelperRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateLanguageHelperRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/LanguageHelper'
    CreateMemberMessageRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/MemberMessage'
    DeleteMemberMessageRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateMemberMessageRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/MemberMessage'
    CreateMemberNotificationRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/MemberNotification'
    DeleteMemberNotificationRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateMemberNotificationRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/MemberNotification'
    CreateMemberRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Member'
    DeleteMemberRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateMemberRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Member'
    DeleteProductRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    CreateLogEventRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/LogEvent'
    DeleteLogEventRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateLogEventRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/LogEvent'
    CreatePasswordChangeRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/PasswordChangeRequest'
    DeletePasswordChangeRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdatePasswordChangeRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/PasswordChangeRequest'
    CreatePromotionPageRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/PromotionPage'
    DeletePromotionPageRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdatePromotionPageRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/PromotionPage'
    CreateRabbitConfigurationRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/RabbitConfiguration'
    DeleteRabbitConfigurationRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateRabbitConfigurationRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/RabbitConfiguration'
    CreateRewardTypeRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/RewardType'
    DeleteRewardTypeRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateRewardTypeRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/RewardType'
    CreateRewardRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Reward'
    DeleteRewardRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateRewardRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Reward'
    UpdateScoreRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Score'
    DeleteScoreRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    CreateAccessLogEventRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/AccessLogEvent'
    DeleteAccessLogEventRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateAccessLogEventRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/AccessLogEvent'
    CreateEventActionAggregationRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/EventActionAggregation'
    DeleteEventActionAggregationRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateEventActionAggregationRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/EventActionAggregation'
    CreateThemeTemplateRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/ThemeTemplate'
    UpdateThemeTemplateRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/ThemeTemplate'
    DeleteThemeTemplateRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    CreateTournamentRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Tournament'
    DeleteTournamentRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateTournamentRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Tournament'
    CreateTransformerRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Transformer'
    UpdateTransformerRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Transformer'
    DeleteTransformerRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    CreateUnitsOfMeasureRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/UnitOfMeasure'
    UpdateUnitsOfMeasureRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/UnitOfMeasure'
    DeleteUnitsOfMeasureRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    DeleteUserRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - itemsUserGroup
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    CreateWebhookRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Webhook'
    DeleteWebhookRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateWebhookRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Webhook'
    CreateWidgetRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Widget'
    DeleteWidgetRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateWidgetRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Widget'
    GetMemberScoreRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - memberId
            - participationId
          type: object
          properties:
            memberId:
              description: ''
              type: string
            participationId:
              description: Competition or contest identifier
              type: string
    RequestResult:
      description: ''
      required: []
      type: object
      properties:
        errorCodes:
          description: A list of error codes describing any issues with this request
          type: array
          items:
            format: int32
            type: integer
    RegisterMemberTournamentEntryRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - memberId
            - competitionId
          type: object
          properties:
            memberId:
              description: ''
              type: string
            competitionId:
              description: ''
              type: string
    GetMemberAchievementStatsRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - memberId
            - achievementId
          type: object
          properties:
            memberId:
              description: ''
              type: string
            achievementId:
              description: ''
              type: string
    MemberAchievementStats:
      description: ''
      required:
        - action
        - goalPercentComplete
        - achievementId
      type: object
      properties:
        action:
          description: ''
          type: string
        goalPercentComplete:
          format: double
          description: ''
          type: number
        achievementId:
          description: ''
          type: string
    NestedError:
      description: ''
      required:
        - errorCode
        - detailMessage
      type: object
      properties:
        errorCode:
          format: int32
          description: ''
          type: integer
        detailMessage:
          description: ''
          type: string
        fieldName:
          description: ''
          type: string
    FindByIdsRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to retrieve
              type: array
              items:
                type: string
    BulkOperationResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/SuccessResponse'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
    ActionHelpersResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ActionHelper'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
    AccessLogEventsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/AccessLogEvent'
    AccountMessagesResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/AccountMessage'
    AccountsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Account'
    AchievementsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Achievement'
    ApiKeysResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ApiKey'
    AttachmentsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Attachment'
    AwardsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Award'
    CompetitionsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Competition'
    ConsumerConfigsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ConsumerConfig'
    ContestsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Contest'
    CustomFieldsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
    EventActionAggregationsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/EventActionAggregation'
    EventsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Event'
    FileObjectsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/FileObject'
    FileRepositoriesResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/FileRepository'
    LanguageHelpersResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/LanguageHelper'
    LogEventsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/LogEvent'
    MemberMessagesResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/MemberMessage'
    MembersResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Member'
    PasswordChangeRequestsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/PasswordChangeRequest'
    ProductsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Product'
    PromotionPagesResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/PromotionPage'
    RabbitConfigurationsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/RabbitConfiguration'
    RewardsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Reward'
    RewardTypesResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/RewardType'
    ScoresResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Score'
    ThemeTemplatesResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ThemeTemplate'
    TournamentsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Tournament'
    TransformersResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Transformer'
    UnitsOfMeasureResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/UnitOfMeasure'
    WebhooksResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
    WidgetsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Widget'
    SuccessResponse:
      description: ''
      required:
        - id
      type: object
      properties:
        id:
          description: ''
          type: string
        externalRef:
          description: ''
          type: string
        version:
          description: ''
          type: integer
        relations:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Relation'
    IAMClientByAppRequest:
      description: ''
      required:
        - applicationName
        - spaceName
        - xForwardFor
      type: object
      properties:
        applicationName:
          description: The name of the application to search for
          type: string
        xForwardFor:
          description: The requesting URL
          type: string
        spaceName:
          description: The space name
          type: string
    IAMClientByAppResponse:
      description: ''
      required:
        - secret
        - clientId
        - realm
        - serverUrl
        - constraints
      type: object
      properties:
        secret:
          description: ''
          type: string
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        clientId:
          description: The client identifier
          type: string
        realm:
          description: ''
          type: string
        serverUrl:
          description: ''
          type: string
        constraints:
          description: 'bearer-only, allow-any-hostname'
          type: array
          items:
            type: string
    EntityTags:
      description: Entities the group is associated to.
      enum:
        - Member
        - Product
        - Achievement
        - Repository
        - FileObject
        - Language
        - MemberMessage
        - Reward
        - MemberAward
        - Award
        - Message
        - RewardType
        - ActionType
        - UnitOfMeasure
        - Competition
        - Contest
        - SqsConnection
        - KafkaConnection
        - RabbitMqConnection
        - Events
        - Webhook
        - Attachment
        - RuleSet
      type: string
    TagsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    ErrorResponse:
      description: ''
      required:
        - errorCode
      type: object
      properties:
        errorCode:
          format: int32
          description: ''
          type: integer
        reason:
          description: ''
          type: string
        message:
          description: ''
          type: string
        errorAt:
          description: ''
          type: integer
        nestedErrors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/NestedError'
    Meta:
      description: ''
      required:
        - resultCount
      type: object
      properties:
        totalRecords:
          description: ''
          type: integer
        resultCount:
          description: ''
          type: integer
        errorCount:
          description: ''
          type: integer
        skip:
          description: ''
          type: integer
        limit:
          description: ''
          type: integer
    ByQueryRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - accountId
            - userId
            - queryRequest
          type: object
          properties:
            accountId:
              description: '        '
              type: string
            userId:
              description: ''
              type: string
            queryRequest:
              $ref: '#/components/schemas/QueryRequest'
              description: ''
    CreateProductRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/CreateProduct'
    UpdateProductRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/UpdateProduct'
    CreateActionHelper:
      required:
        - id
      type: object
      properties:
        id:
          type: string
    UpdateActionHelper:
      required:
        - id
      type: object
      properties:
        id:
          type: string
    CreateCustomFieldRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/CustomField'
    DeleteCustomFieldRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateCustomFieldRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/CustomField'
    EventMetadata:
      type: object
      additionalProperties: true
    CollaboratorsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Collaborator'
    DeleteCollaboratorsRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    CreateCollaboratorsRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Collaborator'
    UpdateCollaboratorsRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Collaborator'
    AccessLogEvent:
      required:
        - accountId
        - userId
        - message
        - operationType
        - resource
        - id
        - created
      type: object
      properties:
        accountId:
          description: The id of the account.
          type: string
          x-es-converter: AccessLogEvent
          x-es-fieldName: accountId
        resource:
          type: string
          x-es-converter: AccessLogEvent
          x-es-fieldName: resource
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: AccessLogEvent
          x-es-fieldName: created
        id:
          type: string
          x-es-converter: AccessLogEvent
          x-es-fieldName: id
        operationType:
          type: string
          x-es-converter: AccessLogEvent
          x-es-fieldName: operationType
        message:
          type: string
          x-es-converter: AccessLogEvent
          x-es-fieldName: message
        userId:
          type: string
          x-es-converter: AccessLogEvent
          x-es-fieldName: userId
        version:
          format: int64
          type: integer
          x-es-converter: AccessLogEvent
          x-es-fieldName: _version
      example:
        accountId: some text
        resource: some text
        created: '2018-02-10T09:30Z'
        id: some text
        operationType: some text
        message: some text
        userId: some text
        version: 92
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.AccessLogEventDoc
    AccountMessage:
      required:
        - accountId
        - body
        - created
        - expiry
        - id
        - messageType
        - status
        - subject
        - userId
      type: object
      properties:
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/Metadata'
          x-es-converter: AccountMessage
          x-es-fieldName: metadata
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: AccountMessage
          x-es-fieldName: created
        body:
          type: string
          x-es-converter: AccountMessage
          x-es-fieldName: body
        userId:
          type: string
          x-es-converter: AccountMessage
          x-es-fieldName: userId
        subject:
          type: string
          x-es-converter: AccountMessage
          x-es-fieldName: subject
        accountId:
          type: string
          x-es-converter: AccountMessage
          x-es-fieldName: accountId
        eventRefId:
          type: string
          x-es-converter: AccountMessage
          x-es-fieldName: eventRefId
        id:
          type: string
          x-es-converter: AccountMessage
          x-es-fieldName: id
        messageType:
          type: string
          x-es-converter: AccountMessage
          x-es-fieldName: messageType
        status:
          type: string
          x-es-converter: AccountMessage
          x-es-fieldName: status
        expiry:
          format: date-time
          description: date-time
          type: string
          x-es-converter: AccountMessage
          x-es-fieldName: expiry
        eventRefType:
          type: string
          x-es-converter: AccountMessage
          x-es-fieldName: eventRefType
        version:
          format: int64
          type: integer
          x-es-converter: AccountMessage
          x-es-fieldName: _version
        constraints:
          description: ''
          type: array
          items:
            type: string
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.AccountMessageDoc
    AchievementLink:
      required:
        - achievementId
        - linkType
      type: object
      properties:
        achievementId:
          type: string
          x-es-converter: AchievementLink
          x-es-fieldName: achievementId
        linkType:
          type: string
          x-es-converter: AchievementLink
          x-es-fieldName: linkType
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.AchievementLinkDoc
    ActionAdjustmentFactor:
      required:
        - adjustmentFactor
        - actionHelper
      type: object
      properties:
        adjustmentFactor:
          format: double
          description: ''
          type: number
          x-es-converter: ActionAdjustmentFactor
          x-es-fieldName: adjustmentFactor
        actionHelper:
          $ref: '#/components/schemas/ActionHelper'
          description: ''
          x-es-converter: ActionAdjustmentFactor
          x-es-fieldName: ruleActionHelper
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.ActionAdjustmentFactorDoc
    ActionHelper:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: ActionHelper
        -
          required:
            - accountId
            - id
            - key
            - name
            - system
          type: object
          properties:
            accountId:
              type: string
              x-es-converter: ActionHelper
              x-es-fieldName: accountId
            system:
              type: boolean
              x-es-converter: ActionHelper
              x-es-fieldName: system
            key:
              type: string
              x-es-converter: ActionHelper
              x-es-fieldName: key
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: ActionHelper
              x-es-fieldName: created
            name:
              type: string
              x-es-converter: ActionHelper
              x-es-fieldName: name
            description:
              type: string
              x-es-converter: ActionHelper
              x-es-fieldName: description
            id:
              type: string
              x-es-converter: ActionHelper
              x-es-fieldName: id
            version:
              format: int64
              type: integer
              x-es-converter: ActionHelper
              x-es-fieldName: _version
            unitOfMeasure:
              type: string
              x-es-converter: ActionHelper
              x-es-fieldName: UnitOfMeasure
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.ActionHelperDoc
    ApiKey:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: ApiKey
        -
          required:
            - accountId
            - active
            - key
            - role
            - created
            - default
            - id
          type: object
          properties:
            accountId:
              type: string
              x-es-converter: ApiKey
              x-es-fieldName: accountId
            whiteListIPs:
              type: array
              items:
                type: string
              x-es-converter: ApiKey
              x-es-fieldName: whiteListIPs
            role:
              type: string
              x-es-converter: ApiKey
              x-es-fieldName: role
            active:
              type: boolean
              x-es-converter: ApiKey
              x-es-fieldName: active
            default:
              type: boolean
              x-es-converter: ApiKey
              x-es-fieldName: default
            description:
              type: string
              x-es-converter: ApiKey
              x-es-fieldName: description
            id:
              type: string
              x-es-converter: ApiKey
              x-es-fieldName: id
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: ApiKey
              x-es-fieldName: created
            key:
              type: string
              x-es-converter: ApiKey
              x-es-fieldName: key
            version:
              format: int64
              type: integer
              x-es-converter: ApiKey
              x-es-fieldName: _version
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.ApiKeyDoc
    Attachment:
      required:
        - accountId
        - attachmentType
        - bucketName
        - created
        - extension
        - fileName
        - id
        - locationFolder
        - locationKey
        - md5Hash
        - metadata
        - mimeType
        - permission
      type: object
      properties:
        attachmentType:
          type: string
          x-es-converter: Attachment
          x-es-fieldName: attachmentType
        bucketName:
          type: string
          x-es-converter: Attachment
          x-es-fieldName: bucketName
        md5Hash:
          type: string
          x-es-converter: Attachment
          x-es-fieldName: md5Hash
        accountId:
          type: string
          x-es-converter: Attachment
          x-es-fieldName: accountId
        fileName:
          type: string
          x-es-converter: Attachment
          x-es-fieldName: fileName
        mimeType:
          type: string
          x-es-converter: Attachment
          x-es-fieldName: mimeType
        extension:
          type: string
          x-es-converter: Attachment
          x-es-fieldName: extension
        locationKey:
          type: string
          x-es-converter: Attachment
          x-es-fieldName: locationKey
        locationFolder:
          type: string
          x-es-converter: Attachment
          x-es-fieldName: locationFolder
        permission:
          format: int32
          description: integer
          type: integer
          x-es-converter: Attachment
          x-es-fieldName: permission
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/Metadata'
          x-es-converter: Attachment
          x-es-fieldName: metadata
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: Attachment
          x-es-fieldName: created
        id:
          type: string
          x-es-converter: Attachment
          x-es-fieldName: id
        version:
          format: int64
          type: integer
          x-es-converter: Attachment
          x-es-fieldName: _version
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.AttachmentDoc
    CreateAward:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: Award
        -
          required:
            - accountId
            - claimed
            - rewardId
            - memberId
            - created
            - entityId
            - entityType
            - id
            - pointInTime
          type: object
          properties:
            accountId:
              type: string
              x-es-converter: Award
              x-es-fieldName: accountId
            memberId:
              type: string
              x-es-converter: Award
              x-es-fieldName: memberId
            rewardId:
              type: string
              x-es-converter: RewardId
              x-es-fieldName: rewardId
            claimed:
              type: boolean
              x-es-converter: Award
              x-es-fieldName: claimed
            entityType:
              type: string
              x-es-converter: Award
              x-es-fieldName: entityType
            entityId:
              description: >-
                Id of the competition, contest or achievement to which this award is
                associated.
              type: string
              x-es-converter: Award
              x-es-fieldName: entityId
            pointInTime:
              format: date-time
              description: date-time
              type: string
              x-es-converter: Award
              x-es-fieldName: pointInTime
            period:
              description: integer
              type: integer
              x-es-converter: Award
              x-es-fieldName: period
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: Award
              x-es-fieldName: created
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.AwardDoc
    ComplexFilter:
      type: object
      properties:
        filterType:
          type: string
          x-es-converter: ComplexFilter
          x-es-fieldName: filterType
        value:
          type: string
          x-es-converter: ComplexFilter
          x-es-fieldName: value
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.ComplexFilterDoc
    ComplexFilters:
      required:
        - shouldMatchAtLeast
      type: object
      properties:
        shouldMatchAtLeast:
          format: int32
          description: integer
          type: integer
          x-es-converter: ComplexFilters
          x-es-fieldName: shouldMatchAtLeast
        mustNot:
          type: array
          items:
            type: string
          x-es-converter: ComplexFilters
          x-es-fieldName: mustNot
        should:
          type: array
          items:
            type: string
          x-es-converter: ComplexFilters
          x-es-fieldName: should
        must:
          type: array
          items:
            type: string
          x-es-converter: ComplexFilters
          x-es-fieldName: must
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.ComplexFiltersDoc
    ConsumerConfig:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: ConsumerConfig
        -
          required:
            - consumerType
            - name
            - id
            - created
            - options
            - uri
            - accountId
          type: object
          properties:
            consumerType:
              type: string
              x-es-converter: ConsumerConfig
              x-es-fieldName: consumerType
            accountId:
              type: string
              x-es-converter: ConsumerConfig
              x-es-fieldName: accountId
            uri:
              type: array
              items:
                type: string
              x-es-converter: ConsumerConfig
              x-es-fieldName: uri
            options:
              description: Options for this consumer
              type: array
              items:
                $ref: '#/components/schemas/Metadata'
              x-es-converter: ConsumerConfig
              x-es-fieldName: options
            headers:
              type: array
              items:
                $ref: '#/components/schemas/Metadata'
              x-es-converter: ConsumerConfig
              x-es-fieldName: headers
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: ConsumerConfig
              x-es-fieldName: created
            name:
              type: string
              x-es-converter: ConsumerConfig
              x-es-fieldName: name
            id:
              type: string
              x-es-converter: ConsumerConfig
              x-es-fieldName: id
            version:
              format: int64
              type: integer
              x-es-converter: ConsumerConfig
              x-es-fieldName: _version
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.ConsumerConfigDoc
    Contact:
      type: object
      properties:
        country:
          type: string
          x-es-converter: Contact
          x-es-fieldName: country
        phoneNumber:
          type: string
          x-es-converter: Contact
          x-es-fieldName: phoneNumber
        zipPostalCode:
          type: string
          x-es-converter: Contact
          x-es-fieldName: zipPostalCode
        city:
          type: string
          x-es-converter: Contact
          x-es-fieldName: city
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: Contact
          x-es-fieldName: created
        mobileNumber:
          type: string
          x-es-converter: Contact
          x-es-fieldName: mobileNumber
        addressLine1:
          type: string
          x-es-converter: Contact
          x-es-fieldName: addressLine1
        addressLine2:
          type: string
          x-es-converter: Contact
          x-es-fieldName: addressLine2
        state:
          type: string
          x-es-converter: Contact
          x-es-fieldName: state
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.ContactDoc
    EventActionAggregation:
      required:
        - accountId
        - actionHashKey
        - action
        - created
        - id
        - memberId
        - refModelId
        - sequence
        - eventRuleSetAggregations
      type: object
      properties:
        memberId:
          type: string
          x-es-converter: EventActionAggregation
          x-es-fieldName: memberId
        refModelId:
          type: string
          x-es-converter: EventActionAggregation
          x-es-fieldName: refModelId
        sequence:
          format: int64
          description: long
          type: integer
          x-es-converter: EventActionAggregation
          x-es-fieldName: sequence
        eventRuleSetAggregations:
          type: array
          items:
            $ref: '#/components/schemas/EventRuleSetAggregation'
          x-es-converter: EventActionAggregation
          x-es-fieldName: eventRuleSetAggregations
        action:
          type: string
          x-es-converter: EventActionAggregation
          x-es-fieldName: action
        actionHashKey:
          type: string
          x-es-converter: EventActionAggregation
          x-es-fieldName: actionHashKey
        accountId:
          type: string
          x-es-converter: EventActionAggregation
          x-es-fieldName: accountId
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: EventActionAggregation
          x-es-fieldName: created
        id:
          type: string
          x-es-converter: EventActionAggregation
          x-es-fieldName: id
        version:
          format: int64
          type: integer
          x-es-converter: EventActionAggregation
          x-es-fieldName: _version
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.EventActionAggregationDoc
    EventConditionAggregation:
      required:
        - allTrue
        - conditionHashKey
        - matchAll
        - matchedCount
        - ruleAggregations
      type: object
      properties:
        matchedCount:
          format: int64
          description: long
          type: integer
          x-es-converter: EventConditionAggregation
          x-es-fieldName: matchedCount
        conditionHashKey:
          type: string
          x-es-converter: EventConditionAggregation
          x-es-fieldName: conditionHashKey
        ruleAggregations:
          type: array
          items:
            $ref: '#/components/schemas/EventRuleAggregation'
          x-es-converter: EventConditionAggregation
          x-es-fieldName: ruleAggregations
        allTrue:
          type: boolean
          x-es-converter: EventConditionAggregation
          x-es-fieldName: allTrue
        matchAll:
          type: boolean
          x-es-converter: EventConditionAggregation
          x-es-fieldName: matchAll
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.EventConditionAggregationDoc
    EventRuleAggregation:
      required:
        - count
        - field
        - goalPercentComplete
        - goalTarget
        - goalType
        - lastCreated
        - lastTransactionTimeStamp
        - max
        - min
        - ruleHashKey
        - sum
      type: object
      properties:
        lastTransactionTimeStamp:
          format: int64
          description: long
          type: integer
          x-es-converter: EventRuleAggregation
          x-es-fieldName: lastTransactionTimeStamp
        goalType:
          type: string
          x-es-converter: EventRuleAggregation
          x-es-fieldName: goalType
        min:
          format: double
          description: double
          type: number
          x-es-converter: EventRuleAggregation
          x-es-fieldName: min
        field:
          type: string
          x-es-converter: EventRuleAggregation
          x-es-fieldName: field
        max:
          format: double
          description: double
          type: number
          x-es-converter: EventRuleAggregation
          x-es-fieldName: max
        goalPercentComplete:
          format: double
          description: double
          type: number
          x-es-converter: EventRuleAggregation
          x-es-fieldName: goalPercentComplete
        count:
          format: int64
          description: long
          type: integer
          x-es-converter: EventRuleAggregation
          x-es-fieldName: count
        sum:
          format: double
          description: double
          type: number
          x-es-converter: EventRuleAggregation
          x-es-fieldName: sum
        goalTarget:
          format: double
          description: double
          type: number
          x-es-converter: EventRuleAggregation
          x-es-fieldName: goalTarget
        ruleHashKey:
          type: string
          x-es-converter: EventRuleAggregation
          x-es-fieldName: ruleHashKey
        lastCreated:
          format: int64
          description: long
          type: integer
          x-es-converter: EventRuleAggregation
          x-es-fieldName: lastCreated
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.EventRuleAggregationDoc
    EventRuleSetAggregation:
      required:
        - dateFrom
        - dateTo
        - eventConditionAggregations
        - ruleSetHashKey
      type: object
      properties:
        dateTo:
          format: int64
          description: long
          type: integer
          x-es-converter: EventRuleSetAggregation
          x-es-fieldName: dateTo
        dateFrom:
          format: int64
          description: long
          type: integer
          x-es-converter: EventRuleSetAggregation
          x-es-fieldName: dateFrom
        eventConditionAggregations:
          type: array
          items:
            $ref: '#/components/schemas/EventConditionAggregation'
          x-es-converter: EventRuleSetAggregation
          x-es-fieldName: eventConditionAggregations
        ruleSetHashKey:
          type: string
          x-es-converter: EventRuleSetAggregation
          x-es-fieldName: ruleSetHashKey
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.EventRuleSetAggregationDoc
    File:
      required:
        - content-type
        - extension
        - filename
        - mimetype
      type: object
      properties:
        extension:
          type: string
          x-es-converter: File
          x-es-fieldName: extension
        filename:
          type: string
          x-es-converter: File
          x-es-fieldName: filename
        content-type:
          type: string
          x-es-converter: File
          x-es-fieldName: content-type
        mimetype:
          type: string
          x-es-converter: File
          x-es-fieldName: mimetype
        original-filename:
          type: string
          x-es-converter: File
          x-es-fieldName: original-filename
        key:
          type: string
          x-es-converter: File
          x-es-fieldName: key
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.FileDoc
    FileObject:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: FileObject
        -
          required:
            - accountId
            - created
            - deleted
            - repositoryId
            - repositoryName
            - name
            - parentFolderPath
            - canonicalPath
            - canonicalPathHash
            - mimeType
            - md5Checksum
            - id
          type: object
          properties:
            accountId:
              type: string
              x-es-converter: FileObject
              x-es-fieldName: accountId
            repositoryId:
              type: string
              x-es-converter: FileObject
              x-es-fieldName: repositoryId
            repositoryName:
              description: ''
              type: string
              x-es-converter: FileObject
              x-es-fieldName: repositoryName
            name:
              type: string
              x-es-converter: FileObject
              x-es-fieldName: name
            parentFolderPath:
              description: ''
              type: string
              x-es-converter: FileObject
              x-es-fieldName: parentFolderPath
            canonicalPathHash:
              description: ''
              type: string
              x-es-converter: FileObject
              x-es-fieldName: canonicalPathHash
            canonicalPath:
              description: ''
              type: string
              x-es-converter: FileObject
              x-es-fieldName: canonicalPath
            mimeType:
              type: string
              x-es-converter: FileObject
              x-es-fieldName: mimeType
            md5Checksum:
              description: ''
              type: string
              x-es-converter: FileObject
              x-es-fieldName: md5Checksum
            size:
              format: int64
              description: integer
              type: integer
              x-es-converter: FileObject
              x-es-fieldName: size
            deleted:
              type: boolean
              x-es-converter: FileObject
              x-es-fieldName: deleted
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: FileObject
              x-es-fieldName: created
            id:
              type: string
              x-es-converter: FileObject
              x-es-fieldName: id
            version:
              format: int64
              type: integer
              x-es-converter: FileObject
              x-es-fieldName: _version
            isDirectory:
              description: ''
              type: boolean
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.FileObjectDoc
    FileRepository:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: FileRepository
        -
          required:
            - accountId
            - name
            - location
            - system
            - public
            - id
            - created
          type: object
          properties:
            accountId:
              type: string
              x-es-converter: FileRepository
              x-es-fieldName: accountId
            name:
              type: string
              x-es-converter: FileRepository
              x-es-fieldName: name
            description:
              type: string
              x-es-converter: FileRepository
              x-es-fieldName: description
            location:
              type: string
              x-es-converter: FileRepository
              x-es-fieldName: location
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: FileRepository
              x-es-fieldName: created
            constraints:
              type: array
              items:
                type: string
              x-es-converter: FileRepository
              x-es-fieldName: constraints
            hostingOptions:
              $ref: '#/components/schemas/HostingOptions'
              x-es-converter: FileRepository
              x-es-fieldName: hostingOptions
            id:
              type: string
              x-es-converter: FileRepository
              x-es-fieldName: id
            version:
              format: int64
              type: integer
              x-es-converter: FileRepository
              x-es-fieldName: _version
            system:
              type: boolean
              x-es-converter: FileRepository
              x-es-fieldName: isSystem
            public:
              type: boolean
              x-es-converter: FileRepository
              x-es-fieldName: isPublic
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.FileRepositoryDoc
    Header:
      required:
        - key
      type: object
      properties:
        value:
          type: string
          x-es-converter: Header
          x-es-fieldName: value
        key:
          type: string
          x-es-converter: Header
          x-es-fieldName: key
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.HeaderDoc
    HostingOptions:
      type: object
      properties:
        errorFileName:
          type: string
          x-es-converter: HostingOptions
          x-es-fieldName: errorFileName
        indexFileName:
          type: string
          x-es-converter: HostingOptions
          x-es-fieldName: indexFileName
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.HostingOptionsDoc
    JGroupsNodeEntry:
      description: A record of cluster entry in the domain
      required:
        - node
        - address
      type: object
      properties:
        node:
          description: ''
          type: string
          x-es-converter: JGroupsNodeEntry
          x-es-fieldName: node
        address:
          description: ''
          type: string
          x-es-converter: JGroupsNodeEntry
          x-es-fieldName: address
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.JGroupsNodeEntryDoc
    LanguageHelper:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: LanguageHelper
        -
          required:
            - key
            - id
            - accountId
            - created
          type: object
          properties:
            accountId:
              type: string
              x-es-converter: LanguageHelper
              x-es-fieldName: accountId
            references:
              type: array
              items:
                type: string
              x-es-converter: LanguageHelper
              x-es-fieldName: references
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: LanguageHelper
              x-es-fieldName: created
            id:
              type: string
              x-es-converter: LanguageHelper
              x-es-fieldName: id
            key:
              type: string
              x-es-converter: LanguageHelper
              x-es-fieldName: key
            version:
              format: int64
              type: integer
              x-es-converter: LanguageHelper
              x-es-fieldName: _version
            name:
              type: string
              x-es-converter: LanguageHelper
              x-es-fieldName: name
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.LanguageHelperDoc
    MainConditionSet:
      description: ''
      type: object
      properties:
        matchCondition:
          type: string
          x-es-converter: MainConditionSet
          x-es-fieldName: matchCondition
        mustEvaluateTo:
          type: boolean
          x-es-converter: MainConditionSet
          x-es-fieldName: mustEvaluateTo
        longHashKey:
          format: int64
          description: long
          type: integer
          x-es-converter: MainConditionSet
          x-es-fieldName: longHashKey
        rules:
          type: array
          items:
            $ref: '#/components/schemas/MainRule'
          x-es-converter: MainConditionSet
          x-es-fieldName: rules
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.MainConditionSetDoc
    MainRule:
      required:
        - fact
        - constant
        - operator
        - subConditions
      type: object
      properties:
        constant:
          type: string
          x-es-converter: MainRule
          x-es-fieldName: constant
        fact:
          type: string
          x-es-converter: MainRule
          x-es-fieldName: fact
        subConditions:
          type: array
          items:
            $ref: '#/components/schemas/SubConditionSet'
          x-es-converter: MainRule
          x-es-fieldName: subConditions
        longHashKey:
          format: int64
          description: long
          type: integer
          x-es-converter: MainRule
          x-es-fieldName: longHashKey
        id:
          type: string
          x-es-converter: MainRule
          x-es-fieldName: id
        operator:
          type: string
          x-es-converter: MainRule
          x-es-fieldName: operator
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.MainRuleDoc
    MaxMin:
      required:
        - minimum
      type: object
      properties:
        maximum:
          format: int64
          description: integer
          type: integer
          x-es-converter: MaxMin
          x-es-fieldName: maximum
        minimum:
          format: int64
          description: integer
          type: integer
          x-es-converter: MaxMin
          x-es-fieldName: minimum
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.MaxMinDoc
    MemberMessage:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: MemberMessage
        -
          required:
            - accountId
            - body
            - id
            - memberId
            - messageType
            - status
            - subject
          type: object
          properties:
            accountId:
              type: string
              x-es-converter: MemberMessage
              x-es-fieldName: accountId
            memberId:
              type: string
              x-es-converter: MemberMessage
              x-es-fieldName: memberId
            eventRefType:
              type: string
              x-es-converter: MemberMessage
              x-es-fieldName: eventRefType
            eventReferenceId:
              type: string
              x-es-converter: MemberMessage
              x-es-fieldName: eventReferenceId
            messageType:
              type: string
              x-es-converter: MemberMessage
              x-es-fieldName: messageType
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: MemberMessage
              x-es-fieldName: created
            body:
              type: string
              x-es-converter: MemberMessage
              x-es-fieldName: body
            subject:
              type: string
              x-es-converter: MemberMessage
              x-es-fieldName: subject
            prize:
              $ref: '#/components/schemas/Award'
              x-es-converter: MemberMessage
              x-es-fieldName: prize
            expiry:
              format: date-time
              description: date-time
              type: string
              x-es-converter: MemberMessage
              x-es-fieldName: expiry
            id:
              type: string
              x-es-converter: MemberMessage
              x-es-fieldName: id
            status:
              type: string
              x-es-converter: MemberMessage
              x-es-fieldName: status
            version:
              format: int64
              type: integer
              x-es-converter: MemberMessage
              x-es-fieldName: _version
            constraints:
              description: ''
              type: array
              items:
                type: string
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.MemberMessageDoc
    MemberNotification:
      required:
        - accountId
        - body
        - id
        - messageType
        - status
        - subject
      type: object
      properties:
        accountId:
          type: string
          x-es-converter: MemberNotification
          x-es-fieldName: accountId
        memberGroup:
          type: array
          items:
            type: string
          x-es-converter: MemberNotification
          x-es-fieldName: memberGroup
        members:
          type: array
          items:
            type: string
          x-es-converter: MemberNotification
          x-es-fieldName: members
        messageType:
          type: string
          x-es-converter: MemberNotification
          x-es-fieldName: messageType
        subject:
          type: string
          x-es-converter: MemberNotification
          x-es-fieldName: subject
        body:
          type: string
          x-es-converter: MemberNotification
          x-es-fieldName: body
        status:
          description: |
            Use "1" as the deafault value
          type: string
          x-es-converter: MemberNotification
          x-es-fieldName: status
        scheduling:
          $ref: '#/components/schemas/Scheduling'
          x-es-converter: MemberNotification
          x-es-fieldName: scheduling
        deprecated:
          description: Use "false" as the deafault value
          type: boolean
          x-es-converter: MemberNotification
          x-es-fieldName: deprecated
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/Metadata'
          x-es-converter: MemberNotification
          x-es-fieldName: metadata
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: MemberNotification
          x-es-fieldName: created
        id:
          type: string
          x-es-converter: MemberNotification
          x-es-fieldName: id
        version:
          format: int64
          type: integer
          x-es-converter: MemberNotification
          x-es-fieldName: _version
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.MemberNotificationDoc
    MemberNotificationsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/MemberNotification'
    MemberOf:
      required:
        - accountId
        - canAccessSubAccounts
        - inheritedFromMaster
        - role
      type: object
      properties:
        accountId:
          type: string
          x-es-converter: MemberOf
          x-es-fieldName: accountId
        canAccessSubAccounts:
          type: boolean
          x-es-converter: MemberOf
          x-es-fieldName: canAccessSubAccounts
        role:
          type: string
          x-es-converter: MemberOf
          x-es-fieldName: role
        inheritedFromMaster:
          type: string
          x-es-converter: MemberOf
          x-es-fieldName: inheritedFromMaster
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.MemberOfDoc
    Notification:
      required:
        - messageId
      type: object
      properties:
        messageId:
          type: string
          x-es-converter: Notification
          x-es-fieldName: messageId
        competitionStatus:
          type: string
          x-es-converter: Notification
          x-es-fieldName: competitionStatus
        contestStatus:
          type: string
          x-es-converter: Notification
          x-es-fieldName: contestStatus
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.NotificationDoc
    PasswordChangeRequest:
      required:
        - hash
        - accountId
        - id
        - timestamp
        - userId
      type: object
      properties:
        accountId:
          type: string
          x-es-converter: PasswordChangeRequest
          x-es-fieldName: accountId
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: PasswordChangeRequest
          x-es-fieldName: created
        id:
          type: string
          x-es-converter: PasswordChangeRequest
          x-es-fieldName: id
        userId:
          type: string
          x-es-converter: PasswordChangeRequest
          x-es-fieldName: userId
        hash:
          type: string
          x-es-converter: PasswordChangeRequest
          x-es-fieldName: hash
        timestamp:
          format: date-time
          description: date-time
          type: string
          x-es-converter: PasswordChangeRequest
          x-es-fieldName: timestamp
        version:
          format: int64
          type: integer
          x-es-converter: PasswordChangeRequest
          x-es-fieldName: _version
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.PasswordChangeRequestDoc
    PromotionPage:
      required:
        - accountId
        - deprecated
        - id
        - live
        - name
      type: object
      properties:
        name:
          type: string
          x-es-converter: PromotionPage
          x-es-fieldName: name
        accountId:
          type: string
          x-es-converter: PromotionPage
          x-es-fieldName: accountId
        description:
          type: string
          x-es-converter: PromotionPage
          x-es-fieldName: description
        live:
          description: Use "false" as default value
          type: boolean
          x-es-converter: PromotionPage
          x-es-fieldName: live
        category:
          type: array
          items:
            type: string
          x-es-converter: PromotionPage
          x-es-fieldName: category
        deprecated:
          description: Use "false" as default value
          type: boolean
          x-es-converter: PromotionPage
          x-es-fieldName: deprecated
        scheduledDates:
          $ref: '#/components/schemas/StartEndDate'
          x-es-converter: PromotionPage
          x-es-fieldName: scheduledDates
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: PromotionPage
          x-es-fieldName: created
        id:
          type: string
          x-es-converter: PromotionPage
          x-es-fieldName: id
        version:
          format: int64
          type: integer
          x-es-converter: PromotionPage
          x-es-fieldName: _version
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.PromotionPageDoc
    PublishDates:
      type: object
      properties:
        start:
          format: date-time
          description: date-time
          type: string
          x-es-converter: PublishDates
          x-es-fieldName: start
        end:
          format: date-time
          description: date-time
          type: string
          x-es-converter: PublishDates
          x-es-fieldName: end
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.PublishDatesDoc
    CustomFieldReduced:
      required:
        - key
        - id
        - accountId
        - fieldType
        - appliesTo
      type: object
      properties:
        id:
          description: A unique system generated identifier
          type: string
          example: sc1samQmVr61KgaPQq7x
          x-ziqni-fieldName: id
        accountId:
          type: string
          x-ziqni-fieldName: accountId
        created:
          format: date-time
          description: >-
            ISO8601 timestamp for when a Model was created. All records are stored in UTC time
            zone
          type: string
          readOnly: false
          example: '2019-09-25T15:47:00.000+0000'
          x-ziqni-fieldName: created
        key:
          description: The key of a Custom field
          type: string
          example: promotional-field
          x-ziqni-fieldName: key
        fieldType:
          type: string
          x-ziqni-fieldName: fieldType
        appliesTo:
          type: string
          x-ziqni-fieldName: appliesTo
      x-ziqni-companionObject: ziqni.core.model.CustomField
    ProductActionAdjustmentFactorLink:
      description: ''
      required:
        - actionHelperId
        - adjustmentFactor
      type: object
      properties:
        actionHelperId:
          description: ''
          type: string
          x-ziqni-fieldName: actionHelper
        adjustmentFactor:
          format: double
          description: ''
          type: number
          x-ziqni-fieldName: adjustmentFactor
      x-ziqni-companionObject: ziqni.core.model.ActionAdjustmentFactor
    RabbitConfiguration:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: RabbitConfiguration
        -
          required:
            - accountId
            - autoDelete
            - durable
            - exclusive
            - id
            - lastKnownStateCode
            - name
            - password
            - port
            - queueName
            - uri
            - username
            - useSsl
            - virtualHost
          type: object
          properties:
            name:
              type: string
              x-es-converter: RabbitConfiguration
              x-es-fieldName: name
            uri:
              type: string
              x-es-converter: RabbitConfiguration
              x-es-fieldName: uri
            port:
              description: integer
              type: integer
              x-es-converter: RabbitConfiguration
              x-es-fieldName: port
            username:
              type: string
              x-es-converter: RabbitConfiguration
              x-es-fieldName: username
            password:
              type: string
              x-es-converter: RabbitConfiguration
              x-es-fieldName: password
            queueName:
              type: string
              x-es-converter: RabbitConfiguration
              x-es-fieldName: queueName
            description:
              type: string
              x-es-converter: RabbitConfiguration
              x-es-fieldName: description
            durable:
              description: Use "false" as default value
              type: boolean
              x-es-converter: RabbitConfiguration
              x-es-fieldName: durable
            exclusive:
              description: Use "false" as default value
              type: boolean
              x-es-converter: RabbitConfiguration
              x-es-fieldName: exclusive
            autoDelete:
              description: Use "false" as default value
              type: boolean
              x-es-converter: RabbitConfiguration
              x-es-fieldName: autoDelete
            transformerId:
              type: string
              x-es-converter: RabbitConfiguration
              x-es-fieldName: transformerId
            virtualHost:
              type: string
              x-es-converter: RabbitConfiguration
              x-es-fieldName: virtualHost
            useSsl:
              type: boolean
              x-es-converter: RabbitConfiguration
              x-es-fieldName: useSsl
            exchange:
              type: string
              x-es-converter: RabbitConfiguration
              x-es-fieldName: exchange
            routingKey:
              type: string
              x-es-converter: RabbitConfiguration
              x-es-fieldName: routingKey
            lastKnownStateCode:
              format: int32
              description: Use "3001" as default value
              type: integer
              x-es-converter: RabbitConfiguration
              x-es-fieldName: lastKnownStateCode
            lastKnownState:
              type: string
              x-es-converter: RabbitConfiguration
              x-es-fieldName: lastKnownState
            accountId:
              type: string
              x-es-converter: RabbitConfiguration
              x-es-fieldName: accountId
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: RabbitConfiguration
              x-es-fieldName: created
            id:
              type: string
              x-es-converter: RabbitConfiguration
              x-es-fieldName: id
            version:
              format: int64
              type: integer
              x-es-converter: RabbitConfiguration
              x-es-fieldName: _version
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.RabbitConfigurationDoc
    RankingStrategy:
      required:
        - excludeIfGoalNotReached
        - ignoreScore
        - ignoreTime
        - scoreDesc
        - timeDesc
        - scoreFirst
      type: object
      properties:
        ignoreTime:
          description: Use "true" as default value
          type: boolean
          x-es-converter: Rankingtrategy
          x-es-fieldName: ignoreTime
        ignoreScore:
          description: Use "false" as default value
          type: boolean
          x-es-converter: Rankingtrategy
          x-es-fieldName: ignoreScore
        timeDesc:
          description: Use "false" as default value
          type: boolean
          x-es-converter: Rankingtrategy
          x-es-fieldName: timeDesc
        excludeIfGoalNotReached:
          description: Use "false" as default value
          type: boolean
          x-es-converter: Rankingtrategy
          x-es-fieldName: excludeIfGoalNotReached
        scoreFirst:
          description: Use "true" as default value
          type: boolean
          x-es-converter: Rankingtrategy
          x-es-fieldName: scoreFirst
        scoreDesc:
          description: Use "true" as default value
          type: boolean
          x-es-converter: Rankingtrategy
          x-es-fieldName: scoreDesc
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.RankingStrategyDoc
    RuleSet:
      description: >-
        A rule set is a collection of rules that causes a state change on an object if all rules pass
        evaluation.
      required:
        - priority
        - scope
        - action
        - conditions
      type: object
      properties:
        param:
          type: string
          x-es-converter: RuleSet
          x-es-fieldName: param
        onMatchConstant:
          type: string
          x-es-converter: RuleSet
          x-es-fieldName: onMatchConstant
        scope:
          type: string
          x-es-converter: RuleSet
          x-es-fieldName: scope
        onMatchThen:
          type: string
          x-es-converter: RuleSet
          x-es-fieldName: onMatchThen
        conditions:
          description: The collection of rules to test against.
          type: array
          items:
            $ref: '#/components/schemas/MainConditionSet'
          x-es-converter: RuleSet
          x-es-fieldName: conditions
        longHashKey:
          format: int64
          description: long
          type: integer
          x-es-converter: RuleSet
          x-es-fieldName: longHashKey
        priority:
          format: int32
          description: The order the rules have to be executed in.
          type: integer
          x-es-converter: RuleSet
          x-es-fieldName: priority
        action:
          description: The action to invoke against the object to change its state.
          type: string
          x-es-converter: RuleSet
          x-es-fieldName: action
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.RuleSetDoc
    ScheduledDates:
      type: object
      properties:
        start:
          format: date-time
          description: date-time
          type: string
          x-es-converter: ScheduledDates
          x-es-fieldName: start
        end:
          format: date-time
          description: date-time
          type: string
          x-es-converter: ScheduledDates
          x-es-fieldName: end
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.ScheduledDatesDoc
    Scheduling:
      required:
        - scheduleType
        - startDate
        - every
      type: object
      properties:
        scheduleOccurrencesLimit:
          format: int32
          description: Allows to limit how many times a repeated occurrences are allowed
          type: integer
          x-es-converter: Scheduling
          x-es-fieldName: scheduleOccurrencesLimit
        scheduleType:
          type: string
          x-es-converter: Scheduling
          x-es-fieldName: scheduleType
        endDate:
          format: date-time
          description: date-time
          type: string
          x-es-converter: Scheduling
          x-es-fieldName: endDate
        onlyAggregateOnActiveDays:
          type: boolean
          x-es-converter: Scheduling
          x-es-fieldName: onlyAggregateOnActiveDays
        every:
          description: '1-7 days, 1-52 weeks, 1-12 months'
          type: array
          items:
            format: int32
            type: integer
          x-es-converter: Scheduling
          x-es-fieldName: every
        startDate:
          format: date-time
          description: date-time
          type: string
          x-es-converter: Scheduling
          x-es-fieldName: startDate
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.SchedulingDoc
    ScoringStrategy:
      required:
        - limitUpdatesTo
        - recordTimeWhenSumReaches
        - sumBestXOf
      type: object
      properties:
        limitUpdatesTo:
          description: integer
          type: integer
          x-es-converter: ScoringStrategy
          x-es-fieldName: limitUpdatesTo
        sumBestXOf:
          format: int32
          description: integer
          type: integer
          x-es-converter: ScoringStrategy
          x-es-fieldName: sumBestXOf
        recordTimeWhenSumReaches:
          format: double
          description: double
          type: number
          x-es-converter: ScoringStrategy
          x-es-fieldName: recordTimeWhenSumReaches
        lastUpdateTimeStamp:
          format: int64
          description: long
          type: integer
          x-es-converter: ScoringStrategy
          x-es-fieldName: lastUpdateTimeStamp
        sumBestXOfMin:
          format: int32
          description: integer
          type: integer
          x-es-converter: ScoringStrategy
          x-es-fieldName: sumBestXOfMin
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.ScoringStrategyDoc
    SubConditionSet:
      required:
        - matchCondition
        - mustEvaluateTo
      type: object
      properties:
        subRules:
          type: array
          items:
            $ref: '#/components/schemas/SubRule'
          x-es-converter: SubConditionSet
          x-es-fieldName: subRules
        mustEvaluateTo:
          type: boolean
          x-es-converter: SubConditionSet
          x-es-fieldName: mustEvaluateTo
        matchCondition:
          type: string
          x-es-converter: SubConditionSet
          x-es-fieldName: matchCondition
        longHashKey:
          format: int64
          description: long
          type: integer
          x-es-converter: SubConditionSet
          x-es-fieldName: longHashKey
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.SubConditionSetDoc
    SubRule:
      required:
        - constant
        - fact
        - operator
      type: object
      properties:
        fact:
          type: string
          x-es-converter: SubRule
          x-es-fieldName: fact
        constant:
          type: string
          x-es-converter: SubRule
          x-es-fieldName: constant
        operator:
          type: string
          x-es-converter: SubRule
          x-es-fieldName: operator
        longHashKey:
          format: int64
          description: long
          type: integer
          x-es-converter: SubRule
          x-es-fieldName: longHashKey
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.SubRuleDoc
    Tag:
      required:
        - accountId
        - key
        - entityTypes
      type: object
      properties:
        accountId:
          type: string
          x-es-converter: Tag
          x-es-fieldName: accountId
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: Tag
          x-es-fieldName: created
        id:
          type: string
          x-es-converter: Tag
          x-es-fieldName: id
        version:
          format: int64
          type: integer
          x-es-converter: Tag
          x-es-fieldName: _version
        name:
          description: The name of the tag
          type: string
          example: This is a group
          x-es-converter: Tag
          x-es-fieldName: name
        key:
          description: A unique key that represents a tag
          type: string
          example: This_is_a_group
          x-es-converter: Tag
          x-es-fieldName: key
        description:
          description: The description of the tag for your reference
          type: string
          example: The group that has been called This is a group
          x-es-converter: Tag
          x-es-fieldName: description
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/Metadata'
          x-es-converter: Tag
          x-es-fieldName: metadata
        entityTypes:
          description: The model name the tag refers to
          type: array
          items:
            type: string
          x-es-converter: Tag
          x-es-fieldName: entityType
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.TagDoc
    ThemeTemplate:
      required:
        - files
        - accountId
        - id
        - name
      type: object
      properties:
        accountId:
          type: string
          x-es-converter: ThemeTemplate
          x-es-fieldName: accountId
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: ThemeTemplate
          x-es-fieldName: created
        name:
          type: string
          x-es-converter: ThemeTemplate
          x-es-fieldName: name
        files:
          type: array
          items:
            $ref: '#/components/schemas/ThemeTemplateEntry'
          x-es-converter: ThemeTemplate
          x-es-fieldName: files
        id:
          type: string
          x-es-converter: ThemeTemplate
          x-es-fieldName: id
        version:
          format: int64
          type: integer
          x-es-converter: ThemeTemplate
          x-es-fieldName: _version
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.ThemeTemplateDoc
    ThemeTemplateEntry:
      description: This the theme template entry
      type: object
      additionalProperties:
        type: string
    Tournament:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: Tournament
        -
          required:
            - accountId
            - allowMultipleEntriesPerRound
            - entityType
            - id
            - isContainer
            - name
            - number
            - options
          type: object
          properties:
            accountId:
              type: string
              x-es-converter: Tournament
              x-es-fieldName: accountId
            entityType:
              type: string
              x-es-converter: Tournament
              x-es-fieldName: entityType
            allowMultipleEntriesPerRound:
              type: boolean
              x-es-converter: Tournament
              x-es-fieldName: allowMultipleEntriesPerRound
            isContainer:
              type: boolean
              x-es-converter: Tournament
              x-es-fieldName: isContainer
            numberOfRounds:
              description: integer
              type: integer
              x-es-converter: Tournament
              x-es-fieldName: numberOfRounds
            round:
              description: integer
              type: integer
              x-es-converter: Tournament
              x-es-fieldName: round
            roundType:
              type: string
              x-es-converter: Tournament
              x-es-fieldName: roundType
            name:
              type: string
              x-es-converter: Tournament
              x-es-fieldName: name
            description:
              type: string
              x-es-converter: Tournament
              x-es-fieldName: description
            termsConditions:
              type: string
              x-es-converter: Tournament
              x-es-fieldName: termsConditions
            options:
              $ref: '#/components/schemas/Options'
              x-es-converter: Tournament
              x-es-fieldName: options
            parentTournamentId:
              type: string
              x-es-converter: Tournament
              x-es-fieldName: parentTournamentId
            number:
              description: integer
              type: integer
              x-es-converter: Tournament
              x-es-fieldName: number
            entrantsFromContest:
              type: array
              items:
                type: string
              x-es-converter: Tournament
              x-es-fieldName: entrantsFromContest
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: Tournament
              x-es-fieldName: created
            id:
              type: string
              x-es-converter: Tournament
              x-es-fieldName: id
            status:
              type: string
              x-es-converter: Tournament
              x-es-fieldName: status
            statusCode:
              description: integer
              type: integer
              x-es-converter: Tournament
              x-es-fieldName: statusCode
            version:
              format: int64
              type: integer
              x-es-converter: Tournament
              x-es-fieldName: _version
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.TournamentDoc
    Transformer:
      required:
        - accountId
        - id
        - source
        - name
        - sourceLanguage
      type: object
      properties:
        accountId:
          type: string
          x-es-converter: Transformer
          x-es-fieldName: accountId
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: Transformer
          x-es-fieldName: created
        name:
          type: string
          x-es-converter: Transformer
          x-es-fieldName: name
        id:
          type: string
          x-es-converter: Transformer
          x-es-fieldName: id
        source:
          type: string
          x-es-converter: Transformer
          x-es-fieldName: source
        version:
          format: int64
          description: long
          type: integer
          x-es-converter: Transformer
          x-es-fieldName: _version
        sourceLanguage:
          type: string
          x-es-converter: Transformer
          x-es-fieldName: sourceLanguage
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.TransformerDoc
    UnitOfMeasure:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: UnitOfMeasure
        -
          required:
            - accountId
            - id
            - multiplier
            - unitOfMeasureType
            - name
            - key
          type: object
          properties:
            name:
              type: string
              x-es-converter: UnitOfMeasure
              x-es-fieldName: name
            key:
              type: string
              x-es-converter: UnitOfMeasure
              x-es-fieldName: key
            description:
              type: string
              x-es-converter: UnitOfMeasure
              x-es-fieldName: description
            isoCode:
              type: string
              x-es-converter: UnitOfMeasure
              x-es-fieldName: isoCode
            symbol:
              type: string
              x-es-converter: UnitOfMeasure
              x-es-fieldName: symbol
            multiplier:
              format: double
              description: double
              type: number
              x-es-converter: UnitOfMeasure
              x-es-fieldName: multiplier
            unitOfMeasureType:
              type: string
              x-es-converter: UnitOfMeasure
              x-es-fieldName: unitOfMeasureType
            accountId:
              type: string
              x-es-converter: UnitOfMeasure
              x-es-fieldName: accountId
            translatableFields:
              type: array
              items:
                type: string
              x-es-converter: UnitOfMeasure
              x-es-fieldName: translatableFields
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: UnitOfMeasure
              x-es-fieldName: created
            translations:
              type: object
              additionalProperties:
                type: array
                items:
                  $ref: '#/components/schemas/TranslationEntry'
              x-es-converter: UnitOfMeasure
              x-es-fieldName: translations
            id:
              type: string
              x-es-converter: UnitOfMeasure
              x-es-fieldName: id
            version:
              format: int64
              description: long
              type: integer
              x-es-converter: UnitOfMeasure
              x-es-fieldName: _version
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.UnitOfMeasureDoc
    User:
      required:
        - email
      type: object
      properties:
        firstName:
          type: string
          x-es-converter: User
          x-es-fieldName: firstName
        lastName:
          type: string
          x-es-converter: User
          x-es-fieldName: lastName
        email:
          type: string
          x-es-converter: User
          x-es-fieldName: email
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: User
          x-es-fieldName: created
        spaces:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/UserSpace'
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.UserDoc
    Webhook:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: Webhook
        -
          required:
            - accountId
            - id
            - postToUrl
            - name
            - triggers
          type: object
          properties:
            accountId:
              type: string
              x-es-converter: Webhook
              x-es-fieldName: accountId
            headers:
              type: array
              items:
                $ref: '#/components/schemas/Metadata'
              x-es-converter: Webhook
              x-es-fieldName: headers
            postToUrl:
              type: string
              x-es-converter: Webhook
              x-es-fieldName: postToUrl
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: Webhook
              x-es-fieldName: created
            description:
              type: string
              x-es-converter: Webhook
              x-es-fieldName: description
            name:
              type: string
              x-es-converter: Webhook
              x-es-fieldName: name
            id:
              type: string
              x-es-converter: Webhook
              x-es-fieldName: id
            triggers:
              type: array
              items:
                type: string
              x-es-converter: Webhook
              x-es-fieldName: triggers
            version:
              format: int64
              description: long
              type: integer
              x-es-converter: Webhook
              x-es-fieldName: _version
            status:
              type: string
              x-es-converter: Webhook
              x-es-fieldName: status
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.WebhookDoc
    Widget:
      required:
        - accountId
        - deprecated
        - id
        - includeDependencies
        - name
        - themeName
        - widgetType
      type: object
      properties:
        image:
          type: string
          x-es-converter: Widget
          x-es-fieldName: image
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/Metadata'
          x-es-converter: Widget
          x-es-fieldName: metadata
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: Widget
          x-es-fieldName: created
        deprecated:
          type: boolean
          x-es-converter: Widget
          x-es-fieldName: deprecated
        includeDependencies:
          type: boolean
          x-es-converter: Widget
          x-es-fieldName: includeDependencies
        description:
          type: string
          x-es-converter: Widget
          x-es-fieldName: description
        widgetType:
          type: string
          x-es-converter: Widget
          x-es-fieldName: widgetType
        accountId:
          type: string
          x-es-converter: Widget
          x-es-fieldName: accountId
        themeName:
          type: string
          x-es-converter: Widget
          x-es-fieldName: themeName
        name:
          type: string
          x-es-converter: Widget
          x-es-fieldName: name
        id:
          type: string
          x-es-converter: Widget
          x-es-fieldName: id
        category:
          type: array
          items:
            type: string
          x-es-converter: Widget
          x-es-fieldName: category
        referenceIdList:
          type: array
          items:
            $ref: '#/components/schemas/WidgetReference'
          x-es-converter: Widget
          x-es-fieldName: referenceIdList
        version:
          format: int64
          description: long
          type: integer
          x-es-converter: Widget
          x-es-fieldName: _version
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.WidgetDoc
    WidgetReference:
      type: object
      properties:
        orderNumber:
          description: integer
          type: integer
          x-es-converter: WidgetReference
          x-es-fieldName: orderNumber
        value:
          type: string
          x-es-converter: WidgetReference
          x-es-fieldName: value
        key:
          type: string
          x-es-converter: WidgetReference
          x-es-fieldName: key
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.WidgetReferenceDoc
    CollaboratorAndAccountIdRequest:
      required:
        - email
        - accountId
        - addRoles
      type: object
      properties:
        lastName:
          type: string
          x-es-converter: Collaborators
          x-es-fieldName: lastName
        firstName:
          type: string
          x-es-converter: Collaborators
          x-es-fieldName: firstName
        email:
          type: string
          x-es-converter: Collaborators
          x-es-fieldName: email
        accountId:
          description: accountId
          type: string
        addRoles:
          description: ''
          type: array
          items:
            type: string
        removeRoles:
          description: ''
          type: array
          items:
            type: string
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.CollaboratorsDoc
    UserResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/User'
    UserSpace:
      required:
        - spacename
        - id
      type: object
      properties:
        spacename:
          description: ''
          type: string
        id:
          description: ''
          type: string
        accountType:
          description: ''
          type: string
        masterSpace:
          description: ''
          type: string
        created:
          format: date-time
          description: ''
          type: string
        baseCurrencyUOM:
          description: The base currency for the system to use
          type: string
    UserSpaceResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/UserSpace'
    CollaboratorRolesResponse:
      description: ''
      required:
        - meta
      type: object
      properties:
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        meta:
          $ref: '#/components/schemas/Meta'
          description: ''
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/CollabortorRolesAvailable'
    CollabortorRolesAvailable:
      description: ''
      required:
        - roles
      type: object
      properties:
        roles:
          description: ''
          type: array
          items:
            type: string
    TriggerResponse:
      description: ''
      required:
        - meta
      type: object
      properties:
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        meta:
          $ref: '#/components/schemas/Meta'
          description: ''
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Triggers'
    Triggers:
      required: []
      type: object
      properties:
        id:
          type: string
          x-es-converter: Collaborators
          x-es-fieldName: firstName
        name:
          type: string
          x-es-converter: Collaborators
          x-es-fieldName: lastName
        key:
          description: ''
          type: string
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.CollaboratorsDoc
    CreateAchievementJournalEntry:
      required:
        - accountId
        - achievementId
        - memberId
        - statusCode
        - timeStamp
      type: object
      properties:
        accountId:
          description: ''
          type: string
        achievementId:
          description: ''
          type: string
        memberId:
          description: ''
          type: string
        statusCode:
          format: int32
          description: ''
          type: integer
        timeStamp:
          format: int64
          description: ''
          type: integer
      x-ziqni-companionObject: ziqni.core.model.Achievement
    CreateAchievementJournalEntriesRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/CreateAchievementJournalEntry'
    AchievementJournalEntry:
      required:
        - accountId
        - achievementId
        - memberId
        - statusCode
        - timeStamp
      type: object
      properties:
        accountId:
          description: ''
          type: string
        achievementId:
          description: ''
          type: string
        memberId:
          description: ''
          type: string
        statusCode:
          format: int32
          description: ''
          type: integer
        timeStamp:
          format: int64
          description: ''
          type: integer
      x-ziqni-companionObject: ziqni.core.model.Achievement
    AchievementJournalEntriesResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/AchievementJournalEntry'
    CreateCompetitionJournalEntry:
      required:
        - accountId
        - statusCode
        - timeStamp
        - competitionId
      type: object
      properties:
        accountId:
          description: ''
          type: string
        statusCode:
          format: int32
          description: ''
          type: integer
        timeStamp:
          format: int64
          description: ''
          type: integer
        competitionId:
          description: ''
          type: string
      x-ziqni-companionObject: ziqni.core.model.Achievement
    CreateCompetitionJournalEntriesRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/CreateCompetitionJournalEntry'
    CompetitionJournalEntry:
      required:
        - accountId
        - statusCode
        - timeStamp
        - competitionId
      type: object
      properties:
        accountId:
          description: ''
          type: string
        statusCode:
          format: int32
          description: ''
          type: integer
        timeStamp:
          format: int64
          description: ''
          type: integer
        competitionId:
          description: ''
          type: string
      x-ziqni-companionObject: ziqni.core.model.Achievement
    CompetitionJournalEntriesResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/CompetitionJournalEntry'
    CreateContestJournalEntry:
      required:
        - accountId
        - statusCode
        - timeStamp
        - competitionId
        - contestId
      type: object
      properties:
        accountId:
          description: ''
          type: string
        statusCode:
          format: int32
          description: ''
          type: integer
        timeStamp:
          format: int64
          description: ''
          type: integer
        competitionId:
          description: ''
          type: string
        contestId:
          description: ''
          type: string
      x-ziqni-companionObject: ziqni.core.model.Achievement
    CreateContestJournalEntriesRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/CreateContestJournalEntry'
    ContestJournalEntry:
      required:
        - accountId
        - statusCode
        - timeStamp
        - competitionId
        - contestId
      type: object
      properties:
        accountId:
          description: ''
          type: string
        statusCode:
          format: int32
          description: ''
          type: integer
        timeStamp:
          format: int64
          description: ''
          type: integer
        competitionId:
          description: ''
          type: string
        contestId:
          description: ''
          type: string
      x-ziqni-companionObject: ziqni.core.model.Achievement
    ContestJournalEntriesResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ContestJournalEntry'
    SubscribedTopics:
      description: ''
      required:
        - topics
      type: object
      properties:
        topics:
          description: ''
          type: array
          items:
            type: string
    SubscribedTopicsResponse:
      description: ''
      required:
        - meta
      type: object
      properties:
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        meta:
          $ref: '#/components/schemas/Meta'
          description: ''
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/SubscribedTopics'
    NodeInformation:
      description: ''
      required:
        - id
        - ipV4Address
        - instanceType
        - httpPort
      type: object
      properties:
        id:
          description: ''
          type: string
        ipV4Address:
          description: ''
          type: string
        instanceType:
          format: int32
          description: ''
          type: integer
        httpPort:
          format: int32
          description: ''
          type: integer
    FindNodeInformationRequest:
      description: ''
      type: object
      properties:
        instanceType:
          description: ''
          type: integer
        hashingKey:
          description: ''
          type: string
        numberOfNodes:
          description: ''
          type: integer
      example:
        instanceType: 8
        hashingKey: some text
        numberOfNodes: 51
    UpdateMessagesRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Message'
    MessagesResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Message'
    Message:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
        -
          required:
            - accountId
            - body
            - id
            - messageType
            - status
            - subject
            - links
          type: object
          properties:
            accountId:
              type: string
              x-es-fieldName: accountId
            messageType:
              type: string
              x-es-fieldName: messageType
            eventRefId:
              type: string
              x-es-converter: AccountMessage
              x-es-fieldName: eventRefId
            eventRefType:
              type: string
              x-es-fieldName: eventRefType
            subject:
              type: string
              x-es-fieldName: subject
            body:
              type: string
              x-es-fieldName: body
            status:
              description: Status of the message
              type: string
              x-es-fieldName: status
            created:
              format: date-time
              description: date-time
              type: string
              x-es-fieldName: created
            id:
              type: string
              x-es-fieldName: id
            version:
              format: int64
              type: integer
              x-es-fieldName: _version
            memberIds:
              description: ''
              type: array
              items:
                type: string
            userIds:
              description: ''
              type: array
              items:
                type: string
            constraints:
              description: ''
              type: array
              items:
                type: string
            expireAfterDate:
              format: date-time
              description: >-
                Specify the expiry as a date after creation of the record. If expireAfterDays
                is specified then expireAfterDate should not be specified.
              type: string
            expireAfterDays:
              format: int32
              description: >-
                Specify the expiry in number of days after creation of the record. If
                expireAfterDate is specified then expireAfterDays should not be specified.
              type: integer
            memberTags:
              description: ''
              type: array
              items:
                type: string
            links:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/MessageLink'
    DeleteMessagesRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    CreateMessagesRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Message'
    CustomFieldEntry:
      required:
        - key
        - fieldType
        - value
      type: object
      properties:
        fieldType:
          description: 'The data type stored in this generic object ( string, number, string[], number[])'
          type: string
          x-es-converter: CustomFieldEntry
          x-es-fieldName: fieldType
          x-zq-rules: true
        key:
          type: string
          x-es-converter: CustomFieldEntry
          x-es-fieldName: key
          x-zq-rules: true
        number:
          description: double
          type: array
          items:
            format: double
            type: number
          x-es-converter: CustomFieldEntry
          x-es-fieldName: number
          x-zq-rules: true
        text:
          type: array
          items:
            type: string
          x-es-converter: CustomFieldEntry
          x-es-fieldName: text
          x-zq-rules: true
        constraints:
          description: 'For example, public'
          type: array
          items:
            type: string
    StartEndDate:
      type: object
      properties:
        end:
          format: date-time
          description: date-time
          type: string
          x-es-converter: StartEndDate
          x-es-fieldName: end
          x-zq-rules: true
        start:
          format: date-time
          description: date-time
          type: string
          x-es-converter: StartEndDate
          x-es-fieldName: start
          x-zq-rules: true
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.StartEndDateDoc
    OptParamModels:
      type: object
      properties:
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldEntry'
          x-es-fieldName: customFields
          x-zq-lens: CustomFieldEntriesAsMapLens
          x-zq-rules: true
        tags:
          description: A list of id's used to tag models
          type: array
          items:
            type: string
          x-es-fieldName: tags
          x-zq-rules: true
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/Metadata'
          x-es-fieldName: metadata
          x-zq-lens: MetadataAsMapLens
          x-zq-rules: true
    ConditionalExpression:
      description: ''
      required:
        - order
        - parentId
        - type
        - mustMatchAll
        - mustEvaluateTo
        - scope
        - operand
        - operator
        - value
        - routine
        - arguments
      type: object
      properties:
        order:
          description: ''
          type: integer
        parentId:
          description: ''
          type: integer
        type:
          description: ''
          type: string
        mustMatchAll:
          description: ''
          type: boolean
        mustEvaluateTo:
          description: ''
          type: boolean
        scope:
          description: ''
          type: string
        operand:
          description: ''
          type: string
        operator:
          description: ''
          type: string
        value:
          description: ''
          type: string
        routine:
          description: ''
          type: string
        arguments:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ConditionalExpressionArgument'
    ConditionalExpressionArgument:
      description: ''
      required:
        - argument
        - value
        - type
      type: object
      properties:
        argument:
          description: ''
          type: string
        value:
          description: ''
          type: string
        type:
          description: ''
          type: string
    RulesResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Rule'
    CreateRuleRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Rule'
    UpdateRuleRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Rule'
    DeleteRuleRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    Rule:
      description: ''
      required:
        - accountId
        - entityId
        - id
        - action
        - rules
        - context
        - version
        - entityType
      type: object
      properties:
        accountId:
          description: ''
          type: string
        entityId:
          description: ''
          type: string
        id:
          description: ''
          type: string
        action:
          description: ''
          type: string
        rules:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ConditionalExpression'
        context:
          description: ''
          type: string
        version:
          format: int64
          description: ''
          type: integer
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: Rule
          x-es-fieldName: created
        entityType:
          description: ''
          type: string
    ClusterClientMessageRequest:
      description: >-
        A container for messages received from clients connecting, disconnecting and other general
        edge activities
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - userId
            - accountId
            - respondTo
            - message
            - messageType
          type: object
          properties:
            from:
              description: ''
              type: string
            message:
              description: ''
              type: object
              additionalProperties: true
            messageType:
              description: ''
              type: string
    CreateTranslationRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Translation'
    DeleteTranslationRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    TranslationsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Translation'
    UpdateTranslationRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Translation'
    TranslationEntry:
      description: This the translationEntry model
      required:
        - fieldName
        - text
      type: object
      properties:
        fieldName:
          description: Field name to associate the translationEntry to.
          type: string
          x-es-converter: TranslationEntry
          x-es-fieldName: fieldName
        text:
          description: Corresponding translated text
          type: string
          x-es-converter: TranslationEntry
          x-es-fieldName: text
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.TranslationEntryDoc
    Translation:
      description: Translations to attach to the models.
      required:
        - translations
        - id
        - accountId
        - entityId
        - entityType
        - version
        - created
        - languageKey
      type: object
      properties:
        id:
          description: ''
          type: string
        accountId:
          description: ''
          type: string
        entityId:
          description: ''
          type: string
        entityType:
          description: ''
          type: string
        version:
          format: int64
          description: ''
          type: integer
        created:
          format: date-time
          description: date-time
          type: string
        translations:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/TranslationEntry'
        languageKey:
          description: ''
          type: string
    CreateTagRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Tag'
    DeleteTagRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateTagRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Tag'
    ComputeEnginesResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ComputeEngine'
    CreateComputeEngineRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/ComputeEngine'
    DeleteComputeEngineRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    UpdateComputeEngineRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/ComputeEngine'
    ComputeEngine:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: ComputeEngine
        -
          required:
            - accountId
            - name
            - constraints
            - created
            - uptime
            - id
          type: object
          properties:
            accountId:
              type: string
              x-es-converter: ComputeEngine
              x-es-fieldName: accountId
            description:
              type: string
              x-es-converter: ComputeEngine
              x-es-fieldName: description
            id:
              type: string
              x-es-converter: ComputeEngine
              x-es-fieldName: id
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: ComputeEngine
              x-es-fieldName: created
            version:
              format: int64
              type: integer
              x-es-converter: ComputeEngine
              x-es-fieldName: _version
            name:
              type: string
              x-es-converter: ComputeEngine
              x-es-fieldName: name
            uptime:
              format: int64
              description: Long
              type: integer
              x-es-converter: ComputeEngine
              x-es-fieldName: uptime
            constraints:
              type: array
              items:
                type: string
              x-es-converter: ComputeEngine
              x-es-fieldName: constraints
            statistics:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/Metadata'
              x-es-converter: ComputeEngine
              x-es-fieldName: statistics
            lastKnownStatusCode:
              format: int32
              description: ''
              type: integer
              x-es-converter: ComputeEngine
              x-es-fieldName: lastKnownStatusCode
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.ComputeEngineDoc
    Relation:
      description: ''
      type: object
      properties:
        id:
          description: A unique system identifier to which this record is related to
          type: string
          example: sc1samQmVr61KgaPQq7x
        relationType:
          description: Entity type of the id
          type: string
          example: contest
    Options:
      required:
        - optinRequiredForEntrants
        - products
        - ruleSets
        - strategies
      type: object
      properties:
        numberOfEntrants:
          $ref: '#/components/schemas/MaxMin'
          x-es-converter: Options
          x-es-fieldName: numberOfEntrants
          x-zq-rules: true
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
          x-es-converter: Options
          x-es-fieldName: products
          x-zq-rules: true
        ruleSets:
          type: array
          items:
            $ref: '#/components/schemas/RuleSet'
          x-es-converter: Options
          x-es-fieldName: ruleSets
        isPublic:
          description: Use "true" as the default value
          type: boolean
          x-es-converter: Options
          x-es-fieldName: isPublic
          x-zq-rules: true
        autoStart:
          description: Use "false" as the default value
          type: boolean
          x-es-converter: Options
          x-es-fieldName: autoStart
        autoStartRetryInterval:
          format: int64
          description: Use "1000" as the default value
          type: integer
          x-es-converter: Options
          x-es-fieldName: autoStartRetryInterval
        autoStop:
          description: Use "false" as the default value
          type: boolean
          x-es-converter: Options
          x-es-fieldName: autoStop
        autoStopRetryInterval:
          format: int64
          description: Use "1000" as the default value
          type: integer
          x-es-converter: Options
          x-es-fieldName: autoStopRetryInterval
        scheduledDates:
          $ref: '#/components/schemas/StartEndDate'
          x-es-converter: Options
          x-es-fieldName: scheduledDates
          x-zq-rules: true
        actualDates:
          $ref: '#/components/schemas/StartEndDate'
          x-es-converter: Options
          x-es-fieldName: actualDates
          x-zq-rules: true
        optinRequiredForEntrants:
          description: |-
            Use "false" as the default value
            - False - anybody can participate in this competitions
            - True - means Accounts will upload their entrants csv
          type: boolean
          x-es-converter: Options
          x-es-fieldName: optinRequiredForEntrants
          x-zq-rules: true
        useGlobalEvents:
          description: |-
            Use "false" as the default value
            True - Events will be calculated using the global data executorService
            False - Events will be filtered using the competitions and contests id
          type: boolean
          x-es-converter: Options
          x-es-fieldName: useGlobalEvents
        notification:
          $ref: '#/components/schemas/Notification'
          x-es-converter: Options
          x-es-fieldName: notification
        strategies:
          $ref: '#/components/schemas/TournamentStrategies'
          x-es-converter: Options
          x-es-fieldName: strategies
          x-zq-rules: true
        entrantMemberTagsFilter:
          $ref: '#/components/schemas/ComplexFilters'
          x-es-converter: Options
          x-es-fieldName: includeEntrantsWhere
        productTagsFilter:
          $ref: '#/components/schemas/ComplexFilters'
          x-es-converter: Options
          x-es-fieldName: includeProductsWhere
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.OptionsDoc
    Leaderboard:
      required:
        - memberId
        - memberRefId
        - name
        - points
        - rank
        - constraints
        - timestamp
      properties:
        leaderboardEntries:
          type: array
          items:
            $ref: '#/components/schemas/LeaderboardEntry'
        constraints:
          description: Additional constraints
          type: array
          items:
            type: string
          example: '- goalReached'
        sequence:
          description: how many changes were made to the leaderboard
          type: integer
          example: '1'
        id:
          description: A unique system generated identifier
          type: string
          example: sc1samQmVr61KgaPQq7x
        created:
          format: date-time
          description: >-
            ISO8601 timestamp for when a Model was created. All records are stored in UTC time
            zone
          type: string
          example: '2019-09-25T15:47:00.000+0000'
        accountId:
          description: This is the space name which is linked to the account
          type: string
          example: Your_account_id
        entrantsCount:
          description: ''
          type: integer
    LeaderboardsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Leaderboard'
    DashboardResponse:
      description: The dashboard response.
      required:
        - meta
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
          description: Metadata associated with the response.
        results:
          description: Valid result as a part of the response.
          type: array
          items:
            $ref: '#/components/schemas/Dashboard'
        errors:
          description: Any errors getting the response.
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
      example:
        meta: {}
        results:
          dataSets:
            events.action.points.count:
              label: events.action.points.count (events.action.points.count)
              labels: events.action
              data:
                - 7411162
                - 1712995
            events.1w.action.points.sum.win:
              label: win (events.1w.action.points.sum)
              labels: events.1w
              data:
                - 69969904
                - 131196466
                - 134481263
            events.action.points.sum:
              label: events.action.points.sum (events.action.points.sum)
              labels: events.action
              data:
                - 2161344920.35
                - 1073032576
            events.1w.action.sourceValue.sum.win:
              label: win (events.1w.action.sourceValue.sum)
              labels: events.1w
              data:
                - 69969904
                - 131196466
                - 134481263
            events.action.sourceValue.sum:
              label: events.action.sourceValue.sum (events.action.sourceValue.sum)
              labels: events.action
              data:
                - 2161344920.35
                - 1073032576
            events.1w.action.sourceValue.sum.bet:
              label: bet (events.1w.action.sourceValue.sum)
              labels: events.1w
              data:
                - 67705635
                - 136551165
                - 144638430
            events.action.sourceValue.count:
              label: events.action.sourceValue.count (events.action.sourceValue.count)
              labels: events.action
              data:
                - 7411162
                - 1712995
            events.1w.action.points.sum.bet:
              label: bet (events.1w.action.points.sum)
              labels: events.1w
              data:
                - 67705635
                - 136551165
                - 144638430
          labels:
            events.1w:
              - '2020-04-27 00:00'
              - '2020-05-04 00:00'
              - '2020-05-11 00:00'
              - '2020-05-18 00:00'
            events.action:
              - bet
              - win
          modules:
            -
              key: my-line-1
              label: Sample Chart 1
              moduleType: bar
              order: '1'
              dataSets:
                -
                  style: line
                  key: events.1w.action.points.sum.bet
                -
                  style: line
                  key: events.1w.action.points.sum.win
                -
                  style: line
                  key: events.1w.action.sourceValue.sum.bet
                -
                  style: line
                  key: events.1w.action.sourceValue.sum.win
            -
              key: my-line-2
              label: Sample Chart 2
              moduleType: pie
              order: '2'
              dataSets:
                -
                  key: events.action.points.count
                -
                  key: events.action.sourceValue.count
                -
                  key: events.action.points.sum
                -
                  key: events.action.sourceValue.sum
        errors:
          -
            modelId: some text
            errorCode: 23
            message: some text
            detail:
              -
                modelId: some text
                errorCode: 52
                message: some text
              -
                modelId: some text
                errorCode: 19
                message: some text
          -
            modelId: some text
            errorCode: 58
            message: some text
            detail:
              -
                modelId: some text
                errorCode: 53
                message: some text
              -
                modelId: some text
                errorCode: 22
                message: some text
    Modules:
      description: Various modules returned for rendering dashboard.
      required:
        - key
        - label
        - moduleType
        - order
        - dataSets
      type: object
      properties:
        key:
          description: Key of the chart.
          type: string
        label:
          description: Label for the chart.
          type: string
        moduleType:
          description: Type of chart to insert te data into.
          type: string
        order:
          description: Order at which the chart appears on the web page.
          type: string
        dataSets:
          description: >-
            Array of DataSets map reference keys. If style information is required for a specific
            chart type then it will be returned.
          type: array
          items:
            $ref: '#/components/schemas/DataSetsReference'
      example:
        key: my-line-1
        label: Sample Chart 1
        moduleType: bar
        order: '1'
        dataSets:
          -
            style: line
            key: events.1w.action.points.sum.bet
          -
            style: line
            key: events.1w.action.points.sum.win
          -
            style: line
            key: events.1w.action.sourceValue.sum.bet
          -
            style: line
            key: events.1w.action.sourceValue.sum.win
    Labels:
      description: Labels for the charts as a map.
      type: object
      additionalProperties:
        description: Labels for charts.
        type: array
        items:
          type: string
        example:
          - '2020-04-27 00:00'
          - '2020-05-04 00:00'
      example:
        events.1w:
          - '2020-04-27 00:00'
          - '2020-05-04 00:00'
          - '2020-05-11 00:00'
          - '2020-05-18 00:00'
        events.action:
          - bet
          - win
    Dashboard:
      description: The dashboard to be rendered.
      required:
        - dataSets
        - labels
        - modules
      type: object
      properties:
        dataSets:
          $ref: '#/components/schemas/DataSets'
          description: The datasets to render on dashboard.
        labels:
          $ref: '#/components/schemas/Labels'
          description: Label to use for the chart.
        modules:
          description: Modules to inject into the chart for rendering.
          type: array
          items:
            $ref: '#/components/schemas/Modules'
      example:
        dataSets:
          events.action.points.count:
            label: events.action.points.count (events.action.points.count)
            labels: events.action
            data:
              - 7411162
              - 1712995
          events.1w.action.points.sum.win:
            label: win (events.1w.action.points.sum)
            labels: events.1w
            data:
              - 69969904
              - 131196466
              - 134481263
          events.action.points.sum:
            label: events.action.points.sum (events.action.points.sum)
            labels: events.action
            data:
              - 2161344920.35
              - 1073032576
          events.1w.action.sourceValue.sum.win:
            label: win (events.1w.action.sourceValue.sum)
            labels: events.1w
            data:
              - 69969904
              - 131196466
              - 134481263
          events.action.sourceValue.sum:
            label: events.action.sourceValue.sum (events.action.sourceValue.sum)
            labels: events.action
            data:
              - 2161344920.35
              - 1073032576
          events.1w.action.sourceValue.sum.bet:
            label: bet (events.1w.action.sourceValue.sum)
            labels: events.1w
            data:
              - 67705635
              - 136551165
              - 144638430
          events.action.sourceValue.count:
            label: events.action.sourceValue.count (events.action.sourceValue.count)
            labels: events.action
            data:
              - 7411162
              - 1712995
          events.1w.action.points.sum.bet:
            label: bet (events.1w.action.points.sum)
            labels: events.1w
            data:
              - 67705635
              - 136551165
              - 144638430
        labels:
          events.1w:
            - '2020-04-27 00:00'
            - '2020-05-04 00:00'
            - '2020-05-11 00:00'
            - '2020-05-18 00:00'
          events.action:
            - bet
            - win
        modules:
          -
            key: my-line-1
            label: Sample Chart 1
            moduleType: bar
            order: '1'
            dataSets:
              -
                style: line
                key: events.1w.action.points.sum.bet
              -
                style: line
                key: events.1w.action.points.sum.win
              -
                style: line
                key: events.1w.action.sourceValue.sum.bet
              -
                style: line
                key: events.1w.action.sourceValue.sum.win
          -
            key: my-line-2
            label: Sample Chart 2
            moduleType: pie
            order: '2'
            dataSets:
              -
                key: events.action.points.count
              -
                key: events.action.sourceValue.count
              -
                key: events.action.points.sum
              -
                key: events.action.sourceValue.sum
    DataSets:
      description: >-
        This is a map of data sets. The keys for this map are the data set labels and values are
        complex object which consist of data to be populated.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/DataSetsValue'
        type: object
      example:
        events.action.points.count:
          label: events.action.points.count (events.action.points.count)
          labels: events.action
          data:
            - 7411162
            - 1712995
        events.1w.action.points.sum.win:
          label: win (events.1w.action.points.sum)
          labels: events.1w
          data:
            - 69969904
            - 131196466
            - 134481263
        events.action.points.sum:
          label: events.action.points.sum (events.action.points.sum)
          labels: events.action
          data:
            - 2161344920.35
            - 1073032576
        events.1w.action.sourceValue.sum.win:
          label: win (events.1w.action.sourceValue.sum)
          labels: events.1w
          data:
            - 69969904
            - 131196466
            - 134481263
        events.action.sourceValue.sum:
          label: events.action.sourceValue.sum (events.action.sourceValue.sum)
          labels: events.action
          data:
            - 2161344920.35
            - 1073032576
        events.1w.action.sourceValue.sum.bet:
          label: bet (events.1w.action.sourceValue.sum)
          labels: events.1w
          data:
            - 67705635
            - 136551165
            - 144638430
        events.action.sourceValue.count:
          label: events.action.sourceValue.count (events.action.sourceValue.count)
          labels: events.action
          data:
            - 7411162
            - 1712995
        events.1w.action.points.sum.bet:
          label: bet (events.1w.action.points.sum)
          labels: events.1w
          data:
            - 67705635
            - 136551165
            - 144638430
    DataSetsReference:
      description: The reference to the DataSets.
      required:
        - key
      type: object
      properties:
        style:
          description: The type of graph to inject the DataSets into.
          type: string
          example: line
        key:
          description: Data set values to retrive from DataSets map of the response.
          type: string
          example: events.1w.action.points.sum.bet
      example:
        style: line
        key: events.1w.action.points.sum.bet
    CreateCustomDashboardRequest:
      description: Create a custom dashboard in Ziqni
      required:
        - name
      type: object
      properties:
        name:
          description: ''
          type: string
    UpdateCustomDashboardRequest:
      allOf:
        -
          type: object
          properties:
            id:
              description: A unique system generated identifier
              type: string
              example: sc1samQmVr61KgaPQq7x
            name:
              description: The name of the dashboard
              type: string
              example: Big Win
    LeaderboardQuery:
      description: ''
      type: object
      properties:
        memberId:
          description: 'Filter results based on these member IDs, if empty then all members will be considered'
          type: string
        participationIds:
          description: >-
            Filter results based on these participation IDs, if empty then all participation IDs
            will be considered
          type: array
          items:
            type: string
        accountIds:
          description: >-
            Filter results based on these account IDs, if empty then all accounts will be
            considered
          type: array
          items:
            type: string
        ranksBefore:
          description: >-
            If member IDs are specified then include the specified number of ranks before the
            member position
          type: integer
        ranksAfter:
          description: >-
            If member IDs are specified then include the specified number of ranks after the
            member position
          type: integer
        includeRanksFrom:
          description: Should we include the the ranks from N to N1 in the published result
          type: integer
        includeRanksTo:
          description: Should we include the the ranks from N to N1 in the published result
          type: integer
    LeaderboardEntry:
      required:
        - name
        - rank
        - points
        - memberId
        - memberRefId
        - members
      type: object
      properties:
        rank:
          description: The rank of the player
          type: integer
          example: '1'
        score:
          format: double
          description: >-
            The multiplier to apply to source values received for this product action helper
            events
          type: number
          example: '100'
        bestScores:
          description: >-
            The multiplier to apply to source values received for this product action helper
            events
          type: array
          items:
            format: double
            type: number
          example: '100'
        members:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/LeaderboardMember'
        goalReached:
          description: ''
          type: boolean
    LeaderboardSubscription:
      description: ''
      required:
        - autoExpiresAfter
      type: object
      properties:
        memberId:
          description: 'Filter results based on these member IDs, if empty then all members will be considered'
          type: string
        participationIds:
          description: >-
            Filter results based on these participation IDs, if empty then all participation IDs
            will be considered
          type: array
          items:
            type: string
        accountId:
          description: >-
            Filter results based on these account IDs, if empty then all accounts will be
            considered
          type: array
          items:
            type: string
        ranksBefore:
          description: >-
            If member IDs are specified then include the specified number of ranks before the
            member position
          type: integer
        ranksAfter:
          description: >-
            If member IDs are specified then include the specified number of ranks after the
            member position
          type: integer
        includeRanksFrom:
          description: Should we include the the ranks from N to N1 in the published result
          type: integer
        includeRanksTo:
          description: Should we include the the ranks from N to N1 in the published result
          type: integer
        subscriptionId:
          description: The ID associated with this subscription
          type: string
        publishToAddress:
          description: 'The addresses to publish the updates to '
          type: array
          items:
            type: string
        autoExpiresAfter:
          format: int32
          description: The total number of minutes before this subscription auto expires
          type: integer
    UpdateContestState:
      required: []
      type: object
      properties:
        contestId:
          description: A unique identifier of a Contest
          type: string
          example: Dc4swmQBVd51K6gPQqFx
        status:
          $ref: '#/components/schemas/ContestStateOperations'
    UpdateContestStateRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/UpdateContestState'
    AchievementLiveStatus:
      description: A status of the Achievement
      enum:
        - Live
        - Draft
      type: string
    AchievementLiveStatusRequest:
      allOf:
        -
          required:
            - status
          type: object
          properties:
            id:
              description: A unique system generated identifier
              type: string
              example: sc1samQmVr61KgaPQq7x
            status:
              $ref: '#/components/schemas/AchievementLiveStatus'
    UpdateAchievementLiveStatusRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/AchievementLiveStatusRequest'
    ActiveEntitiesResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ActiveItem'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
    ActiveEntity:
      description: ''
      required:
        - entityId
        - entityType
      type: object
      properties:
        productTagFilters:
          $ref: '#/components/schemas/ComplexFilters'
          description: ' Products must meet this criteria to be elligible'
        memberTagFilters:
          $ref: '#/components/schemas/ComplexFilters'
          description: Members must meet this criteria to be elligible
        statusCode:
          format: int32
          description: >-
            Unknown = 0; Draft = 5; Preparing = 10; Ready = 15; Starting = 20; Active = 25;
            Finishing = 30; Finished = 35; Template = 100; Cancelling = 110; Cancelled = 115;
            Deleting = 120; Deleted = 125;
          type: integer
        startScheduled:
          format: date-time
          description: The planned/scheduled date and time this activity started
          type: string
        startActual:
          format: date-time
          description: The actual date and time this activity started
          type: string
        endScheduled:
          format: date-time
          description: The scheduled/planned end date
          type: string
        endActual:
          format: date-time
          description: The actual end date
          type: string
        tags:
          description: The tags associated with this entity
          type: array
          items:
            type: string
        publiclyAccessible:
          description: Is this entity publicly visible
          type: boolean
        entityId:
          description: The unique identifier of the entity
          type: string
        optInStrategy:
          format: int32
          description: >-
            If a member meets the qualifycing criteria set out in the memberTagFilters, then the
            following opt in states are used, Auto - members are automatically opted in, OptIn -
            member has to explicitly opt in, OptOut - members are automatically opted in and have
            to explicitly opt out, In - The meber is opted regardless of preference
            
            1 = Automatically opted in 
            
            2 = Manual opt in required 
            
            3 = Manual opt out required
          type: integer
        parentEntityId:
          description: ''
          type: string
        entityType:
          description: The entity type lick competition contest or achievemnent
          type: string
        EntityDependencies:
          $ref: '#/components/schemas/ComplexFilters'
          description: Dependency relationship between entities
    DateRange:
      description: ''
      type: object
      properties:
        before:
          format: date-time
          description: ''
          type: string
        after:
          format: date-time
          description: ''
          type: string
    NumberRange:
      description: ''
      type: object
      properties:
        moreThan:
          format: int64
          description: ''
          type: integer
        lessThan:
          format: int64
          description: ''
          type: integer
    ActiveMember:
      description: ''
      type: object
      properties:
        entityId:
          description: 'The entity id [optional]'
          type: string
        scoreId:
          description: The score id if one exists
          type: string
        statusCode:
          format: int32
          description: >-
            Determines the opt in status or requirement for this entity. Unknown = 0; NotEntered =
            5; Entrant = 15; Running = 25; Completed = 35; Excluded = 115;
          type: integer
    ActiveEntityQueryRequest:
      description: ''
      required:
        - accountId
        - entityType
      type: object
      properties:
        accountId:
          description: ''
          type: string
        entityIds:
          description: ''
          type: array
          items:
            type: string
        startScheduled:
          $ref: '#/components/schemas/DateRange'
          description: ''
        startActual:
          $ref: '#/components/schemas/DateRange'
          description: ''
        endScheduled:
          $ref: '#/components/schemas/DateRange'
          description: ''
        endActual:
          $ref: '#/components/schemas/DateRange'
          description: ''
        tags:
          $ref: '#/components/schemas/ComplexFilters'
          description: ''
        onlyIncludePubliclyVisible:
          description: ''
          type: boolean
        sortBy:
          $ref: '#/components/schemas/QuerySortBy'
          description: ''
        skip:
          format: int32
          description: ''
          type: integer
        limit:
          format: int32
          description: ''
          type: integer
        includeFields:
          description: Which fields to include in the response
          type: array
          items:
            type: string
        entityType:
          description: ''
          type: string
        memberId:
          description: ''
          type: string
        entityStatusCode:
          $ref: '#/components/schemas/NumberRange'
          description: ''
        memberStatusCode:
          $ref: '#/components/schemas/NumberRange'
          description: ''
        competitionIds:
          description: ''
          type: array
          items:
            type: string
    ActiveItem:
      description: ''
      required: []
      type: object
      properties:
        member:
          $ref: '#/components/schemas/ActiveMember'
          description: ''
        entity:
          $ref: '#/components/schemas/ActiveEntity'
          description: ''
    Collaborator:
      required:
        - email
        - roles
        - availableRoles
      type: object
      properties:
        lastName:
          type: string
          x-es-converter: Collaborators
          x-es-fieldName: lastName
        firstName:
          type: string
          x-es-converter: Collaborators
          x-es-fieldName: firstName
        email:
          type: string
          x-es-converter: Collaborators
          x-es-fieldName: email
        roles:
          description: ''
          type: array
          items:
            type: string
        availableRoles:
          $ref: '#/components/schemas/CollabortorRolesAvailable'
          description: ''
        id:
          type: string
          x-es-converter: Collaborators
          x-es-fieldName: id
        removeRoles:
          description: ''
          type: array
          items:
            type: string
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.CollaboratorsDoc
    DataSetsValue:
      description: ''
      required:
        - label
        - labels
        - data
      type: object
      properties:
        label:
          description: Label of the data set
          type: string
        labels:
          description: Labels to reference data sets
          type: string
        data:
          description: The actual data points for the data set
          type: array
          items:
            type: string
      example:
        label: events_action_sourceValue_count (events_action_sourceValue_count)
        labels: events_action
        data:
          - 1578
          - 1578
    MessageLink:
      description: ''
      required:
        - entityId
        - entityType
        - linkType
      type: object
      properties:
        entityId:
          description: The identifier of the entity
          type: string
        entityType:
          description: 'The type of entity the link refers to like Award or Achievement, Contest, etc'
          type: string
        linkType:
          description: 'The type of link, relatesTo, refersTo, describes'
          type: string
    ScoreVariable:
      description: User defined variables that relate to this score object
      required:
        - key
        - value
      type: object
      properties:
        key:
          type: string
          x-es-type: Keyword
          x-es-index: true
          x-es-store: true
        value:
          format: double
          description: ''
          type: number
          x-es-type: Double
          x-es-index: true
          x-es-store: true
      x-es-isIndex: false
    OptinAction:
      description: ''
      enum:
        - join
        - leave
        - exclude
      type: string
    OptInRequestStatus:
      description: ''
      required:
        - entityType
        - statusCode
        - status
        - points
      type: object
      properties:
        entityType:
          description: ''
          type: string
        entityId:
          description: ''
          type: string
        statusCode:
          description: >-
            Processing = 0, NotEntered = 5, Entering = 10, Entrant = 15, Preparing = 20, Running =
            25, Completing = 30, Completed = 35
          type: integer
        status:
          description: >-
            Processing = 0, NotEntered = 5, Entering = 10, Entrant = 15, Preparing = 20, Running =
            25, Completing = 30, Completed = 35
          type: string
        points:
          format: double
          description: ''
          type: number
    OptInResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          $ref: '#/components/schemas/OptInRequestStatus'
          description: ''
    ManageOptinRequest:
      description: ''
      required:
        - action
        - accountId
        - memberId
      type: object
      properties:
        entityId:
          description: The system identifier for the entity
          type: string
        entityType:
          description: 'Achievement, Competition, or Contest '
          type: string
          example: rx62ooMBNpSnvvK2PMr7
        action:
          $ref: '#/components/schemas/OptinAction'
          description: 'join, or leave'
        accountId:
          description: ''
          type: string
        memberId:
          description: ''
          type: string
        requestedBy:
          description: ''
          type: string
      example:
        memberRefId: some text
        entityId: some text
        entityType: some text
        action: some text
    OptinStatesFilter:
      description: ''
      required: []
      type: object
      properties:
        entityTypes:
          description: >-
            Optionally provide entity types to filer by. Valid options are Achievement,
            Competition, or Contest
          type: array
          items:
            type: string
        ids:
          description: >-
            Optionally provide a list of identifiers for either Achievements, Competitions, or
            Contest
          type: array
          items:
            type: string
        statusCodes:
          $ref: '#/components/schemas/RangeQuery'
          description: Optionally provide a range of status codes to return
        skip:
          format: int32
          description: 'The number of records to skip. Zero [0] is the defualt value'
          type: integer
        limit:
          format: int32
          description: Limit t6he results. The default is 20 if left empty
          type: integer
    OptInStatesResponse:
      description: '        '
      required:
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
          description: ''
        data:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/OptinStatus'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
    OptinStatesRequest:
      description: ''
      required:
        - accountId
      type: object
      properties:
        accountId:
          description: ''
          type: string
        optInStatesFilter:
          $ref: '#/components/schemas/OptinStatesFilter'
          description: ''
    LogEvent:
      required:
        - accountId
        - created
        - hostName
        - id
        - logLevel
        - message
        - privateIpAddress
        - serverType
        - stackTrace
        - entityId
        - entityType
      type: object
      properties:
        accountId:
          type: string
          x-es-converter: LogEvent
          x-es-fieldName: accountId
        logLevel:
          type: string
          x-es-converter: LogEvent
          x-es-fieldName: logLevel
        message:
          type: string
          x-es-converter: LogEvent
          x-es-fieldName: message
        hostName:
          type: string
          x-es-converter: LogEvent
          x-es-fieldName: hostName
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: LogEvent
          x-es-fieldName: created
        serverType:
          type: string
          x-es-converter: LogEvent
          x-es-fieldName: serverType
        id:
          type: string
          x-es-converter: LogEvent
          x-es-fieldName: id
        stackTrace:
          type: string
          x-es-converter: LogEvent
          x-es-fieldName: stackTrace
        privateIpAddress:
          type: string
          x-es-converter: LogEvent
          x-es-fieldName: privateIpAddress
        version:
          format: int64
          type: integer
          x-es-converter: LogEvent
          x-es-fieldName: _version
        entityId:
          description: ''
          type: string
          x-es-converter: LogEvent
          x-es-fieldName: entityId
        entityType:
          description: ''
          type: string
          x-es-converter: LogEvent
          x-es-fieldName: entityType
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.LogEventDoc
    ContestStateOperations:
      description: Operations supported by update contest state action.
      enum:
        - Deleted
        - Ready
        - Active
        - Finished
        - Finalised
        - Cancelled
      type: string
      readOnly: true
    LeaderboardMember:
      required:
        - name
        - rank
        - points
        - memberId
        - memberRefId
      type: object
      properties:
        name:
          description: The name of the player
          type: string
          example: Player 1
        memberId:
          description: Unique system identifier of a Member
          type: string
          example: Dc4swmQBVd51K6gPQqFx
        memberRefId:
          description: The reference to this member in your system
          type: string
          example: Player-1
        rankChangeFrom:
          format: int32
          description: 'Previous rank held, null if no changes are recorded'
          type: integer
        rankChangeType:
          format: int32
          description: '[-1] for rank-down, like 5 to 8. [0] for no change, [1] for rank-up like 9 to 3'
          type: integer
        goalReached:
          description: If true then the player is elligible for rewards and changes the rank rendering
          type: boolean
        params:
          description: The user defined values used in the rules builder
          type: object
          additionalProperties:
            type: number
    ClaimAwardRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          type: object
          properties:
            id:
              description: award id
              type: string
            claimed:
              description: was the award claimed
              type: boolean
              example: 'true,false'
    ActiveEntitiesRequest:
      description: ''
      required:
        - accountId
        - lastUpdate
      type: object
      properties:
        accountId:
          description: ''
          type: string
        lastUpdate:
          description: ''
          type: number
        memberId:
          description: ''
          type: string
    OptinStatus:
      description: ''
      required:
        - entityType
        - statusCode
        - status
        - entityType
        - entityId
        - statusCode
        - status
      type: object
      properties:
        entityType:
          description: ''
          type: string
        entityId:
          description: ''
          type: string
        statusCode:
          description: >-
            Processing = 0, NotEntered = 5, Entering = 10, Entrant = 15, Preparing = 20, Running =
            25, Completing = 30, Completed = 35
          type: integer
        status:
          description: |-
            Processing = 0, NotEntered = 5, Entering = 10, Entrant = 15,\
                        \ Preparing = 20, Running = 25, Completing = 30, Completed = 35
          type: string
    CustomField:
      required:
        - accountId
        - appliesTo
        - created
        - fieldType
        - description
        - id
        - name
        - term
      type: object
      properties:
        accountId:
          type: string
          x-es-converter: CustomField
          x-es-fieldName: accountId
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: CustomField
          x-es-fieldName: created
        name:
          type: string
          x-es-converter: CustomField
          x-es-fieldName: name
        term:
          type: string
          x-es-converter: CustomField
          x-es-fieldName: term
        description:
          type: string
          x-es-converter: CustomField
          x-es-fieldName: description
        appliesTo:
          type: string
          x-es-converter: CustomField
          x-es-fieldName: appliesTo
        id:
          type: string
          x-es-converter: CustomField
          x-es-fieldName: id
        fieldType:
          type: string
          x-es-converter: CustomField
          x-es-fieldName: fieldType
        version:
          format: int64
          type: integer
          x-es-converter: CustomField
          x-es-fieldName: _version
        constraints:
          description: ''
          type: array
          items:
            type: string
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.CustomFieldDoc
    PointsStrategy:
      description: The target points to achieve
      required:
        - TargetType
        - TargetPoints
        - pointsValueMin
        - operator
      type: object
      properties:
        operator:
          description: >-
            The operator: Equals, GreaterThan, GreaterThanEquals, LessThan, LessThanEquals,
            Between, Average, AverageBetween
          type: string
        pointsValueUpper:
          description: >-
            The upper points to achieve. This is only used where secondary number are required
            like, between, or average between
          type: number
        pointsValue:
          description: The points to achieve
          type: number
    AchievementStrategies:
      required:
        - scoringStrategy
      type: object
      properties:
        pointsStrategy:
          $ref: '#/components/schemas/PointsStrategy'
          x-es-converter: AchievementStrategies
          x-es-fieldName: pointsStrategy
    TournamentStrategies:
      required:
        - rankingStrategy
        - scoringStrategy
        - strategyType
      type: object
      properties:
        rankingStrategy:
          $ref: '#/components/schemas/RankingStrategy'
          x-es-converter: TournamentStrategies
          x-es-fieldName: rankingStrategy
        scoringStrategy:
          $ref: '#/components/schemas/ScoringStrategy'
          x-es-converter: TournamentStrategies
          x-es-fieldName: scoringStrategy
        strategyType:
          type: string
          x-es-converter: TournamentStrategies
          x-es-fieldName: strategyType
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.StrategiesDoc
    Metadata:
      required:
        - key
      type: object
      properties:
        value:
          type: string
          x-es-converter: Metadata
          x-es-fieldName: value
          x-zq-rules: true
        key:
          type: string
          x-es-converter: Metadata
          x-es-fieldName: key
          x-zq-rules: true
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.MetadataDoc
      x-zq-meta-as-array: true
    QueryRequest:
      type: object
      properties:
        must:
          type: array
          items:
            $ref: '#/components/schemas/QueryMultiple'
        mustNot:
          type: array
          items:
            $ref: '#/components/schemas/QueryMultiple'
        should:
          type: array
          items:
            $ref: '#/components/schemas/QueryMultiple'
        gte:
          type: array
          items:
            $ref: '#/components/schemas/QuerySingle'
        lte:
          type: array
          items:
            $ref: '#/components/schemas/QuerySingle'
        gt:
          type: array
          items:
            $ref: '#/components/schemas/QuerySingle'
        lt:
          type: array
          items:
            $ref: '#/components/schemas/QuerySingle'
        range:
          type: array
          items:
            $ref: '#/components/schemas/RangeQuery'
        sortBy:
          type: array
          items:
            $ref: '#/components/schemas/QuerySortBy'
        multiFields:
          type: array
          items:
            $ref: '#/components/schemas/QueryMultipleFields'
        includeFields:
          description: A list of parameters that need to be included in the response
          type: array
          items:
            type: string
          example:
            - ruleSet
            - products
        hasValue:
          description: This will match fields which do not have null values
          type: array
          items:
            type: string
          example:
            - productType
            - name
        hasNoValue:
          description: This will match fields which have null values
          type: array
          items:
            type: string
          example:
            - productType
            - name
        shouldMatch:
          format: int32
          description: How many should properties need to be displayed
          type: integer
          example: 1
        skip:
          format: int32
          description: How many response objects will be skipped for preview
          type: integer
          example: 0
        limit:
          format: int32
          description: How many response objects will be displayed
          type: integer
          example: 100
        constraints:
          description: Additional constraints
          type: array
          items:
            type: string
          example:
            - isCountQuery
        aggragations:
          type: array
          items:
            $ref: '#/components/schemas/AggregationQuery'
    Member:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: Member
        -
          required:
            - accountId
            - created
            - id
            - memberRefId
            - memberType
          type: object
          properties:
            accountId:
              type: string
              x-es-converter: Member
              x-es-fieldName: accountId
            memberType:
              type: string
              x-es-converter: Member
              x-es-fieldName: memberType
              x-zq-rules: true
            name:
              type: string
              x-es-converter: Member
              x-es-fieldName: name
              x-zq-rules: true
            memberRefId:
              type: string
              x-es-converter: Member
              x-es-fieldName: memberRefId
              x-zq-rules: true
            icon:
              description: Attachement id for the corresponding icon image.
              type: string
              x-es-converter: Member
              x-es-fieldName: icon
            teamMembers:
              type: array
              items:
                type: string
              x-es-converter: Member
              x-es-fieldName: teamMembers
              x-zq-rules: true
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: Member
              x-es-fieldName: created
              x-zq-rules: true
            timeZoneOffset:
              description: ''
              type: string
              x-es-converter: Member
              x-es-fieldName: timeZoneOffset
              x-zq-rules: true
            id:
              type: string
              x-es-converter: Member
              x-es-fieldName: id
              x-zq-rules: true
            version:
              format: int64
              type: integer
              x-es-converter: Member
              x-es-fieldName: _version
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.MemberDoc
    AggregationQuery:
      description: Agregate date by query terms
      required:
        - key
        - qggregationType
      type: object
      properties:
        aggragations:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/AggregationQuery'
          x-zq-excluded: true
        type:
          description: 'term, sum, value_count, avg, etc'
          type: string
        key:
          description: ''
          type: string
        fieldName:
          description: ''
          type: string
        sortOrder:
          $ref: '#/components/schemas/SortOrder'
          description: ''
        size:
          description: ''
          type: integer
    CreateInstantWinRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/CreateInstantWin'
    UpdateInstantWinRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/UpdateInstantWin'
    DeleteInstantWinRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    InstantWinsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/InstantWin'
    GridLocation:
      description: >-
        This struct contains two integer-valued fields, row and col . A GridLocation can be used to
        represent a location in a two-dimensional grid.
      required:
        - row
        - col
      type: object
      properties:
        row:
          description: The horizontal position of the tile
          type: integer
        col:
          description: The vertical position of the tile
          type: integer
    Event:
      required:
        - accountId
        - action
        - created
        - id
        - metadata
        - points
        - relatesTo
        - relatesToExternal
        - sourceValue
        - transactionTimestamp
        - eventRefId
        - entityType
      type: object
      properties:
        accountId:
          type: string
          x-es-converter: Event
          x-es-fieldName: accountId
        memberId:
          type: string
          x-es-converter: Event
          x-es-fieldName: memberId
          x-zq-fk: Member
        action:
          type: string
          x-es-converter: Event
          x-es-fieldName: action
          x-zq-rules: true
        batchId:
          type: string
          x-es-converter: Event
          x-es-fieldName: batchId
          x-zq-rules: true
        entityId:
          type: string
          x-es-converter: Event
          x-es-fieldName: entityId
          x-zq-rules: true
        sourceValue:
          format: double
          description: double
          type: number
          x-es-converter: Event
          x-es-fieldName: sourceValue
          x-zq-rules: true
        points:
          format: double
          description: double
          type: number
          x-es-converter: Event
          x-es-fieldName: points
          x-zq-rules: true
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: Event
          x-es-fieldName: created
          x-zq-rules: true
        transactionTimestamp:
          format: date-time
          description: date-time
          type: string
          x-es-converter: Event
          x-es-fieldName: transactionTimestamp
          x-zq-rules: true
        relatesToExternal:
          deprecated: true
          type: array
          items:
            type: string
          x-es-converter: Event
          x-es-fieldName: relatesToExternal
          x-zq-rules: true
        id:
          type: string
          x-es-converter: Event
          x-es-fieldName: id
        relatesTo:
          deprecated: true
          type: array
          items:
            type: string
          x-es-converter: Event
          x-es-fieldName: relatesTo
          x-zq-rules: true
        entityRefId:
          type: string
          x-es-converter: Event
          x-es-fieldName: entityRefId
          x-zq-rules: true
        memberRefId:
          type: string
          x-es-converter: Event
          x-es-fieldName: memberRefId
        metadata:
          deprecated: true
          $ref: '#/components/schemas/EventMetadata'
          x-es-converter: Event
          x-es-fieldName: metadata
          x-zq-rules: true
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldEntry'
          x-es-converter: Event
          x-es-fieldName: customFields
          x-zq-lens: CustomFieldEntriesAsMapLens
          x-zq-rules: true
        tags:
          description: A list of id's used to tag models
          type: array
          items:
            type: string
          x-es-converter: Event
          x-es-fieldName: tags
          x-zq-rules: true
        version:
          format: int64
          type: integer
          x-es-converter: Event
          x-es-fieldName: _version
        eventRefId:
          description: ''
          type: string
          x-es-converter: Event
          x-es-fieldName: eventRefId
          x-zq-rules: true
        entityType:
          description: ''
          type: string
        unitOfMeasure:
          description: The UOM key.
          type: string
          x-es-converter: Event
          x-es-fieldName: unitOfMeasure
          x-zq-rules: true
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.EventDoc
    CreateMemberJournalRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/CreateMemberJournal'
    DeleteMemberJournalRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: A list of identifications to delete
              type: array
              items:
                type: string
    MemberJournalsResponse:
      description: ''
      required:
        - results
        - meta
        - errors
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta'
        errors:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
        results:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/MemberJournal'
    UpdateMemberJournalRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/UpdateMemberJournal'
    MemberJournal:
      required:
        - accountId
        - action
        - created
        - id
        - entityType
      type: object
      properties:
        accountId:
          type: string
          x-es-converter: MemberJournal
          x-es-fieldName: accountId
        memberId:
          type: string
          x-es-converter: Event
          x-es-fieldName: memberId
          x-zq-fk: Member
        action:
          type: string
          x-es-converter: MemberJournal
          x-es-fieldName: action
          x-zq-rules: true
        entityId:
          type: string
          x-es-converter: MemberJournal
          x-es-fieldName: entityId
          x-zq-rules: true
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: MemberJournal
          x-es-fieldName: created
          x-zq-rules: true
        expires:
          format: date-time
          description: date-time
          type: string
          x-es-converter: MemberJournal
          x-es-fieldName: expires
          x-zq-rules: true
        id:
          type: string
          x-es-converter: MemberJournal
          x-es-fieldName: id
        entityType:
          description: ''
          type: string
          x-es-converter: MemberJournal
        statusCode:
          format: int32
          description: integer
          type: integer
          x-es-converter: MemberJournal
          x-es-fieldName: statusCode
        version:
          format: int64
          type: integer
    CreateMemberJournal:
      type: object
      allOf:
        -
          required:
            - accountId
          type: object
          properties:
            accountId:
              type: string
            created:
              format: date-time
              description: date-time
              type: string
            expires:
              format: date-time
              description: date-time
              type: string
            action:
              type: string
            entityId:
              type: string
            entityType:
              type: string
            memberId:
              type: string
            statusCode:
              format: int32
              description: integer
              type: integer
        -
          $ref: '#/components/schemas/OptParamModels'
      x-ziqni-companionObject: ziqni.core.model.MemberJournal
    UpdateMemberJournal:
      type: object
      allOf:
        -
          required:
            - id
            - accountId
          type: object
          properties:
            id:
              type: string
            accountId:
              type: string
            created:
              format: date-time
              description: date-time
              type: string
            expires:
              format: date-time
              description: date-time
              type: string
            action:
              type: string
            entityId:
              type: string
            entityType:
              type: string
            memberId:
              type: string
            statusCode:
              format: int32
              description: integer
              type: integer
        -
          $ref: '#/components/schemas/OptParamModels'
      x-ziqni-companionObject: ziqni.core.model.MemberJournal
    Competition:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: Competition
        -
          required:
            - accountId
            - allowMultipleEntriesPerRound
            - competitionType
            - created
            - name
            - entrantMemberType
            - numberOfRounds
            - options
            - id
            - status
            - statusCode
          type: object
          properties:
            accountId:
              type: string
              x-es-converter: Competition
              x-es-fieldName: accountId
            competitionType:
              type: string
              x-es-converter: Competition
              x-es-fieldName: competitionType
              x-zq-rules: true
            entrantMemberType:
              type: string
              x-es-converter: Competition
              x-es-fieldName: entrantMemberType
              x-zq-rules: true
            allowMultipleEntriesPerRound:
              type: boolean
              x-es-converter: Competition
              x-es-fieldName: allowMultipleEntriesPerRound
              x-zq-rules: true
            numberOfRounds:
              format: int32
              description: integer
              type: integer
              x-es-converter: Competition
              x-es-fieldName: numberOfRounds
              x-zq-rules: true
            numberOfGroupStages:
              format: int32
              description: integer
              type: integer
              x-es-converter: Competition
              x-es-fieldName: numberOfGroupStages
              x-zq-rules: true
            name:
              type: string
              x-es-converter: Competition
              x-es-fieldName: label
            description:
              type: string
              x-es-converter: Competition
              x-es-fieldName: description
            termsAndConditions:
              type: string
              x-es-converter: Competition
              x-es-fieldName: termsConditions
            options:
              $ref: '#/components/schemas/Options'
              x-es-converter: Competition
              x-zq-rules: true
            contests:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/Contest'
              x-es-converter: Competition
              x-es-fieldName: contests
              x-zq-rules: true
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: Competition
              x-es-fieldName: created
              x-zq-rules: true
            id:
              type: string
              x-es-converter: Competition
              x-es-fieldName: id
            status:
              type: string
              x-es-converter: Competition
              x-es-fieldName: status
            statusCode:
              format: int32
              description: integer
              type: integer
              x-es-converter: Competition
              x-es-fieldName: statusCode
            icon:
              description: Link to the icon
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-converter: Competition
              x-es-fieldName: icon
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-converter: Competition
              x-es-fieldName: banner
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-converter: Competition
              x-es-fieldName: bannerLowResolution
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-converter: Competition
              x-es-fieldName: bannerHighResolution
            version:
              format: int64
              type: integer
              x-es-converter: Competition
              x-es-fieldName: _version
            constraints:
              description: ''
              type: array
              items:
                type: string
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.CompetitionDoc
    Contest:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: Contest
        -
          required:
            - accountId
            - competitionId
            - number
            - name
            - round
            - options
            - roundType
            - status
            - statusCode
            - created
          type: object
          properties:
            accountId:
              type: string
              x-es-converter: Contest
              x-es-fieldName: accountId
            competitionId:
              type: string
              x-es-converter: Contest
              x-es-fieldName: competitionId
              x-zq-rules: true
            number:
              format: int32
              description: integer
              type: integer
              x-es-converter: Contest
              x-es-fieldName: number
              x-zq-rules: true
            name:
              type: string
              x-es-converter: Contest
              x-es-fieldName: label
            description:
              type: string
              x-es-converter: Contest
              x-es-fieldName: description
            termsConditions:
              type: string
              x-es-converter: Contest
              x-es-fieldName: termsConditions
            round:
              format: int32
              description: integer
              type: integer
              x-es-converter: Contest
              x-es-fieldName: round
              x-zq-rules: true
            roundType:
              type: string
              x-es-converter: Contest
              x-es-fieldName: roundType
              x-zq-rules: true
            groupStage:
              format: int32
              description: integer
              type: integer
              x-es-converter: Contest
              x-es-fieldName: groupStage
              x-zq-rules: true
            groupStageLabel:
              type: string
              x-es-converter: Contest
              x-es-fieldName: groupStageLabel
            entrantsFromContest:
              type: array
              items:
                type: string
              x-es-converter: Contest
              x-es-fieldName: entrantsFromContest
              x-zq-rules: true
            options:
              $ref: '#/components/schemas/Options'
              x-es-converter: Contest
              x-es-fieldName: options
              x-zq-rules: true
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: Contest
              x-es-fieldName: created
              x-zq-rules: true
            id:
              type: string
              x-es-converter: Contest
              x-es-fieldName: id
            status:
              type: string
              x-es-converter: Contest
              x-es-fieldName: status
            statusCode:
              format: int32
              description: integer
              type: integer
              x-es-converter: Contest
              x-es-fieldName: statusCode
            icon:
              description: Link to the icon
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-converter: Contest
              x-es-fieldName: icon
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-converter: Contest
              x-es-fieldName: banner
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-converter: Contest
              x-es-fieldName: bannerLowResolution
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-converter: Contest
              x-es-fieldName: bannerHighResolution
            version:
              format: int64
              type: integer
              x-es-converter: Contest
              x-es-fieldName: _version
            constraints:
              description: ''
              type: array
              items:
                type: string
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.ContestDoc
    CreateCompetition:
      description: ''
      type: object
      allOf:
        -
          required:
            - accountId
            - allowMultipleEntriesPerRound
            - competitionType
            - entrantMemberType
            - name
            - numberOfRounds
            - options
          type: object
          properties:
            accountId:
              description: ''
              type: string
              x-ziqni-fieldName: accountId
            allowMultipleEntriesPerRound:
              description: ''
              type: boolean
              x-ziqni-fieldName: allowMultipleEntriesPerRound
            description:
              description: ''
              type: string
              x-ziqni-fieldName: description
            entrantMemberType:
              description: ''
              type: string
              x-ziqni-fieldName: entrantMemberType
            numberOfGroupStages:
              format: int32
              description: ''
              type: integer
              x-ziqni-fieldName: numberOfGroupStages
            numberOfRounds:
              format: int32
              description: ''
              type: integer
              x-ziqni-fieldName: numberOfRounds
            options:
              $ref: '#/components/schemas/Options'
              description: ''
              x-ziqni-fieldName: options
            createContests:
              $ref: '#/components/schemas/CreateContestRequest'
              description: ''
              x-ziqni-fieldName: contests
            competitionType:
              description: ''
              type: string
              x-ziqni-fieldName: competitionType
            name:
              description: ''
              type: string
              x-ziqni-fieldName: name
            termsAndConditions:
              description: ''
              type: string
              x-ziqni-fieldName: termsAndConditions
            icon:
              description: Link to the icon
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            constraints:
              description: ''
              type: array
              items:
                type: string
        -
          $ref: '#/components/schemas/OptParamModels'
      x-ziqni-companionObject: ziqni.core.model.Competition
    CreateContest:
      description: ''
      type: object
      allOf:
        -
          required:
            - accountId
            - competitionId
            - name
            - number
            - options
            - round
            - roundType
          type: object
          properties:
            accountId:
              description: ''
              type: string
              x-ziqni-fieldName: accountId
            competitionId:
              description: ''
              type: string
              x-ziqni-fieldName: competitionId
            description:
              description: ''
              type: string
              x-ziqni-fieldName: description
            entrantsFromContest:
              description: ''
              type: array
              items:
                type: string
              x-ziqni-fieldName: entrantsFromContest
            groupStage:
              format: int32
              description: ''
              type: integer
              x-ziqni-fieldName: groupStage
            groupStageLabel:
              description: ''
              type: string
              x-ziqni-fieldName: groupStageLabel
            number:
              format: int32
              description: ''
              type: integer
              x-ziqni-fieldName: number
            options:
              $ref: '#/components/schemas/Options'
              description: ''
              x-ziqni-fieldName: options
            round:
              format: int32
              description: ''
              type: integer
              x-ziqni-fieldName: round
            roundType:
              description: ''
              type: string
              x-ziqni-fieldName: roundType
            termsConditions:
              description: ''
              type: string
              x-ziqni-fieldName: termsConditions
            name:
              description: ''
              type: string
              x-ziqni-fieldName: name
            icon:
              description: Link to the icon
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            constraints:
              description: ''
              type: array
              items:
                type: string
        -
          $ref: '#/components/schemas/OptParamModels'
      x-ziqni-companionObject: ziqni.core.model.Contest
    UpdateCompetition:
      description: ''
      type: object
      allOf:
        -
          required:
            - accountId
            - allowMultipleEntriesPerRound
            - competitionType
            - entrantMemberType
            - id
            - name
            - numberOfRounds
            - options
          type: object
          properties:
            accountId:
              description: ''
              type: string
              x-ziqni-fieldName: accountId
            allowMultipleEntriesPerRound:
              description: ''
              type: boolean
              x-ziqni-fieldName: allowMultipleEntriesPerRound
            competitionType:
              description: ''
              type: string
              x-ziqni-fieldName: competitionType
            description:
              description: ''
              type: string
              x-ziqni-fieldName: description
            entrantMemberType:
              description: ''
              type: string
              x-ziqni-fieldName: entrantMemberType
            id:
              description: ''
              type: string
              x-ziqni-fieldName: id
            numberOfGroupStages:
              format: int32
              description: ''
              type: integer
              x-ziqni-fieldName: numberOfGroupStages
            numberOfRounds:
              format: int32
              description: ''
              type: integer
              x-ziqni-fieldName: numberOfRounds
            options:
              $ref: '#/components/schemas/Options'
              description: ''
              x-ziqni-fieldName: options
            updateContests:
              $ref: '#/components/schemas/UpdateContestRequest'
              description: ''
              x-ziqni-fieldName: contests
            name:
              description: ''
              type: string
              x-ziqni-fieldName: name
            termsAndConditions:
              description: ''
              type: string
              x-ziqni-fieldName: termsAndConditions
            deleteContests:
              $ref: '#/components/schemas/DeleteContestRequest'
              description: ''
            createContests:
              $ref: '#/components/schemas/CreateContestRequest'
              description: ''
            icon:
              description: Link to the icon
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            constraints:
              description: ''
              type: array
              items:
                type: string
        -
          $ref: '#/components/schemas/OptParamModels'
      x-ziqni-companionObject: ziqni.core.model.Competition
    UpdateContest:
      description: ''
      type: object
      allOf:
        -
          required:
            - accountId
            - name
            - number
            - options
            - round
            - roundType
          type: object
          properties:
            accountId:
              description: ''
              type: string
              x-ziqni-fieldName: accountId
            description:
              description: ''
              type: string
              x-ziqni-fieldName: description
            groupStage:
              format: int32
              description: ''
              type: integer
              x-ziqni-fieldName: groupStage
            groupStageLabel:
              description: ''
              type: string
              x-ziqni-fieldName: groupStageLabel
            id:
              description: ''
              type: string
              x-ziqni-fieldName: id
            number:
              format: int32
              description: ''
              type: integer
              x-ziqni-fieldName: number
            options:
              $ref: '#/components/schemas/Options'
              description: ''
              x-ziqni-fieldName: options
            round:
              format: int32
              description: ''
              type: integer
              x-ziqni-fieldName: round
            roundType:
              description: ''
              type: string
              x-ziqni-fieldName: roundType
            termsConditions:
              description: ''
              type: string
              x-ziqni-fieldName: termsConditions
            icon:
              description: Link to the icon
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            name:
              description: ''
              type: string
              x-ziqni-fieldName: name
        -
          $ref: '#/components/schemas/OptParamModels'
      x-ziqni-companionObject: ziqni.core.model.Contest
    Achievement:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: Achievement
        -
          required:
            - name
            - accountId
            - created
            - id
          type: object
          properties:
            accountId:
              type: string
              x-es-converter: Achievement
              x-es-fieldName: accountId
            description:
              type: string
              x-es-converter: Achievement
              x-es-fieldName: description
            icon:
              description: Attachement id for the corresponding icon image.
              type: string
              x-es-converter: Achievement
              x-es-fieldName: icon
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-converter: Achievement
              x-es-fieldName: banner
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-converter: Achievement
              x-es-fieldName: bannerLowResolution
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-converter: Achievement
              x-es-fieldName: bannerHighResolution
            scheduling:
              $ref: '#/components/schemas/Scheduling'
              x-es-converter: Achievement
              x-es-fieldName: scheduling
            memberGroups:
              type: array
              items:
                type: string
              x-es-converter: Achievement
              x-es-fieldName: memberGroups
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: Achievement
              x-es-fieldName: created
            name:
              type: string
              x-es-converter: Achievement
              x-es-fieldName: name
            id:
              type: string
              x-es-converter: Achievement
              x-es-fieldName: id
            version:
              format: int64
              type: integer
              x-es-converter: Achievement
              x-es-fieldName: _version
            status:
              type: string
              x-es-converter: Achievement
              x-es-fieldName: status
            statusCode:
              format: int32
              description: integer
              type: integer
              x-es-converter: Achievement
              x-es-fieldName: statusCode
            termsAndConditions:
              type: string
              x-es-converter: Achievement
              x-es-fieldName: termsAndConditions
            maxNumberOfissues:
              format: int32
              description: integer
              type: integer
              x-es-converter: Achievement
              x-es-fieldName: maxNumberOfissues
            minimumShouldMatch:
              format: int32
              description: integer
              type: integer
              x-es-converter: Achievement
              x-es-fieldName: minimumShouldMatch
            constraints:
              description: ''
              type: array
              items:
                type: string
            achievementDependencies:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/AchievementLink'
            productTagsFilter:
              $ref: '#/components/schemas/ComplexFilters'
              x-es-converter: Achievement
              x-es-fieldName: productTagsFilter
            memberTagsFilter:
              $ref: '#/components/schemas/ComplexFilters'
              x-es-converter: Achievement
              x-es-fieldName: entrantMemberTagsFilter
            strategies:
              $ref: '#/components/schemas/AchievementStrategies'
              description: The target to reach in order to receive this achievement
            productIds:
              description: ''
              type: array
              items:
                type: string
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.AchievementDoc
    CreateAchievement:
      type: object
      allOf:
        -
          required:
            - name
            - minimumShouldMatch
            - accountId
          type: object
          properties:
            icon:
              description: Attachement id for the corresponding icon image.
              type: string
              x-ziqni-fieldName: icon
            banner:
              description: >-
                A banner id that has been pre uploaded to the system to display for
                Achievement
              type: string
              x-ziqni-fieldName: banner
            bannerLowResolution:
              description: >-
                A bannerLowResolution id that has been pre uploaded to the system to display
                for Achievement
              type: string
              x-ziqni-fieldName: bannerLowResolution
            bannerHighResolution:
              description: >-
                A bannerHighResolution id that has been pre uploaded to the system to display
                for Achievement
              type: string
              x-ziqni-fieldName: bannerHighResolution
            description:
              type: string
              x-ziqni-fieldName: description
            maxNumberOfissues:
              format: int32
              description: Maximum number of issued achievements
              type: integer
              example: '9999'
              x-ziqni-fieldName: maxNumberOfissues
            minimumShouldMatch:
              format: int32
              description: integer
              type: integer
              x-ziqni-fieldName: minimumShouldMatch
            name:
              type: string
              x-ziqni-fieldName: name
            scheduling:
              $ref: '#/components/schemas/Scheduling'
              x-ziqni-fieldName: scheduling
            memberGroups:
              type: array
              items:
                type: string
              x-ziqni-fieldName: memberGroups
            accountId:
              description: ''
              type: string
              x-ziqni-fieldName: accountId
            termsAndContitions:
              description: ''
              type: string
              x-ziqni-fieldName: termsAndContitions
            constraints:
              description: ''
              type: array
              items:
                type: string
            achievementDependencies:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/AchievementLink'
              x-ziqni-fieldName: achievementDependencies
            productTagsFilter:
              $ref: '#/components/schemas/ComplexFilters'
              x-ziqni-fieldName: productTagsFilter
            productIds:
              description: ''
              type: array
              items:
                type: string
            memberTagsFilter:
              $ref: '#/components/schemas/ComplexFilters'
              x-ziqni-fieldName: entrantMemberTagsFilter
            strategies:
              $ref: '#/components/schemas/AchievementStrategies'
              description: The target to reach in order to receive this achievement
        -
          $ref: '#/components/schemas/OptParamModels'
      x-ziqni-companionObject: ziqni.core.model.Achievement
    UpdateAchievement:
      description: ''
      type: object
      allOf:
        -
          required:
            - minimumShouldMatch
            - name
            - accountId
            - id
          type: object
          properties:
            category:
              description: ''
              type: array
              items:
                type: string
              x-ziqni-fieldName: category
            codeBlock:
              description: ''
              type: string
              x-ziqni-fieldName: codeBlock
            maxNumberOfissues:
              format: int32
              description: Maximum number of issued achievements
              type: integer
              example: '9999'
              x-ziqni-fieldName: maxNumberOfissues
            description:
              description: ''
              type: string
              x-ziqni-fieldName: description
            icon:
              description: Attachement id for the corresponding icon image.
              type: string
              x-ziqni-fieldName: icon
            banner:
              description: >-
                A banner id that has been pre uploaded to the system to display for
                Achievement
              type: string
              x-ziqni-fieldName: banner
            bannerLowResolution:
              description: >-
                A bannerLowResolution id that has been pre uploaded to the system to display
                for Achievement
              type: string
              x-ziqni-fieldName: bannerLowResolution
            bannerHighResolution:
              description: >-
                A bannerHighResolution id that has been pre uploaded to the system to display
                for Achievement
              type: string
              x-ziqni-fieldName: bannerHighResolution
            memberGroups:
              description: ''
              type: array
              items:
                type: string
              x-ziqni-fieldName: memberGroups
            minimumShouldMatch:
              description: ''
              type: integer
              x-ziqni-fieldName: minimumShouldMatch
            name:
              description: ''
              type: string
              x-ziqni-fieldName: name
            scheduling:
              $ref: '#/components/schemas/Scheduling'
              description: ''
              x-ziqni-fieldName: scheduling
            accountId:
              description: ''
              type: string
              x-ziqni-fieldName: accountId
            id:
              description: ''
              type: string
              x-ziqni-fieldName: id
            deprecated:
              description: ''
              type: boolean
              x-ziqni-fieldName: deprecated
            initialState:
              format: int32
              description: integer
              type: integer
              x-ziqni-fieldName: initialState
            constraints:
              description: ''
              type: array
              items:
                type: string
            termsAndConditions:
              description: ''
              type: string
              x-ziqni-fieldName: termsAndConditions
            achievementDependencies:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/AchievementLink'
            productTagsFilter:
              $ref: '#/components/schemas/ComplexFilters'
              x-ziqni-fieldName: productTagsFilter
            productIds:
              description: ''
              type: array
              items:
                type: string
            memberTagsFilter:
              $ref: '#/components/schemas/ComplexFilters'
              x-ziqni-fieldName: entrantMemberTagsFilter
            strategies:
              $ref: '#/components/schemas/AchievementStrategies'
              description: The target to reach in order to receive this achievement
        -
          $ref: '#/components/schemas/OptParamModels'
      x-ziqni-companionObject: ziqni.core.model.Achievement
    Score:
      required:
        - accountId
        - bestScores
        - goalReached
        - markerTimeStamp
        - memberId
        - participationId
        - timestamp
        - updateCount
        - id
      type: object
      properties:
        accountId:
          type: string
          x-es-converter: Score
          x-es-fieldName: accountId
        updateCount:
          format: int64
          description: long
          type: integer
          x-es-converter: Score
          x-es-fieldName: updateCount
        bestScores:
          description: double
          type: array
          items:
            format: double
            type: number
          x-es-converter: Score
          x-es-fieldName: bestScores
        goalReached:
          type: boolean
          x-es-converter: Score
          x-es-fieldName: goalReached
        markerTimeStamp:
          format: int64
          description: date-time
          type: integer
          x-es-converter: Score
          x-es-fieldName: markerTimeStamp
        value:
          description: double
          type: number
          x-es-converter: Score
          x-es-fieldName: value
        memberId:
          type: string
          x-es-converter: Score
          x-es-fieldName: memberId
        participationId:
          type: string
          x-es-converter: Score
          x-es-fieldName: participationId
        statusCode:
          format: int32
          description: integer
          type: integer
          x-es-converter: Score
          x-es-fieldName: statusCode
        timestamp:
          format: int64
          description: date-time
          type: integer
          x-es-converter: Score
          x-es-fieldName: timestamp
        id:
          description: ''
          type: string
          x-es-converter: Score
          x-es-fieldName: id
        position:
          format: int32
          description: integer
          type: integer
          x-es-converter: Score
          x-es-fieldName: position
        version:
          format: int64
          type: integer
          x-es-converter: Score
          x-es-fieldName: _version
        userDefinedValues:
          description: These are user defined values that are set using the rules engine
          type: array
          items:
            $ref: '#/components/schemas/ScoreVariable'
          x-es-foreignKey:
            -
              x-es-index: CustomFields
              x-es-field: id
        percentageComplete:
          description: ''
          type: number
        entityType:
          format: int32
          description: ''
          type: integer
        stateId:
          description: The state reference identifier
          type: number
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.ScoreDoc
    CreateScoreRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Create a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/Score'
    Account:
      required:
        - accountId
        - accountType
        - id
        - created
        - spaceName
        - wysiwygEditor
        - zone
      type: object
      properties:
        spaceName:
          type: string
          x-es-converter: Account
          x-es-fieldName: spaceName
        accountType:
          type: string
          x-es-converter: Account
          x-es-fieldName: accountType
        created:
          format: date-time
          description: date-time
          type: string
          x-es-converter: Account
          x-es-fieldName: created
        zone:
          type: string
          x-es-converter: Account
          x-es-fieldName: zone
        company:
          type: string
          x-es-converter: Account
          x-es-fieldName: company
        subAccounts:
          type: array
          items:
            type: string
          x-es-converter: Account
          x-es-fieldName: subAccounts
        unitsOfMeasure:
          description: Foreign key to unit of measure id.
          type: array
          items:
            type: string
          x-es-converter: Account
          x-es-fieldName: unitsOfMeasure
        wysiwygEditor:
          type: boolean
          x-es-converter: Account
          x-es-fieldName: wysiwygEditor
        id:
          type: string
          x-es-converter: Account
          x-es-fieldName: id
        accountId:
          type: string
          x-es-converter: Account
          x-es-fieldName: accountId
        baseCurrencyUOM:
          description: The base currency for the system to use
          type: string
          x-es-converter: Account
          x-es-fieldName: baseCurrencyUOM
        version:
          format: int64
          type: integer
          x-es-converter: Account
          x-es-fieldName: _version
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.AccountDoc
    MergeDuplicateMembersRequest:
      description: ''
      type: object
      allOf:
        -
          required:
            - items
          type: object
          properties:
            items:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/MergeDuplicateMembers'
              x-es-fieldName: toMemberID
        -
          $ref: '#/components/schemas/Identification'
    UpdateMemberRefIdRequest:
      description: ''
      required:
        - fromMemberID
        - setFromMemberRefId
      type: object
      properties:
        fromMemberID:
          description: ''
          type: string
          x-es-fieldName: fromMemberID
        setFromMemberRefId:
          description: ''
          type: string
          x-es-fieldName: setFromMemberRefId
    MergeDuplicateMembers:
      description: ''
      type: object
      allOf:
        -
          required:
            - toMemberID
            - updateMemberRefIdRequest
          type: object
          properties:
            toMemberID:
              description: ''
              type: string
              x-es-fieldName: toMemberID
            updateMemberRefIdRequest:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/UpdateMemberRefIdRequest'
    InstantWinTile:
      description: ''
      required:
        - orderNumber
        - probability
        - icon
        - horizontalPosition
        - verticalPosition
        - probability
      type: object
      properties:
        icon:
          description: The id to the image file
          type: string
        text:
          description: ''
          type: string
        background:
          description: ''
          type: string
        reward:
          $ref: '#/components/schemas/Reward'
          description: The reward associated with this tile
        location:
          $ref: '#/components/schemas/GridLocation'
          description: The location of this tile
        probability:
          format: double
          description: ''
          type: number
        contraints:
          description: 'hasPrizes, glow'
          type: array
          items:
            type: string
          example: hasPrizes
    CompetitionStateActions:
      description: Available actions for competition status
      enum:
        - Deleted
        - Ready
        - Active
        - Finished
        - Finalised
        - Cancelled
      type: string
      example: '"Deleted"'
    InstantWin:
      description: ''
      required:
        - instantWinType
        - tiles
        - id
      type: object
      properties:
        accountId:
          type: string
        id:
          type: string
        created:
          format: date-time
          description: date-time
          type: string
        tags:
          description: ''
          type: array
          items:
            type: string
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldEntry'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/Metadata'
        name:
          type: string
        description:
          type: string
        termsAndConditions:
          type: string
        constraints:
          type: array
          items:
            type: string
          example: hasRewards
        statusCode:
          format: int32
          description: integer
          type: integer
        instantWinType:
          description: integer
          type: integer
        tiles:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/InstantWinTile'
        version:
          format: int64
          type: integer
        icon:
          description: ''
          type: string
        banner:
          description: Link to the banner
          type: string
          example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
        bannerLowResolution:
          description: Link to the bannerLowResolution
          type: string
          example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
        bannerHighResolution:
          description: Link to the bannerHighResolution
          type: string
          example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
    CreateInstantWin:
      type: object
      allOf:
        -
          required:
            - accountId
            - name
          type: object
          properties:
            accountId:
              type: string
            created:
              format: date-time
              description: date-time
              type: string
            tags:
              description: ''
              type: array
              items:
                type: string
            customFields:
              type: array
              items:
                $ref: '#/components/schemas/CustomFieldEntry'
            metadata:
              type: array
              items:
                $ref: '#/components/schemas/Metadata'
            name:
              type: string
            description:
              type: string
            termsAndConditions:
              type: string
            constraints:
              type: array
              items:
                type: string
              example: hasRewards
            statusCode:
              format: int32
              description: integer
              type: integer
            instantWinType:
              description: integer
              type: integer
            icon:
              description: Attachement id for the corresponding icon image.
              type: string
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            tiles:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/InstantWinTile'
        -
          $ref: '#/components/schemas/OptParamModels'
      x-ziqni-companionObject: ziqni.core.model.InstantWin
    UpdateInstantWin:
      type: object
      allOf:
        -
          required:
            - id
            - accountId
          type: object
          properties:
            id:
              type: string
            accountId:
              type: string
            created:
              format: date-time
              description: date-time
              type: string
            tags:
              description: ''
              type: array
              items:
                type: string
            customFields:
              type: array
              items:
                $ref: '#/components/schemas/CustomFieldEntry'
            metadata:
              type: array
              items:
                $ref: '#/components/schemas/Metadata'
            name:
              type: string
            description:
              type: string
            termsAndConditions:
              type: string
            constraints:
              type: array
              items:
                type: string
              example: hasRewards
            statusCode:
              format: int32
              description: integer
              type: integer
            instantWinType:
              description: integer
              type: integer
            icon:
              description: Attachement id for the corresponding icon image.
              type: string
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
            tiles:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/InstantWinTile'
        -
          $ref: '#/components/schemas/OptParamModels'
      x-ziqni-companionObject: ziqni.core.model.InstantWin
    Product:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: Product
        -
          required:
            - accountId
            - id
            - productType
            - productRefId
          type: object
          properties:
            name:
              type: string
              x-es-converter: Product
              x-es-fieldName: name
              x-zq-rules: true
            productType:
              type: string
              x-es-converter: Product
              x-es-fieldName: productType
              x-zq-rules: true
            accountId:
              type: string
              x-es-converter: Product
              x-es-fieldName: accountId
            description:
              type: string
              x-es-converter: Product
              x-es-fieldName: description
            adjustmentFactor:
              format: double
              description: double
              type: number
              x-es-converter: Product
              x-es-fieldName: adjustmentFactor
              x-zq-rules: true
            productRefId:
              type: string
              x-es-converter: Product
              x-es-fieldName: productRefId
              x-zq-rules: true
            icon:
              description: Attachement id for the corresponding icon image.
              type: string
              x-es-converter: Product
              x-es-fieldName: icon
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-converter: Product
              x-es-fieldName: banner
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-converter: Product
              x-es-fieldName: bannerLowResolution
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-converter: Product
              x-es-fieldName: bannerHighResolution
            refNavigationPath:
              description: ''
              type: string
              x-es-converter: Product
              x-es-fieldName: refNavigationPath
            actionAdjustmentFactors:
              type: array
              items:
                $ref: '#/components/schemas/ActionAdjustmentFactor'
              x-es-converter: Product
              x-es-fieldName: actionAdjustmentFactors
              x-zq-rules: true
            productGroups:
              type: array
              items:
                type: string
              x-es-converter: Product
              x-es-fieldName: productGroups
              x-zq-rules: true
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: Product
              x-es-fieldName: created
              x-zq-rules: true
            id:
              type: string
              x-es-converter: Product
              x-es-fieldName: id
            version:
              format: int64
              type: integer
              x-es-converter: Product
              x-es-fieldName: _version
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.ProductDoc
    CreateProduct:
      type: object
      allOf:
        -
          required:
            - accountId
            - id
            - productRefId
            - adjustmentFactor
          type: object
          properties:
            accountId:
              type: string
              x-ziqni-fieldName: accountId
            productRefId:
              type: string
              x-ziqni-fieldName: productRefId
            icon:
              description: Attachement id for the corresponding icon image.
              type: string
              x-ziqni-fieldName: icon
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-fieldName: banner
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-fieldName: bannerLowResolution
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-fieldName: bannerHighResolution
            name:
              type: string
              x-ziqni-fieldName: name
            description:
              type: string
              x-ziqni-fieldName: description
            productGroups:
              type: array
              items:
                type: string
              x-ziqni-fieldName: productGroups
            adjustmentFactor:
              format: double
              description: double
              type: number
              x-ziqni-fieldName: adjustmentFactor
            actionAdjustmentFactors:
              type: array
              items:
                $ref: '#/components/schemas/ProductActionAdjustmentFactorLink'
              x-ziqni-fieldName: actionAdjustmentFactors
            productType:
              type: string
              x-ziqni-fieldName: productType
        -
          $ref: '#/components/schemas/OptParamModels'
      x-ziqni-companionObject: ziqni.core.model.Product
    UpdateProduct:
      type: object
      allOf:
        -
          required:
            - id
            - accountId
          type: object
          properties:
            name:
              type: string
              x-ziqni-fieldName: name
            id:
              type: string
              x-ziqni-fieldName: id
            icon:
              description: Attachement id for the corresponding icon image.
              type: string
              x-ziqni-fieldName: icon
            banner:
              description: Link to the banner
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-fieldName: banner
            bannerLowResolution:
              description: Link to the bannerLowResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-fieldName: bannerLowResolution
            bannerHighResolution:
              description: Link to the bannerHighResolution
              type: string
              example: 'https://<space-name>.cdn.ziqni.com/_id/<the-id>'
              x-es-fieldName: bannerHighResolution
            description:
              type: string
              x-ziqni-fieldName: description
            productGroups:
              type: array
              items:
                type: string
              x-ziqni-fieldName: productGroups
            adjustmentFactor:
              format: double
              description: double
              type: number
              x-ziqni-fieldName: adjustmentFactor
            actionAdjustmentFactors:
              type: array
              items:
                $ref: '#/components/schemas/ProductActionAdjustmentFactorLink'
              x-ziqni-fieldName: actionAdjustmentFactors
            productType:
              type: string
              x-ziqni-fieldName: productType
            accountId:
              description: ''
              type: string
              x-ziqni-fieldName: accountId
        -
          $ref: '#/components/schemas/OptParamModels'
      x-ziqni-companionObject: ziqni.core.model.Product
    UpdateAwardStateRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/UpdateAwardState'
    UpdateCompetitionStateRequest:
      allOf:
        -
          $ref: '#/components/schemas/Identification'
        -
          required:
            - items
          type: object
          properties:
            items:
              description: Update a list of specified models
              type: array
              items:
                $ref: '#/components/schemas/UpdateCompetitionState'
    UpdateCompetitionState:
      allOf:
        -
          required:
            - id
            - status
          type: object
          properties:
            id:
              description: A unique system generated identifier
              type: string
              example: sc1samQmVr61KgaPQq7x
            status:
              $ref: '#/components/schemas/CompetitionStateActions'
    UpdateAwardState:
      required:
        - status
        - statusCode
        - awardId
      type: object
      properties:
        awardId:
          description: A unique identifier of an Award
          type: string
          example: Dc4swmQBVd51K6gPQqFx
        statusCode:
          description: |-
            Available actions for award status
            
            1. Issued (Code 15)
            2. Claimed (Code 35)
            3. Processing (Code 45)
            4. Delivered  (Code 55)
            5. Expired  (Code 65)
            6. Cancelled (Code 75)
            7. Declined  (Code 85)
          type: integer
        transactionReferenceId:
          description: 'The transaction ID to correlate with this request, max 128 characters'
          type: string
        reasonForChange:
          description: 'Up to 300 character reason why this change was made [optional]'
          type: string
    StateChangeLog:
      description: Records the point in time that state changes are scheduled to occur or has occured
      required:
        - order
        - statusCode
        - dateTime
      type: object
      properties:
        order:
          format: int32
          description: What is the order of this state change
          type: integer
        statusCode:
          format: int32
          description: The status code for this change
          type: integer
        dateTime:
          format: date-time
          description: The point in time that state changes are scheduled to occur or has occured
          type: string
        transactionReferenceId:
          description: The transaction reference identifier associated with this change
          type: string
    Reward:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: Reward
        -
          required:
            - accountId
            - delay
            - id
            - memberAcknowledgmentRequired
            - rewardName
            - rewardRank
            - rewardTypeKey
            - value
            - rewardTypeId
          type: object
          properties:
            entityType:
              type: string
              x-es-converter: Reward
              x-es-fieldName: entityType
            entityId:
              type: string
              x-es-converter: Reward
              x-es-fieldName: entityId
            rewardRank:
              description: |-
                1-100 => 1,2,3.....100
                1-100,200-400 => 1,2,3.....100,200,201,202......400
              type: string
              x-es-converter: Reward
              x-es-fieldName: period
            rewardName:
              type: string
              x-es-converter: Reward
              x-es-fieldName: rewardName
            value:
              format: double
              description: double
              type: number
              x-es-converter: Reward
              x-es-fieldName: value
              x-zq-rules: true
            rewardType:
              $ref: '#/components/schemas/RewardTypeReduced'
              x-es-converter: Reward
              x-es-fieldName: rewardType
              x-zq-rules: true
            description:
              type: string
              x-es-converter: Reward
              x-es-fieldName: description
            delay:
              description: '*** Deprecation candidate'
              type: integer
              x-es-converter: Reward
              x-es-fieldName: delay
              x-zq-rules: true
            memberAcknowledgmentRequired:
              description: Default to be false
              type: boolean
              x-es-converter: Reward
              x-es-fieldName: memberAcknowledgmentRequired
              x-zq-rules: true
            accountId:
              type: string
              x-es-converter: Reward
              x-es-fieldName: accountId
            pointInTime:
              format: date-time
              description: '*** Deprecation candidate'
              type: string
              x-es-converter: Reward
              x-es-fieldName: pointInTime
              x-zq-rules: true
            period:
              format: int32
              description: '*** Deprecation candidate'
              type: integer
              x-es-converter: Reward
              x-es-fieldName: period
              x-zq-rules: true
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: Reward
              x-es-fieldName: created
            icon:
              type: string
              x-es-converter: Reward
              x-es-fieldName: icon
            translations:
              type: object
              additionalProperties:
                type: array
                items:
                  $ref: '#/components/schemas/TranslationEntry'
            issueLimit:
              format: int32
              description: how many rewards can be issued in total
              type: integer
              x-es-converter: Reward
              x-es-fieldName: issueLimit
              x-zq-rules: true
            id:
              type: string
              x-es-converter: Reward
              x-es-fieldName: id
            version:
              format: int64
              type: integer
              x-es-converter: Reward
              x-es-fieldName: _version
            memberTagsFilter:
              $ref: '#/components/schemas/ComplexFilters'
              description: >-
                This filter limits which member are eligible for this prize based on their
                tags
              x-es-converter: Reward
              x-es-fieldName: limitToMembersByTag
            scheduling:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/AwardScheduling'
            order:
              format: int32
              description: The order the rewards are issued
              type: integer
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.RewardDoc
    AwardScheduling:
      description: Determines how the award release will be scheduled
      required:
        - onStatusChngeTo
      type: object
      properties:
        thenAwardActiveFrom:
          description: >-
            This is either a ISO-8601 date string like 2024-06-06T08:00:00 for a specific point in
            time. For duration: P3Y6M4DT12H30M5S (3 years, 6 months, 4 days, 12 hours, 30 minutes,
            and 5 seconds)
          type: string
        thenAwardActiveUntil:
          description: >-
            This is either a ISO-8601 date string like 2024-06-06T08:00:00 for a specific point in
            time. For duration: P3Y6M4DT12H30M5S (3 years, 6 months, 4 days, 12 hours, 30 minutes,
            and 5 seconds)
          type: string
        onStatusChangeTo:
          format: int32
          description: When this award status is changed to the specified value
          type: integer
    Award:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: Award
        -
          required:
            - accountId
            - claimed
            - reward
            - memberId
            - created
            - entityId
            - entityType
            - id
            - pointInTime
          type: object
          properties:
            accountId:
              type: string
              x-es-converter: Award
              x-es-fieldName: accountId
            memberId:
              type: string
              x-es-converter: Award
              x-es-fieldName: memberId
            reward:
              $ref: '#/components/schemas/Reward'
              description: The actual reward associated with this award.
              x-es-converter: Award
              x-es-fieldName: reward
            claimed:
              type: boolean
              x-es-converter: Award
              x-es-fieldName: claimed
            entityType:
              type: string
              x-es-converter: Award
              x-es-fieldName: entityType
            entityId:
              description: >-
                Id of the competition, contest or achievement to which this award is
                associated.
              type: string
              x-es-converter: Award
              x-es-fieldName: entityId
            pointInTime:
              format: date-time
              description: date-time
              type: string
              x-es-converter: Award
              x-es-fieldName: pointInTime
            period:
              description: integer
              type: integer
              x-es-converter: Award
              x-es-fieldName: period
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: Award
              x-es-fieldName: created
            id:
              type: string
              x-es-converter: Award
              x-es-fieldName: id
            version:
              format: int64
              type: integer
              x-es-converter: Award
              x-es-fieldName: _version
            memberRefId:
              description: ''
              type: string
            statusCode:
              format: int32
              description: |-
                The current status of this award
                
                1. Available (Code 10)
                2. Claimed (Code 20)
                3. Processing (Code 30)
                4. Delivered  (Code 40)
                5. Expired  (Code 50)
                6. Cancelled (Code 60)
                7. Declined  (Code 70)
              type: integer
            stateChangeLogs:
              description: The state change history for this award
              type: array
              items:
                $ref: '#/components/schemas/StateChangeLog'
            activeFrom:
              format: date-time
              description: This record is considered active up until this date time
              type: string
            activeUntil:
              format: date-time
              description: This record is considered active up until this date time
              type: string
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.AwardDoc
    RewardType:
      allOf:
        -
          $ref: '#/components/schemas/OptParamModels'
          x-es-converter: RewardType
        -
          required:
            - accountId
            - id
            - key
            - system
            - created
            - unitOfMeasure
          type: object
          properties:
            name:
              type: string
              x-es-converter: RewardType
              x-es-fieldName: name
            key:
              type: string
              x-es-converter: RewardType
              x-es-fieldName: key
            description:
              type: string
              x-es-converter: RewardType
              x-es-fieldName: description
            accountId:
              type: string
              x-es-converter: RewardType
              x-es-fieldName: accountId
            system:
              type: boolean
              x-es-converter: RewardType
              x-es-fieldName: system
            created:
              format: date-time
              description: date-time
              type: string
              x-es-converter: RewardType
              x-es-fieldName: created
            id:
              type: string
              x-es-converter: RewardType
              x-es-fieldName: id
            version:
              format: int64
              type: integer
              x-es-converter: RewardType
              x-es-fieldName: _version
            unitOfMeasure:
              type: string
              x-es-converter: RewardType
              x-es-fieldName: unitOfMeasureType
            autoCompleteAfter:
              description: >-
                Number of minutes after the award is claimed before it should be marked as
                Completed. If 0 (zero) then it will move to Completed immediately.
              type: number
            scheduling:
              description: ''
              type: array
              items:
                $ref: '#/components/schemas/AwardScheduling'
      x-es-companionObject: com.ziqni.dao.elasticsearch.documents.RewardTypeDoc
    RewardTypeReduced:
      required:
        - id
        - key
      type: object
      properties:
        id:
          type: string
          x-ziqni-fieldName: id
        key:
          type: string
          x-ziqni-fieldName: key
        uomKey:
          description: 'The key assigned to the unit of measure '
          type: string
        uomIsoCode:
          description: ''
          type: string
        uomSymbol:
          description: ''
          type: string
        uomType:
          description: ' The type of UOM, either Other Currency Mass Time Temperature ElectricCurrent AmountOfSubstance LuminousIntensity Distance'
          type: string
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomFieldEntry'
      x-ziqni-companionObject: ziqni.core.model.RewardType
  responses:
    AwardsResponse:
      description: ''
    OptInResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OptInResponse'
      description: ''
    OptInStatesResponseBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OptInStatesResponse'
      description: ''
  securitySchemes:
    Basic-Security:
      scheme: basic
      type: http
security:
  -
    Basic-Security: []
