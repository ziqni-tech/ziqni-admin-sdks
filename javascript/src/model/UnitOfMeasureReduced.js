/**
 * ZIQNI Admin API
 * Ziqni Application Services are used to manage and configure spaces.  Change log:  2024-02-27 Added rewards reduced to the LeaderboardEntry response
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UnitOfMeasureReduced model module.
 * @module model/UnitOfMeasureReduced
 * @version 0.0.26
 */
class UnitOfMeasureReduced {
    /**
     * Constructs a new <code>UnitOfMeasureReduced</code>.
     * @alias module:model/UnitOfMeasureReduced
     * @param isoCode {String} An alphabetical or numerical code to identify a unit of measure
     * @param symbol {String} The symbol of a unit of measure
     * @param subUnit {String} The subunit of a unit of measure
     * @param subUnitSymbol {String} The sub unit symbol of a unit of measure
     */
    constructor(isoCode, symbol, subUnit, subUnitSymbol) { 
        
        UnitOfMeasureReduced.initialize(this, isoCode, symbol, subUnit, subUnitSymbol);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, isoCode, symbol, subUnit, subUnitSymbol) { 
        obj['isoCode'] = isoCode;
        obj['symbol'] = symbol;
        obj['subUnit'] = subUnit;
        obj['subUnitSymbol'] = subUnitSymbol;
    }

    /**
     * Constructs a <code>UnitOfMeasureReduced</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UnitOfMeasureReduced} obj Optional instance to populate.
     * @return {module:model/UnitOfMeasureReduced} The populated <code>UnitOfMeasureReduced</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UnitOfMeasureReduced();

            if (data.hasOwnProperty('isoCode')) {
                obj['isoCode'] = ApiClient.convertToType(data['isoCode'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('subUnit')) {
                obj['subUnit'] = ApiClient.convertToType(data['subUnit'], 'String');
            }
            if (data.hasOwnProperty('subUnitSymbol')) {
                obj['subUnitSymbol'] = ApiClient.convertToType(data['subUnitSymbol'], 'String');
            }
            if (data.hasOwnProperty('subUnitConversion')) {
                obj['subUnitConversion'] = ApiClient.convertToType(data['subUnitConversion'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * An alphabetical or numerical code to identify a unit of measure
 * @member {String} isoCode
 */
UnitOfMeasureReduced.prototype['isoCode'] = undefined;

/**
 * The symbol of a unit of measure
 * @member {String} symbol
 */
UnitOfMeasureReduced.prototype['symbol'] = undefined;

/**
 * The subunit of a unit of measure
 * @member {String} subUnit
 */
UnitOfMeasureReduced.prototype['subUnit'] = undefined;

/**
 * The sub unit symbol of a unit of measure
 * @member {String} subUnitSymbol
 */
UnitOfMeasureReduced.prototype['subUnitSymbol'] = undefined;

/**
 * The sub unit conversion
 * @member {Number} subUnitConversion
 */
UnitOfMeasureReduced.prototype['subUnitConversion'] = undefined;






export default UnitOfMeasureReduced;

