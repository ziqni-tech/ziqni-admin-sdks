/**
 * ZIQNI Admin API
 * Ziqni Application Services are used to manage and configure spaces.  Change log:  2024-02-27 Added rewards reduced to the LeaderboardEntry response
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WalletTransactionType from './WalletTransactionType';

/**
 * The WalletTransactionRequest model module.
 * @module model/WalletTransactionRequest
 * @version 0.0.26
 */
class WalletTransactionRequest {
    /**
     * Constructs a new <code>WalletTransactionRequest</code>.
     * 
     * @alias module:model/WalletTransactionRequest
     */
    constructor() { 
        
        WalletTransactionRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WalletTransactionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WalletTransactionRequest} obj Optional instance to populate.
     * @return {module:model/WalletTransactionRequest} The populated <code>WalletTransactionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WalletTransactionRequest();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('transactionType')) {
                obj['transactionType'] = WalletTransactionType.constructFromObject(data['transactionType']);
            }
            if (data.hasOwnProperty('sourceWalletId')) {
                obj['sourceWalletId'] = ApiClient.convertToType(data['sourceWalletId'], 'String');
            }
            if (data.hasOwnProperty('targetWalletId')) {
                obj['targetWalletId'] = ApiClient.convertToType(data['targetWalletId'], 'String');
            }
            if (data.hasOwnProperty('conversionRate')) {
                obj['conversionRate'] = ApiClient.convertToType(data['conversionRate'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * The amount to credit,debit or transfer
 * @member {Number} amount
 */
WalletTransactionRequest.prototype['amount'] = undefined;

/**
 * @member {module:model/WalletTransactionType} transactionType
 */
WalletTransactionRequest.prototype['transactionType'] = undefined;

/**
 * The unique source wallet identifier,required on credit,debit and transfer
 * @member {String} sourceWalletId
 */
WalletTransactionRequest.prototype['sourceWalletId'] = undefined;

/**
 * The unique target wallet identifier,not required on debit or credit but required on transfer
 * @member {String} targetWalletId
 */
WalletTransactionRequest.prototype['targetWalletId'] = undefined;

/**
 * The rate used to convert the transaction amount when transferring funds between wallets of different types.  For example, if 5 units are transferred from Wallet A to Wallet B with a rate of 1.3, then 6.5 units are credited to Wallet B.
 * @member {Number} conversionRate
 */
WalletTransactionRequest.prototype['conversionRate'] = undefined;






export default WalletTransactionRequest;

