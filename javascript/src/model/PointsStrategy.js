/**
 * ZIQNI Admin API
 * Ziqni Application Services are used to manage and configure spaces.  Change log:  2024-02-27 Added rewards reduced to the LeaderboardEntry response
 *
 * The version of the OpenAPI document: 3.0.18
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConditionalOperator from './ConditionalOperator';

/**
 * The PointsStrategy model module.
 * @module model/PointsStrategy
 * @version 0.0.26
 */
class PointsStrategy {
    /**
     * Constructs a new <code>PointsStrategy</code>.
     * The target points to achieve
     * @alias module:model/PointsStrategy
     * @param operator {module:model/ConditionalOperator} 
     * @param context {String} The context this strategy is bound to, like: achievement
     * @param action {String} The action this strategy is bound to, like: achievement.points
     */
    constructor(operator, context, action) { 
        
        PointsStrategy.initialize(this, operator, context, action);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, operator, context, action) { 
        obj['operator'] = operator;
        obj['context'] = context;
        obj['action'] = action;
    }

    /**
     * Constructs a <code>PointsStrategy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PointsStrategy} obj Optional instance to populate.
     * @return {module:model/PointsStrategy} The populated <code>PointsStrategy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PointsStrategy();

            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ConditionalOperator.constructFromObject(data['operator']);
            }
            if (data.hasOwnProperty('pointsValueUpper')) {
                obj['pointsValueUpper'] = ApiClient.convertToType(data['pointsValueUpper'], 'Number');
            }
            if (data.hasOwnProperty('pointsValue')) {
                obj['pointsValue'] = ApiClient.convertToType(data['pointsValue'], 'Number');
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], 'String');
            }
            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/ConditionalOperator} operator
 */
PointsStrategy.prototype['operator'] = undefined;

/**
 * The upper points to achieve. This is only used where secondary number are required like, between, or average between
 * @member {Number} pointsValueUpper
 */
PointsStrategy.prototype['pointsValueUpper'] = undefined;

/**
 * The points to achieve
 * @member {Number} pointsValue
 */
PointsStrategy.prototype['pointsValue'] = undefined;

/**
 * The context this strategy is bound to, like: achievement
 * @member {String} context
 */
PointsStrategy.prototype['context'] = undefined;

/**
 * The action this strategy is bound to, like: achievement.points
 * @member {String} action
 */
PointsStrategy.prototype['action'] = undefined;






export default PointsStrategy;

