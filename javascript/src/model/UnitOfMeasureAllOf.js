/**
 * Ziqni Admin Api
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UnitOfMeasureType from './UnitOfMeasureType';

/**
 * The UnitOfMeasureAllOf model module.
 * @module model/UnitOfMeasureAllOf
 * @version 0.0.26
 */
class UnitOfMeasureAllOf {
    /**
     * Constructs a new <code>UnitOfMeasureAllOf</code>.
     * @alias module:model/UnitOfMeasureAllOf
     * @param name {String} The name of a unit of measure
     * @param key {String} The reference to the unit of measure in your system
     * @param multiplier {Number} Is used to multiply the value from the standardised one that is being used
     * @param unitOfMeasureType {module:model/UnitOfMeasureType} 
     */
    constructor(name, key, multiplier, unitOfMeasureType) { 
        
        UnitOfMeasureAllOf.initialize(this, name, key, multiplier, unitOfMeasureType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, key, multiplier, unitOfMeasureType) { 
        obj['name'] = name;
        obj['key'] = key;
        obj['multiplier'] = multiplier;
        obj['unitOfMeasureType'] = unitOfMeasureType;
    }

    /**
     * Constructs a <code>UnitOfMeasureAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UnitOfMeasureAllOf} obj Optional instance to populate.
     * @return {module:model/UnitOfMeasureAllOf} The populated <code>UnitOfMeasureAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UnitOfMeasureAllOf();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('isoCode')) {
                obj['isoCode'] = ApiClient.convertToType(data['isoCode'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('multiplier')) {
                obj['multiplier'] = ApiClient.convertToType(data['multiplier'], 'Number');
            }
            if (data.hasOwnProperty('unitOfMeasureType')) {
                obj['unitOfMeasureType'] = UnitOfMeasureType.constructFromObject(data['unitOfMeasureType']);
            }
        }
        return obj;
    }


}

/**
 * The name of a unit of measure
 * @member {String} name
 */
UnitOfMeasureAllOf.prototype['name'] = undefined;

/**
 * The reference to the unit of measure in your system
 * @member {String} key
 */
UnitOfMeasureAllOf.prototype['key'] = undefined;

/**
 * The description of a unit of measure
 * @member {String} description
 */
UnitOfMeasureAllOf.prototype['description'] = undefined;

/**
 * An alphabetical or numerical code to identify a unit of measure
 * @member {String} isoCode
 */
UnitOfMeasureAllOf.prototype['isoCode'] = undefined;

/**
 * The symbol of a unit of measure
 * @member {String} symbol
 */
UnitOfMeasureAllOf.prototype['symbol'] = undefined;

/**
 * Is used to multiply the value from the standardised one that is being used
 * @member {Number} multiplier
 */
UnitOfMeasureAllOf.prototype['multiplier'] = undefined;

/**
 * @member {module:model/UnitOfMeasureType} unitOfMeasureType
 */
UnitOfMeasureAllOf.prototype['unitOfMeasureType'] = undefined;






export default UnitOfMeasureAllOf;

