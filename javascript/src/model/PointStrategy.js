/**
 * ZIQNI Admin API
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.2
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConditionalOperator from './ConditionalOperator';

/**
 * The PointStrategy model module.
 * @module model/PointStrategy
 * @version 0.0.26
 */
class PointStrategy {
    /**
     * Constructs a new <code>PointStrategy</code>.
     * The target points to achieve
     * @alias module:model/PointStrategy
     * @param operator {module:model/ConditionalOperator} 
     */
    constructor(operator) { 
        
        PointStrategy.initialize(this, operator);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, operator) { 
        obj['operator'] = operator;
    }

    /**
     * Constructs a <code>PointStrategy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PointStrategy} obj Optional instance to populate.
     * @return {module:model/PointStrategy} The populated <code>PointStrategy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PointStrategy();

            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ConditionalOperator.constructFromObject(data['operator']);
            }
            if (data.hasOwnProperty('pointsValueUpper')) {
                obj['pointsValueUpper'] = ApiClient.convertToType(data['pointsValueUpper'], 'Number');
            }
            if (data.hasOwnProperty('pointsValue')) {
                obj['pointsValue'] = ApiClient.convertToType(data['pointsValue'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/ConditionalOperator} operator
 */
PointStrategy.prototype['operator'] = undefined;

/**
 * The upper points to achieve. This is only used where secondary number are required like, between, or average between
 * @member {Number} pointsValueUpper
 */
PointStrategy.prototype['pointsValueUpper'] = undefined;

/**
 * The points to achieve
 * @member {Number} pointsValue
 */
PointStrategy.prototype['pointsValue'] = undefined;






export default PointStrategy;

