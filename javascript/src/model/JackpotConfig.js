/**
 * ZIQNI Admin API
 * Ziqni Application Services are used to manage and configure spaces.  Change log:  2024-02-27 Added rewards reduced to the LeaderboardEntry response
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DependantOn from './DependantOn';
import JackpotConfigStatus from './JackpotConfigStatus';
import JackpotConfigType from './JackpotConfigType';
import ModelDefault from './ModelDefault';
import OptParamModels from './OptParamModels';

/**
 * The JackpotConfig model module.
 * @module model/JackpotConfig
 * @version 0.0.26
 */
class JackpotConfig {
    /**
     * Constructs a new <code>JackpotConfig</code>.
     * Jackpot configuration that controls how contributions, pool amounts, and payouts work
     * @alias module:model/JackpotConfig
     * @implements module:model/ModelDefault
     * @implements module:model/OptParamModels
     * @param id {String} A unique system generated identifier
     * @param spaceName {String} This is the space name which is linked to the account
     * @param created {Date} ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
     */
    constructor(id, spaceName, created) { 
        ModelDefault.initialize(this, id, spaceName, created);OptParamModels.initialize(this);
        JackpotConfig.initialize(this, id, spaceName, created);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, spaceName, created) { 
    }

    /**
     * Constructs a <code>JackpotConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JackpotConfig} obj Optional instance to populate.
     * @return {module:model/JackpotConfig} The populated <code>JackpotConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JackpotConfig();
            ModelDefault.constructFromObject(data, obj);
            OptParamModels.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = JackpotConfigType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = JackpotConfigStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('contributionPercentage')) {
                obj['contributionPercentage'] = ApiClient.convertToType(data['contributionPercentage'], 'Number');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('operatorSplitPercentage')) {
                obj['operatorSplitPercentage'] = ApiClient.convertToType(data['operatorSplitPercentage'], 'Number');
            }
            if (data.hasOwnProperty('memberSplitPercentage')) {
                obj['memberSplitPercentage'] = ApiClient.convertToType(data['memberSplitPercentage'], 'Number');
            }
            if (data.hasOwnProperty('currentPoolAmount')) {
                obj['currentPoolAmount'] = ApiClient.convertToType(data['currentPoolAmount'], 'Number');
            }
            if (data.hasOwnProperty('mustDropAfterHours')) {
                obj['mustDropAfterHours'] = ApiClient.convertToType(data['mustDropAfterHours'], 'Number');
            }
            if (data.hasOwnProperty('jackpotThreshold')) {
                obj['jackpotThreshold'] = ApiClient.convertToType(data['jackpotThreshold'], 'Number');
            }
            if (data.hasOwnProperty('payouts')) {
                obj['payouts'] = ApiClient.convertToType(data['payouts'], 'Number');
            }
            if (data.hasOwnProperty('dropAmount')) {
                obj['dropAmount'] = ApiClient.convertToType(data['dropAmount'], 'Number');
            }
            if (data.hasOwnProperty('seedAmount')) {
                obj['seedAmount'] = ApiClient.convertToType(data['seedAmount'], 'Number');
            }
            if (data.hasOwnProperty('dropProbability')) {
                obj['dropProbability'] = ApiClient.convertToType(data['dropProbability'], 'Number');
            }
            if (data.hasOwnProperty('eventActions')) {
                obj['eventActions'] = DependantOn.constructFromObject(data['eventActions']);
            }
            if (data.hasOwnProperty('productTags')) {
                obj['productTags'] = DependantOn.constructFromObject(data['productTags']);
            }
            if (data.hasOwnProperty('productIds')) {
                obj['productIds'] = ApiClient.convertToType(data['productIds'], ['String']);
            }
            if (data.hasOwnProperty('logScalingFactor')) {
                obj['logScalingFactor'] = ApiClient.convertToType(data['logScalingFactor'], 'Number');
            }
            if (data.hasOwnProperty('spaceName')) {
                obj['spaceName'] = ApiClient.convertToType(data['spaceName'], 'String');
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('customFields')) {
                obj['customFields'] = ApiClient.convertToType(data['customFields'], {'String': Object});
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
        }
        return obj;
    }


}

/**
 * Unique ID of this jackpot config
 * @member {String} id
 */
JackpotConfig.prototype['id'] = undefined;

/**
 * Human-friendly jackpot name
 * @member {String} name
 */
JackpotConfig.prototype['name'] = undefined;

/**
 * Longer text description of the jackpot
 * @member {String} description
 */
JackpotConfig.prototype['description'] = undefined;

/**
 * @member {module:model/JackpotConfigType} type
 */
JackpotConfig.prototype['type'] = undefined;

/**
 * @member {module:model/JackpotConfigStatus} status
 */
JackpotConfig.prototype['status'] = undefined;

/**
 * Fraction (0â€“1) of each qualifying amount that is actually contributed to the pool *before* applying operator/member splits. For example, 0.10 means 10% of a qualifying amount goes into the pool. 
 * @member {Number} contributionPercentage
 */
JackpotConfig.prototype['contributionPercentage'] = undefined;

/**
 * The date and time when this jackpot starts running
 * @member {Date} startDate
 */
JackpotConfig.prototype['startDate'] = undefined;

/**
 * The date and time when this jackpot stops running (if any)
 * @member {Date} endDate
 */
JackpotConfig.prototype['endDate'] = undefined;

/**
 * When this config was created
 * @member {Date} created
 */
JackpotConfig.prototype['created'] = undefined;

/**
 * The percentage of each player's contribution that goes to the operator's share of the jackpot. For example, if this is 20, and a player contributes 100, then 20 goes to the operator pool. 
 * @member {Number} operatorSplitPercentage
 */
JackpotConfig.prototype['operatorSplitPercentage'] = undefined;

/**
 * The percentage of each player's contribution that goes to the player's share of the jackpot. For example, if this is 80, and a player contributes 100, then 80 goes to the player pool. 
 * @member {Number} memberSplitPercentage
 */
JackpotConfig.prototype['memberSplitPercentage'] = undefined;

/**
 * The total amount of money currently in the jackpot pool (both player and operator contributions). 
 * @member {Number} currentPoolAmount
 */
JackpotConfig.prototype['currentPoolAmount'] = undefined;

/**
 * If this number of hours passes without a winner, the jackpot is forced to drop to someone. 
 * @member {Number} mustDropAfterHours
 */
JackpotConfig.prototype['mustDropAfterHours'] = undefined;

/**
 * When the pool reaches this amount, the chance of dropping starts increasing faster. 
 * @member {Number} jackpotThreshold
 */
JackpotConfig.prototype['jackpotThreshold'] = undefined;

/**
 * How many times this jackpot can pay out before it ends. 
 * @member {Number} payouts
 */
JackpotConfig.prototype['payouts'] = undefined;

/**
 * The amount that will be paid out to a winner when the jackpot drops. 
 * @member {Number} dropAmount
 */
JackpotConfig.prototype['dropAmount'] = undefined;

/**
 * The starting amount of the jackpot when this config is created. 
 * @member {Number} seedAmount
 */
JackpotConfig.prototype['seedAmount'] = undefined;

/**
 * The base chance of the jackpot dropping with each contribution. For example, 0.002 means a 0.2% chance per entry. 
 * @member {Number} dropProbability
 */
JackpotConfig.prototype['dropProbability'] = undefined;

/**
 * @member {module:model/DependantOn} eventActions
 */
JackpotConfig.prototype['eventActions'] = undefined;

/**
 * @member {module:model/DependantOn} productTags
 */
JackpotConfig.prototype['productTags'] = undefined;

/**
 * Product IDs for the config
 * @member {Array.<String>} productIds
 */
JackpotConfig.prototype['productIds'] = undefined;

/**
 * A number that controls how fast the drop chance increases after reaching the threshold. A higher number means slower growth; lower means faster. 
 * @member {Number} logScalingFactor
 */
JackpotConfig.prototype['logScalingFactor'] = undefined;

/**
 * The name of the account this jackpot belongs to
 * @member {String} spaceName
 */
JackpotConfig.prototype['spaceName'] = undefined;

/**
 * The id of the account this jackpot belongs to
 * @member {String} accountId
 */
JackpotConfig.prototype['accountId'] = undefined;

/**
 * @member {Object.<String, Object>} customFields
 */
JackpotConfig.prototype['customFields'] = undefined;

/**
 * A list of id's used to tag models
 * @member {Array.<String>} tags
 */
JackpotConfig.prototype['tags'] = undefined;

/**
 * @member {Object.<String, String>} metadata
 */
JackpotConfig.prototype['metadata'] = undefined;


// Implement ModelDefault interface:
/**
 * A unique system generated identifier
 * @member {String} id
 */
ModelDefault.prototype['id'] = undefined;
/**
 * This is the space name which is linked to the account
 * @member {String} spaceName
 */
ModelDefault.prototype['spaceName'] = undefined;
/**
 * ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
 * @member {Date} created
 */
ModelDefault.prototype['created'] = undefined;
// Implement OptParamModels interface:
/**
 * @member {Object.<String, Object>} customFields
 */
OptParamModels.prototype['customFields'] = undefined;
/**
 * A list of id's used to tag models
 * @member {Array.<String>} tags
 */
OptParamModels.prototype['tags'] = undefined;
/**
 * @member {Object.<String, String>} metadata
 */
OptParamModels.prototype['metadata'] = undefined;




export default JackpotConfig;

