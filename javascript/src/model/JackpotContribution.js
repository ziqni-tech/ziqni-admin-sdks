/**
 * ZIQNI Admin API
 * Ziqni Application Services are used to manage and configure spaces.  Change log:  2024-02-27 Added rewards reduced to the LeaderboardEntry response
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JackpotContribution model module.
 * @module model/JackpotContribution
 * @version 0.0.26
 */
class JackpotContribution {
    /**
     * Constructs a new <code>JackpotContribution</code>.
     * A record of a contribution made to a jackpot pool. This can be from a player or a system recontribution (e.g. after a jackpot win). The contribution is split between the player’s share and the operator’s share based on the configured percentages in &#x60;jackpot_config&#x60;. 
     * @alias module:model/JackpotContribution
     */
    constructor() { 
        
        JackpotContribution.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JackpotContribution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JackpotContribution} obj Optional instance to populate.
     * @return {module:model/JackpotContribution} The populated <code>JackpotContribution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JackpotContribution();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('spaceName')) {
                obj['spaceName'] = ApiClient.convertToType(data['spaceName'], 'String');
            }
            if (data.hasOwnProperty('memberId')) {
                obj['memberId'] = ApiClient.convertToType(data['memberId'], 'String');
            }
            if (data.hasOwnProperty('contributionAmount')) {
                obj['contributionAmount'] = ApiClient.convertToType(data['contributionAmount'], 'Number');
            }
            if (data.hasOwnProperty('operatorAmount')) {
                obj['operatorAmount'] = ApiClient.convertToType(data['operatorAmount'], 'Number');
            }
            if (data.hasOwnProperty('playerAmount')) {
                obj['playerAmount'] = ApiClient.convertToType(data['playerAmount'], 'Number');
            }
            if (data.hasOwnProperty('contributionDate')) {
                obj['contributionDate'] = ApiClient.convertToType(data['contributionDate'], 'Date');
            }
        }
        return obj;
    }


}

/**
 * Unique ID of this jackpot contribution record
 * @member {String} id
 */
JackpotContribution.prototype['id'] = undefined;

/**
 * The account (or space) associated with the contribution. Used to group contributions under a specific  environment. 
 * @member {String} spaceName
 */
JackpotContribution.prototype['spaceName'] = undefined;

/**
 * The ID of the player who made the contribution or received the recontributed drop. If this was a system recontribution after a win, this is the winning player's ID. 
 * @member {String} memberId
 */
JackpotContribution.prototype['memberId'] = undefined;

/**
 * The full amount that was contributed to the jackpot pool. This amount will be split into `operatorAmount` and `playerAmount` based on configuration. 
 * @member {Number} contributionAmount
 */
JackpotContribution.prototype['contributionAmount'] = undefined;

/**
 * The portion of the contribution that goes to the operator’s share of the pool. Calculated as: contributionAmount * operatorSplitPercentage / 100 
 * @member {Number} operatorAmount
 */
JackpotContribution.prototype['operatorAmount'] = undefined;

/**
 * The portion of the contribution that goes to the player’s share of the pool. Calculated as: contributionAmount * playerSplitPercentage / 100 
 * @member {Number} playerAmount
 */
JackpotContribution.prototype['playerAmount'] = undefined;

/**
 * The date and time when the contribution was made. This also applies to recontributed jackpot drop amounts. 
 * @member {Date} contributionDate
 */
JackpotContribution.prototype['contributionDate'] = undefined;






export default JackpotContribution;

