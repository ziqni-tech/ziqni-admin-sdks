/**
 * ZIQNI Admin API
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponse from '../model/ApiResponse';
import ComputeEngineResponse from '../model/ComputeEngineResponse';
import CreateComputeEngineRequest from '../model/CreateComputeEngineRequest';
import QueryRequest from '../model/QueryRequest';
import UpdateComputeEngineRequest from '../model/UpdateComputeEngineRequest';

/**
* ComputeEngine service.
* @module api/ComputeEngineApi
* @version 0.0.26
*/
export default class ComputeEngineApi {

    /**
    * Constructs a new ComputeEngineApi. 
    * @alias module:api/ComputeEngineApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createComputeEngines operation.
     * @callback module:api/ComputeEngineApi~createComputeEnginesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Compute Engine in the Ziqni system
     * @param {module:model/CreateComputeEngineRequest} body Create a Compute Engine in the Ziqni system
     * @param {module:api/ComputeEngineApi~createComputeEnginesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    createComputeEngines(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createComputeEngines");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/compute-engines', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteComputeEnginesById operation.
     * @callback module:api/ComputeEngineApi~deleteComputeEnginesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the Compute Engine for a given identifier specified
     * @param {String} id Unique identifier of the resource
     * @param {module:api/ComputeEngineApi~deleteComputeEnginesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    deleteComputeEnginesById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteComputeEnginesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/compute-engines/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteComputeEnginesByQuery operation.
     * @callback module:api/ComputeEngineApi~deleteComputeEnginesByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * NOT AVAILABLE IN CURRENT RELEASE
     * Delete an Compute Engine or a list of Compute Engines from Ziqni by query
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Delete an  Compute Engine or a list of Compute Engines from Ziqni by unique Compute Engine ID's or any other POST body parameters using the POST method
     * @param {module:api/ComputeEngineApi~deleteComputeEnginesByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    deleteComputeEnginesByQuery(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/compute-engines/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComputeEngines operation.
     * @callback module:api/ComputeEngineApi~getComputeEnginesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComputeEngineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Compute Engines. This assumes that api keys have first been created via a POST request or web console
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/ComputeEngineApi~getComputeEnginesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComputeEngineResponse}
     */
    getComputeEngines(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ComputeEngineResponse;
      return this.apiClient.callApi(
        '/compute-engines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComputeEnginesById operation.
     * @callback module:api/ComputeEngineApi~getComputeEnginesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComputeEngineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an Compute Engine by identifier provided. This assumes that compute engines have first been created via a POST request or web console
     * @param {String} id Unique identifier of the resource
     * @param {module:api/ComputeEngineApi~getComputeEnginesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComputeEngineResponse}
     */
    getComputeEnginesById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getComputeEnginesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ComputeEngineResponse;
      return this.apiClient.callApi(
        '/compute-engines/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getComputeEnginesByQuery operation.
     * @callback module:api/ComputeEngineApi~getComputeEnginesByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComputeEngineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an Compute Engine or a list of Compute Engines by query
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Retrieve an  Compute Engine or a list of Compute Engines from Ziqni by unique Copute Engine ID's or any other POST body parameters using the POST method
     * @param {module:api/ComputeEngineApi~getComputeEnginesByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComputeEngineResponse}
     */
    getComputeEnginesByQuery(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ComputeEngineResponse;
      return this.apiClient.callApi(
        '/compute-engines/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateComputeEngines operation.
     * @callback module:api/ComputeEngineApi~updateComputeEnginesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing Compute Engine in the Ziqni system
     * @param {module:model/UpdateComputeEngineRequest} body Update an Compute Engine in the Ziqni system. * Any Put body Parameters that are excluded in the Request body field will be considered as empty and updated with an empty field
     * @param {module:api/ComputeEngineApi~updateComputeEnginesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    updateComputeEngines(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateComputeEngines");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/compute-engines', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
