/**
 * ZIQNI Admin API
 * Ziqni Application Services are used to manage and configure spaces.  Change log:  2024-02-27 Added rewards reduced to the LeaderboardEntry response
 *
 * The version of the OpenAPI document: 3.0.19
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponse from '../model/ApiResponse';
import CreateJackpotConfigRequest from '../model/CreateJackpotConfigRequest';
import JackpotConfigResponse from '../model/JackpotConfigResponse';
import QueryRequest from '../model/QueryRequest';
import UpdateJackpotConfigRequest from '../model/UpdateJackpotConfigRequest';

/**
* JackpotConfigs service.
* @module api/JackpotConfigsApi
* @version 0.0.26
*/
export default class JackpotConfigsApi {

    /**
    * Constructs a new JackpotConfigsApi. 
    * @alias module:api/JackpotConfigsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createJackpotConfigs operation.
     * @callback module:api/JackpotConfigsApi~createJackpotConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create jackpot configs
     * Create new Jackpot configs in the Ziqni database
     * @param {Array.<module:model/CreateJackpotConfigRequest>} body Create jackpot configs in the Ziqni database. An array can contain a maximum of 10,000 jackpot configs in one request
     * @param {module:api/JackpotConfigsApi~createJackpotConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    createJackpotConfigs(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createJackpotConfigs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json', 'file/csv'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/jackpot-configs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJackpotConfigs operation.
     * @callback module:api/JackpotConfigsApi~deleteJackpotConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete jackpot configs
     * Delete Jackpot configs for a given identifier specified
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {module:api/JackpotConfigsApi~deleteJackpotConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    deleteJackpotConfigs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/jackpot-configs', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJackpotConfigs operation.
     * @callback module:api/JackpotConfigsApi~getJackpotConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JackpotConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get jackpot configs
     * Returns a list of jackpot configs. This assumes that jackpot configs have first been uploaded via a POST request or web console
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/JackpotConfigsApi~getJackpotConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JackpotConfigResponse}
     */
    getJackpotConfigs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JackpotConfigResponse;
      return this.apiClient.callApi(
        '/jackpot-configs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJackpotConfigsByQuery operation.
     * @callback module:api/JackpotConfigsApi~getJackpotConfigsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JackpotConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get jackpot configs by query
     * Retrieve Jackpot Configsâ€¨ from Ziqni database by unique Jackpot Configs ID's or any other POST body parameters using the POST method
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Retrieve Products from Ziqni database by unique Product ID's or any other POST body parameters using the POST method
     * @param {module:api/JackpotConfigsApi~getJackpotConfigsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JackpotConfigResponse}
     */
    getJackpotConfigsByQuery(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JackpotConfigResponse;
      return this.apiClient.callApi(
        '/jackpot-configs/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateJackpotConfigs operation.
     * @callback module:api/JackpotConfigsApi~updateJackpotConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update jackpot configs
     * Update existing jackpot configs in the Ziqni database
     * @param {Array.<module:model/UpdateJackpotConfigRequest>} body Update a Jackpot configs or multiple jackpot configs in the Ziqni database. 
     * @param {module:api/JackpotConfigsApi~updateJackpotConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    updateJackpotConfigs(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateJackpotConfigs");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json', 'file/csv'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/jackpot-configs', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
