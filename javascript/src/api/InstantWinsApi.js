/**
 * ZIQNI Admin API
 * Ziqni Application Services are used to manage and configure spaces.  Change log:  2024-02-27 Added rewards reduced to the LeaderboardEntry response
 *
 * The version of the OpenAPI document: 3.0.17
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponse from '../model/ApiResponse';
import CreateInstantWinRequest from '../model/CreateInstantWinRequest';
import InstantWinResponse from '../model/InstantWinResponse';
import QueryRequest from '../model/QueryRequest';
import UpdateInstantWinRequest from '../model/UpdateInstantWinRequest';

/**
* InstantWins service.
* @module api/InstantWinsApi
* @version 0.0.26
*/
export default class InstantWinsApi {

    /**
    * Constructs a new InstantWinsApi. 
    * @alias module:api/InstantWinsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createInstantWins operation.
     * @callback module:api/InstantWinsApi~createInstantWinsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create instant wins
     * Create new Instant win in the Ziqni database
     * @param {Array.<module:model/CreateInstantWinRequest>} body Create Instant wins in the Ziqni database. An array can contain a maximum of 10,000 instant wins in one request
     * @param {module:api/InstantWinsApi~createInstantWinsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    createInstantWins(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createInstantWins");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json', 'file/csv'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/instant-wins', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInstantWins operation.
     * @callback module:api/InstantWinsApi~deleteInstantWinsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete instant wins
     * Delete Instant win for a given identifier specified
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {module:api/InstantWinsApi~deleteInstantWinsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    deleteInstantWins(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/instant-wins', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInstantWinsByQuery operation.
     * @callback module:api/InstantWinsApi~deleteInstantWinsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete instant-wins by query
     * Delete Instant wins from Ziqni database by unique Instant win ID's or any other POST body parameters using the POST method
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Delete Instant Wins from Ziqni database by unique Instant win ID's or any other POST body parameters using the POST method
     * @param {module:api/InstantWinsApi~deleteInstantWinsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    deleteInstantWinsByQuery(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/instant-wins/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstantWins operation.
     * @callback module:api/InstantWinsApi~getInstantWinsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstantWinResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get instant wins
     * Returns a list of Instant wins. This assumes that instant wins have first been uploaded via a POST request or web console
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.id The unique identifiers of the resources
     * @param {Number} opts.limit Limit the returned total records found
     * @param {Number} opts.skip Skip the returned records found and return the next batch of records
     * @param {module:api/InstantWinsApi~getInstantWinsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstantWinResponse}
     */
    getInstantWins(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        '_limit': opts['limit'],
        '_skip': opts['skip']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstantWinResponse;
      return this.apiClient.callApi(
        '/instant-wins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInstantWinsByQuery operation.
     * @callback module:api/InstantWinsApi~getInstantWinsByQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstantWinResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get instant wins by query
     * Retrieve Instant wins from Ziqni database by unique Instant win ID's or any other POST body parameters using the POST method
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRequest} opts.body Retrieve Instant wins from Ziqni database by unique Instant win ID's or any other POST body parameters using the POST method
     * @param {module:api/InstantWinsApi~getInstantWinsByQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstantWinResponse}
     */
    getInstantWinsByQuery(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InstantWinResponse;
      return this.apiClient.callApi(
        '/instant-wins/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstantWins operation.
     * @callback module:api/InstantWinsApi~updateInstantWinsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update instant wins
     * Update existing Instant wins in the Ziqni database
     * @param {Array.<module:model/UpdateInstantWinRequest>} body Update a Instant win or multiple Instant wins in the Ziqni database. 
     * @param {module:api/InstantWinsApi~updateInstantWinsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiResponse}
     */
    updateInstantWins(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateInstantWins");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json', 'file/csv'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/instant-wins', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
