/**
 * Ziqni Admin Api
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: support@ziqni.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.@ZiqniTechAdminApiClient);
  }
}(this, function(expect, @ZiqniTechAdminApiClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new @ZiqniTechAdminApiClient.ConsumersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ConsumersApi', function() {
    describe('createKafkaConnections', function() {
      it('should call createKafkaConnections successfully', function(done) {
        //uncomment below and update the code to test createKafkaConnections
        //instance.createKafkaConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRabbitMQConnections', function() {
      it('should call createRabbitMQConnections successfully', function(done) {
        //uncomment below and update the code to test createRabbitMQConnections
        //instance.createRabbitMQConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSqsConnections', function() {
      it('should call createSqsConnections successfully', function(done) {
        //uncomment below and update the code to test createSqsConnections
        //instance.createSqsConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteKafkaConnections', function() {
      it('should call deleteKafkaConnections successfully', function(done) {
        //uncomment below and update the code to test deleteKafkaConnections
        //instance.deleteKafkaConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteKafkaConnectionsByQuery', function() {
      it('should call deleteKafkaConnectionsByQuery successfully', function(done) {
        //uncomment below and update the code to test deleteKafkaConnectionsByQuery
        //instance.deleteKafkaConnectionsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRabbitMQConnections', function() {
      it('should call deleteRabbitMQConnections successfully', function(done) {
        //uncomment below and update the code to test deleteRabbitMQConnections
        //instance.deleteRabbitMQConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRabbitMQConnectionsByQuery', function() {
      it('should call deleteRabbitMQConnectionsByQuery successfully', function(done) {
        //uncomment below and update the code to test deleteRabbitMQConnectionsByQuery
        //instance.deleteRabbitMQConnectionsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSqsConnections', function() {
      it('should call deleteSqsConnections successfully', function(done) {
        //uncomment below and update the code to test deleteSqsConnections
        //instance.deleteSqsConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSqsConnectionsByQuery', function() {
      it('should call deleteSqsConnectionsByQuery successfully', function(done) {
        //uncomment below and update the code to test deleteSqsConnectionsByQuery
        //instance.deleteSqsConnectionsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKafkaConnections', function() {
      it('should call getKafkaConnections successfully', function(done) {
        //uncomment below and update the code to test getKafkaConnections
        //instance.getKafkaConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKafkaConnectionsByQuery', function() {
      it('should call getKafkaConnectionsByQuery successfully', function(done) {
        //uncomment below and update the code to test getKafkaConnectionsByQuery
        //instance.getKafkaConnectionsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRabbitMQConnections', function() {
      it('should call getRabbitMQConnections successfully', function(done) {
        //uncomment below and update the code to test getRabbitMQConnections
        //instance.getRabbitMQConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRabbitMQConnectionsByQuery', function() {
      it('should call getRabbitMQConnectionsByQuery successfully', function(done) {
        //uncomment below and update the code to test getRabbitMQConnectionsByQuery
        //instance.getRabbitMQConnectionsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSqsConnections', function() {
      it('should call getSqsConnections successfully', function(done) {
        //uncomment below and update the code to test getSqsConnections
        //instance.getSqsConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSqsConnectionsByQuery', function() {
      it('should call getSqsConnectionsByQuery successfully', function(done) {
        //uncomment below and update the code to test getSqsConnectionsByQuery
        //instance.getSqsConnectionsByQuery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateConnectionsState', function() {
      it('should call updateConnectionsState successfully', function(done) {
        //uncomment below and update the code to test updateConnectionsState
        //instance.updateConnectionsState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateKafkaConnections', function() {
      it('should call updateKafkaConnections successfully', function(done) {
        //uncomment below and update the code to test updateKafkaConnections
        //instance.updateKafkaConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateKafkaConnectionsState', function() {
      it('should call updateKafkaConnectionsState successfully', function(done) {
        //uncomment below and update the code to test updateKafkaConnectionsState
        //instance.updateKafkaConnectionsState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRabbitMQConnections', function() {
      it('should call updateRabbitMQConnections successfully', function(done) {
        //uncomment below and update the code to test updateRabbitMQConnections
        //instance.updateRabbitMQConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRabbitMQConnectionsState', function() {
      it('should call updateRabbitMQConnectionsState successfully', function(done) {
        //uncomment below and update the code to test updateRabbitMQConnectionsState
        //instance.updateRabbitMQConnectionsState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSqsConnections', function() {
      it('should call updateSqsConnections successfully', function(done) {
        //uncomment below and update the code to test updateSqsConnections
        //instance.updateSqsConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSqsConnectionsState', function() {
      it('should call updateSqsConnectionsState successfully', function(done) {
        //uncomment below and update the code to test updateSqsConnectionsState
        //instance.updateSqsConnectionsState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
